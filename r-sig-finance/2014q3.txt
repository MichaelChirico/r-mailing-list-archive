From nadeemivirani at gmail.com  Tue Jul  1 16:22:39 2014
From: nadeemivirani at gmail.com (nvirani)
Date: Tue, 1 Jul 2014 07:22:39 -0700 (PDT)
Subject: [R-SIG-Finance] Beginner in R,
	need help writing a script for "Average" metric.
Message-ID: <1404224559210-4693337.post@n4.nabble.com>

Hi,

I am doing a POC project for which I have to integrate R into Microstrategy
for which I have to create a simple metric "Average". I don't know where to
start or how to start with writing a script. Can someone please help?

Thanks,
Nadeem



--
View this message in context: http://r.789695.n4.nabble.com/Beginner-in-R-need-help-writing-a-script-for-Average-metric-tp4693337.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From pb at precisefactors.com  Wed Jul  2 01:32:33 2014
From: pb at precisefactors.com (Uday Maitra)
Date: Tue, 01 Jul 2014 19:32:33 -0400
Subject: [R-SIG-Finance] How to return milliseconds?
Message-ID: <53B34511.50804@precisefactors.com>

Hi

(a) I am trying to download millisecond data and suppose I use


conn<-blpConnect(blpapi.jar.file="C:/blp/API/APIv3/JavaAPI/v3.7.1.1/lib/blpapi3.jar",cache.responses=FALSE)
tick(conn, "ES1 Index", "TRADE", "2014-06-02 13:29:45.000","2014-06-02 
14:47:45.000")

I get

                      time type  value size
1 2014-06-02T13:29:46.000  ASK 1923.5  440
2 2014-06-02T13:29:46.000  ASK 1923.5  419
3 2014-06-02T13:29:48.000  ASK 1923.5  418
4 2014-06-02T13:29:48.000  ASK 1923.5  419
5 2014-06-02T13:29:48.000  ASK 1923.5  423

where the milliseconds are never returned. How can I get the millisecond 
data?

I tried

options(digits.secs=3)

and
options("digits.secs"=3)

but neither of them seemed to help


(b) also the tick function always returns data in UTC. I tried

tick(conn, "ES1 Index", "TRADE", "2014-06-02 13:29:45.000","2014-06-02 
14:47:45.000",option_names="useUTCTime",option_values=FALSE)

and also tick(...,option_names="useUTCTime",option_values="FALSE"), but 
both gives me an error: "NotFoundException"


From u0055 at wolke7.net  Thu Jul  3 16:23:55 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Thu, 03 Jul 2014 16:23:55 +0200
Subject: [R-SIG-Finance] fPortfolio - why getting a zero vector as weights
	for my portfolio
Message-ID: <53B5677B.6030608@wolke7.net>

Hello Rs,

I would like to optimize the weights of a portfolio.
I chose the fPortfolio package.
Sometimes it's working well,
sometimes I get a zero vector as weight vector for my portfolio.
Why is that ?

Here my R code and data of 5 assets:

require( timeSeries )
require( fPortfolio )
x = c(
0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999, 
-0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165, 
0.02762103313486072, -0.02059593202791299, 0.009890131347811582, 
0.008874502330834042, 0.03270962505025148, 0.0004709525370067878, 
-0.026172393520773156, -0.002070884888637307, -0.021394084189246338, 
0.014663881480845464, 0.000007589055248672503, 0.03357767208442292, 
0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695, 
-0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352, 
0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215, 
0.011722205826326859, 0.0284076103749228, 0.00020854896466472906, 
-0.027139287243448704, 0.0009288913408461102, -0.013985585851090089, 
0.008355345607646895, 0.005703625000569552, 0.031154509412550213, 
0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844, 
-0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537, 
0.015910756127921546, -0.01736078352542159, 0.008348345947451275, 
0.007744974101786212, 0.029968431702077265, 0.0016856756212381618, 
-0.0252969523459683, -0.0006213069455005302, -0.01923409835975207, 
0.012209755091657625, 0.0007510294849596395, 0.03210686006944077, 
0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344, 
-0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655, 
0.0008597209029989182, -0.007178209888799298, 0.00689554753496824, 
0.009766184066262252, 0.02818192946497762, -0.004207950567021389, 
-0.023491857691380978, 0.0005314474698686129, -0.015464139804048354, 
0.008342940298155603, 0.005682816731364199, 0.03209078200750012, 
0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223, 
-0.0005029457171303313, 0.012448156249627087, -0.002707609393671422, 
-0.001962824566880327, -0.012422925284776823, 0.005995094546901327, 
0.006020957331134253, 0.025784505012758727, 0.0035397266445386837, 
-0.023960752658108264, 0.0015912067571819243, -0.015937277883155545, 
0.008463983234476183, 0.001885754351360598, 0.029861936467625895, 
0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
m = matrix( x, ncol=5 ) # nrow=21
t = timeSeries( m )
spec = portfolioSpec()
setTargetReturn( spec ) = 0.005
efficientPortfolio( data = t, spec = spec )

Here is the vector of my 5 mean returns:
[ 0.005549026539862658, 0.00519471267813756, 0.005155380981994628, 
0.004816276542524382, 0.004554553551564478 ].
So you can see,
that my target return of 0.005 has a solution.

1) There is a solution.
How can I get it ?

2) Is there maybe an other package,
which gives an weight output for every input of returns ?

Thanks in advance,
Uwe


From u0055 at wolke7.net  Sat Jul  5 12:20:39 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Sat, 05 Jul 2014 12:20:39 +0200
Subject: [R-SIG-Finance] Is there a general solution (package) for a
 portfolio optimization ?
Message-ID: <53B7D177.10508@wolke7.net>

Dear R-SIGs,

I am wondering,
why it is that difficult for me,
to find a general solution for a portfolio optimization in R.

I would like to calculate the weights vector.
For some return matrices it's working well,
for other matrices I get error messages.
I had a closer look to this 3 packages / functions / errors:

1) tseries / portfolio.optim /
Fehler in solve.QP(Dmat, dvec, Amat, bvec = b0, meq = 2) :
   matrix D in quadratic function is not positive definite!

2) ghyp / portfolio.optimize /
Error in solve.default(sigma) :
   System ist f?r den Rechner singul?r: reziproke Konditionszahl = 
1.04036e-17
Warning: fitting procedure did not converge!

3) fPortfolio / efficientPortfolio /
The result for the weights is a zero vector.

Here my input matrix m of log. returns
for 5 assets (columns) and 21 return values (rows).
Please don't be confused by the strange initialization of m:

x = c(
0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999, 
-0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165, 
0.02762103313486072, -0.02059593202791299, 0.009890131347811582, 
0.008874502330834042, 0.03270962505025148, 0.0004709525370067878, 
-0.026172393520773156, -0.002070884888637307, -0.021394084189246338, 
0.014663881480845464, 0.000007589055248672503, 0.03357767208442292, 
0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695, 
-0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352, 
0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215, 
0.011722205826326859, 0.0284076103749228, 0.00020854896466472906, 
-0.027139287243448704, 0.0009288913408461102, -0.013985585851090089, 
0.008355345607646895, 0.005703625000569552, 0.031154509412550213, 
0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844, 
-0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537, 
0.015910756127921546, -0.01736078352542159, 0.008348345947451275, 
0.007744974101786212, 0.029968431702077265, 0.0016856756212381618, 
-0.0252969523459683, -0.0006213069455005302, -0.01923409835975207, 
0.012209755091657625, 0.0007510294849596395, 0.03210686006944077, 
0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344, 
-0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655, 
0.0008597209029989182, -0.007178209888799298, 0.00689554753496824, 
0.009766184066262252, 0.02818192946497762, -0.004207950567021389, 
-0.023491857691380978, 0.0005314474698686129, -0.015464139804048354, 
0.008342940298155603, 0.005682816731364199, 0.03209078200750012, 
0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223, 
-0.0005029457171303313, 0.012448156249627087, -0.002707609393671422, 
-0.001962824566880327, -0.012422925284776823, 0.005995094546901327, 
0.006020957331134253, 0.025784505012758727, 0.0035397266445386837, 
-0.023960752658108264, 0.0015912067571819243, -0.015937277883155545, 
0.008463983234476183, 0.001885754351360598, 0.029861936467625895, 
0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
m = matrix( x, ncol=5 ) # nrow=21

Here the corresponding mean return vector of my 5 assets:
[ 0.005549026539862658, 0.00519471267813756, 0.005155380981994628, 
0.004816276542524382, 0.004554553551564478 ].
In my tests I chose 0.005 as the target return value,
it should have a solution.

Is there a package available,
which would calculate solutions for the weights
for a general input return matrix ?

Do I have to do some pre-calculations
before calling the optimization function ?

Is there some mistake in my way of thinking about optimization ?
Do other people have the same problem ?
How do they calculate their weight vectors ?

Thanks in advance,
Uwe


From patrick at burns-stat.com  Sat Jul  5 12:45:28 2014
From: patrick at burns-stat.com (Patrick Burns)
Date: Sat, 05 Jul 2014 11:45:28 +0100
Subject: [R-SIG-Finance] Is there a general solution (package) for a
 portfolio optimization ?
In-Reply-To: <53B7D177.10508@wolke7.net>
References: <53B7D177.10508@wolke7.net>
Message-ID: <53B7D748.3010809@burns-stat.com>

I'd say those calls are doing the
right thing for (sort of) the wrong
reason.

If the variance matrix input into a
portfolio optimization is singular,
then the optimizer will think that an
eigenvector associated with a zero
eigenvalue gives you a riskless portfolio.

If you were to get an answer out of this
problem, it would almost certainly be a
poor answer.

Pat

On 05/07/2014 11:20, u0055 at wolke7.net wrote:
> Dear R-SIGs,
>
> I am wondering,
> why it is that difficult for me,
> to find a general solution for a portfolio optimization in R.
>
> I would like to calculate the weights vector.
> For some return matrices it's working well,
> for other matrices I get error messages.
> I had a closer look to this 3 packages / functions / errors:
>
> 1) tseries / portfolio.optim /
> Fehler in solve.QP(Dmat, dvec, Amat, bvec = b0, meq = 2) :
>    matrix D in quadratic function is not positive definite!
>
> 2) ghyp / portfolio.optimize /
> Error in solve.default(sigma) :
>    System ist f?r den Rechner singul?r: reziproke Konditionszahl =
> 1.04036e-17
> Warning: fitting procedure did not converge!
>
> 3) fPortfolio / efficientPortfolio /
> The result for the weights is a zero vector.
>
> Here my input matrix m of log. returns
> for 5 assets (columns) and 21 return values (rows).
> Please don't be confused by the strange initialization of m:
>
> x = c(
> 0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999,
> -0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165,
> 0.02762103313486072, -0.02059593202791299, 0.009890131347811582,
> 0.008874502330834042, 0.03270962505025148, 0.0004709525370067878,
> -0.026172393520773156, -0.002070884888637307, -0.021394084189246338,
> 0.014663881480845464, 0.000007589055248672503, 0.03357767208442292,
> 0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
> 0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695,
> -0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352,
> 0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215,
> 0.011722205826326859, 0.0284076103749228, 0.00020854896466472906,
> -0.027139287243448704, 0.0009288913408461102, -0.013985585851090089,
> 0.008355345607646895, 0.005703625000569552, 0.031154509412550213,
> 0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
> 0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844,
> -0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537,
> 0.015910756127921546, -0.01736078352542159, 0.008348345947451275,
> 0.007744974101786212, 0.029968431702077265, 0.0016856756212381618,
> -0.0252969523459683, -0.0006213069455005302, -0.01923409835975207,
> 0.012209755091657625, 0.0007510294849596395, 0.03210686006944077,
> 0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
> 0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344,
> -0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655,
> 0.0008597209029989182, -0.007178209888799298, 0.00689554753496824,
> 0.009766184066262252, 0.02818192946497762, -0.004207950567021389,
> -0.023491857691380978, 0.0005314474698686129, -0.015464139804048354,
> 0.008342940298155603, 0.005682816731364199, 0.03209078200750012,
> 0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
> 0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223,
> -0.0005029457171303313, 0.012448156249627087, -0.002707609393671422,
> -0.001962824566880327, -0.012422925284776823, 0.005995094546901327,
> 0.006020957331134253, 0.025784505012758727, 0.0035397266445386837,
> -0.023960752658108264, 0.0015912067571819243, -0.015937277883155545,
> 0.008463983234476183, 0.001885754351360598, 0.029861936467625895,
> 0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
> m = matrix( x, ncol=5 ) # nrow=21
>
> Here the corresponding mean return vector of my 5 assets:
> [ 0.005549026539862658, 0.00519471267813756, 0.005155380981994628,
> 0.004816276542524382, 0.004554553551564478 ].
> In my tests I chose 0.005 as the target return value,
> it should have a solution.
>
> Is there a package available,
> which would calculate solutions for the weights
> for a general input return matrix ?
>
> Do I have to do some pre-calculations
> before calling the optimization function ?
>
> Is there some mistake in my way of thinking about optimization ?
> Do other people have the same problem ?
> How do they calculate their weight vectors ?
>
> Thanks in advance,
> Uwe
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.

-- 
Patrick Burns
patrick at burns-stat.com
http://www.burns-stat.com
http://www.portfolioprobe.com/blog
twitter: @burnsstat @portfolioprobe


From u0055 at wolke7.net  Sat Jul  5 14:20:05 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Sat, 05 Jul 2014 14:20:05 +0200
Subject: [R-SIG-Finance] Is there a general solution (package) for a
 portfolio optimization ?
In-Reply-To: <53B7D748.3010809@burns-stat.com>
References: <53B7D177.10508@wolke7.net> <53B7D748.3010809@burns-stat.com>
Message-ID: <53B7ED75.6090002@wolke7.net>

Thanks Pat,

I agree,
there can be return matrices,
which have weight vectors,
which result in riskless portfolios.
If this is the reason,
why multiple optimization packages stop working
(giving errors),
it would be a good idea to have a distinction of 2 cases:
a) If there is no riskless portfolio,
then give out the optimal weight vector.
b) If there is one or more riskless portfolio(s),
then give out one of the weight vectors.

How can I calculate one of the weight vectors
of a riskless portfolio ?

There are programs out there,
which calculate a weight vector for every input return matrix.
How do they work ?

Thanks in advance,
Uwe

PS:
> m
                [,1]          [,2]          [,3] [,4]          [,5]
  [1,]  4.101996e-04  0.0006037637  0.0004329671  0.0005954296 4.677175e-04
  [2,] -1.858003e-04 -0.0001747374 -0.0001410838 -0.0001317596 -7.283224e-05
  [3,]  1.921212e-04  0.0002776561  0.0002487325  0.0002509094 3.351392e-04
  [4,] -9.374091e-04 -0.0010539757 -0.0007654340 -0.0009448108 -5.029457e-04
  [5,]  2.179036e-02  0.0072179073  0.0180924033  0.0075286741 1.244816e-02
  [6,] -8.010182e-04 -0.0009999340 -0.0015557105 -0.0014060183 -2.707609e-03
  [7,]  2.762103e-02  0.0018097094  0.0159107561  0.0008597209 -1.962825e-03
  [8,] -2.059593e-02 -0.0072761974 -0.0173607835 -0.0071782099 -1.242293e-02
  [9,]  9.890131e-03  0.0072741478  0.0083483459  0.0068955475 5.995095e-03
[10,]  8.874502e-03  0.0117222058  0.0077449741  0.0097661841 6.020957e-03
[11,]  3.270963e-02  0.0284076104  0.0299684317  0.0281819295 2.578451e-02
[12,]  4.709525e-04  0.0002085490  0.0016856756 -0.0042079506 3.539727e-03
[13,] -2.617239e-02 -0.0271392872 -0.0252969523 -0.0234918577 -2.396075e-02
[14,] -2.070885e-03  0.0009288913 -0.0006213069  0.0005314475 1.591207e-03
[15,] -2.139408e-02 -0.0139855859 -0.0192340984 -0.0154641398 -1.593728e-02
[16,]  1.466388e-02  0.0083553456  0.0122097551  0.0083429403 8.463983e-03
[17,]  7.589055e-06  0.0057036250  0.0007510295  0.0056828167 1.885754e-03
[18,]  3.357767e-02  0.0311545094  0.0321068601  0.0320907820 2.986194e-02
[19,]  7.489995e-03  0.0084094918  0.0066345336  0.0081568854 5.328830e-03
[20,]  3.547791e-02  0.0501165071  0.0416947596  0.0491264813 5.118364e-02
[21,] -4.488890e-03 -0.0024712359 -0.0025908542 -0.0040431943 3.061485e-04


Am 05.07.2014 12:45, schrieb Patrick Burns:
> I'd say those calls are doing the
> right thing for (sort of) the wrong
> reason.
>
> If the variance matrix input into a
> portfolio optimization is singular,
> then the optimizer will think that an
> eigenvector associated with a zero
> eigenvalue gives you a riskless portfolio.
>
> If you were to get an answer out of this
> problem, it would almost certainly be a
> poor answer.
>
> Pat
>
> On 05/07/2014 11:20, u0055 at wolke7.net wrote:
>> Dear R-SIGs,
>>
>> I am wondering,
>> why it is that difficult for me,
>> to find a general solution for a portfolio optimization in R.
>>
>> I would like to calculate the weights vector.
>> For some return matrices it's working well,
>> for other matrices I get error messages.
>> I had a closer look to this 3 packages / functions / errors:
>>
>> 1) tseries / portfolio.optim /
>> Fehler in solve.QP(Dmat, dvec, Amat, bvec = b0, meq = 2) :
>>    matrix D in quadratic function is not positive definite!
>>
>> 2) ghyp / portfolio.optimize /
>> Error in solve.default(sigma) :
>>    System ist f?r den Rechner singul?r: reziproke Konditionszahl =
>> 1.04036e-17
>> Warning: fitting procedure did not converge!
>>
>> 3) fPortfolio / efficientPortfolio /
>> The result for the weights is a zero vector.
>>
>> Here my input matrix m of log. returns
>> for 5 assets (columns) and 21 return values (rows).
>> Please don't be confused by the strange initialization of m:
>>
>> x = c(
>> 0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999,
>> -0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165,
>> 0.02762103313486072, -0.02059593202791299, 0.009890131347811582,
>> 0.008874502330834042, 0.03270962505025148, 0.0004709525370067878,
>> -0.026172393520773156, -0.002070884888637307, -0.021394084189246338,
>> 0.014663881480845464, 0.000007589055248672503, 0.03357767208442292,
>> 0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
>> 0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695,
>> -0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352,
>> 0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215,
>> 0.011722205826326859, 0.0284076103749228, 0.00020854896466472906,
>> -0.027139287243448704, 0.0009288913408461102, -0.013985585851090089,
>> 0.008355345607646895, 0.005703625000569552, 0.031154509412550213,
>> 0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
>> 0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844,
>> -0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537,
>> 0.015910756127921546, -0.01736078352542159, 0.008348345947451275,
>> 0.007744974101786212, 0.029968431702077265, 0.0016856756212381618,
>> -0.0252969523459683, -0.0006213069455005302, -0.01923409835975207,
>> 0.012209755091657625, 0.0007510294849596395, 0.03210686006944077,
>> 0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
>> 0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344,
>> -0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655,
>> 0.0008597209029989182, -0.007178209888799298, 0.00689554753496824,
>> 0.009766184066262252, 0.02818192946497762, -0.004207950567021389,
>> -0.023491857691380978, 0.0005314474698686129, -0.015464139804048354,
>> 0.008342940298155603, 0.005682816731364199, 0.03209078200750012,
>> 0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
>> 0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223,
>> -0.0005029457171303313, 0.012448156249627087, -0.002707609393671422,
>> -0.001962824566880327, -0.012422925284776823, 0.005995094546901327,
>> 0.006020957331134253, 0.025784505012758727, 0.0035397266445386837,
>> -0.023960752658108264, 0.0015912067571819243, -0.015937277883155545,
>> 0.008463983234476183, 0.001885754351360598, 0.029861936467625895,
>> 0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
>> m = matrix( x, ncol=5 ) # nrow=21
>>
>> Here the corresponding mean return vector of my 5 assets:
>> [ 0.005549026539862658, 0.00519471267813756, 0.005155380981994628,
>> 0.004816276542524382, 0.004554553551564478 ].
>> In my tests I chose 0.005 as the target return value,
>> it should have a solution.
>>
>> Is there a package available,
>> which would calculate solutions for the weights
>> for a general input return matrix ?
>>
>> Do I have to do some pre-calculations
>> before calling the optimization function ?
>>
>> Is there some mistake in my way of thinking about optimization ?
>> Do other people have the same problem ?
>> How do they calculate their weight vectors ?
>>
>> Thanks in advance,
>> Uwe
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.


From patrick at burns-stat.com  Sat Jul  5 17:15:10 2014
From: patrick at burns-stat.com (Patrick Burns)
Date: Sat, 05 Jul 2014 16:15:10 +0100
Subject: [R-SIG-Finance] Is there a general solution (package) for a
 portfolio optimization ?
In-Reply-To: <53B7ED75.6090002@wolke7.net>
References: <53B7D177.10508@wolke7.net> <53B7D748.3010809@burns-stat.com>
	<53B7ED75.6090002@wolke7.net>
Message-ID: <53B8167E.3030507@burns-stat.com>

Portfolio Probe would give you an answer,
but that is not necessarily a good thing.

You seem to be missing my point.  a riskless
portfolio is a financial impossibility
(unless one of the input assets is riskless).
Any answer you get (via 'eigen' perhaps)
is going to be driven by numerical whim
rather than financial value.

Pat


On 05/07/2014 13:20, u0055 at wolke7.net wrote:
> Thanks Pat,
>
> I agree,
> there can be return matrices,
> which have weight vectors,
> which result in riskless portfolios.
> If this is the reason,
> why multiple optimization packages stop working
> (giving errors),
> it would be a good idea to have a distinction of 2 cases:
> a) If there is no riskless portfolio,
> then give out the optimal weight vector.
> b) If there is one or more riskless portfolio(s),
> then give out one of the weight vectors.
>
> How can I calculate one of the weight vectors
> of a riskless portfolio ?
>
> There are programs out there,
> which calculate a weight vector for every input return matrix.
> How do they work ?
>
> Thanks in advance,
> Uwe
>
> PS:
>> m
>                 [,1]          [,2]          [,3] [,4]          [,5]
>   [1,]  4.101996e-04  0.0006037637  0.0004329671  0.0005954296 4.677175e-04
>   [2,] -1.858003e-04 -0.0001747374 -0.0001410838 -0.0001317596
> -7.283224e-05
>   [3,]  1.921212e-04  0.0002776561  0.0002487325  0.0002509094 3.351392e-04
>   [4,] -9.374091e-04 -0.0010539757 -0.0007654340 -0.0009448108
> -5.029457e-04
>   [5,]  2.179036e-02  0.0072179073  0.0180924033  0.0075286741 1.244816e-02
>   [6,] -8.010182e-04 -0.0009999340 -0.0015557105 -0.0014060183
> -2.707609e-03
>   [7,]  2.762103e-02  0.0018097094  0.0159107561  0.0008597209
> -1.962825e-03
>   [8,] -2.059593e-02 -0.0072761974 -0.0173607835 -0.0071782099
> -1.242293e-02
>   [9,]  9.890131e-03  0.0072741478  0.0083483459  0.0068955475 5.995095e-03
> [10,]  8.874502e-03  0.0117222058  0.0077449741  0.0097661841 6.020957e-03
> [11,]  3.270963e-02  0.0284076104  0.0299684317  0.0281819295 2.578451e-02
> [12,]  4.709525e-04  0.0002085490  0.0016856756 -0.0042079506 3.539727e-03
> [13,] -2.617239e-02 -0.0271392872 -0.0252969523 -0.0234918577 -2.396075e-02
> [14,] -2.070885e-03  0.0009288913 -0.0006213069  0.0005314475 1.591207e-03
> [15,] -2.139408e-02 -0.0139855859 -0.0192340984 -0.0154641398 -1.593728e-02
> [16,]  1.466388e-02  0.0083553456  0.0122097551  0.0083429403 8.463983e-03
> [17,]  7.589055e-06  0.0057036250  0.0007510295  0.0056828167 1.885754e-03
> [18,]  3.357767e-02  0.0311545094  0.0321068601  0.0320907820 2.986194e-02
> [19,]  7.489995e-03  0.0084094918  0.0066345336  0.0081568854 5.328830e-03
> [20,]  3.547791e-02  0.0501165071  0.0416947596  0.0491264813 5.118364e-02
> [21,] -4.488890e-03 -0.0024712359 -0.0025908542 -0.0040431943 3.061485e-04
>
>
> Am 05.07.2014 12:45, schrieb Patrick Burns:
>> I'd say those calls are doing the
>> right thing for (sort of) the wrong
>> reason.
>>
>> If the variance matrix input into a
>> portfolio optimization is singular,
>> then the optimizer will think that an
>> eigenvector associated with a zero
>> eigenvalue gives you a riskless portfolio.
>>
>> If you were to get an answer out of this
>> problem, it would almost certainly be a
>> poor answer.
>>
>> Pat
>>
>> On 05/07/2014 11:20, u0055 at wolke7.net wrote:
>>> Dear R-SIGs,
>>>
>>> I am wondering,
>>> why it is that difficult for me,
>>> to find a general solution for a portfolio optimization in R.
>>>
>>> I would like to calculate the weights vector.
>>> For some return matrices it's working well,
>>> for other matrices I get error messages.
>>> I had a closer look to this 3 packages / functions / errors:
>>>
>>> 1) tseries / portfolio.optim /
>>> Fehler in solve.QP(Dmat, dvec, Amat, bvec = b0, meq = 2) :
>>>    matrix D in quadratic function is not positive definite!
>>>
>>> 2) ghyp / portfolio.optimize /
>>> Error in solve.default(sigma) :
>>>    System ist f?r den Rechner singul?r: reziproke Konditionszahl =
>>> 1.04036e-17
>>> Warning: fitting procedure did not converge!
>>>
>>> 3) fPortfolio / efficientPortfolio /
>>> The result for the weights is a zero vector.
>>>
>>> Here my input matrix m of log. returns
>>> for 5 assets (columns) and 21 return values (rows).
>>> Please don't be confused by the strange initialization of m:
>>>
>>> x = c(
>>> 0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999,
>>> -0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165,
>>> 0.02762103313486072, -0.02059593202791299, 0.009890131347811582,
>>> 0.008874502330834042, 0.03270962505025148, 0.0004709525370067878,
>>> -0.026172393520773156, -0.002070884888637307, -0.021394084189246338,
>>> 0.014663881480845464, 0.000007589055248672503, 0.03357767208442292,
>>> 0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
>>> 0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695,
>>> -0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352,
>>> 0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215,
>>> 0.011722205826326859, 0.0284076103749228, 0.00020854896466472906,
>>> -0.027139287243448704, 0.0009288913408461102, -0.013985585851090089,
>>> 0.008355345607646895, 0.005703625000569552, 0.031154509412550213,
>>> 0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
>>> 0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844,
>>> -0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537,
>>> 0.015910756127921546, -0.01736078352542159, 0.008348345947451275,
>>> 0.007744974101786212, 0.029968431702077265, 0.0016856756212381618,
>>> -0.0252969523459683, -0.0006213069455005302, -0.01923409835975207,
>>> 0.012209755091657625, 0.0007510294849596395, 0.03210686006944077,
>>> 0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
>>> 0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344,
>>> -0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655,
>>> 0.0008597209029989182, -0.007178209888799298, 0.00689554753496824,
>>> 0.009766184066262252, 0.02818192946497762, -0.004207950567021389,
>>> -0.023491857691380978, 0.0005314474698686129, -0.015464139804048354,
>>> 0.008342940298155603, 0.005682816731364199, 0.03209078200750012,
>>> 0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
>>> 0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223,
>>> -0.0005029457171303313, 0.012448156249627087, -0.002707609393671422,
>>> -0.001962824566880327, -0.012422925284776823, 0.005995094546901327,
>>> 0.006020957331134253, 0.025784505012758727, 0.0035397266445386837,
>>> -0.023960752658108264, 0.0015912067571819243, -0.015937277883155545,
>>> 0.008463983234476183, 0.001885754351360598, 0.029861936467625895,
>>> 0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
>>> m = matrix( x, ncol=5 ) # nrow=21
>>>
>>> Here the corresponding mean return vector of my 5 assets:
>>> [ 0.005549026539862658, 0.00519471267813756, 0.005155380981994628,
>>> 0.004816276542524382, 0.004554553551564478 ].
>>> In my tests I chose 0.005 as the target return value,
>>> it should have a solution.
>>>
>>> Is there a package available,
>>> which would calculate solutions for the weights
>>> for a general input return matrix ?
>>>
>>> Do I have to do some pre-calculations
>>> before calling the optimization function ?
>>>
>>> Is there some mistake in my way of thinking about optimization ?
>>> Do other people have the same problem ?
>>> How do they calculate their weight vectors ?
>>>
>>> Thanks in advance,
>>> Uwe
>>>
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R questions
>>> should go.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.

-- 
Patrick Burns
patrick at burns-stat.com
http://www.burns-stat.com
http://www.portfolioprobe.com/blog
twitter: @burnsstat @portfolioprobe


From ryan.lanham at bluecrestcapital.com  Mon Jul  7 12:00:29 2014
From: ryan.lanham at bluecrestcapital.com (Ryan Lanham)
Date: Mon, 7 Jul 2014 10:00:29 +0000
Subject: [R-SIG-Finance] Quant Job
Message-ID: <89C0ED3F689318428038605A447F10293EFE0A61@G40WIEXMBP02.BlueCrest.local>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140707/db4625f4/attachment.pl>

From pierre at lequeux.org  Mon Jul  7 13:04:35 2014
From: pierre at lequeux.org (Pierre Org)
Date: Mon, 7 Jul 2014 12:04:35 +0100
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
Message-ID: <000401cf99d3$3d252f30$b76f8d90$@org>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140707/17994021/attachment.pl>

From alexios at 4dscape.com  Mon Jul  7 16:55:12 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Mon, 07 Jul 2014 15:55:12 +0100
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <000401cf99d3$3d252f30$b76f8d90$@org>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
Message-ID: <53BAB4D0.2040502@4dscape.com>

I'm not too familiar with how fPortfolio works, but since you asked for
"alternative code" here is how you can do this with parma:

###############
library(parma)
spec = parmaspec(S = cov(datamatrix), riskB=0.1,
risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
forecast=colMeans(datamatrix))
weights(parmasolve(spec, solver="SOCP"))
#############

Note the following:
1. The risk (riskB) is an upper bound since this is an inequality
constraint (less than or equal to), and is available to solve for
covariance inputs using an SOCP solver (you can also solve QCQP problems
as well).
2. The solution can be completely dominated by one asset (as in the
case above) unless you change risk bound or constraints (UB, LB or some
other linear combinations ... see documentation)
3. You MUST provide a forecast vector (which is not all zeros).

Regards,

Alexios

On 07/07/2014 12:04, Pierre Org wrote:
>  
> 
> I am working on a small allocation project and have tried to used the
> maxreturnPortfolio function in the fPortfolio package to find the portfolio
> that maximise return for a specified level of risk, However the function
> does not seem to work. It returns zero weights independently of the  level
> of risk provided as the target. Has anyone had experience of working with
> that function or could provide an alternative code ?
> 
>  
> 
>  
> 
> require(timeseries)
> 
> require(fPortfolio)
> 
> require(quantmod)
> 
>  
> 
> ETF <-  c('VGSIX','VUSTX','VGTSX','VFISX','VTSMX','VFITX','VEIEX','VIPSX')
> 
> getSymbols(ETF,source = 'yahoo')
> 
> datamat <-
> as.xts(cbind(get("VGTSX")[,4],get("VTSMX")[,4],get("VEIEX")[,4],get("VGSIX")
> [,4],get("VUSTX")[,4],get("VFITX")[,4],get("VFISX")[,4],get("VIPSX")[,4]))
> 
> datamatrix <-  as.xts(apply(datamat,2,function(x) diff(log(x))))
> 
> colnames(datamatrix) <-  c('Global Equities Ex US','US Equities','Emerging
> Markets Stocks',"REITs",'Treasuries 15 - 30Y','Treasuries 5-10Y','Treasuries
> 1-4Y','US Inflation Linked 7 - 20Y')
> 
>  
> 
> x <- timeSeries(datamatrix, charvec=as.Date(index(datamatrix)))
> 
> Constraints <-  "LongOnly"
> 
> Spec  <- portfolioSpec()
> 
> setTargetRisk(Spec) <- 0.1
> 
> getWeights(maxreturnPortfolio(x, Spec, Constraints)@portfolio)
> 
>  
> 
>  
> 
>  
> 
> VGTSX.Close VTSMX.Close VEIEX.Close VGSIX.Close VUSTX.Close VFITX.Close
> VFISX.Close VIPSX.Close 
> 
>           0           0           0           0           0           0
> 0           0 
> 
>  
> 
>  
> 
>  
> 
> Any help appreciated
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From pierre at lequeux.org  Mon Jul  7 17:48:13 2014
From: pierre at lequeux.org (Pierre Org)
Date: Mon, 7 Jul 2014 16:48:13 +0100
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <53BAB4D0.2040502@4dscape.com>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
	<53BAB4D0.2040502@4dscape.com>
Message-ID: <001201cf99fa$dce25d50$96a717f0$@org>


Hi Alexios

This is great stuff, exactly what I was after. Many thanks for this.

Kind regards

Pierre
-----Original Message-----
From: alexios ghalanos [mailto:alexios at 4dscape.com] 
Sent: 07 July 2014 15:55
To: Pierre Org; r-sig-finance at r-project.org
Subject: Re: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio

I'm not too familiar with how fPortfolio works, but since you asked for
"alternative code" here is how you can do this with parma:

###############
library(parma)
spec = parmaspec(S = cov(datamatrix), riskB=0.1,
risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
forecast=colMeans(datamatrix))
weights(parmasolve(spec, solver="SOCP")) #############

Note the following:
1. The risk (riskB) is an upper bound since this is an inequality constraint
(less than or equal to), and is available to solve for covariance inputs
using an SOCP solver (you can also solve QCQP problems as well).
2. The solution can be completely dominated by one asset (as in the case
above) unless you change risk bound or constraints (UB, LB or some other
linear combinations ... see documentation) 3. You MUST provide a forecast
vector (which is not all zeros).

Regards,

Alexios

On 07/07/2014 12:04, Pierre Org wrote:
>  
> 
> I am working on a small allocation project and have tried to used the 
> maxreturnPortfolio function in the fPortfolio package to find the 
> portfolio that maximise return for a specified level of risk, However 
> the function does not seem to work. It returns zero weights 
> independently of the  level of risk provided as the target. Has anyone 
> had experience of working with that function or could provide an
alternative code ?
> 
>  
> 
>  
> 
> require(timeseries)
> 
> require(fPortfolio)
> 
> require(quantmod)
> 
>  
> 
> ETF <-  
> c('VGSIX','VUSTX','VGTSX','VFISX','VTSMX','VFITX','VEIEX','VIPSX')
> 
> getSymbols(ETF,source = 'yahoo')
> 
> datamat <-
> as.xts(cbind(get("VGTSX")[,4],get("VTSMX")[,4],get("VEIEX")[,4],get("V
> GSIX")
> [,4],get("VUSTX")[,4],get("VFITX")[,4],get("VFISX")[,4],get("VIPSX")[,
> 4]))
> 
> datamatrix <-  as.xts(apply(datamat,2,function(x) diff(log(x))))
> 
> colnames(datamatrix) <-  c('Global Equities Ex US','US 
> Equities','Emerging Markets Stocks',"REITs",'Treasuries 15 - 
> 30Y','Treasuries 5-10Y','Treasuries 1-4Y','US Inflation Linked 7 - 
> 20Y')
> 
>  
> 
> x <- timeSeries(datamatrix, charvec=as.Date(index(datamatrix)))
> 
> Constraints <-  "LongOnly"
> 
> Spec  <- portfolioSpec()
> 
> setTargetRisk(Spec) <- 0.1
> 
> getWeights(maxreturnPortfolio(x, Spec, Constraints)@portfolio)
> 
>  
> 
>  
> 
>  
> 
> VGTSX.Close VTSMX.Close VEIEX.Close VGSIX.Close VUSTX.Close 
> VFITX.Close VFISX.Close VIPSX.Close
> 
>           0           0           0           0           0           0
> 0           0 
> 
>  
> 
>  
> 
>  
> 
> Any help appreciated
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list 
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
should go.
> 
>


From u0055 at wolke7.net  Tue Jul  8 10:02:53 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Tue, 08 Jul 2014 10:02:53 +0200
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <53BAB4D0.2040502@4dscape.com>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
	<53BAB4D0.2040502@4dscape.com>
Message-ID: <53BBA5AD.8050408@wolke7.net>

Hello Alexios,

I read the parma docu and the parma package seems to be great stuff.

"S" needs to be a
"m-by-m positive definite covariance matrix",
but in general a covariance matrix can also be not PD.

Do you know any R snippet or package,
which works for any covariance matrix
(including not PD ones, like the attached one) ?

Thanks in Advance
Uwe


> I'm not too familiar with how fPortfolio works, but since you asked for
> "alternative code" here is how you can do this with parma:
>
> ###############
> library(parma)
> spec = parmaspec(S = cov(datamatrix), riskB=0.1,
> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
> forecast=colMeans(datamatrix))
> weights(parmasolve(spec, solver="SOCP"))
> #############
>
> Note the following:
> 1. The risk (riskB) is an upper bound since this is an inequality
> constraint (less than or equal to), and is available to solve for
> covariance inputs using an SOCP solver (you can also solve QCQP problems
> as well).
> 2. The solution can be completely dominated by one asset (as in the
> case above) unless you change risk bound or constraints (UB, LB or some
> other linear combinations ... see documentation)
> 3. You MUST provide a forecast vector (which is not all zeros).
>
> Regards,
>
> Alexios


############
library(parma)
x = c(
0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999, 
-0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165, 
0.02762103313486072, -0.02059593202791299, 0.009890131347811582, 
0.008874502330834042, 0.03270962505025148, 0.0004709525370067878, 
-0.026172393520773156, -0.002070884888637307, -0.021394084189246338, 
0.014663881480845464, 0.000007589055248672503, 0.03357767208442292, 
0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695, 
-0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352, 
0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215, 
0.011722205826326859, 0.0284076103749228, 0.00020854896466472906, 
-0.027139287243448704, 0.0009288913408461102, -0.013985585851090089, 
0.008355345607646895, 0.005703625000569552, 0.031154509412550213, 
0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844, 
-0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537, 
0.015910756127921546, -0.01736078352542159, 0.008348345947451275, 
0.007744974101786212, 0.029968431702077265, 0.0016856756212381618, 
-0.0252969523459683, -0.0006213069455005302, -0.01923409835975207, 
0.012209755091657625, 0.0007510294849596395, 0.03210686006944077, 
0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344, 
-0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655, 
0.0008597209029989182, -0.007178209888799298, 0.00689554753496824, 
0.009766184066262252, 0.02818192946497762, -0.004207950567021389, 
-0.023491857691380978, 0.0005314474698686129, -0.015464139804048354, 
0.008342940298155603, 0.005682816731364199, 0.03209078200750012, 
0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223, 
-0.0005029457171303313, 0.012448156249627087, -0.002707609393671422, 
-0.001962824566880327, -0.012422925284776823, 0.005995094546901327, 
0.006020957331134253, 0.025784505012758727, 0.0035397266445386837, 
-0.023960752658108264, 0.0015912067571819243, -0.015937277883155545, 
0.008463983234476183, 0.001885754351360598, 0.029861936467625895, 
0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
m = matrix( x, ncol=5 ) # nrow=21
spec = parmaspec(S = cov(m), riskB=0.1,
risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
forecast=colMeans(m))
parmasolve(spec, solver="SOCP")
############


From alexios at 4dscape.com  Tue Jul  8 10:21:23 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Tue, 08 Jul 2014 09:21:23 +0100
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <53BBA5AD.8050408@wolke7.net>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
	<53BAB4D0.2040502@4dscape.com> <53BBA5AD.8050408@wolke7.net>
Message-ID: <53BBAA03.7080005@4dscape.com>

I believe Pat has already addressed this issue in his previous email to
you and the list.

If on the other hand you want to "jiggle" your matrix a little to make
it PD, then use the 'make.positive.definite' function from the corpcor
package.

Regards,

Alexios

On 08/07/2014 09:02, u0055 at wolke7.net wrote:
> Hello Alexios,
> 
> I read the parma docu and the parma package seems to be great stuff.
> 
> "S" needs to be a
> "m-by-m positive definite covariance matrix",
> but in general a covariance matrix can also be not PD.
> 
> Do you know any R snippet or package,
> which works for any covariance matrix
> (including not PD ones, like the attached one) ?
> 
> Thanks in Advance
> Uwe
> 
> 
>> I'm not too familiar with how fPortfolio works, but since you asked for
>> "alternative code" here is how you can do this with parma:
>>
>> ###############
>> library(parma)
>> spec = parmaspec(S = cov(datamatrix), riskB=0.1,
>> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
>> forecast=colMeans(datamatrix))
>> weights(parmasolve(spec, solver="SOCP"))
>> #############
>>
>> Note the following:
>> 1. The risk (riskB) is an upper bound since this is an inequality
>> constraint (less than or equal to), and is available to solve for
>> covariance inputs using an SOCP solver (you can also solve QCQP problems
>> as well).
>> 2. The solution can be completely dominated by one asset (as in the
>> case above) unless you change risk bound or constraints (UB, LB or some
>> other linear combinations ... see documentation)
>> 3. You MUST provide a forecast vector (which is not all zeros).
>>
>> Regards,
>>
>> Alexios
> 
> 
> ############
> library(parma)
> x = c(
> 0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999,
> -0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165,
> 0.02762103313486072, -0.02059593202791299, 0.009890131347811582,
> 0.008874502330834042, 0.03270962505025148, 0.0004709525370067878,
> -0.026172393520773156, -0.002070884888637307, -0.021394084189246338,
> 0.014663881480845464, 0.000007589055248672503, 0.03357767208442292,
> 0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
> 0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695,
> -0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352,
> 0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215,
> 0.011722205826326859, 0.0284076103749228, 0.00020854896466472906,
> -0.027139287243448704, 0.0009288913408461102, -0.013985585851090089,
> 0.008355345607646895, 0.005703625000569552, 0.031154509412550213,
> 0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
> 0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844,
> -0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537,
> 0.015910756127921546, -0.01736078352542159, 0.008348345947451275,
> 0.007744974101786212, 0.029968431702077265, 0.0016856756212381618,
> -0.0252969523459683, -0.0006213069455005302, -0.01923409835975207,
> 0.012209755091657625, 0.0007510294849596395, 0.03210686006944077,
> 0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
> 0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344,
> -0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655,
> 0.0008597209029989182, -0.007178209888799298, 0.00689554753496824,
> 0.009766184066262252, 0.02818192946497762, -0.004207950567021389,
> -0.023491857691380978, 0.0005314474698686129, -0.015464139804048354,
> 0.008342940298155603, 0.005682816731364199, 0.03209078200750012,
> 0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
> 0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223,
> -0.0005029457171303313, 0.012448156249627087, -0.002707609393671422,
> -0.001962824566880327, -0.012422925284776823, 0.005995094546901327,
> 0.006020957331134253, 0.025784505012758727, 0.0035397266445386837,
> -0.023960752658108264, 0.0015912067571819243, -0.015937277883155545,
> 0.008463983234476183, 0.001885754351360598, 0.029861936467625895,
> 0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
> m = matrix( x, ncol=5 ) # nrow=21
> spec = parmaspec(S = cov(m), riskB=0.1,
> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
> forecast=colMeans(m))
> parmasolve(spec, solver="SOCP")
> ############
> 
>


From optionsraghu at gmail.com  Tue Jul  8 15:29:21 2014
From: optionsraghu at gmail.com (Raghuraman Ramachandran)
Date: Tue, 8 Jul 2014 14:29:21 +0100
Subject: [R-SIG-Finance] Help With Principal Component Analysis
Message-ID: <CADgEnD=j563ABV+0Fj4s5DrdDy9GhQKpMxC=EkXjFDDoA9irdA@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140708/50574998/attachment.pl>

From u0055 at wolke7.net  Wed Jul  9 12:16:33 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Wed, 09 Jul 2014 12:16:33 +0200
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <53BBAA03.7080005@4dscape.com>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
	<53BAB4D0.2040502@4dscape.com> <53BBA5AD.8050408@wolke7.net>
	<53BBAA03.7080005@4dscape.com>
Message-ID: <53BD1681.3010208@wolke7.net>

Thanks Alexios,

parma is great and

#############
library(parma)
c = cov( datamatrix )
if( ! is.positive.definite( c )) c = make.positive.definite( c )
spec = parmaspec( S=c, risk="EV", riskType="minrisk", target=0.000057, 
forecast=colMeans( datamatrix ))
weights(parmasolve( spec, solver="SOCP" ))
#############

worked out for me.
The only issue with parma is,
that the target set in parmaspec()
is not always equal to the "Reward" in the resulting "PARMA Portfolio".
Please find my attached example,
where the target was set to 0.000057 and
parmareward is 0.0008336 .

Shouldn't the target return of the optimized portfolio
be equal to the parmareward (parmareward:
"Extracts the expected reward of the optimized portfolio"),
or did I get something wrong ?

Thanks in advance,
Uwe


#############
require( corpcor )
require( parma )
x = c(
0, 0, 0.002626900972751926, -0.004651670127579728, 0.002811887470333338, 
-0.008096147062518157, 0.005687190619310368, 0.005425791256111988, 
-0.01368150533402819, -0.003634388004548671, 0.0025648466285168323, 
-0.0006334949050101481, 0.0004735784414639808, -0.0018703955387240913, 
0.037384943082805426, -0.0012265590632451221, 0.03870767619245188, 
-0.026893230996311645, 0.012195443499031582, 0.010442198329463508, 
0.03703245081869636, 0.0005165302317106237, -0.027967056834254163, 
-0.002166502086674518, -0.02200604876582455, 0.014886204727195701, 
0.00000762952609082907, 0.033535917842535935, 0.007453936274707527, 
0.03528170093486842, -0.0044733578692161815, -0.0070889396437022615, 
0.005046331832589623,
0, 0, 0.0026735804398232655, -0.005450549385288055, 
0.005905095435528848, -0.005636808078392704, 0.003548761554728186, 
0.003639422387326808, -0.01143127698216372, -0.0033800680722703477, 
0.0016521334579031068, -0.0008102892682083494, -0.0023035419952529474, 
-0.0012498383490797311, 0.032035635560114115, -0.003090259161178727, 
0.01834605266070127, -0.02585586395070751, 0.011123773471797327, 
0.008631840278607165, 0.030760846293804246, 0.012938723579635629, 
-0.02266942964336796, -0.012598767801654186, -0.020401390528317652, 
0.028183182056325386, 0.0013368970239209228, 0.028771260172201513, 
0.006412473489823854, 0.018803309313281436, -0.0051934303303143425, 
-0.014700625477502637, 0.03113752390369849,
0, 0, 0.0022392375257311685, -0.004488149449633533, 
0.0025992065074906356, -0.0073523219193142334, 0.0049532099156933945, 
0.005122919641519685, -0.011247204548620658, -0.0024767692343022787, 
0.002707204525558023, -0.00048103183011147677, 0.0006131252694661922, 
-0.0015272567357329503, 0.03104049320762557, -0.002382181742317426, 
0.022297080386879678, -0.0226689212701502, 0.010294279998115444, 
0.009113137008980804, 0.03392898791764368, 0.0018488113998938879, 
-0.027031585912522034, -0.0006499940200819236, -0.019784277874540825, 
0.012394870635087547, 0.0007550345679040608, 0.032066934800107014, 
0.006602593626471261, 0.04146416947563461, -0.002581889263848951, 
-0.008094583656598608, -0.0017426153439798753,
0, 0, 0.0027504258465288933, -0.003874378115827679, 
0.004226496340492257, -0.007823516314137312, 0.004840696907796814, 
0.005419539153597611, -0.013468274420662655, -0.0031911974336257176, 
0.003208657493590492, -0.0006488071595788727, 0.00014307712429758478, 
-0.0020308868174715774, 0.03657058353869104, -0.0019950078992211568, 
0.034941262016579905, -0.02693558207101126, 0.013089627910204581, 
0.0056231613089763235, 0.03596968844767194, -0.00767739388810322, 
-0.02615767368446281, -0.003211770477689525, -0.023289630517109975, 
0.014907037827663425, -0.00009343147550549141, 0.03343466549037982, 
0.006829318461961503, 0.03140330913857898, -0.006098528232914019, 
-0.007222216079271492, 0.003963916533514356,
0, -0.004962608713128447, 0.00651501451569684, 0.0037736285598725843, 
-0.002103270938131628, -0.0022946946683208144, 0.011409645338876473, 
-0.009099465877408104, 0.0056262601568110825, 0.006593279784179638, 
4.8404187232792294e-17, -0.0006597463139954885, 0.01153025704199422, 
-0.00024041820310423905, 0.008505691012201961, -0.0038974624344401305, 
0.08083731344853264, 0.030189195107346117, -0.01261722579220082, 
0.03633766386795118, 0.0017962860418272329, 0.022779178187142854, 
-0.0018272512644430773, -0.006405978001578142, -0.034072103166739934, 
0.031778046606175135, -0.017223343266811585, 0.0471732062493369, 
-0.0069321188687848445, -0.12040697478444749, 0.008849761358635492, 
0.03776610172684411, -0.03401688527825439,
0, 0, 0.0023810160995254475, -0.0037880692307967197, 
0.0038198223884249117, -0.007253376810171589, 0.0042934989242776, 
0.005178111785009931, -0.011118377538462312, -0.0019752824176964287, 
0.003458150096355774, -0.0003251142181542887, 0.0002455407914759298, 
-0.0017176759921837858, 0.030591496613247185, -0.003027526359857558, 
0.0191776279232834, -0.02263281812840497, 0.011094654492357001, 
0.004832024724285659, 0.03321296872031677, -0.006035902511273208, 
-0.025315749676041534, -0.0014833253390330575, -0.02072096868909912, 
0.01240417481845325, 0.0007155401968537887, 0.03206967730910546, 
0.006367411772657192, 0.03860882577028918, -0.004220638484911972, 
-0.008116476951941242, -0.002418533574420359,
0, 0, 0.0010740365723649443, -0.0030249301790239527, 
0.0014494658061336998, -0.009442879271067406, 0.003912807537592503, 
0.005735381361174858, -0.009514188465677583, 0.0008361620547465522, 
0.0037751412004314888, -0.0005957756795493012, 0.0006844218678090265, 
-0.00210297882124566, 0.012383506934470063, -0.0015311488726225226, 
0.002536097953329469, -0.009500927467669467, 0.008969694673235773, 
0.013792953512672504, 0.03216189217913182, 0.0002287318499777624, 
-0.02900025128295019, 0.0009717802468302461, -0.014385634904270058, 
0.008482023360893653, 0.005734041238105664, 0.031115768402791958, 
0.008369006763839682, 0.049839341109902346, -0.0024626849384762318, 
0.0038636737026609617, -0.027211746954634353,
0, 0, 0.0023372932527562073, -0.005258416446074964, 
0.005481183136214499, -0.00512309911576579, 0.002979044435783182, 
0.0034250662377738016, -0.009335427866414085, -0.0023784344983329357, 
0.0017972396907285414, -0.0006347787644515546, -0.0021294358978136405, 
-0.001016849187692114, 0.026812869706426285, -0.003819272823728538, 
0.004784149905524516, -0.020711856922305344, 0.00931497175999165, 
0.007621110058377527, 0.028142841972826127, 0.013408369347340349, 
-0.021923287864364684, -0.011459557227990788, -0.018647361493872232, 
0.02300228657180063, 0.00216548683730409, 0.027923504491814605, 
0.00560894841661691, 0.021934067837820134, -0.0035835908908241204, 
-0.0146028583160898, 0.019673920629340327,
0, 0, 0.001573315150045051, -0.0031868592285909185, 
0.0016615110957920788, -0.011324627170940574, 0.004938023227565608, 
0.00625611114735139, -0.01328793599650315, -0.0007176741205027982, 
0.0036069075915353185, -0.0008436535566495516, 0.00042613280768177695, 
-0.0029753295794374295, 0.016513333427867528, 0.001050950676584112, 
0.02489491474993907, -0.013073207292070961, 0.011772904028704788, 
0.017844488345106324, 0.03698722375751522, -0.002456097501253425, 
-0.0317304659605383, -0.0027385780663545297, -0.017821425294712114, 
0.012684954809489321, 0.005318157332520829, 0.033835445131507574, 
0.00978042119717415, 0.012131036611807117, -0.005687276730748033, 
0.010799930962646111, -0.024292350318105213,
0, 0, 0.0011757989008024763, -0.0024357332210485005, 
0.002084728079010735, -0.009208499887641605, 0.003650334909458171, 
0.005802087007519423, -0.009514188465677583, 0.0009951307851831473, 
0.0037230303442594244, -0.0004492405895455943, 0.0006184914041200815, 
-0.0018851640473372111, 0.01291667859568179, -0.002152965492240513, 
0.0012047991893237434, -0.009372979888351746, 0.00850284565494668, 
0.011491397166873302, 0.031906385820210735, -0.004615186267441387, 
-0.025102714380157855, 0.0005559855396819668, -0.015906481980680877, 
0.00846942997100348, 0.005713122002758813, 0.0320508767314311, 
0.008117616509895129, 0.048854790537557286, -0.004029204027482041, 
0.003489165670688012, -0.0267552781811482,
0, 0, 0.0019004287009389146, -0.003292950674858931, 
0.001800437320051016, -0.012557496484650587, 0.005609716265823847, 
0.006597278938294634, -0.0157603912753199, -0.0017357047180799577, 
0.0034966855719136864, -0.001006056303715236, 0.0002569089407018556, 
-0.003546869731356178, 0.019219081820093457, 0.0027426710708919047, 
0.03954379472013158, -0.015413666487368494, 0.013609489468494823, 
0.02049894220083883, 0.04014864789507675, -0.004215123627922137, 
-0.03351922730102707, -0.005169502478441095, -0.020072460378105183, 
0.01543859955167268, 0.005045681670241104, 0.03561730229859711, 
0.010705140998324314, -0.01257440426625527, -0.007799940318788177, 
0.015344375374360526, -0.022379642176930933,
0, 0, 0.0016475406855415919, -0.0042385652569788155, 
0.0022745881957833528, -0.006217009858634568, 0.003832923578593805, 
0.0046606419139840595, -0.0075316928235249474, -0.0007098774270840972, 
0.002924487631568259, -0.0002483250315819229, 0.000826117796416936, 
-0.0010035185627464743, 0.021356859187614194, -0.004146026884059365, 
-0.002750671105835753, -0.016221290635482728, 0.007392504128296068, 
0.007084569730349301, 0.029192123489721146, 0.003882293182910453, 
-0.025603761874088794, 0.001664676186822569, -0.016393153882581446, 
0.00859230807344878, 0.001895810684355845, 0.02982480278797865, 
0.005303175900215923, 0.0509005688273304, 0.00030508913381681156, 
-0.009629513992071992, -0.01210469261348067,
0, 0, 0.0029983327869394683, -0.005757095271620889, 
0.008259609235448525, -0.005620592803263748, 0.003145928835778438, 
0.003728228170827728, -0.011260465102672397, -0.002877238505503342, 
0.0021824413880556386, -0.00003565038381008753, -0.002270835686244205, 
-0.0015257273763423084, 0.03120891972002798, -0.003151489437286643, 
0.012380849088919477, -0.025288628574023857, 0.012245416477637572, 
-0.0013740035970067365, 0.03021231182553681, -0.005243320510867623, 
-0.02414238886884155, -0.013384857791019245, -0.019726426528391336, 
0.028118742243602536, 0.0012286327187295712, 0.02660269558122618, 
0.006136488666732359, 0.01666324613463323, -0.006449919173472458, 
-0.014266675342364194, 0.029342825372708284,
0, 0, 0.0016497141811927696, -0.0025061511903902802, 
0.002492617176805438, -0.010715921122159215, 0.0044418154697143, 
0.006191089790517165, -0.013115684833936646, -0.0007489797925822873, 
0.003416893718752093, -0.0009183398079189262, 0.0004634375782052584, 
-0.0026705303683753835, 0.01681345141294844, 0.00023703766149890638, 
0.022818271573628958, -0.013129530425995833, 0.011324328503053475, 
0.014663792197450268, 0.03604277237128459, -0.007558787576715028, 
-0.02786025701119017, -0.0034611099896382593, -0.02012002900454508, 
0.012649651875919266, 0.005170662715894224, 0.03472797591893575, 
0.008781069690345374, 0.009502465110866635, -0.007116844378897773, 
0.009571174116911592, -0.02395957627837128,
0, 0, 0.0015651081439543712, -0.001465950607791438, 
0.0027091136312055964, -0.008084984711778848, 0.0033432249644846914, 
0.004477338578049312, -0.018259154880781517, 0.0009735825691574943, 
0.003100330517943717, -0.00043075621477225355, 0.00017746636599376368, 
-0.0015092112444491732, 0.013880640373033989, -0.002632152450743659, 
0.004742778861789411, -0.008030452832936802, 0.007390457391629667, 
0.009630978921657207, 0.030188237789555494, -0.009364737199211435, 
-0.018049180652342164, -0.001298445134716803, -0.01718055136574525, 
0.008401094921335842, 0.005678623850436861, 0.031637003578036185, 
0.007807537103275285, 0.04678624133952586, -0.008269370273253617, 
0.0014759358679188033, -0.023559589425191207,
0, 0, 0.0018171801698886074, -0.003656334616802099, 
0.0031991095142168565, -0.006383163883066014, 0.003458302002064065, 
0.004809617380323468, -0.0075316928235249474, -0.00011941213022540247, 
0.0038389545953133072, 0.00016894342928323438, 0.00040193270453761437, 
-0.0012396173641129459, 0.02146552183230657, -0.00460347558924996, 
-0.004882655692800729, -0.01606544158442694, 0.008049695065115955, 
0.0036245004634420136, 0.029005343873300973, -0.003530468304532667, 
-0.024030707768451166, 0.0011548277673373414, -0.01680037958318782, 
0.008584015488606149, 0.0019502864336126788, 0.02998627429558144, 
0.005662396299508508, 0.04960671957658368, -0.0013543857116456622, 
-0.009481401441805612, -0.012160167949689146,
0, 0, 0.0033246965545264467, -0.0024147717314886756, 
0.0055744142429533464, -0.008045367022919062, 0.003849632239587134, 
0.006117551228706688, -0.02203512444991986, -0.0034763000933806672, 
0.0032621233252168153, -0.000998524864244611, -0.0016863418412042595, 
-0.0017818985509956732, 0.03581656086828025, -0.0023571322784787657, 
0.038024895696301284, -0.02516372063362861, 0.012482128759746622, 
0.0018377675069138877, 0.03178466349310234, -0.015414423552878219, 
-0.017621284584039526, -0.0073426856445562875, -0.023608023991937892, 
0.014642251631214917, -0.0004720076859799823, 0.029741720122136082, 
0.0056703444402036425, 0.025580654476395855, -0.010887660507394, 
-0.01147017491451925, 0.0003642374673108739,
0, 0, 0.0019602103993795134, -0.0025522871013383425, 
0.002759854861567484, -0.0117035419309811, 0.004960371698847626, 
0.006445953682826033, -0.015475285902796034, -0.0018916729297389489, 
0.0032163214468679782, -0.00122568067512904, 0.0003618505888127891, 
-0.0031850807166417705, 0.019366509465640377, 0.001802901796707493, 
0.03697882244610479, -0.01559071870927989, 0.01317288623112344, 
0.016742257907138614, 0.03875281873233296, -0.009487353951756382, 
-0.029666922872900993, -0.006093000164020476, -0.022880628778800934, 
0.015388417951553747, 0.004815258355534668, 0.03648193745557673, 
0.00921574591201968, -0.016280092927310027, -0.0091397811608598, 
0.013555938271333954, -0.02212790951448293,
0, 0, 0.003001314953618509, -0.0023863344023501067, 
0.004972807200832523, -0.007467972856070279, 0.0035279979631178096, 
0.0058793490734322254, -0.019283042631066866, -0.002074680658508253, 
0.003536733738311503, -0.00047253516937147605, -0.0015525441943082582, 
-0.001522660944903657, 0.030009164479417535, -0.003411974807642765, 
0.022636470746408476, -0.02079740018784451, 0.010803051326655287, 
0.0015987094949107617, 0.029792668361274564, -0.013590388062910018, 
-0.0167963749586434, -0.004663859133633861, -0.020978750753957612, 
0.012290144840830975, 0.0005409108785577259, 0.028884406694033953, 
0.005728742476633499, 0.03418553080510448, -0.00937013079893645, 
-0.01215053464877582, -0.0047129218610194035,
0, 0, 0.002672927342724835, -0.0056224200171662445, 
0.007454828602277196, -0.005227812245754737, 0.0027215172727971266, 
0.0035442069675758674, -0.00923222902255474, -0.0018612241880502857, 
0.002421055424786525, 0.00025796905710791544, -0.0021191596238268762, 
-0.0013062676754853767, 0.026324266184152408, -0.0037734721914197506, 
-0.000556612579300684, -0.020127922689986227, 0.010380658353434982, 
-0.0014448322630305072, 0.02785734934088595, -0.0040409675361023105, 
-0.023653763149538536, -0.012130460799276347, -0.017763501203116126, 
0.02296141818214931, 0.0021252040253055948, 0.025843532710371212, 
0.005626636983983799, 0.020685550632856632, -0.00480107173199142, 
-0.01424424374768006, 0.01851508157568791,
0, 0, 0.001824012809338066, -0.004965160907276035, 0.004834159100418911, 
-0.004339017014914186, 0.0021094762016039626, 0.003097891062140264, 
-0.006136500268690957, -0.0008496253591653064, 0.0020187176250410464, 
-0.00036689431134907585, -0.001863695012248384, -0.0006612341518899625, 
0.018841279719218555, -0.00493197788762035, -0.015915596405008402, 
-0.012860477773691535, 0.006554169147235611, 0.006078416564342821, 
0.0241469406408069, 0.01412519709804754, -0.020784439885885995, 
-0.009720762141872966, -0.015970159283402903, 0.015094603990157577, 
0.003430176552467878, 0.026629561611224064, 0.004382515410143144, 
0.026712594006852882, -0.0011264675358127387, -0.014453634753933372, 
0.002176841947425248,
0, 0, 0.002507732510127447, -0.0023429300578754484, 
0.004054564873384953, -0.006586687022458981, 0.00303708248850674, 
0.0055157773627501575, -0.015082496697028085, 0.00006463321577070008, 
0.003955875947771817, 0.0003302912070138335, -0.0013483267332564663, 
-0.001126982493500058, 0.021145243675363915, -0.005021997615314132, 
-0.000851125229743673, -0.014133016349542489, 0.008240248928779047, 
0.001233831476590206, 0.026752254739011116, -0.010806333894011196, 
-0.015537302372512473, -0.0005751239327522621, -0.01696564949598771, 
0.00870008710813969, 0.002086944477062649, 0.027575875672193877, 
0.005817876321710672, 0.04731928941208083, -0.0070539012439222995, 
-0.013188978453693722, -0.012462270309523502,
0, 0, 0.0019442794960072968, -0.001476534808605923, 
0.0033331354831961676, -0.009409578129144908, 0.003854095916792674, 
0.004785923900753689, -0.022516698930245844, -0.0012235229750768473, 
0.002789917082440547, -0.0011208424344858858, 0.000006559730434971118, 
-0.002166948069157325, 0.01876507496080625, -0.00025977609503699886, 
0.02598048877957794, -0.012063163162484044, 0.00949258317282966, 
0.011639943542441399, 0.033119079705675465, -0.012397412837003942, 
-0.020735942055599945, -0.006405833628181736, -0.021678397432225327, 
0.01212499781456832, 0.004677472674067592, 0.03368852324160947, 
0.0076088774216753995, 0.004525725601295659, -0.010693039497456152, 
0.0057874435745926085, -0.022140029374458442,
0, 0, 0.003878239869857272, -0.004637911273805305, 0.009611715695950842, 
-0.00699010563926517, 0.002660326669926074, 0.005598099450597097, 
-0.017476324925484496, -0.002998434082157966, 0.0027408848715897672, 
-0.000324618237464186, -0.004593064799902035, -0.0016474325411779587, 
0.03021551835121268, -0.0033572759327906015, 0.008286361289651737, 
-0.021809412695829953, 0.012951912115330338, -0.005771330528494664, 
0.02864138814332697, -0.02261069821952223, -0.021035812684384425, 
-0.010477443577043506, -0.01857993485046607, 0.027823459674900717, 
0.0007433470183589192, 0.02094596962612688, 0.005363675924892543, 
0.01581544994867558, -0.006029773351345414, -0.015832309499222406, 
0.022943367477989425,
0, 0, 0.0021927021059730068, -0.00148346928500162, 
0.0037419773862244756, -0.01027741519569509, 0.004188804471753079, 
0.004988100491491041, -0.025306124341963856, -0.0026630059178510686, 
0.002586542762628121, -0.001572967888781024, -0.00010541358251734102, 
-0.002597879092241973, 0.02196522175969151, 0.0012945394483570198, 
0.039894850449853185, -0.0147052837232219, 0.010869837994995177, 
0.012956161742265524, 0.0350392864783058, -0.014384338254868002, 
-0.022496234009458483, -0.009752053675624279, -0.024625262096470892, 
0.01456479626185856, 0.0040215460412739296, 0.0350326223315368, 
0.0074787210785582335, -0.023162198503062052, -0.012280960713312979, 
0.008612224485861653, -0.02120997278949559,
0, 0, 0.0035733492759273187, -0.004577954699701702, 
0.008599119283710915, -0.0065366112410860655, 0.002416780299941397, 
0.005388392836671636, -0.015175532741244297, -0.0018688651358211483, 
0.003096051016769398, 0.0001337732803734455, -0.004437863812410551, 
-0.0014473143798770173, 0.02560948371072111, -0.0040232929773356164, 
-0.003765189491525712, -0.016681734743640132, 0.011306747611973783, 
-0.005309528754058492, 0.026900884957706393, -0.020792123714573254, 
-0.020856385450024474, -0.008244476322024562, -0.01661761887586736, 
0.022844172922902712, 0.0018879268881353578, 0.020689666122897105, 
0.0052807909692540395, 0.020866332156576538, -0.0046785163362643035, 
-0.015966095495487907, 0.013699686172011775,
0, 0, 0.0021762558752393426, -0.0054168630498407306, 
0.006226479214805164, -0.004628305079030459, 0.0020737312029835493, 
0.003263332499454605, -0.006136500268690957, -0.0003104654929903576, 
0.00278525579663893, 0.000706125045877499, -0.001887654054874107, 
-0.000971302868914273, 0.01886874236623705, -0.004722814289833442, 
-0.020303264599215658, -0.012251055814349848, 0.0075344485849152395, 
-0.0015529391743299469, 0.024262932916945163, -0.002205797206197364, 
-0.022907965999023398, -0.010215854864510869, -0.014767457285590813, 
0.015089713035720707, 0.0034936549669216336, 0.024684810433803113, 
0.004848442310314937, 0.026824857498566005, -0.002284409847625611, 
-0.014210006050530596, 0.001988525253919987,
0, 0, 0.0031079899483500203, -0.004486442033964626, 
0.007053577391344709, -0.005844435580707438, 0.0020450516299647865, 
0.0050683143206801465, -0.011663797302140835, -0.00014478621772811082, 
0.0036381467120435713, 0.0008334234918098296, -0.0042009780946603925, 
-0.0011418708705229492, 0.018579220312076056, -0.005039845308483261, 
-0.02215966173648072, -0.008855278921876725, 0.008795707054219044, 
-0.004604673414129599, 0.024244327463864464, -0.018016404733335344, 
-0.020582522829159292, -0.004836263143311435, -0.013622505019900907, 
0.015244208933011025, 0.003634917215688871, 0.020298466039020073, 
0.005154282352753169, 0.028575573421267455, -0.00261607141850892, 
-0.016170295173998418, -0.0004090905581646473 )
m = matrix( x, ncol=28 ) # nrow=33
c = cov( m )
if( ! is.positive.definite( c )) c = make.positive.definite( c )
spec = parmaspec( S=c, risk="EV", riskType="minrisk", target=0.000057, 
forecast=colMeans( m ) )
parmasolve( spec, solver="SOCP" )
#############


> I believe Pat has already addressed this issue in his previous email to
> you and the list.
>
> If on the other hand you want to "jiggle" your matrix a little to make
> it PD, then use the 'make.positive.definite' function from the corpcor
> package.
>
> Regards,
>
> Alexios
>
> On 08/07/2014 09:02, u0055 at wolke7.net wrote:
>> Hello Alexios,
>>
>> I read the parma docu and the parma package seems to be great stuff.
>>
>> "S" needs to be a
>> "m-by-m positive definite covariance matrix",
>> but in general a covariance matrix can also be not PD.
>>
>> Do you know any R snippet or package,
>> which works for any covariance matrix
>> (including not PD ones, like the attached one) ?
>>
>> Thanks in Advance
>> Uwe
>>
>>
>>> I'm not too familiar with how fPortfolio works, but since you asked for
>>> "alternative code" here is how you can do this with parma:
>>>
>>> ###############
>>> library(parma)
>>> spec = parmaspec(S = cov(datamatrix), riskB=0.1,
>>> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
>>> forecast=colMeans(datamatrix))
>>> weights(parmasolve(spec, solver="SOCP"))
>>> #############
>>>
>>> Note the following:
>>> 1. The risk (riskB) is an upper bound since this is an inequality
>>> constraint (less than or equal to), and is available to solve for
>>> covariance inputs using an SOCP solver (you can also solve QCQP problems
>>> as well).
>>> 2. The solution can be completely dominated by one asset (as in the
>>> case above) unless you change risk bound or constraints (UB, LB or some
>>> other linear combinations ... see documentation)
>>> 3. You MUST provide a forecast vector (which is not all zeros).
>>>
>>> Regards,
>>>
>>> Alexios
>>
>> ############
>> library(parma)
>> x = c(
>> 0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999,
>> -0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165,
>> 0.02762103313486072, -0.02059593202791299, 0.009890131347811582,
>> 0.008874502330834042, 0.03270962505025148, 0.0004709525370067878,
>> -0.026172393520773156, -0.002070884888637307, -0.021394084189246338,
>> 0.014663881480845464, 0.000007589055248672503, 0.03357767208442292,
>> 0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
>> 0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695,
>> -0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352,
>> 0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215,
>> 0.011722205826326859, 0.0284076103749228, 0.00020854896466472906,
>> -0.027139287243448704, 0.0009288913408461102, -0.013985585851090089,
>> 0.008355345607646895, 0.005703625000569552, 0.031154509412550213,
>> 0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
>> 0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844,
>> -0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537,
>> 0.015910756127921546, -0.01736078352542159, 0.008348345947451275,
>> 0.007744974101786212, 0.029968431702077265, 0.0016856756212381618,
>> -0.0252969523459683, -0.0006213069455005302, -0.01923409835975207,
>> 0.012209755091657625, 0.0007510294849596395, 0.03210686006944077,
>> 0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
>> 0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344,
>> -0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655,
>> 0.0008597209029989182, -0.007178209888799298, 0.00689554753496824,
>> 0.009766184066262252, 0.02818192946497762, -0.004207950567021389,
>> -0.023491857691380978, 0.0005314474698686129, -0.015464139804048354,
>> 0.008342940298155603, 0.005682816731364199, 0.03209078200750012,
>> 0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
>> 0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223,
>> -0.0005029457171303313, 0.012448156249627087, -0.002707609393671422,
>> -0.001962824566880327, -0.012422925284776823, 0.005995094546901327,
>> 0.006020957331134253, 0.025784505012758727, 0.0035397266445386837,
>> -0.023960752658108264, 0.0015912067571819243, -0.015937277883155545,
>> 0.008463983234476183, 0.001885754351360598, 0.029861936467625895,
>> 0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
>> m = matrix( x, ncol=5 ) # nrow=21
>> spec = parmaspec(S = cov(m), riskB=0.1,
>> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
>> forecast=colMeans(m))
>> parmasolve(spec, solver="SOCP")
>> ############
>>
>>
>


From alexios at 4dscape.com  Wed Jul  9 13:05:20 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Wed, 09 Jul 2014 12:05:20 +0100
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <53BD1681.3010208@wolke7.net>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
	<53BAB4D0.2040502@4dscape.com> <53BBA5AD.8050408@wolke7.net>
	<53BBAA03.7080005@4dscape.com> <53BD1681.3010208@wolke7.net>
Message-ID: <53BD21F0.5020608@4dscape.com>

ok, thats a bug which defaults to targetType='inequality' irrespective
of value passed.

1. Download latest (fixed) version from either r-forge (you'll have to
wait until it rebuilds) or immediately from bitbucket (assuming you can
build from source):
library(devtools)
install_bitbucket("parma","alexiosg")

2. Make sure to set targetType='equality'.

Regards,

Alexios

PS Try to create a minimally reproducible example next time which does
not need so much data to be included in the email.

On 09/07/2014 11:16, u0055 at wolke7.net wrote:
> Thanks Alexios,
> 
> parma is great and
> 
> #############
> library(parma)
> c = cov( datamatrix )
> if( ! is.positive.definite( c )) c = make.positive.definite( c )
> spec = parmaspec( S=c, risk="EV", riskType="minrisk", target=0.000057,
> forecast=colMeans( datamatrix ))
> weights(parmasolve( spec, solver="SOCP" ))
> #############
> 
> worked out for me.
> The only issue with parma is,
> that the target set in parmaspec()
> is not always equal to the "Reward" in the resulting "PARMA Portfolio".
> Please find my attached example,
> where the target was set to 0.000057 and
> parmareward is 0.0008336 .
> 
> Shouldn't the target return of the optimized portfolio
> be equal to the parmareward (parmareward:
> "Extracts the expected reward of the optimized portfolio"),
> or did I get something wrong ?
> 
> Thanks in advance,
> Uwe
> 
> 
> #############
> require( corpcor )
> require( parma )
> x = c(
> 0, 0, 0.002626900972751926, -0.004651670127579728, 0.002811887470333338,
> -0.008096147062518157, 0.005687190619310368, 0.005425791256111988,
> -0.01368150533402819, -0.003634388004548671, 0.0025648466285168323,
> -0.0006334949050101481, 0.0004735784414639808, -0.0018703955387240913,
> 0.037384943082805426, -0.0012265590632451221, 0.03870767619245188,
> -0.026893230996311645, 0.012195443499031582, 0.010442198329463508,
> 0.03703245081869636, 0.0005165302317106237, -0.027967056834254163,
> -0.002166502086674518, -0.02200604876582455, 0.014886204727195701,
> 0.00000762952609082907, 0.033535917842535935, 0.007453936274707527,
> 0.03528170093486842, -0.0044733578692161815, -0.0070889396437022615,
> 0.005046331832589623,
> 0, 0, 0.0026735804398232655, -0.005450549385288055,
> 0.005905095435528848, -0.005636808078392704, 0.003548761554728186,
> 0.003639422387326808, -0.01143127698216372, -0.0033800680722703477,
> 0.0016521334579031068, -0.0008102892682083494, -0.0023035419952529474,
> -0.0012498383490797311, 0.032035635560114115, -0.003090259161178727,
> 0.01834605266070127, -0.02585586395070751, 0.011123773471797327,
> 0.008631840278607165, 0.030760846293804246, 0.012938723579635629,
> -0.02266942964336796, -0.012598767801654186, -0.020401390528317652,
> 0.028183182056325386, 0.0013368970239209228, 0.028771260172201513,
> 0.006412473489823854, 0.018803309313281436, -0.0051934303303143425,
> -0.014700625477502637, 0.03113752390369849,
> 0, 0, 0.0022392375257311685, -0.004488149449633533,
> 0.0025992065074906356, -0.0073523219193142334, 0.0049532099156933945,
> 0.005122919641519685, -0.011247204548620658, -0.0024767692343022787,
> 0.002707204525558023, -0.00048103183011147677, 0.0006131252694661922,
> -0.0015272567357329503, 0.03104049320762557, -0.002382181742317426,
> 0.022297080386879678, -0.0226689212701502, 0.010294279998115444,
> 0.009113137008980804, 0.03392898791764368, 0.0018488113998938879,
> -0.027031585912522034, -0.0006499940200819236, -0.019784277874540825,
> 0.012394870635087547, 0.0007550345679040608, 0.032066934800107014,
> 0.006602593626471261, 0.04146416947563461, -0.002581889263848951,
> -0.008094583656598608, -0.0017426153439798753,
> 0, 0, 0.0027504258465288933, -0.003874378115827679,
> 0.004226496340492257, -0.007823516314137312, 0.004840696907796814,
> 0.005419539153597611, -0.013468274420662655, -0.0031911974336257176,
> 0.003208657493590492, -0.0006488071595788727, 0.00014307712429758478,
> -0.0020308868174715774, 0.03657058353869104, -0.0019950078992211568,
> 0.034941262016579905, -0.02693558207101126, 0.013089627910204581,
> 0.0056231613089763235, 0.03596968844767194, -0.00767739388810322,
> -0.02615767368446281, -0.003211770477689525, -0.023289630517109975,
> 0.014907037827663425, -0.00009343147550549141, 0.03343466549037982,
> 0.006829318461961503, 0.03140330913857898, -0.006098528232914019,
> -0.007222216079271492, 0.003963916533514356,
> 0, -0.004962608713128447, 0.00651501451569684, 0.0037736285598725843,
> -0.002103270938131628, -0.0022946946683208144, 0.011409645338876473,
> -0.009099465877408104, 0.0056262601568110825, 0.006593279784179638,
> 4.8404187232792294e-17, -0.0006597463139954885, 0.01153025704199422,
> -0.00024041820310423905, 0.008505691012201961, -0.0038974624344401305,
> 0.08083731344853264, 0.030189195107346117, -0.01261722579220082,
> 0.03633766386795118, 0.0017962860418272329, 0.022779178187142854,
> -0.0018272512644430773, -0.006405978001578142, -0.034072103166739934,
> 0.031778046606175135, -0.017223343266811585, 0.0471732062493369,
> -0.0069321188687848445, -0.12040697478444749, 0.008849761358635492,
> 0.03776610172684411, -0.03401688527825439,
> 0, 0, 0.0023810160995254475, -0.0037880692307967197,
> 0.0038198223884249117, -0.007253376810171589, 0.0042934989242776,
> 0.005178111785009931, -0.011118377538462312, -0.0019752824176964287,
> 0.003458150096355774, -0.0003251142181542887, 0.0002455407914759298,
> -0.0017176759921837858, 0.030591496613247185, -0.003027526359857558,
> 0.0191776279232834, -0.02263281812840497, 0.011094654492357001,
> 0.004832024724285659, 0.03321296872031677, -0.006035902511273208,
> -0.025315749676041534, -0.0014833253390330575, -0.02072096868909912,
> 0.01240417481845325, 0.0007155401968537887, 0.03206967730910546,
> 0.006367411772657192, 0.03860882577028918, -0.004220638484911972,
> -0.008116476951941242, -0.002418533574420359,
> 0, 0, 0.0010740365723649443, -0.0030249301790239527,
> 0.0014494658061336998, -0.009442879271067406, 0.003912807537592503,
> 0.005735381361174858, -0.009514188465677583, 0.0008361620547465522,
> 0.0037751412004314888, -0.0005957756795493012, 0.0006844218678090265,
> -0.00210297882124566, 0.012383506934470063, -0.0015311488726225226,
> 0.002536097953329469, -0.009500927467669467, 0.008969694673235773,
> 0.013792953512672504, 0.03216189217913182, 0.0002287318499777624,
> -0.02900025128295019, 0.0009717802468302461, -0.014385634904270058,
> 0.008482023360893653, 0.005734041238105664, 0.031115768402791958,
> 0.008369006763839682, 0.049839341109902346, -0.0024626849384762318,
> 0.0038636737026609617, -0.027211746954634353,
> 0, 0, 0.0023372932527562073, -0.005258416446074964,
> 0.005481183136214499, -0.00512309911576579, 0.002979044435783182,
> 0.0034250662377738016, -0.009335427866414085, -0.0023784344983329357,
> 0.0017972396907285414, -0.0006347787644515546, -0.0021294358978136405,
> -0.001016849187692114, 0.026812869706426285, -0.003819272823728538,
> 0.004784149905524516, -0.020711856922305344, 0.00931497175999165,
> 0.007621110058377527, 0.028142841972826127, 0.013408369347340349,
> -0.021923287864364684, -0.011459557227990788, -0.018647361493872232,
> 0.02300228657180063, 0.00216548683730409, 0.027923504491814605,
> 0.00560894841661691, 0.021934067837820134, -0.0035835908908241204,
> -0.0146028583160898, 0.019673920629340327,
> 0, 0, 0.001573315150045051, -0.0031868592285909185,
> 0.0016615110957920788, -0.011324627170940574, 0.004938023227565608,
> 0.00625611114735139, -0.01328793599650315, -0.0007176741205027982,
> 0.0036069075915353185, -0.0008436535566495516, 0.00042613280768177695,
> -0.0029753295794374295, 0.016513333427867528, 0.001050950676584112,
> 0.02489491474993907, -0.013073207292070961, 0.011772904028704788,
> 0.017844488345106324, 0.03698722375751522, -0.002456097501253425,
> -0.0317304659605383, -0.0027385780663545297, -0.017821425294712114,
> 0.012684954809489321, 0.005318157332520829, 0.033835445131507574,
> 0.00978042119717415, 0.012131036611807117, -0.005687276730748033,
> 0.010799930962646111, -0.024292350318105213,
> 0, 0, 0.0011757989008024763, -0.0024357332210485005,
> 0.002084728079010735, -0.009208499887641605, 0.003650334909458171,
> 0.005802087007519423, -0.009514188465677583, 0.0009951307851831473,
> 0.0037230303442594244, -0.0004492405895455943, 0.0006184914041200815,
> -0.0018851640473372111, 0.01291667859568179, -0.002152965492240513,
> 0.0012047991893237434, -0.009372979888351746, 0.00850284565494668,
> 0.011491397166873302, 0.031906385820210735, -0.004615186267441387,
> -0.025102714380157855, 0.0005559855396819668, -0.015906481980680877,
> 0.00846942997100348, 0.005713122002758813, 0.0320508767314311,
> 0.008117616509895129, 0.048854790537557286, -0.004029204027482041,
> 0.003489165670688012, -0.0267552781811482,
> 0, 0, 0.0019004287009389146, -0.003292950674858931,
> 0.001800437320051016, -0.012557496484650587, 0.005609716265823847,
> 0.006597278938294634, -0.0157603912753199, -0.0017357047180799577,
> 0.0034966855719136864, -0.001006056303715236, 0.0002569089407018556,
> -0.003546869731356178, 0.019219081820093457, 0.0027426710708919047,
> 0.03954379472013158, -0.015413666487368494, 0.013609489468494823,
> 0.02049894220083883, 0.04014864789507675, -0.004215123627922137,
> -0.03351922730102707, -0.005169502478441095, -0.020072460378105183,
> 0.01543859955167268, 0.005045681670241104, 0.03561730229859711,
> 0.010705140998324314, -0.01257440426625527, -0.007799940318788177,
> 0.015344375374360526, -0.022379642176930933,
> 0, 0, 0.0016475406855415919, -0.0042385652569788155,
> 0.0022745881957833528, -0.006217009858634568, 0.003832923578593805,
> 0.0046606419139840595, -0.0075316928235249474, -0.0007098774270840972,
> 0.002924487631568259, -0.0002483250315819229, 0.000826117796416936,
> -0.0010035185627464743, 0.021356859187614194, -0.004146026884059365,
> -0.002750671105835753, -0.016221290635482728, 0.007392504128296068,
> 0.007084569730349301, 0.029192123489721146, 0.003882293182910453,
> -0.025603761874088794, 0.001664676186822569, -0.016393153882581446,
> 0.00859230807344878, 0.001895810684355845, 0.02982480278797865,
> 0.005303175900215923, 0.0509005688273304, 0.00030508913381681156,
> -0.009629513992071992, -0.01210469261348067,
> 0, 0, 0.0029983327869394683, -0.005757095271620889,
> 0.008259609235448525, -0.005620592803263748, 0.003145928835778438,
> 0.003728228170827728, -0.011260465102672397, -0.002877238505503342,
> 0.0021824413880556386, -0.00003565038381008753, -0.002270835686244205,
> -0.0015257273763423084, 0.03120891972002798, -0.003151489437286643,
> 0.012380849088919477, -0.025288628574023857, 0.012245416477637572,
> -0.0013740035970067365, 0.03021231182553681, -0.005243320510867623,
> -0.02414238886884155, -0.013384857791019245, -0.019726426528391336,
> 0.028118742243602536, 0.0012286327187295712, 0.02660269558122618,
> 0.006136488666732359, 0.01666324613463323, -0.006449919173472458,
> -0.014266675342364194, 0.029342825372708284,
> 0, 0, 0.0016497141811927696, -0.0025061511903902802,
> 0.002492617176805438, -0.010715921122159215, 0.0044418154697143,
> 0.006191089790517165, -0.013115684833936646, -0.0007489797925822873,
> 0.003416893718752093, -0.0009183398079189262, 0.0004634375782052584,
> -0.0026705303683753835, 0.01681345141294844, 0.00023703766149890638,
> 0.022818271573628958, -0.013129530425995833, 0.011324328503053475,
> 0.014663792197450268, 0.03604277237128459, -0.007558787576715028,
> -0.02786025701119017, -0.0034611099896382593, -0.02012002900454508,
> 0.012649651875919266, 0.005170662715894224, 0.03472797591893575,
> 0.008781069690345374, 0.009502465110866635, -0.007116844378897773,
> 0.009571174116911592, -0.02395957627837128,
> 0, 0, 0.0015651081439543712, -0.001465950607791438,
> 0.0027091136312055964, -0.008084984711778848, 0.0033432249644846914,
> 0.004477338578049312, -0.018259154880781517, 0.0009735825691574943,
> 0.003100330517943717, -0.00043075621477225355, 0.00017746636599376368,
> -0.0015092112444491732, 0.013880640373033989, -0.002632152450743659,
> 0.004742778861789411, -0.008030452832936802, 0.007390457391629667,
> 0.009630978921657207, 0.030188237789555494, -0.009364737199211435,
> -0.018049180652342164, -0.001298445134716803, -0.01718055136574525,
> 0.008401094921335842, 0.005678623850436861, 0.031637003578036185,
> 0.007807537103275285, 0.04678624133952586, -0.008269370273253617,
> 0.0014759358679188033, -0.023559589425191207,
> 0, 0, 0.0018171801698886074, -0.003656334616802099,
> 0.0031991095142168565, -0.006383163883066014, 0.003458302002064065,
> 0.004809617380323468, -0.0075316928235249474, -0.00011941213022540247,
> 0.0038389545953133072, 0.00016894342928323438, 0.00040193270453761437,
> -0.0012396173641129459, 0.02146552183230657, -0.00460347558924996,
> -0.004882655692800729, -0.01606544158442694, 0.008049695065115955,
> 0.0036245004634420136, 0.029005343873300973, -0.003530468304532667,
> -0.024030707768451166, 0.0011548277673373414, -0.01680037958318782,
> 0.008584015488606149, 0.0019502864336126788, 0.02998627429558144,
> 0.005662396299508508, 0.04960671957658368, -0.0013543857116456622,
> -0.009481401441805612, -0.012160167949689146,
> 0, 0, 0.0033246965545264467, -0.0024147717314886756,
> 0.0055744142429533464, -0.008045367022919062, 0.003849632239587134,
> 0.006117551228706688, -0.02203512444991986, -0.0034763000933806672,
> 0.0032621233252168153, -0.000998524864244611, -0.0016863418412042595,
> -0.0017818985509956732, 0.03581656086828025, -0.0023571322784787657,
> 0.038024895696301284, -0.02516372063362861, 0.012482128759746622,
> 0.0018377675069138877, 0.03178466349310234, -0.015414423552878219,
> -0.017621284584039526, -0.0073426856445562875, -0.023608023991937892,
> 0.014642251631214917, -0.0004720076859799823, 0.029741720122136082,
> 0.0056703444402036425, 0.025580654476395855, -0.010887660507394,
> -0.01147017491451925, 0.0003642374673108739,
> 0, 0, 0.0019602103993795134, -0.0025522871013383425,
> 0.002759854861567484, -0.0117035419309811, 0.004960371698847626,
> 0.006445953682826033, -0.015475285902796034, -0.0018916729297389489,
> 0.0032163214468679782, -0.00122568067512904, 0.0003618505888127891,
> -0.0031850807166417705, 0.019366509465640377, 0.001802901796707493,
> 0.03697882244610479, -0.01559071870927989, 0.01317288623112344,
> 0.016742257907138614, 0.03875281873233296, -0.009487353951756382,
> -0.029666922872900993, -0.006093000164020476, -0.022880628778800934,
> 0.015388417951553747, 0.004815258355534668, 0.03648193745557673,
> 0.00921574591201968, -0.016280092927310027, -0.0091397811608598,
> 0.013555938271333954, -0.02212790951448293,
> 0, 0, 0.003001314953618509, -0.0023863344023501067,
> 0.004972807200832523, -0.007467972856070279, 0.0035279979631178096,
> 0.0058793490734322254, -0.019283042631066866, -0.002074680658508253,
> 0.003536733738311503, -0.00047253516937147605, -0.0015525441943082582,
> -0.001522660944903657, 0.030009164479417535, -0.003411974807642765,
> 0.022636470746408476, -0.02079740018784451, 0.010803051326655287,
> 0.0015987094949107617, 0.029792668361274564, -0.013590388062910018,
> -0.0167963749586434, -0.004663859133633861, -0.020978750753957612,
> 0.012290144840830975, 0.0005409108785577259, 0.028884406694033953,
> 0.005728742476633499, 0.03418553080510448, -0.00937013079893645,
> -0.01215053464877582, -0.0047129218610194035,
> 0, 0, 0.002672927342724835, -0.0056224200171662445,
> 0.007454828602277196, -0.005227812245754737, 0.0027215172727971266,
> 0.0035442069675758674, -0.00923222902255474, -0.0018612241880502857,
> 0.002421055424786525, 0.00025796905710791544, -0.0021191596238268762,
> -0.0013062676754853767, 0.026324266184152408, -0.0037734721914197506,
> -0.000556612579300684, -0.020127922689986227, 0.010380658353434982,
> -0.0014448322630305072, 0.02785734934088595, -0.0040409675361023105,
> -0.023653763149538536, -0.012130460799276347, -0.017763501203116126,
> 0.02296141818214931, 0.0021252040253055948, 0.025843532710371212,
> 0.005626636983983799, 0.020685550632856632, -0.00480107173199142,
> -0.01424424374768006, 0.01851508157568791,
> 0, 0, 0.001824012809338066, -0.004965160907276035, 0.004834159100418911,
> -0.004339017014914186, 0.0021094762016039626, 0.003097891062140264,
> -0.006136500268690957, -0.0008496253591653064, 0.0020187176250410464,
> -0.00036689431134907585, -0.001863695012248384, -0.0006612341518899625,
> 0.018841279719218555, -0.00493197788762035, -0.015915596405008402,
> -0.012860477773691535, 0.006554169147235611, 0.006078416564342821,
> 0.0241469406408069, 0.01412519709804754, -0.020784439885885995,
> -0.009720762141872966, -0.015970159283402903, 0.015094603990157577,
> 0.003430176552467878, 0.026629561611224064, 0.004382515410143144,
> 0.026712594006852882, -0.0011264675358127387, -0.014453634753933372,
> 0.002176841947425248,
> 0, 0, 0.002507732510127447, -0.0023429300578754484,
> 0.004054564873384953, -0.006586687022458981, 0.00303708248850674,
> 0.0055157773627501575, -0.015082496697028085, 0.00006463321577070008,
> 0.003955875947771817, 0.0003302912070138335, -0.0013483267332564663,
> -0.001126982493500058, 0.021145243675363915, -0.005021997615314132,
> -0.000851125229743673, -0.014133016349542489, 0.008240248928779047,
> 0.001233831476590206, 0.026752254739011116, -0.010806333894011196,
> -0.015537302372512473, -0.0005751239327522621, -0.01696564949598771,
> 0.00870008710813969, 0.002086944477062649, 0.027575875672193877,
> 0.005817876321710672, 0.04731928941208083, -0.0070539012439222995,
> -0.013188978453693722, -0.012462270309523502,
> 0, 0, 0.0019442794960072968, -0.001476534808605923,
> 0.0033331354831961676, -0.009409578129144908, 0.003854095916792674,
> 0.004785923900753689, -0.022516698930245844, -0.0012235229750768473,
> 0.002789917082440547, -0.0011208424344858858, 0.000006559730434971118,
> -0.002166948069157325, 0.01876507496080625, -0.00025977609503699886,
> 0.02598048877957794, -0.012063163162484044, 0.00949258317282966,
> 0.011639943542441399, 0.033119079705675465, -0.012397412837003942,
> -0.020735942055599945, -0.006405833628181736, -0.021678397432225327,
> 0.01212499781456832, 0.004677472674067592, 0.03368852324160947,
> 0.0076088774216753995, 0.004525725601295659, -0.010693039497456152,
> 0.0057874435745926085, -0.022140029374458442,
> 0, 0, 0.003878239869857272, -0.004637911273805305, 0.009611715695950842,
> -0.00699010563926517, 0.002660326669926074, 0.005598099450597097,
> -0.017476324925484496, -0.002998434082157966, 0.0027408848715897672,
> -0.000324618237464186, -0.004593064799902035, -0.0016474325411779587,
> 0.03021551835121268, -0.0033572759327906015, 0.008286361289651737,
> -0.021809412695829953, 0.012951912115330338, -0.005771330528494664,
> 0.02864138814332697, -0.02261069821952223, -0.021035812684384425,
> -0.010477443577043506, -0.01857993485046607, 0.027823459674900717,
> 0.0007433470183589192, 0.02094596962612688, 0.005363675924892543,
> 0.01581544994867558, -0.006029773351345414, -0.015832309499222406,
> 0.022943367477989425,
> 0, 0, 0.0021927021059730068, -0.00148346928500162,
> 0.0037419773862244756, -0.01027741519569509, 0.004188804471753079,
> 0.004988100491491041, -0.025306124341963856, -0.0026630059178510686,
> 0.002586542762628121, -0.001572967888781024, -0.00010541358251734102,
> -0.002597879092241973, 0.02196522175969151, 0.0012945394483570198,
> 0.039894850449853185, -0.0147052837232219, 0.010869837994995177,
> 0.012956161742265524, 0.0350392864783058, -0.014384338254868002,
> -0.022496234009458483, -0.009752053675624279, -0.024625262096470892,
> 0.01456479626185856, 0.0040215460412739296, 0.0350326223315368,
> 0.0074787210785582335, -0.023162198503062052, -0.012280960713312979,
> 0.008612224485861653, -0.02120997278949559,
> 0, 0, 0.0035733492759273187, -0.004577954699701702,
> 0.008599119283710915, -0.0065366112410860655, 0.002416780299941397,
> 0.005388392836671636, -0.015175532741244297, -0.0018688651358211483,
> 0.003096051016769398, 0.0001337732803734455, -0.004437863812410551,
> -0.0014473143798770173, 0.02560948371072111, -0.0040232929773356164,
> -0.003765189491525712, -0.016681734743640132, 0.011306747611973783,
> -0.005309528754058492, 0.026900884957706393, -0.020792123714573254,
> -0.020856385450024474, -0.008244476322024562, -0.01661761887586736,
> 0.022844172922902712, 0.0018879268881353578, 0.020689666122897105,
> 0.0052807909692540395, 0.020866332156576538, -0.0046785163362643035,
> -0.015966095495487907, 0.013699686172011775,
> 0, 0, 0.0021762558752393426, -0.0054168630498407306,
> 0.006226479214805164, -0.004628305079030459, 0.0020737312029835493,
> 0.003263332499454605, -0.006136500268690957, -0.0003104654929903576,
> 0.00278525579663893, 0.000706125045877499, -0.001887654054874107,
> -0.000971302868914273, 0.01886874236623705, -0.004722814289833442,
> -0.020303264599215658, -0.012251055814349848, 0.0075344485849152395,
> -0.0015529391743299469, 0.024262932916945163, -0.002205797206197364,
> -0.022907965999023398, -0.010215854864510869, -0.014767457285590813,
> 0.015089713035720707, 0.0034936549669216336, 0.024684810433803113,
> 0.004848442310314937, 0.026824857498566005, -0.002284409847625611,
> -0.014210006050530596, 0.001988525253919987,
> 0, 0, 0.0031079899483500203, -0.004486442033964626,
> 0.007053577391344709, -0.005844435580707438, 0.0020450516299647865,
> 0.0050683143206801465, -0.011663797302140835, -0.00014478621772811082,
> 0.0036381467120435713, 0.0008334234918098296, -0.0042009780946603925,
> -0.0011418708705229492, 0.018579220312076056, -0.005039845308483261,
> -0.02215966173648072, -0.008855278921876725, 0.008795707054219044,
> -0.004604673414129599, 0.024244327463864464, -0.018016404733335344,
> -0.020582522829159292, -0.004836263143311435, -0.013622505019900907,
> 0.015244208933011025, 0.003634917215688871, 0.020298466039020073,
> 0.005154282352753169, 0.028575573421267455, -0.00261607141850892,
> -0.016170295173998418, -0.0004090905581646473 )
> m = matrix( x, ncol=28 ) # nrow=33
> c = cov( m )
> if( ! is.positive.definite( c )) c = make.positive.definite( c )
> spec = parmaspec( S=c, risk="EV", riskType="minrisk", target=0.000057,
> forecast=colMeans( m ) )
> parmasolve( spec, solver="SOCP" )
> #############
> 
> 
>> I believe Pat has already addressed this issue in his previous email to
>> you and the list.
>>
>> If on the other hand you want to "jiggle" your matrix a little to make
>> it PD, then use the 'make.positive.definite' function from the corpcor
>> package.
>>
>> Regards,
>>
>> Alexios
>>
>> On 08/07/2014 09:02, u0055 at wolke7.net wrote:
>>> Hello Alexios,
>>>
>>> I read the parma docu and the parma package seems to be great stuff.
>>>
>>> "S" needs to be a
>>> "m-by-m positive definite covariance matrix",
>>> but in general a covariance matrix can also be not PD.
>>>
>>> Do you know any R snippet or package,
>>> which works for any covariance matrix
>>> (including not PD ones, like the attached one) ?
>>>
>>> Thanks in Advance
>>> Uwe
>>>
>>>
>>>> I'm not too familiar with how fPortfolio works, but since you asked for
>>>> "alternative code" here is how you can do this with parma:
>>>>
>>>> ###############
>>>> library(parma)
>>>> spec = parmaspec(S = cov(datamatrix), riskB=0.1,
>>>> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
>>>> forecast=colMeans(datamatrix))
>>>> weights(parmasolve(spec, solver="SOCP"))
>>>> #############
>>>>
>>>> Note the following:
>>>> 1. The risk (riskB) is an upper bound since this is an inequality
>>>> constraint (less than or equal to), and is available to solve for
>>>> covariance inputs using an SOCP solver (you can also solve QCQP
>>>> problems
>>>> as well).
>>>> 2. The solution can be completely dominated by one asset (as in the
>>>> case above) unless you change risk bound or constraints (UB, LB or some
>>>> other linear combinations ... see documentation)
>>>> 3. You MUST provide a forecast vector (which is not all zeros).
>>>>
>>>> Regards,
>>>>
>>>> Alexios
>>>
>>> ############
>>> library(parma)
>>> x = c(
>>> 0.0004101995964433642, -0.00018580025947176148, 0.0001921211753136999,
>>> -0.0009374090928287272, 0.02179035825399216, -0.0008010181637519165,
>>> 0.02762103313486072, -0.02059593202791299, 0.009890131347811582,
>>> 0.008874502330834042, 0.03270962505025148, 0.0004709525370067878,
>>> -0.026172393520773156, -0.002070884888637307, -0.021394084189246338,
>>> 0.014663881480845464, 0.000007589055248672503, 0.03357767208442292,
>>> 0.007489994621009966, 0.0354779091735148, -0.004488890361817627,
>>> 0.0006037637415494107, -0.0001747374366735466, 0.0002776560800516695,
>>> -0.0010539757116864686, 0.007217907272059155, -0.0009999339576310352,
>>> 0.0018097094037338678, -0.0072761973581043134, 0.007274147797504215,
>>> 0.011722205826326859, 0.0284076103749228, 0.00020854896466472906,
>>> -0.027139287243448704, 0.0009288913408461102, -0.013985585851090089,
>>> 0.008355345607646895, 0.005703625000569552, 0.031154509412550213,
>>> 0.008409491754987508, 0.050116507149955865, -0.002471235927845941,
>>> 0.0004329670989004567, -0.00014108375322680291, 0.00024873249512844,
>>> -0.0007654340066147783, 0.018092403293930987, -0.0015557105255950537,
>>> 0.015910756127921546, -0.01736078352542159, 0.008348345947451275,
>>> 0.007744974101786212, 0.029968431702077265, 0.0016856756212381618,
>>> -0.0252969523459683, -0.0006213069455005302, -0.01923409835975207,
>>> 0.012209755091657625, 0.0007510294849596395, 0.03210686006944077,
>>> 0.006634533610756534, 0.04169475959584361, -0.0025908541571262045,
>>> 0.0005954295776526556, -0.00013175957287530423, 0.0002509094271978344,
>>> -0.0009448108075862921, 0.007528674135685146, -0.0014060182806468655,
>>> 0.0008597209029989182, -0.007178209888799298, 0.00689554753496824,
>>> 0.009766184066262252, 0.02818192946497762, -0.004207950567021389,
>>> -0.023491857691380978, 0.0005314474698686129, -0.015464139804048354,
>>> 0.008342940298155603, 0.005682816731364199, 0.03209078200750012,
>>> 0.00815688540306469, 0.04912648130491875, -0.004043194319244131,
>>> 0.0004677174973875975, -0.00007283224369502313, 0.0003351392464246223,
>>> -0.0005029457171303313, 0.012448156249627087, -0.002707609393671422,
>>> -0.001962824566880327, -0.012422925284776823, 0.005995094546901327,
>>> 0.006020957331134253, 0.025784505012758727, 0.0035397266445386837,
>>> -0.023960752658108264, 0.0015912067571819243, -0.015937277883155545,
>>> 0.008463983234476183, 0.001885754351360598, 0.029861936467625895,
>>> 0.005328829963527624, 0.05118363655624024, 0.0003061484710870088 )
>>> m = matrix( x, ncol=5 ) # nrow=21
>>> spec = parmaspec(S = cov(m), riskB=0.1,
>>> risk="EV",riskType="maxreward", LB = rep(0,8), UB = rep(1,8), budget=1,
>>> forecast=colMeans(m))
>>> parmasolve(spec, solver="SOCP")
>>> ############
>>>
>>>
>>
> 
> 
>


From jzmoser at gmail.com  Thu Jul 10 12:29:32 2014
From: jzmoser at gmail.com (Johannes Moser)
Date: Thu, 10 Jul 2014 12:29:32 +0200
Subject: [R-SIG-Finance] rugarch - question w.r.t. (robust) SE and bias in
 estimates of a particular MA(1)-eGARCH(1, 1)-STD model
Message-ID: <53BE6B0C.1060002@googlemail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140710/62bbb6d0/attachment.pl>

From u0055 at wolke7.net  Thu Jul 10 12:57:07 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Thu, 10 Jul 2014 12:57:07 +0200
Subject: [R-SIG-Finance] FPortfolio / MAxReturnPortfolio
In-Reply-To: <53BD21F0.5020608@4dscape.com>
References: <000401cf99d3$3d252f30$b76f8d90$@org>
	<53BAB4D0.2040502@4dscape.com> <53BBA5AD.8050408@wolke7.net>
	<53BBAA03.7080005@4dscape.com> <53BD1681.3010208@wolke7.net>
	<53BD21F0.5020608@4dscape.com>
Message-ID: <53BE7183.8030304@wolke7.net>

Alexios,

Thanks a lot for your very fast reaction.
I installed the new parma_1.5-2 successfully and
it's running without any problems :-)

Uwe


> ok, thats a bug which defaults to targetType='inequality' irrespective
> of value passed.
>
> 1. Download latest (fixed) version from either r-forge (you'll have to
> wait until it rebuilds) or immediately from bitbucket (assuming you can
> build from source):
> library(devtools)
> install_bitbucket("parma","alexiosg")
>
> 2. Make sure to set targetType='equality'.
>
> Regards,
>
> Alexios
>
> PS Try to create a minimally reproducible example next time which does
> not need so much data to be included in the email.
>
> On 09/07/2014 11:16, u0055 at wolke7.net wrote:
>> Thanks Alexios,
>>
>> parma is great and
>>
>> #############
>> library(parma)
>> c = cov( datamatrix )
>> if( ! is.positive.definite( c )) c = make.positive.definite( c )
>> spec = parmaspec( S=c, risk="EV", riskType="minrisk", target=0.000057,
>> forecast=colMeans( datamatrix ))
>> weights(parmasolve( spec, solver="SOCP" ))
>> #############
>>
>> worked out for me.
>> The only issue with parma is,
>> that the target set in parmaspec()
>> is not always equal to the "Reward" in the resulting "PARMA Portfolio".
>> Please find my attached example,
>> where the target was set to 0.000057 and
>> parmareward is 0.0008336 .
>>
>> Shouldn't the target return of the optimized portfolio
>> be equal to the parmareward (parmareward:
>> "Extracts the expected reward of the optimized portfolio"),
>> or did I get something wrong ?
>>
>> Thanks in advance,
>> Uwe


From alexios at 4dscape.com  Thu Jul 10 13:22:04 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Thu, 10 Jul 2014 12:22:04 +0100
Subject: [R-SIG-Finance] rugarch - question w.r.t. (robust) SE and bias
 in estimates of a particular MA(1)-eGARCH(1, 1)-STD model
In-Reply-To: <53BE6B0C.1060002@googlemail.com>
References: <53BE6B0C.1060002@googlemail.com>
Message-ID: <53BE775C.8050803@4dscape.com>

Hi Johannes,

It is most probably related to the bounds I have defaulted on the eGARCH
model for the gamma. Should probably by (0,1) NOT (-1,1).

Try:

################################
spec1 = ugarchspec(variance.model=list( model="eGARCH",
garchOrder=c(1,1)), mean.model=list( armaOrder = c(0,1) ),
distribution.model="std")

setbounds(spec1)<-list(gamma1=c(0,1))

fit1 = ugarchfit( spec=spec1, data=mydata , solver="solnp",
fit.control=list(scale=1 )

sim = ugarchsim(fit1, n.sim=1000)

fit2 = ugarchfit(spec1, fitted(sim))
cbind(coef(fit1),coef(fit2))
################################

I'll need to investigate why I had the bounds set as I did in the first
place.

Regards,

Alexios

On 10/07/2014 11:29, Johannes Moser wrote:
> Dear all,
> 
> I am currently experiencing troubles with a particular 
> ARMA(0,1)-eGARCH(1,1)-STD (i.e. Student's t distribution) model that 
> should be fitted to a series of business-daily log-returns of the DACX 
> Performance index (data downloaded from bloomberg).
> Since I have done similar analyses in the past without any problems I 
> think that there might be a problem with the particular model and the 
> particular data.
> 
> The sample comprises 390 observations and spans the period (1992-01-02 , 
> 1996-10-01) with the convention yyyy-mm-dd.
> Estimation is done by means of the rugarch-package.
> I have uploaded the data and a plot at 
> http://www.file-upload.net/download-9194647/eGARCH.zip.html
> 
> Thanks a lot for any ideas or suggestions in advance!
> 
> 
> ---------------------------
> Problems:
> 
> First of all I can't obtain robust standard errors, even when setting 
> the option "fit.control=list(scale=1)" as recommended in related threads.
> No parameter is at its limit, but persistence of the estimated model is 
> very high (0.9892).
> 
> Secondly the t values and p-values according to the non-robust estimates 
> seem to be too good to be true for such a small sample.
> 
> Conditional Variance Dynamics 	
> -----------------------------------
> GARCH Model	: eGARCH(1,1)
> Mean Model	: ARFIMA(0,0,1)
> Distribution	: std
> 
> Optimal Parameters
> ------------------------------------
>          Estimate  Std. Error  t value Pr(>|t|)
> mu      0.000481    0.000000  2915.43        0
> ma1     0.084402    0.000724   116.58        0
> omega  -0.107101    0.000064 -1670.67        0
> alpha1 -0.090824    0.000059 -1549.21        0
> beta1   0.989236    0.000231  4290.18        0
> gamma1 -0.073881    0.000131  -565.25        0
> shape   6.738614    0.010256   657.02        0
> 
> 
> Robust Standard Errors:
>          Estimate  Std. Error  t value Pr(>|t|)
> mu      0.000481         NaN      NaN      NaN
> ma1     0.084402         NaN      NaN      NaN
> omega  -0.107101         NaN      NaN      NaN
> alpha1 -0.090824         NaN      NaN      NaN
> beta1   0.989236         NaN      NaN      NaN
> gamma1 -0.073881         NaN      NaN      NaN
> shape   6.738614         NaN      NaN      NaN
> 
> 
> Thirdly  when investigating the small sample properties via the 
> ugarchdistribution function and according to the plots as suggested on 
> this website 
> http://unstarched.net/2012/12/26/garch-parameter-uncertainty-and-data-size/
> there are weird results for the parameter "gamma1". There seems to ba a 
> bias that emerges as the sample size increases from 190 to 2990.
> (Results schown here are based on m.sim=100. I have repeated the 
> exercise a couple of times, also with m.sim=1000 but results did not 
> change substantially.)
> 
> *------------------------------------*
> *    GARCH Parameter Distribution    *
> *------------------------------------*
> Model : eGARCH
> No. Paths (m.sim) : 100
> Length of Paths (n.sim) : 190
> Recursive : TRUE
> Recursive Length : 2990
> Recursive Window : 200
> 
> Coefficients: True vs Simulation Mean (Window-n)
>                      mu      ma1    omega    alpha1   beta1     gamma1  shape
> true-coef   0.00048106 0.084402 -0.10710 -0.090824 0.98924 -0.0738815 6.7386
> window-190  0.00028241 0.075118 -0.81085 -0.126335 0.91744 -0.0953088 8.1002
> window-390  0.00021380 0.083615 -0.21620 -0.112777 0.97757 -0.0385150 6.0713
> window-590  0.00030893 0.083906 -0.23531 -0.103314 0.97612 -0.0117405 6.3599
> window-790  0.00033639 0.081546 -0.12463 -0.094743 0.98720 -0.0093634 6.1996
> window-990  0.00035573 0.082678 -0.12063 -0.093973 0.98767  0.0021929 6.1567
> window-1190 0.00037253 0.081575 -0.11090 -0.091895 0.98865  0.0010467 5.9618
> window-1390 0.00040460 0.080915 -0.11374 -0.093049 0.98840  0.0044305 5.8192
> window-1590 0.00039122 0.080130 -0.11148 -0.090192 0.98862  0.0039467 5.8280
> window-1790 0.00041750 0.083254 -0.10783 -0.090696 0.98902  0.0049624 5.6801
> window-1990 0.00042600 0.084380 -0.10752 -0.090184 0.98906  0.0077372 5.7210
> window-2190 0.00042967 0.082424 -0.10863 -0.090388 0.98894  0.0113595 5.6812
> window-2390 0.00043955 0.082570 -0.10982 -0.091506 0.98884  0.0093621 5.7262
> window-2590 0.00043285 0.083678 -0.10853 -0.091099 0.98896  0.0097338 5.7423
> window-2790 0.00044481 0.082849 -0.10450 -0.089724 0.98938  0.0114610 5.6936
> window-2990 0.00045002 0.081756 -0.10647 -0.090193 0.98919  0.0119148 5.7327
> 
> window-390 no. of non-converged fits: 3
> 
> window-990 no. of non-converged fits: 1
> 
> 
> One can see that the mean of the gamma1 parameter estimates is actually 
> moving away from the true value as the sample size increases - which is 
> very counter-intuitive.
> The pattern is even more clear in the uploaded plot.
> Results can be replicated in R so it is not due to a particular Monte 
> Carlo run.
> Maybe estimation is very biased and inconsistent here.
> But it would be the first time that I encounter such big problems.
> 
> I have tried to reproduce the results using STATA (version 11.2) but the 
> model did not converge (message: flat log likelihood encountered, cannot 
> find uphill direction).
> 
> R and rugarch are up to date. The R syntax is given as:
> 
> 
> ############################################################
> #
> #
> require('rugarch')
> require('parallel')
> 
> setwd("D:/MA")
> mydata = read.table("mydata.txt" , header=T)
> 
> spec1 = ugarchspec(
>       variance.model=list( model="eGARCH", garchOrder=c(1,1), 
> submodel=NA ),
>       mean.model=list( armaOrder = c(0,1) ), distribution.model="std" )
> 
> fit1 = ugarchfit( spec=spec1, data=mydata , solver="solnp" , 
> fit.control=list(scale=1) )
> fit1
> persistence(fit1)
> 
> cl = makePSOCKcluster(4)       # please adjust the number of cores to be 
> used for parallel processing
> mod = ugarchdistribution( fitORspec=fit1 , n.sim=190, n.start=250, 
> m.sim=100, recursive=TRUE,
>       recursive.length=2990, recursive.window=200, rseed=654911, 
> solver="solnp", cluster=cl )
> stopCluster(cl)
> mod
> 
> parvals = 
> t(as.data.frame(mod at model$pars)$Level[as.data.frame(mod at model$pars)$Include==1])
> colnames(parvals) = 
> rownames(mod at model$pars)[as.data.frame(mod at model$pars)$Include==1]
> rownames(parvals) = ""
> parvals                                  # names and values for the 
> parameter estimates
> 
> mu = sapply(mod at dist, FUN = function(x) x$simcoef[, 1])
> mu$details = NULL
> ma1 = sapply(mod at dist, FUN = function(x) x$simcoef[, 2])
> ma1$details = NULL
> omega = sapply(mod at dist, FUN = function(x) x$simcoef[, 3])
> omega$details = NULL
> alpha1 = sapply(mod at dist, FUN = function(x) x$simcoef[, 4])
> alpha1$details = NULL
> beta1 = sapply(mod at dist, FUN = function(x) x$simcoef[, 5])
> beta1$details = NULL
> gamma1 = sapply(mod at dist, FUN = function(x) x$simcoef[, 6])
> gamma1$details = NULL
> shape = sapply(mod at dist, FUN = function(x) x$simcoef[, 7])
> shape$details = NULL
> 
> n = length(mod at dist) - 1
> clr <- rainbow(n, alpha = 1, start = 0.55, end = 0.8)
> 
> par(mfrow = c(2, 4))
> boxplot(na.omit(mu), names =  (c(1:n)*200-10) , col = clr)
> abline(h = parvals[1], col = 2)
> title('Mu')
> boxplot(na.omit(ma1), names = (c(1:n)*200-10), col = clr)
> abline(h = parvals[2], col = 2)
> title('MA 1')
> boxplot(na.omit(omega), names = (c(1:n)*200-10), col = clr)
> abline(h = parvals[3], col = 2)
> title('Omega')
> boxplot(na.omit(alpha1), names = (c(1:n)*200-10), col = clr)
> abline(h = parvals[4], col = 2)
> title('Alpha 1')
> boxplot(na.omit(beta1), names = (c(1:n)*200-10), col = clr)
> abline(h = parvals[5], col = 2)
> title('Beta 1')
> boxplot(na.omit(gamma1), names = (c(1:n)*200-10), col = clr)
> abline(h = parvals[6], col = 2)
> title('Gamma 1')
> boxplot(na.omit(shape), names = (c(1:n)*200-10), col = clr)
> abline(h = parvals[7], col = 2)
> title('Shape')
> #
> #
> ################################################################
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From berkorbay at gmail.com  Thu Jul 10 13:45:55 2014
From: berkorbay at gmail.com (Berk Orbay)
Date: Thu, 10 Jul 2014 14:45:55 +0300
Subject: [R-SIG-Finance] Getting historical stock prices from irregular
	tickers in Quantmod package
Message-ID: <CAGKHJd--sHjO+ycPEEikBHSUw6C_jQb60-9GCzsnq0ZqzTc3og@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140710/e13d6e92/attachment.pl>

From josh.m.ulrich at gmail.com  Thu Jul 10 13:52:09 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Thu, 10 Jul 2014 06:52:09 -0500
Subject: [R-SIG-Finance] Getting historical stock prices from irregular
 tickers in Quantmod package
In-Reply-To: <CAGKHJd--sHjO+ycPEEikBHSUw6C_jQb60-9GCzsnq0ZqzTc3og@mail.gmail.com>
References: <CAGKHJd--sHjO+ycPEEikBHSUw6C_jQb60-9GCzsnq0ZqzTc3og@mail.gmail.com>
Message-ID: <CAPPM_gQ6-R-M489Q_G52CwWWQZ4dBt5Ns0AYfKRZY+1T9qNcVw@mail.gmail.com>

On Thu, Jul 10, 2014 at 6:45 AM, Berk Orbay <berkorbay at gmail.com> wrote:
> I have a problem and could not find any mention of it anywhere (maybe I
> overlooked a term). When using Quantmod's getSymbols function I am having
> trouble to get details on the tickers. To illustrate,
>
> getSymbols("XU030",src="google")
> XU030
>
> works fine to get historical prices but when the symbol becomes IST::KOZAA-E
>
> https://www.google.com/finance/historical?q=IST%3A%3AKOZAA-E&ei=kXq-U_PpFs-uwAPt9YCYCg
>
> getSymbols("IST::KOZAA-E",src="google")
>
> is also fine but since I cannot write IST::KOZAA-E to console I cannot
> reach the historical prices.
>
> I can use ^GSPC from Yahoo but the package deletes ^ when importing.
>
> Is there any way to get info from weird symbols?
>
Use backticks (see the "Names and Identifiers" section of ?Quotes).
Or set auto.assign=FALSE in getSymbols and assign it to a new name.

> head(Cl(`IST::KOZAA-E`))
           IST::KOZAA-E.Close
2013-06-17               3.67
2013-06-18               3.62
2013-06-19               3.65
2013-06-20               3.34
2013-06-21               3.26
2013-06-24               2.91

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From berkorbay at gmail.com  Thu Jul 10 14:31:18 2014
From: berkorbay at gmail.com (Berk Orbay)
Date: Thu, 10 Jul 2014 15:31:18 +0300
Subject: [R-SIG-Finance] Getting historical stock prices from irregular
 tickers in Quantmod package
In-Reply-To: <CAPPM_gQ6-R-M489Q_G52CwWWQZ4dBt5Ns0AYfKRZY+1T9qNcVw@mail.gmail.com>
References: <CAGKHJd--sHjO+ycPEEikBHSUw6C_jQb60-9GCzsnq0ZqzTc3og@mail.gmail.com>
	<CAPPM_gQ6-R-M489Q_G52CwWWQZ4dBt5Ns0AYfKRZY+1T9qNcVw@mail.gmail.com>
Message-ID: <CAGKHJd99UD0_4fDHSc4JWuu4psmCLo5yZLiNV1fVuUH6KtpFgA@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140710/45a4231d/attachment.pl>

From krishna at primps.com.sg  Fri Jul 11 11:13:56 2014
From: krishna at primps.com.sg (S N V Krishna)
Date: Fri, 11 Jul 2014 09:13:56 +0000
Subject: [R-SIG-Finance] A question on Forward Price
In-Reply-To: <CA+dpOJkNA3wmccu7bnAnXoWba1hLb5iLTgaUPpL8Sg8HrmkP2Q@mail.gmail.com>
References: <CA+dpOJkNA3wmccu7bnAnXoWba1hLb5iLTgaUPpL8Sg8HrmkP2Q@mail.gmail.com>
Message-ID: <b78856e2af7b4be0803054aac7c389a5@HKXPR03MB295.apcprd03.prod.outlook.com>

Hi Christofer, I saw this late, nevertheless here is my view.

Contango (Normal) market  and backwardation in futures / forwards depends upon current supply demand balance vs. expectations on forward supply demand balance.

Contango markets where in futures higher than spot is conspicuous in agricultural commodities (ex. soybean, corn etc.) during harvesting period where spot/current prices are depressed due to ample availability vs. forwards. Nature of market gradually shifts to backwardation as it approaches sowing period where in cash prices are at elevated levels due to low supplies and forwards at discount on expectation of increase in supplies during harvesting period. This is in general, however aberrations do occur following deviation in normal supply patterns like weather impact on production. 

ii) on crude oil - crude oil is mostly in backwardation in recent bull rally. The current firmness in prices is mostly in response to disturbances in middle east and hence their likely impact on immediate availability of supplies. This could change moving forward once output is restored to normal levels. 

Regards,

S.N.V. Krishna


-----Original Message-----
From: r-sig-finance-bounces at r-project.org [mailto:r-sig-finance-bounces at r-project.org] On Behalf Of Christofer Bogaso
Sent: Monday, June 30, 2014 4:08 AM
To: r-sig-finance at r-project.org
Subject: [R-SIG-Finance] A question on Forward Price

Hi again,

I would like ask a small question however not really related to R.

We all know that non-arbitrage Forward price of any underlying (except perhaps Interest Rate) is just the spot price plus the cost of carry.
Cost of carry again depends on cost of borrowing and convenience yield.

Therefore my question is, is it true that for most consumable commodity like agricultural commodity, crude oil, the Forward market will mostly remain in backwardination? Specially for Crude oil it looks always remains in Backwardination. Because since they are consumable then buying now and storing would be more economical than buying it Forward for future use, hence CY would be higher.

Another related question is, for Crude oil if Forward market becomes more in Backwardination then does it imply that, in Future it's price is expected to increase, keeping everything else same?

I really appreciate your thought on the same.

Thanks and regards,

_______________________________________________
R-SIG-Finance at r-project.org mailing list https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From shivamsingh at gmail.com  Sun Jul 13 18:53:04 2014
From: shivamsingh at gmail.com (Shivam)
Date: Sun, 13 Jul 2014 22:23:04 +0530
Subject: [R-SIG-Finance] Calibration of Heston Model in R
Message-ID: <CAGaLYZr9Y8Ry3S6+aUYMv9PrrkSVuNusS0p0UzbWAKgv_5T_QQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140713/c739b6d9/attachment.pl>

From stergenator at gmail.com  Sun Jul 13 21:58:43 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Sun, 13 Jul 2014 12:58:43 -0700
Subject: [R-SIG-Finance] Behavior of sigThreshold()
Message-ID: <CAM8YH=YCT89xmTQ2gTERnaOTiH4tJ4C0QBys=2KGuoKjfFu4Bw@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140713/7b8e2815/attachment.pl>

From josh.m.ulrich at gmail.com  Mon Jul 14 04:14:58 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Sun, 13 Jul 2014 21:14:58 -0500
Subject: [R-SIG-Finance] Behavior of sigThreshold()
In-Reply-To: <CAM8YH=YCT89xmTQ2gTERnaOTiH4tJ4C0QBys=2KGuoKjfFu4Bw@mail.gmail.com>
References: <CAM8YH=YCT89xmTQ2gTERnaOTiH4tJ4C0QBys=2KGuoKjfFu4Bw@mail.gmail.com>
Message-ID: <CAPPM_gQbaPE9Gi0wvvo6+tBZyhgUCpmXrdEkNxCE-rCfHB0JRw@mail.gmail.com>

On Sun, Jul 13, 2014 at 2:58 PM, stergios marinopoulos
<stergenator at gmail.com> wrote:
> Hi,  I noticed an unexpected result when I used sigThreshold() with
> relationship="eq" and cross=TRUE on a xts object primarily filled with NA's
> and 1's for the value to be matched.  When I tried using cross=FALSE, it
> worked as expected since the branch
>
>     if (isTRUE(cross))
>         ret_sig <- diff(ret_sig) == 1
>
> is not executed.   My take away from this is that I should not be using
> columns with NA's as the base value and 1's as the occasional interesting
> value.   Instead I should use 0's as the base value.
>
I agree with your assessment.  If your variable can only take 2 values, use 0/1.

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From u0055 at wolke7.net  Mon Jul 14 12:38:23 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Mon, 14 Jul 2014 12:38:23 +0200
Subject: [R-SIG-Finance] Is there a general solution (package) for a
 portfolio optimization ?
Message-ID: <53C3B31F.8010908@wolke7.net>

Dear R-SIGs,

Is there anybody out there working with parma ?
It's a great package.
I can use parts of it,
but don't understand everything.

Does anybody know the function of parameter "targetType"
in method "parmaspec()" ?
The documentation says,
it's Whether the target should be a hard equality or inequality.
What does that mean ?
Are there good resources about that theme in the internet ?

Thanks in advance,
Uwe


From michael.weylandt at gmail.com  Mon Jul 14 13:14:55 2014
From: michael.weylandt at gmail.com (Michael Weylandt)
Date: Mon, 14 Jul 2014 07:14:55 -0400
Subject: [R-SIG-Finance] Is there a general solution (package) for a
	portfolio optimization ?
In-Reply-To: <53C3B31F.8010908@wolke7.net>
References: <53C3B31F.8010908@wolke7.net>
Message-ID: <20C9535E-9204-405E-9E17-4562707686B4@gmail.com>


> On Jul 14, 2014, at 6:38, u0055 at wolke7.net wrote:
> 
> Dear R-SIGs,
> 
> Is there anybody out there working with parma ?
> It's a great package.
> I can use parts of it,
> but don't understand everything.
> 
> Does anybody know the function of parameter "targetType"
> in method "parmaspec()" ?
> The documentation says,
> it's Whether the target should be a hard equality or inequality.
> What does that mean ?

It sounds like it defines the form of an optimizer constraint. E.g., if you weren't allowed to lever a portfolio, you could put \sum w_i either =1 or <=1, depending on whether you are willing to hold cash. The former would be a 'hard equality'; the latter an inequality constraint. 

This is just speculation based on the description you gave. Check the package docs and source to confirm. 

Michael


> Are there good resources about that theme in the internet ?
> 
> Thanks in advance,
> Uwe
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From Dylan.Tevlin at kochind.com  Mon Jul 14 21:02:32 2014
From: Dylan.Tevlin at kochind.com (Tevlin, Dylan)
Date: Mon, 14 Jul 2014 14:02:32 -0500
Subject: [R-SIG-Finance] Slight Discrepancy between ugarchfit and by hand
	calculation
Message-ID: <9D606AC27145D74F845B5AA9F37F9D9DEDB42FBE41@MSGICTB.kochind.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140714/c1f2bd2f/attachment.pl>

From alexios at 4dscape.com  Mon Jul 14 21:27:56 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Mon, 14 Jul 2014 20:27:56 +0100
Subject: [R-SIG-Finance] Slight Discrepancy between ugarchfit and by
	hand calculation
In-Reply-To: <9D606AC27145D74F845B5AA9F37F9D9DEDB42FBE41@MSGICTB.kochind.com>
References: <9D606AC27145D74F845B5AA9F37F9D9DEDB42FBE41@MSGICTB.kochind.com>
Message-ID: <5C6E0114-07D3-4FD8-B82C-F0E5B11E1675@4dscape.com>

The reason you are getting a discrepancy is because you have not been diligent in either reading the documentation or the c-code which show the GARCH recursion:

1. The specification you use is the default one ARMA(1,1)-GARCH(1,1) but you filter the returns ONLY for a constant.
2. Your code does not include start-up recursion conditions.

Here is the correct way to do it:

#################################
library(rugarch)
data(sp500ret)
calcResiduals<-function(returns, mu){
# pass the correct mu which is estimated jointly in the ML procedure
 returns-mu
}

standardGarch<-function(returns, alpha, beta, omega, mu){
residuals<-calcResiduals(returns, mu)
sigmaVect<-rep(0, length(returns))
# recursion initialisation value h0
h0 = mean(residuals^2)
 for(i in 1:length(returns)){
   if(i==1){
     sigmaVect[i]<-h0  
   } else{
     sigmaVect[i]<-omega+alpha*residuals[i-1]^2+beta*sigmaVect[i-1]
   }
 }
 return(sigmaVect)
}

returns<-sp500ret[,1]                    #leave off the dates for now
# armaOrder=c(0,0) since default is (1,1)
spec<-ugarchspec(mean.model=list(armaOrder=c(0,0)),variance.model=list(model="sGARCH"))
fit<-ugarchfit(spec, sp500ret)
alpha<-coef(fit)["alpha1"]
beta<-coef(fit)["beta1"]
omega<-coef(fit)["omega"]
mu<-coef(fit)["mu"]
vals<-standardGarch(returns,alpha, beta, omega, mu)
# all.equal is the way to compare, NOT visually if you want exact results:
all.equal(as.numeric(sigma(fit)), sqrt(as.numeric(vals)))
################################


-Alexios 




On 14 Jul 2014, at 20:02, Tevlin, Dylan <Dylan.Tevlin at kochind.com> wrote:

> Running R 2.1.14 on Windows 7.
> 
> My problem is the following:
> 
> I'm using the sp500ret data, approximating the parameters using ugarchfit, and then calculating the conditional variances "by hand" and plotting on top of the 3rd graph from plot.ugarchfit.  This task may seem silly but bear with me.  All the following code is ready to run copy and paste.
> 
> The discrepancy I'm finding is consistent over different models, so let's just look at a Garch(1,1)
> 
> #start code         ****************
> library(rugarch)
> data(sp500ret)
> 
> #by hand functions
> calcResiduals<-function(returns){
>      #returns a list of the returns residuals
> 
>      #returns             :a vector or time series of floats
> 
>      returns-mean(returns)
> }
> 
> standardGarch<-function(returns, alpha, beta, omega){
>      #standard garch per rugarch documentation
> 
>      #returns             :a vector or time series of floats
>      #alpha               :a float, estimation of the alpha parameter
>      #beta                :a float, estimation of the beta parameter
>      #omega               :a float, estimation of the omega parameter
> 
>      residuals<-calcResiduals(returns)
>      #now we have our iterative recursive method
>      sigmaVect<-rep(0, length(returns)+1)
> 
>      for(i in 1:length(returns)){
>             sigmaVect[i+1]<-omega+alpha*residuals[i]^2+beta*sigmaVect[i]
>      }
>      sigmaVect
> }
> 
> returns<-sp500ret[,1]                    #leave off the dates for now
> 
> spec<-ugarchspec(variance.model=list(model="sGARCH"))
> fit<-ugarchfit(spec, sp500ret)
> fit
> plot(fit)     #here press 3 then enter on the console
>             #then press 0 then enter to exit the graph menu
> 
> #I got the following as estimates for my parameters from ugarchfit
> #these should be changed to the appropriate ones you get in output
> #they should be near the same
> alpha<-.087817
> beta<-.904886
> omega<-.000001
> 
> vals<-standardGarch(returns,alpha, beta, omega )
> vals<-vals[2:(length(vals))]
> vals<-as.data.frame(vals)
> rownames(vals)<-rownames(sp500ret)        #attach the dates
> 
> #yes, the dates are most likely a bit off, that won't matter to much for the visual
> #representation though.  My issue is a vertical shift difference
> 
> lines(sqrt(vals), col="purple")
> 
> #plot the by hand calculation on top of the ugarchfit graph.
> 
> #end code     *******************
> 
> On my machine, I see a slight discrepancy between my function's calculation of the conditional variances and the ugarchfit calculation.  To my understanding I implemented the formula used in ugarchfit for sGarch correctly, so there should be very little difference in the output.
> 
> My first thoughts as to why this difference occurs is some difference in how C and R treat numerics and the conversion back and forth (this occurs in ugarchfit but not in mine), or possibly some truncation of the parameter estimates for display purposes, leading me to use parameter values that are slightly off.
> 
> Can anyone provide an explanation as to what I am seeing here?
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From alexios at 4dscape.com  Mon Jul 14 21:55:45 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Mon, 14 Jul 2014 20:55:45 +0100
Subject: [R-SIG-Finance] Is there a general solution (package) for a
 portfolio optimization ?
In-Reply-To: <20C9535E-9204-405E-9E17-4562707686B4@gmail.com>
References: <53C3B31F.8010908@wolke7.net>
	<20C9535E-9204-405E-9E17-4562707686B4@gmail.com>
Message-ID: <53C435C1.80302@4dscape.com>

It is indeed an optimizer constraint on the target portfolio return. As
the documentation explains, the "minrisk" portfolio minimizes risk
subject to a target return. This can either be:
1. 'hard' target (equality)
(minimize risk s.t. portfolio return == target).
2. 'soft' target (inequality)
(minimize risk s.t. portfolio return >= target).

As to the budget constraint, the SOCP solver now allows to include a
sum(abs(weights)) constraint for long-short optimization (when using a
covariance matrix) without having to do any special tricks (as for
instance discussed here:
https://stat.ethz.ch/pipermail/r-sig-finance/2013q4/011972.html).
This is documented in Section 4.4 of the vignette.

-Alexios

On 14/07/2014 12:14, Michael Weylandt wrote:
> 
>> On Jul 14, 2014, at 6:38, u0055 at wolke7.net wrote:
>>
>> Dear R-SIGs,
>>
>> Is there anybody out there working with parma ?
>> It's a great package.
>> I can use parts of it,
>> but don't understand everything.
>>
>> Does anybody know the function of parameter "targetType"
>> in method "parmaspec()" ?
>> The documentation says,
>> it's Whether the target should be a hard equality or inequality.
>> What does that mean ?
> 
> It sounds like it defines the form of an optimizer constraint. E.g., if you weren't allowed to lever a portfolio, you could put \sum w_i either =1 or <=1, depending on whether you are willing to hold cash. The former would be a 'hard equality'; the latter an inequality constraint. 
> 
> This is just speculation based on the description you gave. Check the package docs and source to confirm. 
> 
> Michael
> 
> 
>> Are there good resources about that theme in the internet ?
>>
>> Thanks in advance,
>> Uwe
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From u0055 at wolke7.net  Tue Jul 15 10:52:10 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Tue, 15 Jul 2014 10:52:10 +0200
Subject: [R-SIG-Finance] parma - What kind of portfolio do I get ?
Message-ID: <53C4EBBA.6070403@wolke7.net>

Dear R-SIGs,

Thanks for explaining the meaning of "targetType".
I'm using this code snippet:

######
	require( parma )
	require( corpcor )
	# ...
	means = colMeans( data )
	S = cov( data )
	if( ! is.positive.definite( S )) S = make.positive.definite( S )
	spec = parmaspec(
		S=S,
		risk='EV',
		riskType='minrisk',
		target=min( means ), # <-----------------------
		targetType='inequality',
		forecast=means )
	p = parmasolve( spec, solver='SOCP' )
	reward = parmareward( p )
	risk = parmarisk( p )
######

I get good results and would like to know,
what kind of portfolio I'm getting.
I guess the result portfolio (reward and risk) is on the frontier.
I don't think it is the mean risk portfolio,
because the result depends on parameter "target".
The "best" results I get with: target=min( means ).
Worse results I get with: target=0.
All I know is, that reward >= target.
But how is the reward and the portfolio calculated ?

Thanks in advance,
Uwe


From es at enricoschumann.net  Wed Jul 16 07:43:09 2014
From: es at enricoschumann.net (Enrico Schumann)
Date: Wed, 16 Jul 2014 07:43:09 +0200
Subject: [R-SIG-Finance] Calibration of Heston Model in R
In-Reply-To: <CAGaLYZr9Y8Ry3S6+aUYMv9PrrkSVuNusS0p0UzbWAKgv_5T_QQ@mail.gmail.com>
	(Shivam's message of "Sun, 13 Jul 2014 22:23:04 +0530")
References: <CAGaLYZr9Y8Ry3S6+aUYMv9PrrkSVuNusS0p0UzbWAKgv_5T_QQ@mail.gmail.com>
Message-ID: <87vbqxluz6.fsf@enricoschumann.net>

On Sun, 13 Jul 2014, Shivam <shivamsingh at gmail.com> writes:

> Hi All,
>
> It is a very basic question, in the sense that I need to start from
> scratch. I need to know what are the resources available in R to calibrate
> the Heston model.
>
> A lot of help is available for MATLAB, but I have been working with R for a
> while now and dont want to migrate.
>
> I know the basic idea of the calibration and the theory around the model,
> but am at a loss as to how do I really go about the calibration in R.
>
> Any inputs would be of great help.
>
> Thanks in advance,
> Shivam
>

It is some time that I have worked with the Heston model (and I have
never used it since, and it was with MATLAB), but a few pointers.

In terms of computational tools you will need two things:

1) A pricing mechanism (there are several)

   There is an implementation of a pricing method in the NMOF package
   [1], but for calibration you may need something faster. The pricing
   method we used is described in detail in chapter 15 of Gilli et al
   [2].  I had started a translation into R in the NMOF manual [3], but
   it is not complete.
 
2) An optimisation algorithm (there are several)

   Have a look at the Optimization Task View [4].  Since the problem is
   only mildly constrained, I would suggest Differential Evolution.
   (Classical -- derivatives-based -- methods did not work very well for
   me.)  See package DEoptim or function DEopt in package NMOF.

As I said, just a few pointers.

Regards,
        Enrico


[1] Disclosure: I am the package author.
[2] http://enricoschumann.net/NMOF.htm#Book
[3] http://enricoschumann.net/NMOF.htm#NMOFmanual
[4] http://cran.r-project.org/web/views/Optimization.html


-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From ole.bueker at outlook.com  Wed Jul 16 10:00:34 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Wed, 16 Jul 2014 01:00:34 -0700 (PDT)
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <5384EF68.9060201@4dscape.com>
References: <1391682044269-4684836.post@n4.nabble.com>
	<BDCC496D-72F7-445D-8424-7AC78BFE2754@4dscape.com>
	<1392738243146-4685490.post@n4.nabble.com>
	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>
	<1401211931020-4691313.post@n4.nabble.com>
	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>
	<1401217345854-4691323.post@n4.nabble.com>
	<5384EF68.9060201@4dscape.com>
Message-ID: <1405497634951-4694076.post@n4.nabble.com>

I have also encountered the error "Error in diag(fit$robust.cvar) : nonvalid
'nrow' value (too large or NA)" in my data analysis.

Here is the link to several time series, which all experience either the
above error or the "failed to invest hessian" error, which seems to have a
similar error source (non-convergence).

https://www.dropbox.com/s/ns6okxeib42syxo/NOT_WORKING.csv


The reproducible code for this data is:

spreads <- read.zoo("NOT_WORKING.csv", header=TRUE, sep=",",
format="%d-%m-%y")
spreads <- na.locf(spreads)
returns1 <- diff(log(spreads), 1)
remove(spreads)
returns_crisis <- window(returns1, start="2007-07-23", end="2009-01-30")
returns_post <- window(returns1, start="2009-02-01", end="2014-05-12")

model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),
mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")

model_crisis <- lapply(returns_crisis, ugarchfit, spec=model,
solver="hybrid")
model_post <- lapply(returns_post, ugarchfit, spec=model, solver="hybrid")


I've tried playing around with adding constrains but was unable to find a
solution (even using the hybrid solver).


My original data contains about 100 additional time series (all covering the
same period, however with more/less NA's depending on the company).
However, these all converge without failure so I have not shared them (I can
upload them if necessary).




--
View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694076.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From alexios at 4dscape.com  Wed Jul 16 10:22:46 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Wed, 16 Jul 2014 09:22:46 +0100
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <1405497634951-4694076.post@n4.nabble.com>
References: <1391682044269-4684836.post@n4.nabble.com>	<BDCC496D-72F7-445D-8424-7AC78BFE2754@4dscape.com>	<1392738243146-4685490.post@n4.nabble.com>	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>	<1401211931020-4691313.post@n4.nabble.com>	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>	<1401217345854-4691323.post@n4.nabble.com>	<5384EF68.9060201@4dscape.com>
	<1405497634951-4694076.post@n4.nabble.com>
Message-ID: <53C63656.2070407@4dscape.com>

I can't replicate your error. All series converge without problem on:

> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-w64-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=English_United Kingdom.1252
[2] LC_CTYPE=English_United Kingdom.1252
[3] LC_MONETARY=English_United Kingdom.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United Kingdom.1252

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] zoo_1.7-11    rugarch_1.3-4

loaded via a namespace (and not attached):
 [1] DistributionUtils_0.5-1     expm_0.99-1.1
 [3] GeneralizedHyperbolic_0.8-1 grid_3.1.0
 [5] KernSmooth_2.23-12          ks_1.9.2
 [7] lattice_0.20-29             Matrix_1.1-4
 [9] misc3d_0.8-4                mvtnorm_1.0-0
[11] nloptr_1.0.0                numDeriv_2012.9-1
[13] parallel_3.1.0              Rcpp_0.11.2
[15] rgl_0.93.1098               Rsolnp_1.15
[17] SkewHyperbolic_0.3-3        spd_2.0-0
[19] truncnorm_1.0-7             xts_0.9-7


Provide your sessionInfo() so I might investigate further.

-Alexios


On 16/07/2014 09:00, Ole Bueker wrote:
> I have also encountered the error "Error in diag(fit$robust.cvar) : nonvalid
> 'nrow' value (too large or NA)" in my data analysis.
> 
> Here is the link to several time series, which all experience either the
> above error or the "failed to invest hessian" error, which seems to have a
> similar error source (non-convergence).
> 
> https://www.dropbox.com/s/ns6okxeib42syxo/NOT_WORKING.csv
> 
> 
> The reproducible code for this data is:
> 
> spreads <- read.zoo("NOT_WORKING.csv", header=TRUE, sep=",",
> format="%d-%m-%y")
> spreads <- na.locf(spreads)
> returns1 <- diff(log(spreads), 1)
> remove(spreads)
> returns_crisis <- window(returns1, start="2007-07-23", end="2009-01-30")
> returns_post <- window(returns1, start="2009-02-01", end="2014-05-12")
> 
> model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),
> mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")
> 
> model_crisis <- lapply(returns_crisis, ugarchfit, spec=model,
> solver="hybrid")
> model_post <- lapply(returns_post, ugarchfit, spec=model, solver="hybrid")
> 
> 
> I've tried playing around with adding constrains but was unable to find a
> solution (even using the hybrid solver).
> 
> 
> My original data contains about 100 additional time series (all covering the
> same period, however with more/less NA's depending on the company).
> However, these all converge without failure so I have not shared them (I can
> upload them if necessary).
> 
> 
> 
> 
> --
> View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694076.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From ole.bueker at outlook.com  Wed Jul 16 10:52:45 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Wed, 16 Jul 2014 01:52:45 -0700 (PDT)
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <53C63656.2070407@4dscape.com>
References: <1391682044269-4684836.post@n4.nabble.com>
	<BDCC496D-72F7-445D-8424-7AC78BFE2754@4dscape.com>
	<1392738243146-4685490.post@n4.nabble.com>
	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>
	<1401211931020-4691313.post@n4.nabble.com>
	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>
	<1401217345854-4691323.post@n4.nabble.com>
	<5384EF68.9060201@4dscape.com>
	<1405497634951-4694076.post@n4.nabble.com>
	<53C63656.2070407@4dscape.com>
Message-ID: <1405500765427-4694078.post@n4.nabble.com>

I?m using RStudio Version 0.98.976 (the newest version), if that?s relevant.

> sessionInfo()
R version 3.1.0 (2014-04-10)
Platform: x86_64-w64-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C 
[5] LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] copBasic_1.5.4     lmomco_2.1.1       fNonlinear_3010.78 fGarch_3010.82    
bstats_1.1-11-5    evir_1.7-3         fTrading_3010.78   fUnitRoots_3010.78
[9] fBasics_3010.86    MASS_7.3-31        timeSeries_3010.97
timeDate_3010.98   urca_1.2-8         zoo_1.7-11         rugarch_1.3-3     

loaded via a namespace (and not attached):
[1] DistributionUtils_0.5-1     expm_0.99-1.1              
GeneralizedHyperbolic_0.8-1 grid_3.1.0                  KernSmooth_2.23-12         
 [6] ks_1.9.2                    lattice_0.20-29             Matrix_1.1-3               
misc3d_0.8-4                mvtnorm_1.0-0              
[11] nloptr_1.0.0                numDeriv_2012.9-1           parallel_3.1.0             
Rcpp_0.11.2                 rgl_0.93.1098              
[16] Rsolnp_1.14                 SkewHyperbolic_0.3-2        spd_2.0-0                  
stabledist_0.6-6            tools_3.1.0    




--
View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694078.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From alexios at 4dscape.com  Wed Jul 16 11:10:05 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Wed, 16 Jul 2014 10:10:05 +0100
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <1405500765427-4694078.post@n4.nabble.com>
References: <1391682044269-4684836.post@n4.nabble.com>	<BDCC496D-72F7-445D-8424-7AC78BFE2754@4dscape.com>	<1392738243146-4685490.post@n4.nabble.com>	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>	<1401211931020-4691313.post@n4.nabble.com>	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>	<1401217345854-4691323.post@n4.nabble.com>	<5384EF68.9060201@4dscape.com>	<1405497634951-4694076.post@n4.nabble.com>	<53C63656.2070407@4dscape.com>
	<1405500765427-4694078.post@n4.nabble.com>
Message-ID: <53C6416D.3050401@4dscape.com>

update Rsolnp and rugarch:

install.packages("Rsolnp", repos="http://R-Forge.R-project.org")
require(devtools)
install_bitbucket("rugarch","alexiosg")


-Alexios

On 16/07/2014 09:52, Ole Bueker wrote:
> I?m using RStudio Version 0.98.976 (the newest version), if that?s relevant.
> 
>> sessionInfo()
> R version 3.1.0 (2014-04-10)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> 
> locale:
> [1] LC_COLLATE=English_United States.1252
> [2] LC_CTYPE=English_United States.1252
> [3] LC_MONETARY=English_United States.1252
> [4] LC_NUMERIC=C 
> [5] LC_TIME=English_United States.1252    
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base     
> 
> other attached packages:
> [1] copBasic_1.5.4     lmomco_2.1.1       fNonlinear_3010.78 fGarch_3010.82    
> bstats_1.1-11-5    evir_1.7-3         fTrading_3010.78   fUnitRoots_3010.78
> [9] fBasics_3010.86    MASS_7.3-31        timeSeries_3010.97
> timeDate_3010.98   urca_1.2-8         zoo_1.7-11         rugarch_1.3-3     
> 
> loaded via a namespace (and not attached):
> [1] DistributionUtils_0.5-1     expm_0.99-1.1              
> GeneralizedHyperbolic_0.8-1 grid_3.1.0                  KernSmooth_2.23-12         
>  [6] ks_1.9.2                    lattice_0.20-29             Matrix_1.1-3               
> misc3d_0.8-4                mvtnorm_1.0-0              
> [11] nloptr_1.0.0                numDeriv_2012.9-1           parallel_3.1.0             
> Rcpp_0.11.2                 rgl_0.93.1098              
> [16] Rsolnp_1.14                 SkewHyperbolic_0.3-2        spd_2.0-0                  
> stabledist_0.6-6            tools_3.1.0    
> 
> 
> 
> 
> --
> View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694078.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From ole.bueker at outlook.com  Wed Jul 16 11:31:04 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Wed, 16 Jul 2014 02:31:04 -0700 (PDT)
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <53C6416D.3050401@4dscape.com>
References: <1392738243146-4685490.post@n4.nabble.com>
	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>
	<1401211931020-4691313.post@n4.nabble.com>
	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>
	<1401217345854-4691323.post@n4.nabble.com>
	<5384EF68.9060201@4dscape.com>
	<1405497634951-4694076.post@n4.nabble.com>
	<53C63656.2070407@4dscape.com>
	<1405500765427-4694078.post@n4.nabble.com>
	<53C6416D.3050401@4dscape.com>
Message-ID: <1405503064866-4694082.post@n4.nabble.com>

Updating said packages have solved the convergence problems for me.



--
View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694082.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From alexios at 4dscape.com  Wed Jul 16 11:49:21 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Wed, 16 Jul 2014 10:49:21 +0100
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <1405503064866-4694082.post@n4.nabble.com>
References: <1392738243146-4685490.post@n4.nabble.com>	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>	<1401211931020-4691313.post@n4.nabble.com>	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>	<1401217345854-4691323.post@n4.nabble.com>	<5384EF68.9060201@4dscape.com>	<1405497634951-4694076.post@n4.nabble.com>	<53C63656.2070407@4dscape.com>	<1405500765427-4694078.post@n4.nabble.com>	<53C6416D.3050401@4dscape.com>
	<1405503064866-4694082.post@n4.nabble.com>
Message-ID: <53C64AA1.2050507@4dscape.com>

The updated version now has an additional argument in the ugarchfit
method called "numderiv.control" which effectively allows fine tuning of
the options for the numerical evaluation of the gradient and hessian
during the post-estimation phase (and passed to the numDeriv package's
jacobian and hessian functions). This was deemed necessary since "one
size does not fit all".

Alexios

On 16/07/2014 10:31, Ole Bueker wrote:
> Updating said packages have solved the convergence problems for me.
> 
> 
> 
> --
> View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694082.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From thibaut.vernay at outlook.com  Wed Jul 16 14:50:12 2014
From: thibaut.vernay at outlook.com (tvernay)
Date: Wed, 16 Jul 2014 05:50:12 -0700 (PDT)
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <53C64AA1.2050507@4dscape.com>
References: <1401211931020-4691313.post@n4.nabble.com>
	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>
	<1401217345854-4691323.post@n4.nabble.com>
	<5384EF68.9060201@4dscape.com>
	<1405497634951-4694076.post@n4.nabble.com>
	<53C63656.2070407@4dscape.com>
	<1405500765427-4694078.post@n4.nabble.com>
	<53C6416D.3050401@4dscape.com>
	<1405503064866-4694082.post@n4.nabble.com>
	<53C64AA1.2050507@4dscape.com>
Message-ID: <1405515012835-4694089.post@n4.nabble.com>

Thanks a lot for this improvement Alexios! All the best, cheers!



--
View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4694089.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From ecjbosu at aol.com  Thu Jul 17 02:53:41 2014
From: ecjbosu at aol.com (Joe W. Byers)
Date: Wed, 16 Jul 2014 19:53:41 -0500
Subject: [R-SIG-Finance] Performance Analytics Package Questions
Message-ID: <53C71E95.3050309@aol.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140716/658f11f6/attachment.pl>

From ndc24075 at gmail.com  Fri Jul 18 10:30:27 2014
From: ndc24075 at gmail.com (Eric (YEN-LIN) CHIU)
Date: Fri, 18 Jul 2014 16:30:27 +0800
Subject: [R-SIG-Finance] Receiving market data by iBroker and implementing
	strategy
Message-ID: <CAPpJ=CzZ5ssvWRHoa_crFWtd4a7=P6D0x8d79jy8sH1J=GrYcA@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140718/de92f885/attachment.pl>

From pierre at lequeux.org  Fri Jul 18 11:57:58 2014
From: pierre at lequeux.org (Pierre Org)
Date: Fri, 18 Jul 2014 10:57:58 +0100
Subject: [R-SIG-Finance] Self Organisin Map  / kohonen package
Message-ID: <001c01cfa26e$c1dd45c0$4597d140$@org>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140718/dc453ac5/attachment.pl>

From zadig_1 at excite.com  Fri Jul 18 19:40:26 2014
From: zadig_1 at excite.com (ce)
Date: Fri, 18 Jul 2014 13:40:26 -0400
Subject: [R-SIG-Finance] Receiving market data by iBroker and
	implementing	strategy
Message-ID: <20140718134026.2654@web002.roc2.bluetie.com>


you need two programs run in parallel as R is not multi threaded. check http://censix.com/download/

Part A reads real time data writes to a mmap file. 
Part B loops, checks for new data and trades . 

-----Original Message-----
From: "Eric (YEN-LIN) CHIU" [ndc24075 at gmail.com]
Date: 07/18/2014 04:31 AM
To: r-sig-finance at r-project.org
Subject: [R-SIG-Finance] Receiving market data by iBroker and implementing
	strategy

My goal is to let R implement a strategy instantly when I get the right
signal(market price).

But now I am stuck at the point that when I call function "reqMktData" to
receive real-time data, I found R will be occupied unless I manually stop
it or I ask to return snapshot data.

I was wondering if anyone can provide a working example that collects real
time data through IBrokers and allows trading logic to be executed? For
instance, I would like IBroker keeps updating the market data in real time
and I can also analyse the data using R at the same time.

Even though I may be able to write a while loop to get real-time data for
the latter case, I found it very slow compared to what I want it to be
(each call of reqMktData will take a few seconds).

I have spent a few days searching for solutions and found nothing. Hope
this is not a bad question. Thank you!

	[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From luandrew at qq.com  Tue Jul 22 07:31:15 2014
From: luandrew at qq.com (=?utf-8?B?QW5keSBMdQ==?=)
Date: Tue, 22 Jul 2014 13:31:15 +0800
Subject: [R-SIG-Finance] A problem of  parameter set can not be effect
Message-ID: <tencent_650E7B2041C745C904C9EFEE@qq.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140722/e0d7eec2/attachment.pl>

From ilya.kipnis at gmail.com  Tue Jul 22 07:38:06 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Tue, 22 Jul 2014 01:38:06 -0400
Subject: [R-SIG-Finance] A problem of parameter set can not be effect
In-Reply-To: <tencent_650E7B2041C745C904C9EFEE@qq.com>
References: <tencent_650E7B2041C745C904C9EFEE@qq.com>
Message-ID: <CA+oJuEEC1oSTvmZHpzS4fNWvrmQwCLm4bT5KyEitOj-mG4gQpw@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140722/1ef13f71/attachment.pl>

From luandrew at qq.com  Tue Jul 22 07:43:37 2014
From: luandrew at qq.com (=?utf-8?B?QW5keSBMdQ==?=)
Date: Tue, 22 Jul 2014 13:43:37 +0800
Subject: [R-SIG-Finance] A problem of parameter set can not be effect
In-Reply-To: <CA+oJuEEC1oSTvmZHpzS4fNWvrmQwCLm4bT5KyEitOj-mG4gQpw@mail.gmail.com>
References: <tencent_650E7B2041C745C904C9EFEE@qq.com>
	<CA+oJuEEC1oSTvmZHpzS4fNWvrmQwCLm4bT5KyEitOj-mG4gQpw@mail.gmail.com>
Message-ID: <tencent_3AFEDC5F56E724CD670D6797@qq.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140722/2d9b0eb5/attachment.pl>

From ilya.kipnis at gmail.com  Tue Jul 22 15:41:51 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Tue, 22 Jul 2014 09:41:51 -0400
Subject: [R-SIG-Finance] A problem of parameter set can not be effect
In-Reply-To: <tencent_3AFEDC5F56E724CD670D6797@qq.com>
References: <tencent_650E7B2041C745C904C9EFEE@qq.com>
	<CA+oJuEEC1oSTvmZHpzS4fNWvrmQwCLm4bT5KyEitOj-mG4gQpw@mail.gmail.com>
	<tencent_3AFEDC5F56E724CD670D6797@qq.com>
Message-ID: <CA+oJuEH+YaUDxftv+J5qxpEnV0i0wWSFG4LAdx9L_=nVa4azrQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140722/6bda8ae2/attachment.pl>

From rlong011 at verizon.net  Tue Jul 22 18:44:50 2014
From: rlong011 at verizon.net (Richard Long)
Date: Tue, 22 Jul 2014 11:44:50 -0500 (CDT)
Subject: [R-SIG-Finance] demo("luxor.8.walk.forward") Error in if (!all(i <=
 0)) stop("only zeros may be mixed with negative subscripts") : missing
 value where TRUE/FALSE needed
Message-ID: <9383169.1351056.1406047490353.JavaMail.root@vznit170184>

An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140722/786d4e99/attachment.html>

From josh.m.ulrich at gmail.com  Tue Jul 22 18:53:09 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Tue, 22 Jul 2014 11:53:09 -0500
Subject: [R-SIG-Finance] demo("luxor.8.walk.forward") Error in if
 (!all(i <= 0)) stop("only zeros may be mixed with negative subscripts") :
 missing value where TRUE/FALSE needed
In-Reply-To: <9383169.1351056.1406047490353.JavaMail.root@vznit170184>
References: <9383169.1351056.1406047490353.JavaMail.root@vznit170184>
Message-ID: <CAPPM_gQS0krxPvQHeb1d5799DAgcAs6kZbFsEpgw3VM5NfjV5w@mail.gmail.com>

Richard,

As the posting guide says, please don't send HTML.
http://www.r-project.org/mail.html#instructions

Your message is nearly unreadable.
https://stat.ethz.ch/pipermail/r-sig-finance/2014q3/012607.html

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Tue, Jul 22, 2014 at 11:44 AM, Richard Long <rlong011 at verizon.net> wrote:
> I've been trying to get  the Luxor demo to work.  I have 1 through 7 working
> and have modified to my needs and have working, but the walk.forward, which
> to me is key,
> fails running the demo as delivered in the latest release:
>
> demo("luxor.8.walk.forward")
> walk.forward> > r <- walk.forward(strategy.st, paramset.label='WFA',
> portfolio.st=portfolio.st, account.st=account.st, period='months',
>  k.training=3, k.testing=1, obj.func=my.obj.func,
> obj.args=list(x=quote(result$apply.paramset)), user.func=ess,
>  user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st),
> audit.prefix='wfa', anchored=FALSE, verbose=TRUE)
> Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative
> subscripts") :   missing value where TRUE/FALSE needed
>
> I thought the error might be the results of the period being months and
> k.traing=3 and k.testing=1 and the data only having 10 days so
> I tried period= days.  It got in to the WFA and then failed.
>
> demo("luxor.8.walk.forward")
>> r <- walk.forward(strategy.st, paramset.label='WFA',
>> portfolio.st=portfolio.st, account.st=account.st, period='days',
>  k.training=3, k.testing=1, obj.func=my.obj.func,
> obj.args=list(x=quote(result$apply.paramset)), user.func=ess,
>  user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st),
> audit.prefix='wfa', anchored=FALSE, verbose=TRUE)
> [1] "=== training WFA on 2002-10-21 00:30:00/2002-10-23 23:30:00"Error in
> walk.forward(strategy.st, paramset.label = "WFA", portfolio.st =
> portfolio.st,  :
>   obj.func() returned empty resultIn addition: Warning message:In
> max(x$user.func$GBPUSD.DailyEndEq) :  no non-missing arguments to max;
> returning -Inf
>
> Using my own data with 6 months of data and period=months:
>
> GBPUSD <-
> to.daily(readRDS("/dataIII/RData/gbpusd_2014-01-06v.rds"),OHLC=FALSE)[,c(1,2,3,4,9)]GBPUSD
> = align.time(GBPUSD, 86400)GBPUSD<-GBPUSD["2014-01-02 00:00:00/2014-06-30
> 00:00:00"]head(GBPUSD)           Bid_Open Bid_High Bid_Low Bid_Close
> Vol2014-01-02  1.65501  1.65501 1.65501   1.65501  1.500002014-01-03
> 1.64427  1.64427 1.64426   1.64426  4.129992014-01-04  1.64269  1.64269
> 1.64269   1.64269  2.000002014-01-05  1.64171  1.64171 1.64171   1.64171
> 1.500002014-01-07  1.64129  1.64129 1.64124   1.64124 15.159992014-01-08
> 1.64234  1.64234 1.64232   1.64232  9.829982014-01-08  1.64234  1.64234
> 1.64232   1.64232  9.82998
>
> I get:
>
> ### walk.forward> > r <- walk.forward(strategy.st, paramset.label='WFA',
> portfolio.st=portfolio.st, account.st=account.st, period='months',
> k.training=3, k.testing=1, obj.func=my.obj.func,
> obj.args=list(x=quote(result$apply.paramset)), user.func=ess,
> user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st),
> audit.prefix='wfa', anchored=FALSE, verbose=TRUE)[1] "=== training WFA on
> 2014-01-02/2014-03-30"numValues: 15, numResults: 0, stopped: TRUEgot results
> for task 1numValues: 15, numResults: 1, stopped: TRUEreturning status
> FALSEgot results for task 2numValues: 15, numResults: 2, stopped:
> TRUEreturning status FALSEgot results for task 3numValues: 15, numResults:
> 3, stopped: TRUEreturning status FALSEgot results for task 4numValues: 15,
> numResults: 4, stopped: TRUEreturning status FALSEgot results for task
> 5numValues: 15, numResults: 5, stopped: TRUEreturning status FALSEgot
> results for task 6numValues: 15, numResults: 6, stopped: TRUEreturning
> status FALSEgot results for task 7numValues: 15, numResults: 7, stopped:
> TRUEreturning status FALSEgot results for task 8numValues: 15, numResults:
> 8, stopped: TRUEreturning status FALSEgot results for task 9numValues: 15,
> numResults: 9, stopped: TRUEreturning status FALSEgot results for task
> 10numValues: 15, numResults: 10, stopped: TRUEreturning status FALSEgot
> results for task 11numValues: 15, numResults: 11, stopped: TRUEreturning
> status FALSEgot results for task 12numValues: 15, numResults: 12, stopped:
> TRUEreturning status FALSEgot results for task 13numValues: 15, numResults:
> 13, stopped: TRUEreturning status FALSEgot results for task 14numValues: 15,
> numResults: 14, stopped: TRUEreturning status FALSEgot results for task
> 15numValues: 15, numResults: 15, stopped: TRUEfirst call to combine
> functionevaluating call object to combine results:  fun(result.1, result.2,
> result.3, result.4, result.5, result.6,     result.7, result.8, result.9,
> result.10, result.11, result.12,     result.13, result.14,
> result.15)returning status TRUE[1] "=== testing param.combo 5 on
> 2014-04-01/2014-04-30"  nFAST nSLOW5     9    42Error in runSum(x, n) :
> Invalid 'n'
>
> The 1st wfa appears to work but it fails in the testing phase and I don't
> know if the problem is
> in my data or my code.
>
> This the demo code alterations highlighted:
<snip>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.


From rlong011 at verizon.net  Tue Jul 22 19:02:55 2014
From: rlong011 at verizon.net (Richard Long)
Date: Tue, 22 Jul 2014 12:02:55 -0500 (CDT)
Subject: [R-SIG-Finance] demo("luxor.8.walk.forward") Error in if (!all(i <=
 0)) stop("only zeros may be mixed with negative subscripts") : missing
 value where TRUE/FALSE needed
Message-ID: <25858814.1353061.1406048575758.JavaMail.root@vznit170184>

Resend of html message

I've been trying to get the Luxor demo to work. I have 1 through 7 working and have modified to my needs and have working, but the walk.forward, which to me is key,
fails running the demo as delivered in the latest release:

demo("luxor.8.walk.forward")
walk.forward> > r <- walk.forward(strategy.st, paramset.label='WFA', portfolio.st=portfolio.st, account.st=account.st, period='months',
 k.training=3, k.testing=1, obj.func=my.obj.func, obj.args=list(x=quote(result$apply.paramset)), user.func=ess,
 user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st), audit.prefix='wfa', anchored=FALSE, verbose=TRUE)
Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative subscripts") : missing value where TRUE/FALSE needed

I thought the error might be the results of the period being months and k.traing=3 and k.testing=1 and the data only having 10 days so 
I tried period= days. It got in to the WFA and then failed.

demo("luxor.8.walk.forward")
> r <- walk.forward(strategy.st, paramset.label='WFA', portfolio.st=portfolio.st, account.st=account.st, period='days',
 k.training=3, k.testing=1, obj.func=my.obj.func, obj.args=list(x=quote(result$apply.paramset)), user.func=ess,
 user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st), audit.prefix='wfa', anchored=FALSE, verbose=TRUE)
[1] "=== training WFA on 2002-10-21 00:30:00/2002-10-23 23:30:00"Error in walk.forward(strategy.st, paramset.label = "WFA", portfolio.st = portfolio.st, : 
 obj.func() returned empty resultIn addition: Warning message:In max(x$user.func$GBPUSD.DailyEndEq) : no non-missing arguments to max; returning -Inf

Using my own data with 6 months of data and period=months:

GBPUSD <- to.daily(readRDS("/dataIII/RData/gbpusd_2014-01-06v.rds"),OHLC=FALSE)[,c(1,2,3,4,9)]GBPUSD = align.time(GBPUSD, 86400)GBPUSD<-GBPUSD["2014-01-02 00:00:00/2014-06-30 00:00:00"]head(GBPUSD) Bid_Open Bid_High Bid_Low Bid_Close Vol2014-01-02 1.65501 1.65501 1.65501 1.65501 1.500002014-01-03 1.64427 1.64427 1.64426 1.64426 4.129992014-01-04 1.64269 1.64269 1.64269 1.64269 2.000002014-01-05 1.64171 1.64171 1.64171 1.64171 1.500002014-01-07 1.64129 1.64129 1.64124 1.64124 15.159992014-01-08 1.64234 1.64234 1.64232 1.64232 9.829982014-01-08 1.64234 1.64234 1.64232 1.64232 9.82998

I get:

### walk.forward> > r <- walk.forward(strategy.st, paramset.label='WFA', portfolio.st=portfolio.st, account.st=account.st, period='months', k.training=3, k.testing=1, obj.func=my.obj.func, obj.args=list(x=quote(result$apply.paramset)), user.func=ess, user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st), audit.prefix='wfa', anchored=FALSE, verbose=TRUE)[1] "=== training WFA on 2014-01-02/2014-03-30"numValues: 15, numResults: 0, stopped: TRUEgot results for task 1numValues: 15, numResults: 1, stopped: TRUEreturning status FALSEgot results for task 2numValues: 15, numResults: 2, stopped: TRUEreturning status FALSEgot results for task 3numValues: 15, numResults: 3, stopped: TRUEreturning status FALSEgot results for task 4numValues: 15, numResults: 4, stopped: TRUEreturning status FALSEgot results for task 5numValues: 15, numResults: 5, stopped: TRUEreturning status FALSEgot results for task 6numValues: 15, numResults: 6, stopped: TRUEreturning status FALSEgot results for task 7numValues: 15, numResults: 7, stopped: TRUEreturning status FALSEgot results for task 8numValues: 15, numResults: 8, stopped: TRUEreturning status FALSEgot results for task 9numValues: 15, numResults: 9, stopped: TRUEreturning status FALSEgot results for task 10numValues: 15, numResults: 10, stopped: TRUEreturning status FALSEgot results for task 11numValues: 15, numResults: 11, stopped: TRUEreturning status FALSEgot results for task 12numValues: 15, numResults: 12, stopped: TRUEreturning status FALSEgot results for task 13numValues: 15, numResults: 13, stopped: TRUEreturning status FALSEgot results for task 14numValues: 15, numResults: 14, stopped: TRUEreturning status FALSEgot results for task 15numValues: 15, numResults: 15, stopped: TRUEfirst call to combine functionevaluating call object to combine results: fun(result.1, result.2, result.3, result.4, result.5, result.6, result.7, result.8, result.9, result.10, result.11, result.12, result.13, result.14, result.15)returning status TRUE[1] "=== testing param.combo 5 on 2014-04-01/2014-04-30" nFAST nSLOW5 9 42Error in runSum(x, n) : Invalid 'n'

The 1st wfa appears to work but it fails in the testing phase and I don't know if the problem is
in my data or my code.

This the demo code alterations highlighted:

#!/usr/bin/Rscript --vanilla
#
# Jan Humme (@opentrades) - April 2013
#
# Tested and found to work correctly using blotter r1457
#
# After Jaekle & Tamasini: A new approach to system development and portfolio optimisation (ISBN 978-1-905641-79-6)
#
# Paragraph 3.7 walk forward analysis

require(quantstrat)

source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
#source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))
GBPUSD <- to.daily(readRDS("/dataIII/RData/gbpusd_2014-01-06v.rds"),OHLC=FALSE)[,c(1,2,3,4,9)]
GBPUSD = align.time(GBPUSD, 86400)
GBPUSD<-GBPUSD["2014-01-02 00:00:00/2014-06-30 00:00:00"]
head(GBPUSD)

### foreach and doMC

require(foreach)
require(doMC)
registerDoMC(cores=8)

### blotter

initPortf(portfolio.st, symbols='GBPUSD', initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD', initEq=100000)

### quantstrat

initOrders(portfolio.st, initDate=initDate)

load.strategy(strategy.st)

enable.rule(strategy.st, 'chain', 'StopLoss')
#enable.rule(strategy.st, 'chain', 'StopTrailing')
enable.rule(strategy.st, 'chain', 'TakeProfit')

addPosLimit(
 portfolio=portfolio.st,
 symbol='GBPUSD',
 timestamp=initDate,
 maxpos=.orderqty)

### objective function

ess <- function(account.st, portfolio.st)
{
 require(robustbase, quietly=TRUE)
 require(PerformanceAnalytics, quietly=TRUE)

 portfolios.st <- ls(pos=.blotter, pattern=paste('portfolio', portfolio.st, '[0-9]*',sep='.'))
 pr <- PortfReturns(Account = account.st, Portfolios=portfolios.st)

 my.es <- ES(R=pr, clean='boudt')

 return(my.es)
}

my.obj.func <- function(x)
{
 # pick one of the following objective functions (uncomment)

 #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)

 #return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)

 return(max(x$user.func$GBPUSD.DailyEndEq) == x$user.func$GBPUSD.DailyEndEq)
}

### walk.forward

r <- walk.forward(strategy.st, paramset.label='WFA', portfolio.st=portfolio.st, account.st=account.st, period='months', 
k.training=3, k.testing=1, obj.func=my.obj.func, obj.args=list(x=quote(result$apply.paramset)), user.func=ess,
user.args=list('account.st'=account.st, 'portfolio.st'=portfolio.st), audit.prefix='wfa', anchored=FALSE, verbose=TRUE)

### analyse

pdf(paste('GBPUSD', .from, .to, 'pdf', sep='.'))
chart.Posn(portfolio.st)
dev.off()

ts <- tradeStats(portfolio.st)
save(ts, file=paste('GBPUSD', .from, .to, 'RData', sep='.'))


From claymorejmarshall at gmail.com  Wed Jul 23 22:52:44 2014
From: claymorejmarshall at gmail.com (Claymore Marshall)
Date: Wed, 23 Jul 2014 16:52:44 -0400
Subject: [R-SIG-Finance] appending new data to a file with the mmap package
Message-ID: <CAFN9EfNNUppQ0W3q33wxQzbH+d=b6gsVWK=qwhm55dm8c1PnkQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140723/1186c33c/attachment.pl>

From daniel.cegielka at gmail.com  Wed Jul 23 23:21:42 2014
From: daniel.cegielka at gmail.com (=?UTF-8?Q?Daniel_Cegie=C5=82ka?=)
Date: Wed, 23 Jul 2014 23:21:42 +0200
Subject: [R-SIG-Finance] appending new data to a file with the mmap
	package
In-Reply-To: <CAFN9EfNNUppQ0W3q33wxQzbH+d=b6gsVWK=qwhm55dm8c1PnkQ@mail.gmail.com>
References: <CAFN9EfNNUppQ0W3q33wxQzbH+d=b6gsVWK=qwhm55dm8c1PnkQ@mail.gmail.com>
Message-ID: <CAPLrYERpOfVyYxBxy+2PTnDchisb382vQ6xV4LqkWck=36XoXA@mail.gmail.com>

2014-07-23 22:52 GMT+02:00 Claymore Marshall <claymorejmarshall at gmail.com>:
> This is about Jeff Ryan's mmap package (for which documentation is sparse).
>
> My problem: I'm wondering what an effective way to *append* to an existing
> mmapped file which is already "full of data" would be. e.g. simple case: if
> the file contains 100 rows of data (as represented by mmap in R), I want to
> add say another 5 rows of new data, giving a new total of 105 rows of data.
> Surely many others have dealt with this problem before.  A common case
> would be appending new tick data to a large file via mmap.
>
> A quick search on SO gives a few discussions about remapping (mremap?) the
> mmap in general, as a method for appending to an existing mmapped file, but
> I haven't found that functionality to be available in the R mmap package.

I'm not sure if mremap is portable (e.g. windows).


> One related approach/solution, but not quite the same, as shown very kindly
> by the author of the code at http://censix.com/, is to update to a
> preallocated mmap in a file with a very large number of rows prefilled with
> NAs. But this approach requires making new files/"volumes" as the existing
> files fill up.  Furthermore, I'm not quite sure if there is a clean way to
> aggregate data for a given security which might be split across multiple
> files.  For example, say I have tick data files for each month; one for
> Jan, one for feb, one for march, etc.  Now suppose I want to pull into R
> the tick data just for 29 May 2014 to 3 June 2014, which is split across 2
> files?  I have to load into memory both files (or portions of them with
> mmap), and merge the data.  It would seem it would just be easier to append
> to one file to begin with, rather than split across files.

This solution makes sense and is called partitioning and used for
large data., e.g. ticks in kdb+

http://code.kx.com/wiki/Cookbook/LoadingFromLargeFiles

I'm afraid that partitioning can hit performance etc.

I hope that there will be more ideas here...
Best regards,
Daniel


From luandrew at qq.com  Thu Jul 24 07:14:28 2014
From: luandrew at qq.com (Andylu)
Date: Wed, 23 Jul 2014 22:14:28 -0700 (PDT)
Subject: [R-SIG-Finance] Fw: stochastic oscillator OBOS - intraday data
	& optimization
In-Reply-To: <CA+oJuEERywhrMxvMtn3nV8VvK53h-XBJ8BJG6A3SCCzKZh7MSg@mail.gmail.com>
References: <1397165204.93071.YahooMailNeo@web186001.mail.ir2.yahoo.com>
	<1397716877.71309.YahooMailNeo@web186002.mail.ir2.yahoo.com>
	<CA+oJuEG70Zf1UeP7Tg8qxke6NfwVzAtgv9BPPEpcEL1Dk2zBQA@mail.gmail.com>
	<CA+oJuEERywhrMxvMtn3nV8VvK53h-XBJ8BJG6A3SCCzKZh7MSg@mail.gmail.com>
Message-ID: <1406178868115-4694456.post@n4.nabble.com>

     hi, I also encounter this problem when optimizing with error message
"<simpleError in fun(result.1, result.2, result.3, result.4, result.5,
result.6,     result.7, result.8, result.9, result.10): attempt to select
less than one element>".
     It seems that you have resolved this problem with Amarjit, but I can
understand what this sentence mean:  "Can you reinstall the quantstrat
package and copy and paste the applyStrategy call from inside apply.paramset
says? "
      Can you explain in more detail? Thanks very much.




--
View this message in context: http://r.789695.n4.nabble.com/stochastic-oscillator-OBOS-intraday-data-optimization-tp4688575p4694456.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From a.chandhial at btinternet.com  Thu Jul 24 09:08:52 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 24 Jul 2014 08:08:52 +0100 (BST)
Subject: [R-SIG-Finance] Fw: stochastic oscillator OBOS - intraday
	data	& optimization
In-Reply-To: <1406178868115-4694456.post@n4.nabble.com>
References: <1397165204.93071.YahooMailNeo@web186001.mail.ir2.yahoo.com>
	<1397716877.71309.YahooMailNeo@web186002.mail.ir2.yahoo.com>
	<CA+oJuEG70Zf1UeP7Tg8qxke6NfwVzAtgv9BPPEpcEL1Dk2zBQA@mail.gmail.com>
	<CA+oJuEERywhrMxvMtn3nV8VvK53h-XBJ8BJG6A3SCCzKZh7MSg@mail.gmail.com>
	<1406178868115-4694456.post@n4.nabble.com>
Message-ID: <32335713.2240.1406185732791.JavaMail.defaultUser@defaultHost>



 If my memory serves me correct there was a label missing with add.distribution in the optimization.


 add.distribution(strategy.st,
                 paramset.label="stochDist",
                 component.type='indicator',
                 component.label="stoch",                   #THE COMPONENT LABEL IS THE LABEL ARGUMENT FROM THE ADD.INDICATOR FUNCTION.
                 variable=list(nSlowD=.nSlowD),
                 label="nSlowDdist")


 Attached is a version which works.


 Amarjit




----Original message----
>From : luandrew at qq.com
Date : 24/07/2014 - 06:14 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] Fw: stochastic oscillator OBOS - intraday data	& optimization

     hi, I also encounter this problem when optimizing with error message
"<simpleError in fun(result.1, result.2, result.3, result.4, result.5,
result.6,     result.7, result.8, result.9, result.10): attempt to select
less than one element>".
     It seems that you have resolved this problem with Amarjit, but I can
understand what this sentence mean:  "Can you reinstall the quantstrat
package and copy and paste the applyStrategy call from inside apply.paramset
says? "
      Can you explain in more detail? Thanks very much.




--
View this message in context: http://r.789695.n4.nabble.com/stochastic-oscillator-OBOS-intraday-data-optimization-tp4688575p4694456.html
Sent from the Rmetrics mailing list archive at Nabble.com.

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: ac_stochOSC_OBOS_GBPUSD_vanilla_and_optimization.R
Type: application/octet-stream
Size: 12405 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140724/24975ce2/attachment.obj>

From petercaya at gmail.com  Fri Jul 25 15:18:13 2014
From: petercaya at gmail.com (Peter Caya)
Date: Fri, 25 Jul 2014 09:18:13 -0400
Subject: [R-SIG-Finance] Trouble Installing Quantmod
Message-ID: <CAD2C-NoUfAB4MjXoZ+gy-+aibM6d199vXH113ve9+PJc3y=9ZA@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140725/38366793/attachment.pl>

From josh.m.ulrich at gmail.com  Fri Jul 25 15:24:41 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Fri, 25 Jul 2014 08:24:41 -0500
Subject: [R-SIG-Finance] Trouble Installing Quantmod
In-Reply-To: <CAD2C-NoUfAB4MjXoZ+gy-+aibM6d199vXH113ve9+PJc3y=9ZA@mail.gmail.com>
References: <CAD2C-NoUfAB4MjXoZ+gy-+aibM6d199vXH113ve9+PJc3y=9ZA@mail.gmail.com>
Message-ID: <CAPPM_gQteYzd8qHtXPhcr6XfnKpnwnXWeZkeAj4LZumG=oNpuw@mail.gmail.com>

 Fri, Jul 25, 2014 at 8:18 AM, Peter Caya <petercaya at gmail.com> wrote:
> Hi everyone,
>
> I recently migrated to Linux from Windows and have R installed on my
> computer with no problems with one exception: I can't install quantmod or
> TTR.
>
> When I use the command:
>
> install.packages("TTR")
>
> I get the below message:
>
> *Installing package into ?/home/peter/R/x86_64-pc-linux-gnu-library/3.0?
> (as ?lib? is unspecified)
> trying URL 'http://cran.rstudio.com/src/contrib/TTR_0.22-0.tar.gz
> <http://cran.rstudio.com/src/contrib/TTR_0.22-0.tar.gz>'
> Content type 'application/x-gzip' length 302852 bytes (295 Kb)
> opened URL
> ==================================================
> downloaded 295 Kb
>
> * installing *source* package ?TTR? ...
> ** package ?TTR? successfully unpacked and MD5 sums checked
> ** libs
> gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG
> -I"/usr/lib/R/site-library/xts/include"   -fpic  -O3 -pipe  -g  -c
> adjRatios.c -o adjRatios.o
> gcc -std=gnu99 -I/usr/share/R/include -DNDEBUG
> -I"/usr/lib/R/site-library/xts/include"   -fpic  -O3 -pipe  -g  -c
> aroon.c -o aroon.o
> gfortran   -fpic  -O3 -pipe  -g  -c movingAverages.f -o movingAverages.o
> /bin/bash: gfortran: command not found
> make: *** [movingAverages.o] Error 127
> ERROR: compilation failed for package ?TTR?
> * removing ?/home/peter/R/x86_64-pc-linux-gnu-library/3.0/TTR?
> Warning in install.packages :
>   installation of package ?TTR? had non-zero exit status
>
> The downloaded source packages are in
>         ?/tmp/RtmpjtCmgS/downloaded_packages?*
>
>
>
> The problem is that this doesn't show up in the packages listing in R
> Studio and when I attempt to load it with the library() command I get the
> below response:
>
> *Error in library(TTR) : ?TTR? is not a valid installed package*
>
As you should expect, since "installation of package ?TTR? had
non-zero exit status".

>
>
> This continues even though I have used the lib.loc command to try to
> install these directly to the directory where the other packages are.
> Additionally, I have also manually moved them to said directory but
> with no luck.
>
That won't help. The package didn't build.

>
> Any help would be greatly appreciated!
>
Look at the output carefully, and notice "gfortran: command not
found".  You need C/Fortran compilers to build from source.  See:
http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Essential-and-useful-other-programs-under-a-Unix_002dalike

>
> Thank you,
>
>
> --
> Peter Caya
>
>         [[alternative HTML version deleted]]
>
>

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From josh.m.ulrich at gmail.com  Sun Jul 27 03:26:59 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Sat, 26 Jul 2014 20:26:59 -0500
Subject: [R-SIG-Finance] Luxor strategy (quantstrat) - Why are
 successive short (and long) trades happening ?
In-Reply-To: <CAPA9881wO=uLHE0-V1sh_8gHtWLFOEV0hOcyV0cFQFw2yH4bRg@mail.gmail.com>
References: <CAPA9880DQtewHBRi=B-9PzonLuvU-gEHbCXYN7ZY0zMkvTrABw@mail.gmail.com>
	<1399507505595-4690163.post@n4.nabble.com>
	<CAPPM_gREytDoV27xBLpZ-M_3L8Ni=arsGb7gkPo0H-aEGS+U+A@mail.gmail.com>
	<CAPA9881vntWtiyjr9NrymAu==+PxD7HVfdQ2cxWp7j9M_crOOg@mail.gmail.com>
	<CAPPM_gSa1=ZZa66ceVz7vjcqVvUEuJemQSUbUwY1B-0KridEUg@mail.gmail.com>
	<1399745861.24638.YahooMailNeo@web186003.mail.ir2.yahoo.com>
	<CAPA9881wO=uLHE0-V1sh_8gHtWLFOEV0hOcyV0cFQFw2yH4bRg@mail.gmail.com>
Message-ID: <CAPPM_gQ5g79FWSLoG3_0PjOPeP-5-gTi_mkSXXTMpaVpui=hSg@mail.gmail.com>

Hi Pablo,

I just looked into this with Brian Peterson and Guy Yollin.  It
appears a bug was accidentally introduced in r1594.  This should be
fixed in r1625.  Thanks for the report, and sorry the fix took so
long.

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Sat, May 10, 2014 at 5:02 PM, Pablo Rios <pablo.javier.rios at gmail.com> wrote:
> I am also unclear about results Amarjit.
>
> Furthermore, why is the position = 0.0 after entering long at 2002-10-30
> 13:00:00 (see flat Positionfill and CumPL lines) ? There's a long signal at
> 2002-10-30 12:00:00 (see mktdata xts object) and the condition to enter long
> is satisfied (i.e.: .threshold) at 13:00:00 (see order book). Is this
> another anomaly with blotter/quantstrat ?
>
> Pablo
>
>
>
> On Sat, May 10, 2014 at 3:17 PM, amarjit chandhial
> <a.chandhial at btinternet.com> wrote:
>>
>>
>>
>> I am unclear. There are 3 different results, which of these is correct ?
>>
>>
>> (a) Humme, Peterson pp.34/78
>> http://www.rinfinance.com/agenda/2013/workshop/Humme+Peterson.pdf
>>
>>
>>
>> (b) Guy Yollin pp.24/78
>>
>> https://4310b1a9-a-a8fb2076-s-sites.googlegroups.com/a/r-programming.org/home/files/quantstrat-IV.pdf?attachauth=ANoY7cojS8K93NCMEI2gr1eWPE6nFGkEZAncLma__qYUXHgRzbbQCi1zrOZa5DnAANVw6nGZU9ppV1s69und3U7_uErEyb18pGOyH0UJsXtCsndrvcZWR4fB4mIJePELsQcuf3ksoDg3w7JV0TH_kpR3NDGBiDYzX9f43piDIk6vhfK5JMK68K1K7yqCZcHZ0krZzhRJ9Wq3KIZt5-399IqQ-Eeytar1o2n-VpqgoBIefXlC5iT6rlM%3D&attredirects=0
>>
>>
>>
>> (c) The latest run of the demo, blotter(rev 1607), quantstrat(rev 1610) -
>> chart.Posn attached.
>>
>>
>>
>> Amarjit
>>
>>
>>
>> From: Joshua Ulrich <josh.m.ulrich at gmail.com>
>> To: Pablo Rios <pablo.javier.rios at gmail.com>
>> Cc: r-sig-finance <r-sig-finance at r-project.org>
>> Sent: Friday, 9 May 2014, 12:26
>>
>> Subject: Re: [R-SIG-Finance] Luxor strategy (quantstrat) - Why are
>> successive short (and long) trades happening ?
>>
>> On Thu, May 8, 2014 at 11:09 PM, Pablo Rios <pablo.javier.rios at gmail.com>
>> wrote:
>> > Thanks for your quick response Joshua.
>> >
>> > Does the code changes in r1609 intend to fix the successive short (or
>> > long)
>> > trades that I'm describing in my email, or only the Warning: stack
>> > imbalance
>> > in 'lapply' message ? Although this warning message is no longer
>> > reported,
>> > and the results of the Luxor strategy changed after r1609 (ex.:
>> > Net.Trading.PL value changed, among other variables), I'm still
>> > observing
>> > the same behaviour of successive short (or long) trades running the
>> > Luxor
>> > demo code with the GBP/USD demo data available in quantstrat.
>> >
>> r1609 only intended to fix the stack imbalance warning (as it says in
>> the commit log).
>>
>> > Moreover, if I run luxor.1.strategy.basic.R demo code with a longer
>> > GBP/USD
>> > time series, using 30 minutes bars as in the demo data (ex.: three
>> > years), I
>> > observed up to 5 successive short trades (i.e., Pos.Qty value of
>> > GBPUSD$posPL xts object equal to -500,000) and 4 successive long trades.
>> >
>> > Further, looking at the firstCross.c in r1609 I'm seeing in the
>> > switch(int_rel) statement that all comparisons are done by greater than
>> > ('>'). I don't know whether this is correct or not.
>> >
>> That was a careless error on my part.  r1610 corrects the comparisons.
>> Thank you very much for catching this.
>>
>> > Thanks for your support, I'm eager to finally adopt quantstrat !
>> >
>> > Pablo
>> >
>> >
>> > On Thu, May 8, 2014 at 8:09 AM, Joshua Ulrich <josh.m.ulrich at gmail.com>
>> > wrote:
>> >>
>> >> On Wed, May 7, 2014 at 7:05 PM, fc_11 <jyorio at gmail.com> wrote:
>> >> > i also am getting the "Warning: stack imbalance in 'lapply'," warning
>> >> > since
>> >> > the 1608 upgrade
>> >> >
>> >> Fixed in r1609.
>> >> --
>> >> Joshua Ulrich  |  about.me/joshuaulrich
>> >> FOSS Trading  |  www.fosstrading.com
>> >>
>> >> _______________________________________________
>> >> R-SIG-Finance at r-project.org mailing list
>> >> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> >> -- Subscriber-posting only. If you want to post, subscribe first.
>> >> -- Also note that this is not the r-help list where general R questions
>> >> should go.
>> >
>> >
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>>
>>
>


From joelnkwankam at yahoo.fr  Mon Jul 28 15:59:23 2014
From: joelnkwankam at yahoo.fr (Jdiego)
Date: Mon, 28 Jul 2014 06:59:23 -0700 (PDT)
Subject: [R-SIG-Finance] simple GARCH model
In-Reply-To: <1398075517214-4689179.post@n4.nabble.com>
References: <1398075517214-4689179.post@n4.nabble.com>
Message-ID: <1406555963424-4694664.post@n4.nabble.com>

Hi,
Did you find a solution for your problem? I am also trying to implement
GARCH-MIDAS model and i have the same errors. I thing that is because of
constraints. I thing that during the optimisation process, parameters go out
to  feasible region; and lead to a negative conditional variance. I tried
with constrOptim() function (i fixed constraint for paramerter); i did not
have warnings anymore. But the estimated parameters change a lot with the
initials values. 

(i am a native french speaker;) )



--
View this message in context: http://r.789695.n4.nabble.com/simple-GARCH-model-tp4689179p4694664.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From walmir-rodrigues at uol.com.br  Tue Jul 29 19:44:20 2014
From: walmir-rodrigues at uol.com.br (walmir-rodrigues)
Date: Tue, 29 Jul 2014 14:44:20 -0300
Subject: [R-SIG-Finance] Optimization
In-Reply-To: 1406555963424-4694664.post@n4.nabble.com
References: 1398075517214-4689179.post@n4.nabble.com1406555963424-4694664.post@n4.nabble.com
Message-ID: <53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mail>

An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/0688ca56/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Indices.csv
Type: text/csv
Size: 254676 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/0688ca56/attachment.bin>

From rharlow86 at gmail.com  Tue Jul 29 21:01:15 2014
From: rharlow86 at gmail.com (Robert Harlow)
Date: Tue, 29 Jul 2014 15:01:15 -0400
Subject: [R-SIG-Finance] Optimization
In-Reply-To: <53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mail>
References: <53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mail>
Message-ID: <CAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/32f9ec21/attachment.pl>

From walmir-rodrigues at uol.com.br  Tue Jul 29 21:17:53 2014
From: walmir-rodrigues at uol.com.br (walmir-rodrigues)
Date: Tue, 29 Jul 2014 16:17:53 -0300
Subject: [R-SIG-Finance] Optimization
In-Reply-To: CAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.com
References: 53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mailCAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.com
Message-ID: <53d7f361ec3f0_271b309f83c938cd@a4-weasel1.mail>

An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/8e995b2e/attachment.html>

From rharlow86 at gmail.com  Tue Jul 29 21:50:10 2014
From: rharlow86 at gmail.com (Robert Harlow)
Date: Tue, 29 Jul 2014 15:50:10 -0400
Subject: [R-SIG-Finance] Optimization
In-Reply-To: <53d7f361ec3f0_271b309f83c938cd@a4-weasel1.mail>
References: <53d7f361ec3f0_271b309f83c938cd@a4-weasel1.mail>
Message-ID: <CAHdfS95iig35BAAKcaNZk69jGYriXg4xAHm4p8Kjo89dpP25gw@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/edf245f8/attachment.pl>

From bethpeniel at gmail.com  Tue Jul 29 21:50:54 2014
From: bethpeniel at gmail.com (Peterson Owusu Junior)
Date: Tue, 29 Jul 2014 19:50:54 +0000
Subject: [R-SIG-Finance] Optimization
In-Reply-To: <CAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.com>
References: <53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mail>
	<CAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.com>
Message-ID: <CA+vrBLDDjcsEUV5c+sjEP=CgdOSfLYkMvfU3LLv+13C8nTGWZA@mail.gmail.com>

hi Rodriguez,
find attached the delimited data set

here is how:

select one column, go to data, go to convert text to columns, go to next,
choose semicolon, then finish.


*Best regards, Peterson Owusu Junior*

*Lecturer (Finance and Mathematics)*

*Faculty of Business Administration*

*West End University College, Accra-Ghana*




* MSc. Financial Engineering B. A. Economics and Mathematics +233 269 006
397, +233 242 023 769*

*bethpeniel at gmail.com <bethpeniel at ymail.com>*


On Tue, Jul 29, 2014 at 7:01 PM, Robert Harlow <rharlow86 at gmail.com> wrote:

> Walmir,
>   In order for anyone to help you, please follow the posting guide (see
> link below).  You need to put a reproducable example in your question and
> attaching .csv files is generally not necessary, so try to avoid it if
> possible.  What did you try? Which specific function "didn't work"? Be
> specific.
>
> http://www.r-project.org/posting-guide.html
>
> Bob
>
>
>
> On Tue, Jul 29, 2014 at 1:44 PM, walmir-rodrigues <
> walmir-rodrigues at uol.com.br> wrote:
>
> > Hey everyone I tried, but don?t work, transform file to use in fPortfolio
> > package, someone can help.
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> > should go.
> >
>
>         [[alternative HTML version deleted]]
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/e814b2ab/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Indices.csv
Type: text/csv
Size: 249652 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/e814b2ab/attachment.bin>

From walmir-rodrigues at uol.com.br  Tue Jul 29 22:50:33 2014
From: walmir-rodrigues at uol.com.br (walmir-rodrigues)
Date: Tue, 29 Jul 2014 17:50:33 -0300
Subject: [R-SIG-Finance] Optimization
In-Reply-To: CAHdfS95iig35BAAKcaNZk69jGYriXg4xAHm4p8Kjo89dpP25gw@mail.gmail.com
References: 53d7f361ec3f0_271b309f83c938cd@a4-weasel1.mailCAHdfS95iig35BAAKcaNZk69jGYriXg4xAHm4p8Kjo89dpP25gw@mail.gmail.com
Message-ID: <53d80919be855_18c2241182c20971@a4-weasel12.mail>

An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140729/7d702374/attachment.html>

From lkatsets at nbg.gr  Wed Jul 30 09:23:30 2014
From: lkatsets at nbg.gr (lkatsets at nbg.gr)
Date: Wed, 30 Jul 2014 07:23:30 +0000
Subject: [R-SIG-Finance] (no subject)
Message-ID: <457D006CA1994249AC8EA0FF8D1960497E845474@V00001B450.central.nbg.gr>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140730/961868ac/attachment.pl>

From whitejakerobert at berkeley.edu  Thu Jul 31 00:02:49 2014
From: whitejakerobert at berkeley.edu (JAKE WHITE)
Date: Wed, 30 Jul 2014 17:02:49 -0500
Subject: [R-SIG-Finance] Apparent Discrepancy
Message-ID: <CABsvAEUQxz-LQ=JwF722roPDJSFG+CjFo9W2PMdJ4OfByVX2gg@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140730/bf629ece/attachment.pl>

From alexios at 4dscape.com  Thu Jul 31 00:18:39 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Wed, 30 Jul 2014 23:18:39 +0100
Subject: [R-SIG-Finance] Apparent Discrepancy
In-Reply-To: <CABsvAEUQxz-LQ=JwF722roPDJSFG+CjFo9W2PMdJ4OfByVX2gg@mail.gmail.com>
References: <CABsvAEUQxz-LQ=JwF722roPDJSFG+CjFo9W2PMdJ4OfByVX2gg@mail.gmail.com>
Message-ID: <B919A592-A8B8-42D6-8E82-DF85B27FD1A8@4dscape.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140730/dd22bead/attachment.pl>

From hs13322 at My.bristol.ac.uk  Fri Aug  1 02:44:15 2014
From: hs13322 at My.bristol.ac.uk (Cabot_Bear)
Date: Thu, 31 Jul 2014 17:44:15 -0700 (PDT)
Subject: [R-SIG-Finance] rugarch convergence problem
Message-ID: <1406853855107-4694878.post@n4.nabble.com>

Hi, Alexios

I am having convergence problem when fit a few time series using GARCH
family models. The system is continuously reporting errors i.e. solver
failer to converge or nonvalid 'nrow' value (too large or NA), depending on
the length of dataset. Some previous discussions suggested various solvers,
hence "nlminb", "gosolnp" and "nloptr" have been considered but non of them
can resolve this problem. One typical example can be found here including a
dataset and commands
https://www.dropbox.com/sh/lu8haexfz254eab/AAAstEhd9ywWuovKp8FLm5STa

Many many thanks,

Marco



--
View this message in context: http://r.789695.n4.nabble.com/rugarch-convergence-problem-tp4694878.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From alexios at 4dscape.com  Fri Aug  1 06:47:08 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Fri, 01 Aug 2014 05:47:08 +0100
Subject: [R-SIG-Finance] rugarch convergence problem
In-Reply-To: <1406853855107-4694878.post@n4.nabble.com>
References: <1406853855107-4694878.post@n4.nabble.com>
Message-ID: <53DB1BCC.7090907@4dscape.com>

Hi,

Cannot replicate the problem on my system. All series converge.
See this thread for hints:
https://stat.ethz.ch/pipermail/r-sig-finance/2014q3/012595.html

Regards,

Alexios

PS In anticipation of a further question, once you update the packages,
try using 'numderiv.control = list(hess.zero.tol=1e-7)' in the ugarchfit
function to get more sensible standard errors or
pre-multiply the returns by 100.
Also consider these 2 issues:
>length(which((Currencyret$SEK*Currencyret$CHF)<0))/nrow(Currencyret)
[1] 0.2463651
>pacf(Currencyret$SEK*Currencyret$CHF)


On 01/08/2014 01:44, Cabot_Bear wrote:
> Hi, Alexios
> 
> I am having convergence problem when fit a few time series using GARCH
> family models. The system is continuously reporting errors i.e. solver
> failer to converge or nonvalid 'nrow' value (too large or NA), depending on
> the length of dataset. Some previous discussions suggested various solvers,
> hence "nlminb", "gosolnp" and "nloptr" have been considered but non of them
> can resolve this problem. One typical example can be found here including a
> dataset and commands
> https://www.dropbox.com/sh/lu8haexfz254eab/AAAstEhd9ywWuovKp8FLm5STa
> 
> Many many thanks,
> 
> Marco
> 
> 
> 
> --
> View this message in context: http://r.789695.n4.nabble.com/rugarch-convergence-problem-tp4694878.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From walmir-rodrigues at uol.com.br  Fri Aug  1 22:18:04 2014
From: walmir-rodrigues at uol.com.br (walmir-rodrigues)
Date: Fri, 01 Aug 2014 17:18:04 -0300
Subject: [R-SIG-Finance] Optimization
In-Reply-To: CA+vrBLDDjcsEUV5c+sjEP=CgdOSfLYkMvfU3LLv+13C8nTGWZA@mail.gmail.com
References: 53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mailCAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.comCA+vrBLDDjcsEUV5c+sjEP=CgdOSfLYkMvfU3LLv+13C8nTGWZA@mail.gmail.com
Message-ID: <53dbf5fc6824d_55a444c503c7644e@a4-weasel10.mail>

An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140801/f0583423/attachment.html>

From brian at braverock.com  Sat Aug  2 17:03:17 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Sat, 02 Aug 2014 10:03:17 -0500
Subject: [R-SIG-Finance] Optimization
In-Reply-To: <53dbf5fc6824d_55a444c503c7644e@a4-weasel10.mail>
References: 53d7dd74ee9e7_5a2d202e82c289a9@a4-weasel4.mailCAHdfS96mnxLLBpc9aD73Z-VziupL2OYNOe6sHKxykOmCEk9MCQ@mail.gmail.comCA+vrBLDDjcsEUV5c+sjEP=CgdOSfLYkMvfU3LLv+13C8nTGWZA@mail.gmail.com
	<53dbf5fc6824d_55a444c503c7644e@a4-weasel10.mail>
Message-ID: <53DCFDB5.6090303@braverock.com>

http://stackoverflow.com/questions/7813578/convert-column-classes-in-data-table

On 08/01/2014 03:18 PM, walmir-rodrigues wrote:
> Thanks, but dont work as I wish.
> ------------------------------------------------------------------------
>
> *De:* bethpeniel at gmail.com
> *Enviada:* Ter?a-feira, 29 de Julho de 2014 19:50
> *Para:* rharlow86 at gmail.com
> *Assunto:* [R-SIG-Finance] Optimization
>
> hi Rodriguez,
> find attached the delimited data set
> here is how:
> select one column, go to data, go to convert text to columns, go to
> next, choose semicolon, then finish.
>
> */Best regards,
> Peterson Owusu Junior/*
>
> */Lecturer (Finance and Mathematics)/*
>
> */Faculty of Business Administration/*
>
> */West End University College, Accra-Ghana/*
>
> */
> MSc. Financial Engineering
> B. A. Economics and Mathematics
> +233 269 006 397, +233 242 023 769/*
>
> */bethpeniel at gmail.com
> <../../../undefined//compose?to=bethpeniel at ymail.com>/*
>
>
>
> On Tue, Jul 29, 2014 at 7:01 PM, Robert Harlow <rharlow86 at gmail.com
> <../../../undefined//compose?to=rharlow86 at gmail.com>> wrote:
>
>     Walmir,
>        In order for anyone to help you, please follow the posting guide (see
>     link below).  You need to put a reproducable example in your
>     question and
>     attaching .csv files is generally not necessary, so try to avoid it if
>     possible.  What did you try? Which specific function "didn't work"? Be
>     specific.
>
>     http://www.r-project.org/posting-guide.html
>
>     Bob
>
>
>
>     On Tue, Jul 29, 2014 at 1:44 PM, walmir-rodrigues <
>     walmir-rodrigues at uol.com.br
>     <../../../undefined//compose?to=walmir-rodrigues at uol.com.br>> wrote:
>
>      > Hey everyone I tried, but don?t work, transform file to use in
>     fPortfolio
>      > package, someone can help.
>      >
>      > _______________________________________________
>      > R-SIG-Finance at r-project.org
>     <../../../undefined//compose?to=R-SIG-Finance at r-project.org> mailing
>     list
>      > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>      > -- Subscriber-posting only. If you want to post, subscribe first.
>      > -- Also note that this is not the r-help list where general R
>     questions
>      > should go.
>      >
>
>              [[alternative HTML version deleted]]
>
>
>     _______________________________________________
>     R-SIG-Finance at r-project.org
>     <../../../undefined//compose?to=R-SIG-Finance at r-project.org> mailing
>     list
>     https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>     -- Subscriber-posting only. If you want to post, subscribe first.
>     -- Also note that this is not the r-help list where general R
>     questions should go.
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From junluke at gmail.com  Sun Aug  3 06:05:54 2014
From: junluke at gmail.com (jun wang)
Date: Sun, 3 Aug 2014 00:05:54 -0400
Subject: [R-SIG-Finance] reading high frequency data
Message-ID: <CAPD4hGBqrpoopsZfd_ZgAzZrgiRG0smh9w0nkBzDXurFsS+7UA@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140803/591686ce/attachment.pl>

From es at enricoschumann.net  Sun Aug  3 14:07:14 2014
From: es at enricoschumann.net (Enrico Schumann)
Date: Sun, 03 Aug 2014 14:07:14 +0200
Subject: [R-SIG-Finance] reading high frequency data
In-Reply-To: <CAPD4hGBqrpoopsZfd_ZgAzZrgiRG0smh9w0nkBzDXurFsS+7UA@mail.gmail.com>
	(jun wang's message of "Sun, 3 Aug 2014 00:05:54 -0400")
References: <CAPD4hGBqrpoopsZfd_ZgAzZrgiRG0smh9w0nkBzDXurFsS+7UA@mail.gmail.com>
Message-ID: <871tsxojyl.fsf@enricoschumann.net>

On Sun, 03 Aug 2014, jun wang <junluke at gmail.com> writes:

> Dear All,
>
> I am trying to read some high frequency data using "read.zoo", but keeping
> getting some errors. Any help/suggestions would be really appreciated.
> Below is a sample of my data and the error message i am getting:
>
>
>   date time Last Price  06/20/2014 3:30:00 1962.48  06/20/2014 3:35:00
> 1962.2  06/20/2014 3:40:00 1961.67  06/20/2014 3:45:00 1962.18  06/20/2014
> 3:50:00 1962.9  06/20/2014 3:55:00 1962.35  06/20/2014 4:00:00 1962.4
> 06/20/2014 4:05:00 1962.24
>
> fmt <- "%m/%d/%Y %H:%M:%S"
> z <- read.zoo("sp_hf.csv",header=TRUE,index=1:2, tz = "", format = fmt)
>
> *Error in scan(file, what, nmax, sep, dec, quote, skip, nlines, na.strings,
>  : *
> *  line 1 did not have 2 elements*


Please read the posting guide:
http://www.r-project.org/posting-guide.html -- Your example is not
reproducible, so we can only guess.  Your data seems to use space as a
delimiter (despite your reading a "csv" file), so try replacing "Last
Price" with "Last_Price" or skipping the header line altogether.


-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From ggrothendieck at gmail.com  Sun Aug  3 16:02:33 2014
From: ggrothendieck at gmail.com (Gabor Grothendieck)
Date: Sun, 3 Aug 2014 10:02:33 -0400
Subject: [R-SIG-Finance] reading high frequency data
In-Reply-To: <CAPD4hGBqrpoopsZfd_ZgAzZrgiRG0smh9w0nkBzDXurFsS+7UA@mail.gmail.com>
References: <CAPD4hGBqrpoopsZfd_ZgAzZrgiRG0smh9w0nkBzDXurFsS+7UA@mail.gmail.com>
Message-ID: <CAP01uR=TjUtpOskhWdvHeUQqkgaWzYfO0w-PHDjyShqc+k5_WQ@mail.gmail.com>

On Sun, Aug 3, 2014 at 12:05 AM, jun wang <junluke at gmail.com> wrote:
> Dear All,
>
> I am trying to read some high frequency data using "read.zoo", but keeping
> getting some errors. Any help/suggestions would be really appreciated.
> Below is a sample of my data and the error message i am getting:
>
>
>   date time Last Price  06/20/2014 3:30:00 1962.48  06/20/2014 3:35:00
> 1962.2  06/20/2014 3:40:00 1961.67  06/20/2014 3:45:00 1962.18  06/20/2014
> 3:50:00 1962.9  06/20/2014 3:55:00 1962.35  06/20/2014 4:00:00 1962.4
> 06/20/2014 4:05:00 1962.24
>
> fmt <- "%m/%d/%Y %H:%M:%S"
> z <- read.zoo("sp_hf.csv",header=TRUE,index=1:2, tz = "", format = fmt)
>

Replace header = TRUE with skip = 1
z <- read.zoo("sp_hf.csv", skip = 1, index=1:2, tz = "", format = fmt)

-- 
Statistics & Software Consulting
GKX Group, GKX Associates Inc.
tel: 1-877-GKX-GROUP
email: ggrothendieck at gmail.com


From stergenator at gmail.com  Mon Aug  4 19:46:19 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Mon, 4 Aug 2014 10:46:19 -0700
Subject: [R-SIG-Finance] TrailingStop chain events in macd.R
Message-ID: <CAM8YH=Yb299xHh8=A-vZm5nY5MnTQ3N8PTp3f7n7Ph7b3w=N=w@mail.gmail.com>

Hi,

I have been experimenting with trailing stops in quantstrat.  I noticed in
the order book that ocassionaly a replacement row for the trailing stop
order chain occurs when no recent high price has been acheived, and appears
to replaced with a "lower" high price.  I do not think this is suposed to
occur (but I could be wrong as I do not fully understand the replacement
rules)

My intuition tells me that a new chaining order in the order book should
only occur when a new high price has been acheived.

You can see an example of the "lowered" high price in the attached jpg file
near 4/16/14 and 4/17/14.  I have also attached a modified macd.R I used to
create this chart.
(Here's a pdf version of the chart that was too big for the mailing list:
https://dl.dropboxusercontent.com/u/56008826/Macd-TrailingStop-Annotated.pdf
)

I would appreicate any comment regarding the lowering high price.

Thank you,

--
sm
Stergios Marinopoulos
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140804/52b32cae/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: Macd-TrailingStop-Annotated.jpeg
Type: image/jpeg
Size: 142353 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140804/52b32cae/attachment.jpeg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: macd.R
Type: application/octet-stream
Size: 6457 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140804/52b32cae/attachment.obj>

From u0055 at wolke7.net  Tue Aug  5 12:31:29 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Tue, 05 Aug 2014 12:31:29 +0200
Subject: [R-SIG-Finance] parma - parmafrontier - Why do I get an error in
	seq.default ?
Message-ID: <53E0B281.3030908@wolke7.net>

Dear R-SIGs,

I'm using the parma package and
it works well for me with small input data.
For big input data I get this error message:

Fehler in seq.default(minb, maxb, length.out = n.points) :
    'from' cannot be NA, NaN or infinite

I'm using this R code (here without the input data):

require( corpcor )
require( parma )
m = matrix( ... )
c = cov( m )
if( ! is.positive.definite( c )) c = make.positive.definite( c )
means = colMeans( m )
spec = parmaspec( S=c, risk='EV', riskType='minrisk', target=min(means), 
targetType='equality', forecast=means, 
asset.names=colnames(m,do.NULL=FALSE) )
parmafrontier( spec, solver='SOCP' )

Please find the attached whole R program including the input data.
How to get rid of the error ?

Thanks in advance,
Uwe
-------------- next part --------------
require( corpcor )
require( parma )
x=c()
x=c(x,0.00012813902149105103)
x=c(x,-0.0002025030899694213)
x=c(x,-0.00041429168412294233)
x=c(x,0.0005688286088671811)
x=c(x,0.0012565006126596628)
x=c(x,-0.0014782090085461884)
x=c(x,-0.0005230683485742058)
x=c(x,0.0005265877316077558)
x=c(x,-0.006129584347003051)
x=c(x,0.00009432332950475354)
x=c(x,-0.0021988862419644976)
x=c(x,0.0018287853862614454)
x=c(x,0.005140824858836473)
x=c(x,-0.001008104584545446)
x=c(x,-0.002528522463418984)
x=c(x,-0.000958639799428269)
x=c(x,-0.002293936768199157)
x=c(x,-0.00306451076058889)
x=c(x,-0.0021892909766532977)
x=c(x,0.0010578697890130254)
x=c(x,0.007179449751071382)
x=c(x,-0.004073200587371824)
x=c(x,-0.004897716926016482)
x=c(x,0.005991867272202256)
x=c(x,0.0010387736899030052)
x=c(x,-0.0010778749217678356)
x=c(x,-0.00037353562924758983)
x=c(x,-0.0022026764587851156)
x=c(x,-0.00311523337072734)
x=c(x,0.02216882309295555)
x=c(x,0.001977135886576851)
x=c(x,-0.005604530818181799)
x=c(x,0.0038115266456413186)
x=c(x,-0.009231753378423793)
x=c(x,0.023615484726550263)
x=c(x,0.0014393803216540338)
x=c(x,-0.00014725745552112606)
x=c(x,0.017442069964363687)
x=c(x,-0.0032243196585086085)
x=c(x,0.011834605967563241)
x=c(x,-0.003883319958458724)
x=c(x,0.004726407492002417)
x=c(x,-0.013567513504964608)
x=c(x,0.006027682537659167)
x=c(x,-0.008336892448715064)
x=c(x,0.004616243599686585)
x=c(x,0.013593865501350126)
x=c(x,-0.024770706731899506)
x=c(x,0.009681607903384746)
x=c(x,-0.01042101321324344)
x=c(x,0.0024874458714482365)
x=c(x,-0.009224661318474953)
x=c(x,0.00020184932446815572)
x=c(x,-0.007660162744835511)
x=c(x,-0.0017021288603783103)
x=c(x,-0.0030426157887833956)
x=c(x,-0.0333768147157108)
x=c(x,-0.011821454187238711)
x=c(x,0.015434156619590779)
x=c(x,-0.02134695473826841)
x=c(x,0.05698836370112557)
x=c(x,0.030160489684682545)
x=c(x,0.004240359371148725)
x=c(x,0.02669994826047095)
x=c(x,-0.011343560466059568)
x=c(x,0.021217566704157347)
x=c(x,0.0034555945013464667)
x=c(x,0.002174086284910765)
x=c(x,0.023802197561930118)
x=c(x,0.00924189346573133)
x=c(x,0.00042101644867910463)
x=c(x,-0.017971754318351574)
x=c(x,0.001112760137087001)
x=c(x,0.06290950853895916)
x=c(x,0.0038245469296774234)
x=c(x,-0.0018276760946339086)
x=c(x,-0.0030921007243299883)
x=c(x,0.006024418190778788)
x=c(x,0.01197803126084601)
x=c(x,-0.013153415503358325)
x=c(x,0.008469386870951534)
x=c(x,0.023702508826978563)
x=c(x,0.00918290750177093)
x=c(x,-0.04720777994631223)
x=c(x,-0.007871382420267213)
x=c(x,0.01778223211745309)
x=c(x,0.012623810724617822)
x=c(x,-0.004215731050771429)
x=c(x,-0.0002246208169411575)
x=c(x,-0.0522009405999339)
x=c(x,0.01908642906877739)
x=c(x,-0.002190952425741463)
x=c(x,0.004898216553065471)
x=c(x,-0.016439853462864626)
x=c(x,0.013339553388796008)
x=c(x,0.015383766599821668)
x=c(x,0.007616425219312772)
x=c(x,0.0009837789797655623)
x=c(x,0.021441273392639872)
x=c(x,-0.03165000841127075)
x=c(x,-0.010795133554002466)
x=c(x,-0.01824534497424466)
x=c(x,0.03524488325209862)
x=c(x,-0.00988093394738418)
x=c(x,0.023591219213380817)
x=c(x,-0.012166213035812551)
x=c(x,0.024031359028837667)
x=c(x,0.015680919442566225)
x=c(x,0.03488764515287812)
x=c(x,-0.007276370665269216)
x=c(x,-0.015370087323933345)
x=c(x,0.012249258877339506)
x=c(x,0.04662445027970972)
x=c(x,-0.03372423828240856)
x=c(x,0.018123604232777674)
x=c(x,0.028413341476765594)
x=c(x,-0.00948488379784617)
x=c(x,0.0009592852565165447)
x=c(x,0.017628559881816958)
x=c(x,0.019404388774414826)
x=c(x,-0.01122219202422267)
x=c(x,0.006366451896097799)
x=c(x,-0.034265365063116525)
x=c(x,0.009856947440222546)
x=c(x,0.014872092097455525)
x=c(x,-0.10166939284414375)
x=c(x,0.036866708799271994)
x=c(x,-0.03398605516142319)
x=c(x,-0.01892226533490535)
x=c(x,-0.01653608743209622)
x=c(x,0.03458747761757605)
x=c(x,-0.0014185125267899472)
x=c(x,-0.030218292498498518)
x=c(x,-0.04397594977998792)
x=c(x,-0.007915957512146571)
x=c(x,-0.05175691476749261)
x=c(x,-0.0034236825992046234)
x=c(x,0.025113109102908506)
x=c(x,-0.048368976619450436)
x=c(x,-0.008615132183832907)
x=c(x,0.010798786690680445)
x=c(x,0.0279040398797129)
x=c(x,-0.009823761975446703)
x=c(x,0.0074070293412989595)
x=c(x,0.01571892475716426)
x=c(x,-0.02431276740027398)
x=c(x,0.011048943868510781)
x=c(x,-0.036663831439875054)
x=c(x,0.04106557509965638)
x=c(x,0.037989808193492215)
x=c(x,0.038499641292054666)
x=c(x,-0.0424172983927521)
x=c(x,0.03461038733090253)
x=c(x,-0.04837119416812308)
x=c(x,0.05553533394412716)
x=c(x,-0.006021122212705706)
x=c(x,-0.005742340483449982)
x=c(x,-0.060825169993236075)
x=c(x,-0.03839366250164457)
x=c(x,-0.018913668792522747)
x=c(x,-0.052345015900463684)
x=c(x,-0.006676350973535699)
x=c(x,0.03177921550611561)
x=c(x,-0.018074124583629586)
x=c(x,0.08949636185134154)
x=c(x,0.02463233900332906)
x=c(x,-0.007414491995748514)
x=c(x,-0.024966086056809663)
x=c(x,-0.07150822191980909)
x=c(x,0.04866688699474055)
x=c(x,0.032306115508548124)
x=c(x,-0.018199952256768688)
x=c(x,-0.10659794139645208)
x=c(x,-0.1962586114342223)
x=c(x,0.03630868877225466)
x=c(x,-0.08798032756916108)
x=c(x,0.08078085221172158)
x=c(x,-0.010150770494245759)
x=c(x,-0.053138869709731994)
x=c(x,-0.08656366036438368)
x=c(x,0.0821554443310402)
x=c(x,-0.035179731420286166)
x=c(x,0.060855592521177976)
x=c(x,-0.01989490834400887)
x=c(x,-0.021532196922352812)
x=c(x,0.03984467666814212)
x=c(x,-0.014846765100246618)
x=c(x,-0.0521145477020472)
x=c(x,0.004257574247119812)
x=c(x,-0.05761047457532969)
x=c(x,0.1253070113463122)
x=c(x,-0.054987225275854236)
x=c(x,-0.06352097620025218)
x=c(x,-0.033440834156504305)
x=c(x,-0.026410428947024746)
x=c(x,0.08739169953379032)
x=c(x,0.02485500955055387)
x=c(x,0.061891212358359905)
x=c(x,0.06748528074025284)
x=c(x,-0.01852083111020179)
x=c(x,0.009315538131426136)
x=c(x,0.023202854615294855)
x=c(x,0.06005916460842598)
x=c(x,-0.04369458977522197)
x=c(x,-0.04357067494681106)
x=c(x,-0.0011016995733212306)
x=c(x,0.032559480583245676)
x=c(x,0.0706178705237709)
x=c(x,0.001989724382737251)
x=c(x,-0.050505578061109155)
x=c(x,-0.0005239676305671071)
x=c(x,-0.0217420889822914)
x=c(x,-0.008622265069875214)
x=c(x,0.11108449336410664)
x=c(x,0.0642745083011491)
x=c(x,0.005892382824657834)
x=c(x,0.008106434373400579)
x=c(x,-0.04029758300296815)
x=c(x,0.040319198678964635)
x=c(x,-0.008572514278848909)
x=c(x,-0.007279941293205872)
x=c(x,0.05553242464996672)
x=c(x,0.013311833433330367)
x=c(x,-0.033850970053516054)
x=c(x,0.002205390880493134)
x=c(x,0.05820800056766017)
x=c(x,-0.00041595708498220514)
x=c(x,0.006222511286645605)
x=c(x,-0.057896090310736205)
x=c(x,0.043319344983384134)
x=c(x,-0.004628322811040098)
x=c(x,-0.010599861599597358)
x=c(x,-0.0034158871814071734)
x=c(x,0.000016464989491308755)
x=c(x,0.00002752271009392745)
x=c(x,-0.0002715991781156602)
x=c(x,0.0006350935618907682)
x=c(x,0.00024542238275848893)
x=c(x,-0.0012926340991834316)
x=c(x,0.00024390077364378631)
x=c(x,-0.00002990034095421324)
x=c(x,-0.0019432455620848916)
x=c(x,-0.0007439533483470602)
x=c(x,-0.0010049521596480749)
x=c(x,-0.0017386449173334593)
x=c(x,-0.000197210502740478)
x=c(x,-0.0012738215315688944)
x=c(x,-0.0007811772433582743)
x=c(x,-0.0010292773571079277)
x=c(x,-0.0009490377310815827)
x=c(x,0.0011144457126344414)
x=c(x,0.0005106760226715047)
x=c(x,-0.0028507863576665076)
x=c(x,0.004224485550959161)
x=c(x,0.0001731299835204908)
x=c(x,-0.0036427849196734524)
x=c(x,-0.0019219415739620519)
x=c(x,-0.0026762581336441608)
x=c(x,-0.004663518032994043)
x=c(x,-0.002706346534816678)
x=c(x,0.0012008996220381613)
x=c(x,0.0009342434093999929)
x=c(x,0.00654344297004661)
x=c(x,-0.00020601345541717972)
x=c(x,-0.00159446168082267)
x=c(x,0.004777778633731305)
x=c(x,-0.0027252872284209474)
x=c(x,0.01924649551253134)
x=c(x,-0.0017866080099285956)
x=c(x,-0.0002168149982904733)
x=c(x,0.012832155497349593)
x=c(x,-0.00462431076811236)
x=c(x,0.0015446335048068232)
x=c(x,-0.0019955528136394412)
x=c(x,-0.00748132921520332)
x=c(x,-0.0032714985037000997)
x=c(x,0.0013073213028548206)
x=c(x,-0.006155918241249753)
x=c(x,0.012216272358126187)
x=c(x,0.0005270051853221097)
x=c(x,-0.0011673226106918115)
x=c(x,-0.0049037738471300815)
x=c(x,-0.00396129891251123)
x=c(x,-0.004895044559091837)
x=c(x,-0.01467132350555196)
x=c(x,0.00038000807339298254)
x=c(x,-0.01519721325342097)
x=c(x,-0.00851580049575187)
x=c(x,-0.011191235163749298)
x=c(x,0.025578905844727655)
x=c(x,0.00927687024090929)
x=c(x,-0.003718370279614203)
x=c(x,-0.0047012157386376995)
x=c(x,-0.053160922712700745)
x=c(x,0.005596299592274128)
x=c(x,0.003740704583088512)
x=c(x,0.005550653213155583)
x=c(x,-0.0022135830503712496)
x=c(x,0.013979118398260769)
x=c(x,0.007963402911889595)
x=c(x,-0.006369332889005098)
x=c(x,0.006042410973010575)
x=c(x,0.007446448891727573)
x=c(x,-0.00915533609781674)
x=c(x,0.006463945367778609)
x=c(x,0.00897308680438421)
x=c(x,0.021792511949450245)
x=c(x,-0.005702670807054016)
x=c(x,0.0044800808178198995)
x=c(x,-0.01882820624562465)
x=c(x,-0.012538995422557719)
x=c(x,0.000005128503801312993)
x=c(x,0.006468700256428821)
x=c(x,0.0030440537403431892)
x=c(x,0.00825461747035152)
x=c(x,-0.00020384036010236546)
x=c(x,-0.003961745772255336)
x=c(x,-0.010383665955256766)
x=c(x,0.016929213199264714)
x=c(x,-0.009766524020076278)
x=c(x,0.004615715395893265)
x=c(x,-0.008225110388755539)
x=c(x,-0.0014076563854255085)
x=c(x,0.006736562346366932)
x=c(x,0.007779137825462247)
x=c(x,0.019326318521336355)
x=c(x,-0.021116247701219254)
x=c(x,-0.0003470528195482817)
x=c(x,0.015501404949880046)
x=c(x,-0.008023007598396519)
x=c(x,-0.028480891864958776)
x=c(x,-0.01420821289299011)
x=c(x,-0.03046548931937573)
x=c(x,-0.007494818195302222)
x=c(x,-0.00508252672624295)
x=c(x,-0.0002858306516749669)
x=c(x,-0.0033676067692751336)
x=c(x,-0.004121902830064346)
x=c(x,-0.006493150649115693)
x=c(x,0.01827740393176205)
x=c(x,0.00417860213355912)
x=c(x,0.005871613924105221)
x=c(x,0.001665342006626873)
x=c(x,-0.013786615161750709)
x=c(x,-0.03437954109211104)
x=c(x,0.016165931696137517)
x=c(x,0.006112220399029955)
x=c(x,-0.004705145883462323)
x=c(x,0.010449292393313726)
x=c(x,-0.0036906466193120414)
x=c(x,0.006094804630569196)
x=c(x,0.01769771964285741)
x=c(x,-0.01350825625435245)
x=c(x,0.00017644021688769393)
x=c(x,-0.002170741721073342)
x=c(x,-0.010640299165871673)
x=c(x,0.025412851618380857)
x=c(x,0.00906813827490343)
x=c(x,0.018730469973631727)
x=c(x,0.014072427647527962)
x=c(x,0.01623557138537744)
x=c(x,-0.03454722864563867)
x=c(x,0.0063701357856972745)
x=c(x,-0.05474159334668333)
x=c(x,0.010566687981965915)
x=c(x,0.015444880482503321)
x=c(x,0.019061363885585374)
x=c(x,0.011467748350095909)
x=c(x,-0.03153816654349075)
x=c(x,0.0587927017447452)
x=c(x,0.009078355475188576)
x=c(x,-0.0075699019769786295)
x=c(x,-0.03092667048791727)
x=c(x,-0.0137939204901465)
x=c(x,0.01878551110565164)
x=c(x,-0.009508795776346727)
x=c(x,-0.016191462064916857)
x=c(x,-0.025632685684018726)
x=c(x,-0.037800404087668577)
x=c(x,-0.024933199938772025)
x=c(x,-0.011445799238685425)
x=c(x,-0.0007658896426238905)
x=c(x,0.01787976141114503)
x=c(x,0.022698586697809765)
x=c(x,-0.02243691004483913)
x=c(x,-0.030164211215355854)
x=c(x,0.03498884419685502)
x=c(x,0.004656955624726682)
x=c(x,-0.011809163812249788)
x=c(x,0.0038102061595945494)
x=c(x,-0.019443289547020043)
x=c(x,-0.02876361795069069)
x=c(x,0.014401961764745869)
x=c(x,-0.04918537343064733)
x=c(x,0.044930896460493024)
x=c(x,-0.02426503421254086)
x=c(x,-0.018680239042394277)
x=c(x,-0.03833784643945876)
x=c(x,-0.00137809622673645)
x=c(x,0.009151894971205103)
x=c(x,-0.0220098757366612)
x=c(x,0.04369482137752536)
x=c(x,-0.02956057787539628)
x=c(x,-0.015811988057929893)
x=c(x,-0.007641067421434862)
x=c(x,-0.05418113065268356)
x=c(x,0.17202644907139267)
x=c(x,-0.00433326412479901)
x=c(x,-0.05580270393751225)
x=c(x,-0.06254426024203409)
x=c(x,-0.05566111271577255)
x=c(x,0.002842516623786525)
x=c(x,-0.09552931846499704)
x=c(x,-0.06252220121475256)
x=c(x,-0.08742865382933168)
x=c(x,0.03433691662012116)
x=c(x,0.003179467932257797)
x=c(x,0.01826770000580252)
x=c(x,0.019005015486911494)
x=c(x,-0.01334126295406796)
x=c(x,-0.03321437069119726)
x=c(x,-0.07059043493127312)
x=c(x,0.00397783208764505)
x=c(x,0.046123376884208256)
x=c(x,-0.051934184580525455)
x=c(x,-0.024240858073574775)
x=c(x,0.009009016829429095)
x=c(x,-0.06160048281740912)
x=c(x,0.05627014640085967)
x=c(x,-0.04196682591226229)
x=c(x,-0.09924229768689119)
x=c(x,0.06086859212525298)
x=c(x,0.082582517764197)
x=c(x,-0.039789416014582225)
x=c(x,-0.033348534812458155)
x=c(x,0.04359857700881062)
x=c(x,-0.02199909094153763)
x=c(x,-0.02506349793737395)
x=c(x,-0.020838529265247485)
x=c(x,-0.027259981560871654)
x=c(x,0.032535945678895416)
x=c(x,0.0020157604640582165)
x=c(x,0.0497738454251513)
x=c(x,0.009150714167908419)
x=c(x,-0.0015834821358007766)
x=c(x,-0.007994592610723498)
x=c(x,0.05786911191154773)
x=c(x,0.03934088400570241)
x=c(x,0.009481191436065082)
x=c(x,-0.04770979666050568)
x=c(x,0.008865951921076795)
x=c(x,0.04917337242117895)
x=c(x,0.009487540123089142)
x=c(x,-0.018560760396736188)
x=c(x,0.05135545033773932)
x=c(x,0.00687482303825256)
x=c(x,0.02778367287707863)
x=c(x,-0.053174607890415254)
x=c(x,0.02810760264089833)
x=c(x,-0.02505560986493375)
x=c(x,-0.007609528617423553)
x=c(x,-0.0008375320517198483)
x=c(x,0.025671743650173495)
x=c(x,-0.0530171448748133)
x=c(x,-0.0008911929337054606)
x=c(x,-0.022960599796140624)
x=c(x,0.00004495994367558031)
x=c(x,0.00005242208586909536)
x=c(x,-0.0004836738625615622)
x=c(x,0.00026565044650606333)
x=c(x,0.00024682283059105834)
x=c(x,-0.0014660307277727692)
x=c(x,0.0002184493241817828)
x=c(x,0.00038770150484008245)
x=c(x,-0.0018828664363396217)
x=c(x,-0.0008875351971355244)
x=c(x,-0.00031172219702423087)
x=c(x,-0.0016893914777577628)
x=c(x,0.0005141640421407707)
x=c(x,-0.0021261716283197526)
x=c(x,-0.001257336688753821)
x=c(x,-0.0009737131735465346)
x=c(x,-0.0012616986142844654)
x=c(x,0.0015138026858852066)
x=c(x,-0.00003468254162998016)
x=c(x,-0.002991272592629233)
x=c(x,0.005728726137141425)
x=c(x,0.00024663589568499426)
x=c(x,-0.004753050567877917)
x=c(x,-0.0020192181564062067)
x=c(x,-0.002909615605691799)
x=c(x,-0.003129269229882657)
x=c(x,-0.0026444973876918578)
x=c(x,0.000698783224069061)
x=c(x,0.000676574195294511)
x=c(x,0.006387857437102083)
x=c(x,-0.001254646402727706)
x=c(x,-0.0016293494860850466)
x=c(x,0.004640619958730448)
x=c(x,-0.0022756605771233475)
x=c(x,0.019246495512531214)
x=c(x,-0.0017703757893002745)
x=c(x,0.0008065817256427076)
x=c(x,0.012299782934715286)
x=c(x,-0.00462431076811236)
x=c(x,0.0014536524516245311)
x=c(x,-0.002016221383289021)
x=c(x,-0.00804216847266228)
x=c(x,-0.003200500162745484)
x=c(x,0.0013190632466830595)
x=c(x,-0.009739318338115543)
x=c(x,0.012207965530098093)
x=c(x,0.0004607847936099689)
x=c(x,0.0043420075308053955)
x=c(x,-0.004891089052464145)
x=c(x,-0.005609562514437567)
x=c(x,-0.005187367166441922)
x=c(x,-0.014895143656780822)
x=c(x,0.00046107058183790056)
x=c(x,-0.01512034825745492)
x=c(x,-0.008534940665244503)
x=c(x,-0.011489801235082555)
x=c(x,0.025121882508658093)
x=c(x,0.009284042447713716)
x=c(x,-0.005737754032619166)
x=c(x,-0.004811138143947765)
x=c(x,-0.05417732314196372)
x=c(x,0.0008942531162009789)
x=c(x,0.003801199214062211)
x=c(x,0.004433057588858074)
x=c(x,-0.006711951550869846)
x=c(x,0.01360232271179208)
x=c(x,0.0027103246580731017)
x=c(x,-0.006203536272611388)
x=c(x,0.006035219845808048)
x=c(x,0.00736019332559572)
x=c(x,-0.009656851880490081)
x=c(x,0.010838092591828481)
x=c(x,0.009166744081088238)
x=c(x,0.021989603926324007)
x=c(x,-0.011404359524673708)
x=c(x,0.0030451691933263284)
x=c(x,-0.019884582920922652)
x=c(x,-0.012232445891082447)
x=c(x,-0.00012559237779225028)
x=c(x,0.006376198157926749)
x=c(x,0.0019855583099049863)
x=c(x,0.007454925261182064)
x=c(x,0.001012019392707831)
x=c(x,-0.0040506234557691)
x=c(x,-0.0037510232683791345)
x=c(x,0.01636076948593955)
x=c(x,-0.009683616438788411)
x=c(x,0.00432786746238822)
x=c(x,-0.008671795270832295)
x=c(x,-0.0015297988899287721)
x=c(x,0.0045621369769062664)
x=c(x,0.008048164863991012)
x=c(x,0.0178401397113475)
x=c(x,-0.02074761853000128)
x=c(x,-0.0005453130128087968)
x=c(x,0.012989519678243066)
x=c(x,-0.00792368995485474)
x=c(x,-0.028039095372438903)
x=c(x,-0.014235922402287634)
x=c(x,-0.03323188011245901)
x=c(x,-0.009959210797915183)
x=c(x,-0.004695295783847283)
x=c(x,-0.00041227352152163724)
x=c(x,-0.0033332192773365653)
x=c(x,-0.0033849571945585217)
x=c(x,-0.006521036389729118)
x=c(x,0.018384753569587214)
x=c(x,0.0055930525791119765)
x=c(x,0.006015691138875233)
x=c(x,0.001645881756010549)
x=c(x,-0.009588374829363987)
x=c(x,-0.03450856646595285)
x=c(x,0.01594156181593704)
x=c(x,0.00611745070637112)
x=c(x,0.0005046759353563118)
x=c(x,0.01138678259400369)
x=c(x,-0.0037490903883733843)
x=c(x,0.006331709378317934)
x=c(x,0.017717591084163542)
x=c(x,-0.013210102090326758)
x=c(x,-0.0003902334535500804)
x=c(x,-0.0022313286254086674)
x=c(x,-0.009327624771377404)
x=c(x,0.03112567973575158)
x=c(x,0.009182924091086226)
x=c(x,0.01909157464495114)
x=c(x,0.010549449543877125)
x=c(x,0.01631362548631693)
x=c(x,-0.03454722864563867)
x=c(x,0.006906349431971881)
x=c(x,-0.054769097765035774)
x=c(x,0.015884654941824547)
x=c(x,0.012308910544915203)
x=c(x,0.025805307817801836)
x=c(x,0.01140367700375402)
x=c(x,-0.031605949977604526)
x=c(x,0.057538879717885155)
x=c(x,0.009001901476404504)
x=c(x,-0.00684440552462212)
x=c(x,-0.03196998149325113)
x=c(x,-0.013964877539492099)
x=c(x,0.01823926325811115)
x=c(x,-0.00950568583405685)
x=c(x,-0.01622842734212847)
x=c(x,-0.025632685684018726)
x=c(x,-0.03791080846444128)
x=c(x,-0.02551930438307194)
x=c(x,-0.011951426567074182)
x=c(x,0.00007165187790122834)
x=c(x,0.017455742536406544)
x=c(x,0.02279463931091926)
x=c(x,-0.018162494784073675)
x=c(x,-0.032710070693404675)
x=c(x,0.03648940294004951)
x=c(x,0.010617162662986552)
x=c(x,-0.012196866655744583)
x=c(x,0.0003308099734028289)
x=c(x,-0.019881869610378543)
x=c(x,-0.0287734410380756)
x=c(x,0.014146632483948308)
x=c(x,-0.0491788190887187)
x=c(x,0.04955990880063283)
x=c(x,-0.02412526089737631)
x=c(x,-0.02336112888706496)
x=c(x,-0.043250889791420645)
x=c(x,-0.0013949888538467008)
x=c(x,0.009188131114632098)
x=c(x,-0.02103978507240277)
x=c(x,0.04369481522806954)
x=c(x,-0.029168193454510074)
x=c(x,-0.01617156303575777)
x=c(x,-0.007621116001826696)
x=c(x,-0.0538459437891084)
x=c(x,0.17194803284787055)
x=c(x,-0.00433326395371544)
x=c(x,-0.05587579883136717)
x=c(x,-0.0625127511232716)
x=c(x,-0.054798033267805)
x=c(x,0.0028425792047858025)
x=c(x,-0.09549073897079802)
x=c(x,-0.06718522342186586)
x=c(x,-0.08718305475121342)
x=c(x,0.033473123416765116)
x=c(x,0.004217972284960952)
x=c(x,0.018230818261690578)
x=c(x,0.026626518858640237)
x=c(x,-0.014174403515373454)
x=c(x,-0.033169392965080535)
x=c(x,-0.07603472098360732)
x=c(x,0.003977853596990826)
x=c(x,0.04581450440383586)
x=c(x,-0.051883895355590855)
x=c(x,-0.024239582954733038)
x=c(x,0.006967066488349567)
x=c(x,-0.060820899341478614)
x=c(x,0.05633010947102281)
x=c(x,-0.041986785078409194)
x=c(x,-0.09888545733253581)
x=c(x,0.0612037056826013)
x=c(x,0.08229480585537703)
x=c(x,-0.03979117303650647)
x=c(x,-0.03330696693876813)
x=c(x,0.043499656910204014)
x=c(x,-0.021991294275417524)
x=c(x,-0.025502186171866875)
x=c(x,-0.02081916662252058)
x=c(x,-0.027259919433832606)
x=c(x,0.032895650595991754)
x=c(x,0.002011531055376102)
x=c(x,0.051228659754058666)
x=c(x,0.008355148830621908)
x=c(x,0.002853976367164521)
x=c(x,-0.007483836795621295)
x=c(x,0.057777219639005374)
x=c(x,0.039161283220082596)
x=c(x,0.008900273658696134)
x=c(x,-0.04784701534124629)
x=c(x,0.009169297059113062)
x=c(x,0.04871403878079127)
x=c(x,0.01002014148195412)
x=c(x,-0.018560760396736188)
x=c(x,0.051109690576180915)
x=c(x,0.006923168061538622)
x=c(x,0.029383370849843403)
x=c(x,-0.05413863098555033)
x=c(x,0.0330913868982314)
x=c(x,-0.014168378763418126)
x=c(x,-0.00786483538391845)
x=c(x,-0.0011479276125896248)
x=c(x,0.023155458799069422)
x=c(x,-0.05393776061959504)
x=c(x,0.0005644153598971458)
x=c(x,-0.022213566018888464)
x=c(x,0.00007556445017075656)
x=c(x,0.00018749819747372338)
x=c(x,-0.0005370804026918379)
x=c(x,-0.00009977594109633045)
x=c(x,0.0002412154574547296)
x=c(x,-0.0016103578589797163)
x=c(x,0.00020098145176705086)
x=c(x,0.0007715701910454472)
x=c(x,-0.0017142654808667381)
x=c(x,-0.0010324365954735896)
x=c(x,0.000041429778182742656)
x=c(x,-0.0015285635054589153)
x=c(x,0.0017182863591240325)
x=c(x,-0.0036079517444109026)
x=c(x,-0.0017792702278159114)
x=c(x,-0.000846066908034339)
x=c(x,-0.0014234095035601747)
x=c(x,0.0017312188748098206)
x=c(x,-0.0005839605447632714)
x=c(x,-0.0030901183172118126)
x=c(x,0.006825416800224204)
x=c(x,0.00029125936894543864)
x=c(x,-0.005933805311039335)
x=c(x,-0.0001089684965460607)
x=c(x,-0.003362208079812071)
x=c(x,-0.0025867967324941176)
x=c(x,-0.002563215113524657)
x=c(x,-0.0001893313149454127)
x=c(x,0.0003872145690389037)
x=c(x,0.006178119655126785)
x=c(x,-0.0013375770931947323)
x=c(x,-0.0016590489616589575)
x=c(x,0.0038623296340702267)
x=c(x,0.0013248250698511606)
x=c(x,0.019246495514943993)
x=c(x,-0.0019457863447266495)
x=c(x,0.0005254652714032393)
x=c(x,0.011919297441699703)
x=c(x,-0.0034289308685791107)
x=c(x,0.0003732617391849283)
x=c(x,-0.001419451785405181)
x=c(x,-0.01146655404643315)
x=c(x,-0.0029117109327786625)
x=c(x,0.0013460206808264623)
x=c(x,-0.01155694285597372)
x=c(x,0.012012880291542495)
x=c(x,0.00011467931633047923)
x=c(x,0.00808425103713981)
x=c(x,-0.004848767871063838)
x=c(x,-0.006584415143847504)
x=c(x,-0.004788077058955723)
x=c(x,-0.013248522995372177)
x=c(x,0.0006100140943521283)
x=c(x,-0.015407560626409205)
x=c(x,-0.009595285345750146)
x=c(x,-0.011515717724790289)
x=c(x,0.02422366532649724)
x=c(x,0.008064427793868631)
x=c(x,-0.011781577393598449)
x=c(x,-0.004496677505378797)
x=c(x,-0.0530676677853746)
x=c(x,0.000628934042067784)
x=c(x,0.004753537944557717)
x=c(x,0.0032684574229628035)
x=c(x,-0.012420792928749287)
x=c(x,0.014013503744180856)
x=c(x,-0.005519194243404667)
x=c(x,-0.00615422633521496)
x=c(x,0.005890515466959976)
x=c(x,0.0071004394142565)
x=c(x,-0.012663266076791729)
x=c(x,0.01134166924168818)
x=c(x,0.0093067594486832)
x=c(x,0.02267005082922356)
x=c(x,-0.013001667411001663)
x=c(x,-0.0006232644858976351)
x=c(x,-0.019363337407185977)
x=c(x,-0.012326643875907468)
x=c(x,0.0002461752195818628)
x=c(x,0.004094458275922251)
x=c(x,-0.0004624788402676978)
x=c(x,0.005883162505690859)
x=c(x,0.006490476303702084)
x=c(x,-0.004382753911837618)
x=c(x,0.0019062018720247017)
x=c(x,0.014813018775298739)
x=c(x,-0.009710510010388012)
x=c(x,0.0036724022875424095)
x=c(x,-0.00879896238168953)
x=c(x,-0.0014675065365740924)
x=c(x,-0.002077856363424118)
x=c(x,0.00896453014889787)
x=c(x,0.013972926231367377)
x=c(x,-0.018580634379033095)
x=c(x,-0.005494378490638117)
x=c(x,0.006488460293688004)
x=c(x,-0.00784951943963313)
x=c(x,-0.02688664962331299)
x=c(x,-0.0143343146739701)
x=c(x,-0.02354699539827503)
x=c(x,-0.009028646628063228)
x=c(x,-0.005411322625465801)
x=c(x,-0.00018502177153516974)
x=c(x,-0.003303562429985652)
x=c(x,-0.0014040173946277827)
x=c(x,-0.0066283458044672896)
x=c(x,0.018147518066501448)
x=c(x,0.00478668834282778)
x=c(x,0.006420536903328756)
x=c(x,0.0018822167386199247)
x=c(x,-0.010018703131621945)
x=c(x,-0.03452157254305975)
x=c(x,0.015705204291989537)
x=c(x,0.006135071896301765)
x=c(x,0.003074026456541001)
x=c(x,0.011945152466540186)
x=c(x,-0.0040413710140668494)
x=c(x,0.008727411097810934)
x=c(x,0.004172390412780981)
x=c(x,-0.012555042005811316)
x=c(x,0.0013536210718446476)
x=c(x,-0.0024095481129120734)
x=c(x,-0.009110235499675517)
x=c(x,0.006925415353611457)
x=c(x,0.008964088517263562)
x=c(x,0.019356530771754536)
x=c(x,0.0036963476252033015)
x=c(x,0.01642673244938603)
x=c(x,-0.03454722864563867)
x=c(x,0.008291895271607473)
x=c(x,-0.05581444757385392)
x=c(x,0.02146104424981513)
x=c(x,0.010342724438788867)
x=c(x,0.028573935140718473)
x=c(x,0.011433813683885175)
x=c(x,-0.032499308950745015)
x=c(x,0.055337397083143246)
x=c(x,0.008953861629227849)
x=c(x,-0.006050325286690925)
x=c(x,-0.029608376862370188)
x=c(x,-0.01401790293839662)
x=c(x,0.01705063652974004)
x=c(x,-0.009820820723071508)
x=c(x,-0.016166587378353445)
x=c(x,-0.03511990926199422)
x=c(x,-0.037596288109975284)
x=c(x,-0.039291394921550774)
x=c(x,-0.0121922107882283)
x=c(x,-0.0005884648089887732)
x=c(x,0.016402052621567607)
x=c(x,0.03294527079976332)
x=c(x,-0.004387689779322246)
x=c(x,-0.03778943946260406)
x=c(x,0.032604801241057205)
x=c(x,0.013248245435890753)
x=c(x,-0.01235131545590828)
x=c(x,-0.0010043050774130532)
x=c(x,-0.023579632094310223)
x=c(x,-0.02868127891805009)
x=c(x,0.014137046617913897)
x=c(x,-0.04945080605813426)
x=c(x,0.049761787681439795)
x=c(x,-0.024006993431054224)
x=c(x,-0.027951974351417816)
x=c(x,-0.0511597522339653)
x=c(x,-0.0033469609014355204)
x=c(x,0.007359530036690202)
x=c(x,-0.019588796770440915)
x=c(x,0.04369364184030009)
x=c(x,-0.02838643536304703)
x=c(x,-0.016327084036339628)
x=c(x,-0.007554512349612939)
x=c(x,-0.047076504850191735)
x=c(x,0.17191451278552972)
x=c(x,-0.004326237285571969)
x=c(x,-0.05596839496170807)
x=c(x,-0.062487065930124354)
x=c(x,-0.04824902304753777)
x=c(x,0.0029096419020048386)
x=c(x,-0.09567208604307997)
x=c(x,-0.07804032179945898)
x=c(x,-0.08568952654846063)
x=c(x,0.023379717073159997)
x=c(x,0.0036015714734908017)
x=c(x,0.018985457032798237)
x=c(x,0.041573761337229204)
x=c(x,-0.024267800064661074)
x=c(x,-0.03192069706068585)
x=c(x,-0.0860067259962865)
x=c(x,0.004035994916930205)
x=c(x,0.045062264143944306)
x=c(x,-0.0518171898164566)
x=c(x,-0.02423950210307539)
x=c(x,0.0029012393650378124)
x=c(x,-0.05964718794479992)
x=c(x,0.055971463295177236)
x=c(x,-0.04165132492849362)
x=c(x,-0.09704725594211634)
x=c(x,0.06214451972113188)
x=c(x,0.0821841243389915)
x=c(x,-0.03985314505377926)
x=c(x,-0.03404781051057101)
x=c(x,0.043486730472184924)
x=c(x,-0.02241286533863739)
x=c(x,-0.030701037395049872)
x=c(x,-0.020856297585402587)
x=c(x,-0.027230991033177755)
x=c(x,0.0333259354976081)
x=c(x,0.003583475713857564)
x=c(x,0.05110751378335803)
x=c(x,0.007149241099258926)
x=c(x,0.012292432203271607)
x=c(x,0.003921818065441487)
x=c(x,0.05714953886868606)
x=c(x,0.03861693377407037)
x=c(x,0.0013007827710252292)
x=c(x,-0.04861503177388216)
x=c(x,0.009414738331789942)
x=c(x,0.048374084879846485)
x=c(x,0.010668402238108778)
x=c(x,-0.018466216783351388)
x=c(x,0.0505100755405257)
x=c(x,0.006916395991872494)
x=c(x,0.029260614271617)
x=c(x,-0.05430594227953365)
x=c(x,0.040275289948606074)
x=c(x,-0.004111709066944772)
x=c(x,-0.007676111630674838)
x=c(x,-0.006556453939923491)
x=c(x,0.006711371767407475)
x=c(x,-0.05520075763647041)
x=c(x,0.012041767482138272)
x=c(x,-0.03306013150602949)
x=c(x,0.000029491032536606018)
x=c(x,0.00002598545659837548)
x=c(x,-0.0002737921143273506)
x=c(x,0.0008800070848050874)
x=c(x,0.0003911924343069763)
x=c(x,-0.0015077607702262035)
x=c(x,0.00038083242211520163)
x=c(x,0.00003952630698959657)
x=c(x,-0.0015500035919936875)
x=c(x,-0.0007721380966107127)
x=c(x,-0.0010130989574443005)
x=c(x,-0.0021287906819320098)
x=c(x,-0.0007845353350704294)
x=c(x,-0.0020922342036199444)
x=c(x,-0.0011887612545570102)
x=c(x,-0.0013504840703260476)
x=c(x,-0.0008453414345261529)
x=c(x,0.0014382985788119831)
x=c(x,-0.00002212550153989216)
x=c(x,-0.002979323664319993)
x=c(x,0.004249122954074154)
x=c(x,-0.0019011877618394834)
x=c(x,-0.004187097069347321)
x=c(x,-0.0021623450142184723)
x=c(x,-0.0029259624321731725)
x=c(x,-0.00607649258324316)
x=c(x,-0.00313421012821732)
x=c(x,0.0012535800954694262)
x=c(x,0.0011482900217124306)
x=c(x,0.013271746516265835)
x=c(x,0.000655145829054782)
x=c(x,-0.003971648901597937)
x=c(x,0.008704729572228797)
x=c(x,-0.001975506120385356)
x=c(x,0.024396576306377572)
x=c(x,-0.0021912318109884067)
x=c(x,-0.0014992578248777667)
x=c(x,0.016314425958586648)
x=c(x,-0.0028581702461110497)
x=c(x,0.0032313142360094653)
x=c(x,-0.0020852865585922653)
x=c(x,-0.010777213955349613)
x=c(x,-0.0034314408998658372)
x=c(x,0.0011265707524577009)
x=c(x,-0.009439774630163563)
x=c(x,0.015827318377637498)
x=c(x,0.0010413941472841106)
x=c(x,-0.00006664395560842131)
x=c(x,-0.007747682398819278)
x=c(x,-0.004935981419806278)
x=c(x,-0.00959524083481576)
x=c(x,-0.021243761157074974)
x=c(x,-0.003625647155656849)
x=c(x,-0.019081396889320694)
x=c(x,-0.01599268048968657)
x=c(x,-0.014412484693564973)
x=c(x,0.04067291060967567)
x=c(x,0.011442822490843666)
x=c(x,-0.0060583683253427455)
x=c(x,-0.005047637908145092)
x=c(x,-0.059165884804849474)
x=c(x,0.01601580837557799)
x=c(x,0.0034379495179569152)
x=c(x,0.008275349238760303)
x=c(x,-0.005661789681342943)
x=c(x,0.019384497687200866)
x=c(x,0.007982013059345473)
x=c(x,-0.009469521997987604)
x=c(x,0.008078952132656827)
x=c(x,0.007665184367537579)
x=c(x,-0.013245046114590112)
x=c(x,0.006640165829142409)
x=c(x,0.010700288069965407)
x=c(x,0.03560818870419699)
x=c(x,-0.007231427258143984)
x=c(x,0.0042853186783086555)
x=c(x,-0.032630364330763696)
x=c(x,-0.01576359690246351)
x=c(x,-0.0006815958620815682)
x=c(x,0.006841820266595471)
x=c(x,0.0034451820224636323)
x=c(x,0.0134680497476756)
x=c(x,0.0018353612138652532)
x=c(x,-0.0013649436006152624)
x=c(x,-0.011934212681826496)
x=c(x,0.020767279640469895)
x=c(x,-0.008397741907310116)
x=c(x,0.005008063989933614)
x=c(x,-0.009083249494863995)
x=c(x,-0.006841786936593551)
x=c(x,0.007031418334917728)
x=c(x,0.007575509324041204)
x=c(x,0.020708879879384304)
x=c(x,-0.022147669720889437)
x=c(x,0.001370223322628607)
x=c(x,0.01738119353326812)
x=c(x,-0.0062242189930242315)
x=c(x,-0.04030892830354724)
x=c(x,-0.014353876803646151)
x=c(x,-0.03757135193407574)
x=c(x,-0.006819494802425289)
x=c(x,-0.0030135805740674816)
x=c(x,-0.000398849471457291)
x=c(x,-0.0023557849811351285)
x=c(x,-0.00031734646719097735)
x=c(x,-0.008740723992766455)
x=c(x,0.019372064881102633)
x=c(x,0.003487352764213115)
x=c(x,0.013054417651354736)
x=c(x,-0.000036171407463237335)
x=c(x,-0.016380032169256507)
x=c(x,-0.048130598701199484)
x=c(x,0.00867406940383131)
x=c(x,-0.006933844470651251)
x=c(x,-0.007742322328506831)
x=c(x,0.015000940823208273)
x=c(x,-0.0035828625815077586)
x=c(x,0.004198532816632444)
x=c(x,0.019669623752911054)
x=c(x,-0.015573091314149438)
x=c(x,-0.005250737661049523)
x=c(x,-0.005922490747644331)
x=c(x,-0.018004179715238135)
x=c(x,0.043442026524730754)
x=c(x,0.009007061987767847)
x=c(x,0.04110628729987037)
x=c(x,0.009079189078160549)
x=c(x,0.029481642888306722)
x=c(x,-0.0424862664717795)
x=c(x,0.003866263592233549)
x=c(x,-0.07401760823451886)
x=c(x,0.0134991318452635)
x=c(x,0.021747759268317127)
x=c(x,0.027183396762441032)
x=c(x,0.021187117429098196)
x=c(x,-0.032682241756174624)
x=c(x,0.05635734630873051)
x=c(x,0.01668952013619462)
x=c(x,-0.00008567202775580043)
x=c(x,-0.03242823043081698)
x=c(x,-0.025644893712545774)
x=c(x,0.021914226358304263)
x=c(x,-0.01219445884031408)
x=c(x,-0.01528145566499219)
x=c(x,-0.04936366399644501)
x=c(x,-0.035916122949405535)
x=c(x,-0.02639356069322442)
x=c(x,-0.015584714906052975)
x=c(x,-0.0034831730425299895)
x=c(x,0.025119527918166986)
x=c(x,0.029245523473810223)
x=c(x,-0.028675148187089338)
x=c(x,-0.03253354497186446)
x=c(x,0.04217267315465377)
x=c(x,0.009448401433218876)
x=c(x,-0.027977330043451303)
x=c(x,0.00022996933108678495)
x=c(x,-0.035971636224772584)
x=c(x,-0.03353394930576504)
x=c(x,0.020855014640660904)
x=c(x,-0.0656192908376245)
x=c(x,0.05289966367066745)
x=c(x,-0.03880668457348172)
x=c(x,-0.02496516648779597)
x=c(x,-0.056724696297872024)
x=c(x,-0.00040385987196767884)
x=c(x,0.005384161790789769)
x=c(x,-0.029891066376876406)
x=c(x,0.07488926710120218)
x=c(x,-0.03142450300685514)
x=c(x,-0.053049755534529355)
x=c(x,0.0008808063973513415)
x=c(x,-0.1305090581492584)
x=c(x,0.5121878645134916)
x=c(x,-0.08036052865087735)
x=c(x,-0.07120536792291542)
x=c(x,-0.0751494179298111)
x=c(x,-0.11069193307135952)
x=c(x,-0.001846943076977973)
x=c(x,-0.1638810019754005)
x=c(x,-0.10933926193366271)
x=c(x,-0.14152702884620888)
x=c(x,0.05238065282878847)
x=c(x,0.007309697289849466)
x=c(x,0.020971768134265552)
x=c(x,0.027855170951473305)
x=c(x,-0.011309953181381316)
x=c(x,-0.03879516343583203)
x=c(x,-0.1094058807864458)
x=c(x,0.05468429035862785)
x=c(x,0.07688399948223314)
x=c(x,-0.05082458089155137)
x=c(x,-0.03634971878014191)
x=c(x,-0.0012538967006383223)
x=c(x,-0.09643768566124153)
x=c(x,0.10649174569287204)
x=c(x,-0.05889704857762447)
x=c(x,-0.1295233481913267)
x=c(x,0.07521269743322408)
x=c(x,0.11963962006794492)
x=c(x,-0.055855393768860936)
x=c(x,-0.030604422101997257)
x=c(x,0.06319010836881117)
x=c(x,-0.023806317422192552)
x=c(x,-0.01777128405849058)
x=c(x,-0.026051582418155538)
x=c(x,-0.03914839014368488)
x=c(x,0.030806790982737763)
x=c(x,-0.00007490370788847872)
x=c(x,0.06699508015449761)
x=c(x,0.004542374406168808)
x=c(x,-0.00045220011610652586)
x=c(x,-0.009820978974995866)
x=c(x,0.0923849548045122)
x=c(x,0.06155250200805391)
x=c(x,0.009988381265296215)
x=c(x,-0.05261632260425221)
x=c(x,0.019748684236263095)
x=c(x,0.06613963305006437)
x=c(x,0.010446991279306107)
x=c(x,-0.029893132565113917)
x=c(x,0.06557743355124472)
x=c(x,0.008265556929711742)
x=c(x,0.03093468294765271)
x=c(x,-0.06523494770999981)
x=c(x,0.031833012916882335)
x=c(x,-0.026602093076022695)
x=c(x,-0.008525433487938659)
x=c(x,0.0037087047191732554)
x=c(x,0.02843692405864864)
x=c(x,-0.06136157659703554)
x=c(x,0.008922997479465634)
x=c(x,-0.027035993939686698)
x=c(x,0.00005623216797279638)
x=c(x,0.00005643387311730695)
x=c(x,-0.0005433959377496018)
x=c(x,0.000372932681865181)
x=c(x,0.00038331135895255166)
x=c(x,-0.001657126131295474)
x=c(x,0.00034113711989660836)
x=c(x,0.00047065352726869905)
x=c(x,-0.0014074094936856272)
x=c(x,-0.000894130010095938)
x=c(x,-0.0003012517499347323)
x=c(x,-0.002019722887615473)
x=c(x,0.00034908805419506126)
x=c(x,-0.0029305260197298394)
x=c(x,-0.0017493303480151073)
x=c(x,-0.0012846961018432817)
x=c(x,-0.001200447515706248)
x=c(x,0.0018634186226242544)
x=c(x,-0.0005961751198142659)
x=c(x,-0.003081220591722949)
x=c(x,0.0058864786390964065)
x=c(x,-0.0018390412973434992)
x=c(x,-0.005292485187171659)
x=c(x,-0.0023780419710583756)
x=c(x,-0.0031639441570745445)
x=c(x,-0.004313543163533042)
x=c(x,-0.003027142370800361)
x=c(x,0.0007697221122706324)
x=c(x,0.0008804666871444962)
x=c(x,0.012871422666772128)
x=c(x,-0.000693398770236033)
x=c(x,-0.004040637896449015)
x=c(x,0.008593645346723666)
x=c(x,-0.0015621566533867547)
x=c(x,0.02381208732368674)
x=c(x,-0.002184613162266297)
x=c(x,-0.0006870282377604434)
x=c(x,0.01545957047268958)
x=c(x,-0.00271813210544615)
x=c(x,0.0030352931945362796)
x=c(x,-0.002096309165744351)
x=c(x,-0.010817975048119821)
x=c(x,-0.0032487334788888736)
x=c(x,0.0010329449271068779)
x=c(x,-0.013838844575176925)
x=c(x,0.015598264214725491)
x=c(x,0.0010763018196371485)
x=c(x,0.005793866365492386)
x=c(x,-0.007678721697929722)
x=c(x,-0.0067316630295247894)
x=c(x,-0.009527746559466553)
x=c(x,-0.02176905481371201)
x=c(x,-0.0035698910118331186)
x=c(x,-0.01879349560671249)
x=c(x,-0.015809590308180094)
x=c(x,-0.014928964418708356)
x=c(x,0.039790707783652915)
x=c(x,0.011136738260217398)
x=c(x,-0.007812072042220091)
x=c(x,-0.0052770794120037086)
x=c(x,-0.059322411571573634)
x=c(x,0.010837829254253297)
x=c(x,0.00326501013990272)
x=c(x,0.006557162523646688)
x=c(x,-0.010300385043754011)
x=c(x,0.018997361793710473)
x=c(x,0.002101699122047103)
x=c(x,-0.00912851259678566)
x=c(x,0.007900585400081891)
x=c(x,0.007545798695727564)
x=c(x,-0.013456297034729971)
x=c(x,0.011513692037997209)
x=c(x,0.010951054964614747)
x=c(x,0.035102940937627156)
x=c(x,-0.012623269268821822)
x=c(x,0.0027653090666683064)
x=c(x,-0.034190349963587566)
x=c(x,-0.015206352424783371)
x=c(x,-0.0006597262934936042)
x=c(x,0.006715588095195364)
x=c(x,0.0021804009693396696)
x=c(x,0.01265868720165438)
x=c(x,0.0027468806790811287)
x=c(x,-0.001265762207553253)
x=c(x,-0.004579645068074429)
x=c(x,0.02007678572475286)
x=c(x,-0.007840489135243215)
x=c(x,0.004908955749720392)
x=c(x,-0.009213676722905448)
x=c(x,-0.0073883745909342465)
x=c(x,0.004044019436471772)
x=c(x,0.007750826804991039)
x=c(x,0.01899024488026489)
x=c(x,-0.022181082740486087)
x=c(x,0.0014449417365990324)
x=c(x,0.014235006973501349)
x=c(x,-0.006257264021596045)
x=c(x,-0.03959094247935074)
x=c(x,-0.013680122209262147)
x=c(x,-0.03911013305334693)
x=c(x,-0.009556841513118274)
x=c(x,-0.0024715725889475114)
x=c(x,-0.0006389852277904529)
x=c(x,-0.0024592758910163344)
x=c(x,0.0005557584377084538)
x=c(x,-0.008446670594022165)
x=c(x,0.01821227699909309)
x=c(x,0.004840256973058729)
x=c(x,0.01295913922998391)
x=c(x,-0.00028309925282875254)
x=c(x,-0.00948943115527073)
x=c(x,-0.04787221842690849)
x=c(x,0.008056890716737345)
x=c(x,-0.007284040470278491)
x=c(x,-0.0024053617085245883)
x=c(x,0.015973928637086028)
x=c(x,-0.003853325652301902)
x=c(x,0.004353291758461018)
x=c(x,0.01945736900042155)
x=c(x,-0.014823482825898163)
x=c(x,-0.006275247334329506)
x=c(x,-0.0057566543211180436)
x=c(x,-0.016603577743162894)
x=c(x,0.0516258088495196)
x=c(x,0.008655587954438219)
x=c(x,0.040736516111867516)
x=c(x,0.005045615056704258)
x=c(x,0.029371709153091376)
x=c(x,-0.04196871961105628)
x=c(x,0.003907931710110809)
x=c(x,-0.07326135823055385)
x=c(x,0.018338838652752855)
x=c(x,0.018208523491058125)
x=c(x,0.03610448840328469)
x=c(x,0.02103526634289145)
x=c(x,-0.03047499498898492)
x=c(x,0.05556442887552316)
x=c(x,0.01681065316776002)
x=c(x,0.00032303278693649373)
x=c(x,-0.03388058621956586)
x=c(x,-0.025519020677456063)
x=c(x,0.021261385383787773)
x=c(x,-0.01163513387362376)
x=c(x,-0.01511390191748754)
x=c(x,-0.04936537986607212)
x=c(x,-0.03629773039379126)
x=c(x,-0.028958145613209713)
x=c(x,-0.015301514470617172)
x=c(x,-0.0036567234098505465)
x=c(x,0.024635480060258824)
x=c(x,0.02854353157376426)
x=c(x,-0.023614612194493886)
x=c(x,-0.035522789058321444)
x=c(x,0.043774642407056225)
x=c(x,0.018255828326697275)
x=c(x,-0.028586945263515406)
x=c(x,-0.00423601521459272)
x=c(x,-0.035882310016558484)
x=c(x,-0.03266183397253946)
x=c(x,0.02055809329652617)
x=c(x,-0.06377141234706749)
x=c(x,0.057615267660692124)
x=c(x,-0.03828360777441015)
x=c(x,-0.03190451441719426)
x=c(x,-0.060417147363233795)
x=c(x,-0.0006462992726192058)
x=c(x,0.005187330299861487)
x=c(x,-0.02897470832458746)
x=c(x,0.07397479825141884)
x=c(x,-0.030656515960386408)
x=c(x,-0.056029748011686316)
x=c(x,0.000772422623728017)
x=c(x,-0.1286001200930851)
x=c(x,0.509176499713176)
x=c(x,-0.08004918160531246)
x=c(x,-0.07041051046083747)
x=c(x,-0.07483079204011026)
x=c(x,-0.10999784945812359)
x=c(x,-0.0018370566270581028)
x=c(x,-0.1638122305203739)
x=c(x,-0.11966156905046074)
x=c(x,-0.1425032582180687)
x=c(x,0.05040524073493152)
x=c(x,0.009123253327538624)
x=c(x,0.019878756054440946)
x=c(x,0.03403727863283665)
x=c(x,-0.011703034778782945)
x=c(x,-0.038628254121536774)
x=c(x,-0.11408012185970373)
x=c(x,0.054080003663163456)
x=c(x,0.0767291681681618)
x=c(x,-0.05020598266980352)
x=c(x,-0.03567347028206393)
x=c(x,-0.002840784631083366)
x=c(x,-0.09533631225777381)
x=c(x,0.10550056209595671)
x=c(x,-0.05865233369928244)
x=c(x,-0.12740495302291943)
x=c(x,0.07444478401889489)
x=c(x,0.1187173263949623)
x=c(x,-0.05467061209951475)
x=c(x,-0.02956695588698095)
x=c(x,0.06307160621254891)
x=c(x,-0.02194841689449466)
x=c(x,-0.017939144401620668)
x=c(x,-0.02565247278849843)
x=c(x,-0.03881607283194613)
x=c(x,0.031374468568955746)
x=c(x,-0.0001402813268730256)
x=c(x,0.06779236566075832)
x=c(x,0.004227590122603671)
x=c(x,0.004070472431314965)
x=c(x,-0.00899672987097195)
x=c(x,0.09167463748709799)
x=c(x,0.061535547432821074)
x=c(x,0.009524168232064477)
x=c(x,-0.05126120440713019)
x=c(x,0.01925549818397186)
x=c(x,0.06497297111647359)
x=c(x,0.010996448174309753)
x=c(x,-0.029215583290693427)
x=c(x,0.06451149135603468)
x=c(x,0.007779006123938462)
x=c(x,0.0328127977320615)
x=c(x,-0.06523831282040207)
x=c(x,0.03634732749252584)
x=c(x,-0.01423308152483204)
x=c(x,-0.008977864773353644)
x=c(x,0.003235645741065626)
x=c(x,0.025384512700657554)
x=c(x,-0.06051426820020686)
x=c(x,0.009925928657609688)
x=c(x,-0.026106680504446977)
x=c(x,0.00008669173809738242)
x=c(x,0.0002533276045630323)
x=c(x,-0.0006025096780077204)
x=c(x,-0.00012293691842613652)
x=c(x,0.0003615796383562833)
x=c(x,-0.001744722491100083)
x=c(x,0.00030736420344325803)
x=c(x,0.0008668780078292802)
x=c(x,-0.0010266490459491827)
x=c(x,-0.0009649491545000075)
x=c(x,0.000056052508314260487)
x=c(x,-0.001814277180973258)
x=c(x,0.0021892401544300203)
x=c(x,-0.004349035467960151)
x=c(x,-0.0023291891834269687)
x=c(x,-0.0011262838848160308)
x=c(x,-0.001391844853694743)
x=c(x,0.0020900280059003968)
x=c(x,-0.00120097653528314)
x=c(x,-0.0031110543633854695)
x=c(x,0.007147743143492169)
x=c(x,-0.0017985185676488182)
x=c(x,-0.0063415634682339956)
x=c(x,-0.00004870738549156708)
x=c(x,-0.0036286671079799977)
x=c(x,-0.003620561534265268)
x=c(x,-0.002862672987590582)
x=c(x,-0.00006914772096081825)
x=c(x,0.0005588942515675828)
x=c(x,0.012276902758747437)
x=c(x,-0.0009939009351284944)
x=c(x,-0.004111666578915555)
x=c(x,0.007767641406347357)
x=c(x,0.00207906428703995)
x=c(x,0.022551199985133292)
x=c(x,-0.002465889753184729)
x=c(x,-0.0006781308599499513)
x=c(x,0.014810736194924748)
x=c(x,-0.0022634836098918004)
x=c(x,0.0014327414362861968)
x=c(x,-0.0015572116728492325)
x=c(x,-0.013224313503986257)
x=c(x,-0.0025488155107266605)
x=c(x,0.0009765252043029637)
x=c(x,-0.015541583354587003)
x=c(x,0.014900627703969932)
x=c(x,0.0007322718513790513)
x=c(x,0.009269661703372803)
x=c(x,-0.007670115994283006)
x=c(x,-0.007792079706791896)
x=c(x,-0.008512588594104776)
x=c(x,-0.020683659008290212)
x=c(x,-0.0035609067576904086)
x=c(x,-0.018710651162585034)
x=c(x,-0.016744733667468814)
x=c(x,-0.015268993889378921)
x=c(x,0.03845822037842104)
x=c(x,0.008645363106696386)
x=c(x,-0.013425769163934008)
x=c(x,-0.0050272320012495824)
x=c(x,-0.05866550191011105)
x=c(x,0.009771028006406092)
x=c(x,0.00393646615026088)
x=c(x,0.005244071503891581)
x=c(x,-0.016166554412754157)
x=c(x,0.019110513761843303)
x=c(x,-0.006928187660766253)
x=c(x,-0.00851929149279351)
x=c(x,0.007455285771416545)
x=c(x,0.007152033690766824)
x=c(x,-0.017798121213453956)
x=c(x,0.012076079685484471)
x=c(x,0.011107641701773158)
x=c(x,0.032953419660158356)
x=c(x,-0.013929760572311926)
x=c(x,-0.0008181871058818654)
x=c(x,-0.03220530714717104)
x=c(x,-0.01524804657549011)
x=c(x,-4.3922321749536303e-7)
x=c(x,0.00420304229717655)
x=c(x,-0.0006882043696536339)
x=c(x,0.010731772866375977)
x=c(x,0.007713733492842784)
x=c(x,-0.0011475480935462387)
x=c(x,0.001738504508430169)
x=c(x,0.01823317390451781)
x=c(x,-0.006788985135480006)
x=c(x,0.004374386304310651)
x=c(x,-0.00892193073746116)
x=c(x,-0.008297179783690342)
x=c(x,-0.004898932549688896)
x=c(x,0.008487361292173848)
x=c(x,0.014563951781196887)
x=c(x,-0.02013356051593282)
x=c(x,-0.003301913378505454)
x=c(x,0.0061936930786472685)
x=c(x,-0.006096024005986925)
x=c(x,-0.03702992338889455)
x=c(x,-0.012731408925676185)
x=c(x,-0.029196623714606577)
x=c(x,-0.009111958890793631)
x=c(x,-0.003266920702653014)
x=c(x,-0.0010882956998460472)
x=c(x,-0.0022676560936332997)
x=c(x,0.002403150376003679)
x=c(x,-0.00799592132981621)
x=c(x,0.01716604699102758)
x=c(x,0.0041687866130836766)
x=c(x,0.012792164908582659)
x=c(x,0.00007539318630710986)
x=c(x,-0.007999362448828448)
x=c(x,-0.04720180070996801)
x=c(x,0.00643545816921234)
x=c(x,-0.007226920976923485)
x=c(x,0.000721700708770853)
x=c(x,0.01603699319661984)
x=c(x,-0.003983012268038258)
x=c(x,0.006167188760608497)
x=c(x,0.005790925508584798)
x=c(x,-0.013274732510276393)
x=c(x,-0.004398473837967653)
x=c(x,-0.005467875194115001)
x=c(x,-0.01600725241374836)
x=c(x,0.008122627748275182)
x=c(x,0.00810850994421668)
x=c(x,0.039592481816547516)
x=c(x,-0.0030570124079867477)
x=c(x,0.028452506619390885)
x=c(x,-0.041275365797576)
x=c(x,0.00481891542062942)
x=c(x,-0.07200226200468106)
x=c(x,0.02262832608010598)
x=c(x,0.014962304141603655)
x=c(x,0.04005832953725266)
x=c(x,0.02093446771897945)
x=c(x,-0.027104216549268017)
x=c(x,0.05326177560561243)
x=c(x,0.01632414266108755)
x=c(x,0.0007213710899767025)
x=c(x,-0.03152796841862494)
x=c(x,-0.024577767663267355)
x=c(x,0.019205740054288916)
x=c(x,-0.011700206647803963)
x=c(x,-0.014844013230758542)
x=c(x,-0.0674912760570842)
x=c(x,-0.036458029377455)
x=c(x,-0.05215567950110139)
x=c(x,-0.014513650206607052)
x=c(x,-0.003986374514913401)
x=c(x,0.02356001047867473)
x=c(x,0.03745516522335117)
x=c(x,-0.0058544980274993115)
x=c(x,-0.04196858430094623)
x=c(x,0.03837843065456361)
x=c(x,0.021618895757783693)
x=c(x,-0.028669337606637042)
x=c(x,-0.006972478915135201)
x=c(x,-0.03828250659475473)
x=c(x,-0.030933325612378736)
x=c(x,0.020175222790674963)
x=c(x,-0.061532998259891135)
x=c(x,0.05744961831173257)
x=c(x,-0.03563451872545575)
x=c(x,-0.03866411823415826)
x=c(x,-0.06726152389919075)
x=c(x,-0.00252568459647461)
x=c(x,0.0033597446366744046)
x=c(x,-0.027778705565605827)
x=c(x,0.07097819277930682)
x=c(x,-0.028482771087714433)
x=c(x,-0.05937901987871208)
x=c(x,0.0001930993858284641)
x=c(x,-0.11344502137241065)
x=c(x,0.503270342315378)
x=c(x,-0.0797661236593229)
x=c(x,-0.06944928546487555)
x=c(x,-0.07453220585243646)
x=c(x,-0.10235096872135338)
x=c(x,-0.0016898519958647245)
x=c(x,-0.16346082534180384)
x=c(x,-0.14339039227714406)
x=c(x,-0.14203248070001745)
x=c(x,0.03776800130082267)
x=c(x,0.009764384378230153)
x=c(x,0.019016133593020727)
x=c(x,0.044282169086757285)
x=c(x,-0.022095228916997875)
x=c(x,-0.03618498247798315)
x=c(x,-0.12137466945106834)
x=c(x,0.052182826310465766)
x=c(x,0.07639426263391581)
x=c(x,-0.04932928271080748)
x=c(x,-0.03539778366428409)
x=c(x,-0.004286049625148969)
x=c(x,-0.0938783865309763)
x=c(x,0.1038920625970004)
x=c(x,-0.057573710142637735)
x=c(x,-0.12326796728766876)
x=c(x,0.07334523036709904)
x=c(x,0.11561291984660475)
x=c(x,-0.0527175690342544)
x=c(x,-0.032852228806767046)
x=c(x,0.061893663587344556)
x=c(x,-0.018610374369508655)
x=c(x,-0.02253997631445693)
x=c(x,-0.024720274916048335)
x=c(x,-0.03713854423255882)
x=c(x,0.031219164751892348)
x=c(x,0.001586412333877777)
x=c(x,0.06531233272296595)
x=c(x,0.0032102844422458887)
x=c(x,0.013374667657021338)
x=c(x,0.0033821011241454784)
x=c(x,0.08920323414286913)
x=c(x,0.060692628701945646)
x=c(x,0.001563976094016115)
x=c(x,-0.050584034014625724)
x=c(x,0.018332779087059672)
x=c(x,0.06347172077208119)
x=c(x,0.011836224183892496)
x=c(x,-0.027958129498159463)
x=c(x,0.06302610234218177)
x=c(x,0.007430795624064218)
x=c(x,0.032649312655216346)
x=c(x,-0.06372861521436059)
x=c(x,0.043323981852658844)
x=c(x,-0.0023141764084023595)
x=c(x,-0.008561859266856906)
x=c(x,-0.002358397566362433)
x=c(x,0.007817536477414936)
x=c(x,-0.0595000923071469)
x=c(x,0.0196501108712871)
x=c(x,-0.03596568827948232)
x=c(x,0.00003802533660076636)
x=c(x,0.00002497829051507849)
x=c(x,-0.00027522886563847494)
x=c(x,0.001040467668783434)
x=c(x,0.00048669695083875035)
x=c(x,-0.0016487058305645823)
x=c(x,0.0004705462607688862)
x=c(x,0.00008501273150447286)
x=c(x,-0.0012923623012442696)
x=c(x,-0.00079060396616275)
x=c(x,-0.0010184365146211937)
x=c(x,-0.0023844034242552245)
x=c(x,-0.0011693343631486875)
x=c(x,-0.002628435609446498)
x=c(x,-0.0014557990549975135)
x=c(x,-0.0015609298479518402)
x=c(x,-0.0007774024816105675)
x=c(x,0.0016504780428592675)
x=c(x,-0.000371202362230132)
x=c(x,-0.003063537761782605)
x=c(x,0.004265264700942648)
x=c(x,-0.0032602235260409287)
x=c(x,-0.004543715374305964)
x=c(x,-0.002319850716455391)
x=c(x,-0.0030895618001748225)
x=c(x,-0.007002234529958207)
x=c(x,-0.003414534551479755)
x=c(x,0.0012880948884072968)
x=c(x,0.0012885274573654411)
x=c(x,0.017679945391374893)
x=c(x,0.0012193536361224857)
x=c(x,-0.0055291163910711864)
x=c(x,0.011277559497451337)
x=c(x,-0.0014842702220173032)
x=c(x,0.02777076717131122)
x=c(x,-0.0024563301634067795)
x=c(x,-0.002339478987124811)
x=c(x,0.018595913502155715)
x=c(x,-0.0017010436972136652)
x=c(x,0.004336380921969789)
x=c(x,-0.00214407763287151)
x=c(x,-0.012936586716135413)
x=c(x,-0.0035362307456295087)
x=c(x,0.0010081479780593367)
x=c(x,-0.011591266747038033)
x=c(x,0.018193176114558996)
x=c(x,0.0013784076051210198)
x=c(x,0.0006544903356533366)
x=c(x,-0.00961093282923624)
x=c(x,-0.005574566510792748)
x=c(x,-0.012674679774083287)
x=c(x,-0.02554984099772796)
x=c(x,-0.0062500419608961496)
x=c(x,-0.02162620685766858)
x=c(x,-0.020891326002954277)
x=c(x,-0.01652295852344412)
x=c(x,0.05056208614533103)
x=c(x,0.012861894654594176)
x=c(x,-0.007591470493233616)
x=c(x,-0.00527460415713268)
x=c(x,-0.06310017031349874)
x=c(x,0.02284238309567321)
x=c(x,0.0032395927511462076)
x=c(x,0.010060494910708328)
x=c(x,-0.00792095954301394)
x=c(x,0.022925953083403044)
x=c(x,0.00799420591457508)
x=c(x,-0.011500680379734637)
x=c(x,0.009413237720011148)
x=c(x,0.007808493817206399)
x=c(x,-0.015924511297993382)
x=c(x,0.006755620614174233)
x=c(x,0.011831902692243119)
x=c(x,0.0446598389917894)
x=c(x,-0.008233026312306062)
x=c(x,0.004157715897249447)
x=c(x,-0.04167315755895823)
x=c(x,-0.01787626683757396)
x=c(x,-0.001131518722487318)
x=c(x,0.007086278204290962)
x=c(x,0.003707990207300746)
x=c(x,0.016883746756956756)
x=c(x,0.003171389831292744)
x=c(x,0.00033640954632090775)
x=c(x,-0.01295008812337208)
x=c(x,0.023281874895052426)
x=c(x,-0.007500953626532527)
x=c(x,0.0052651199653397825)
x=c(x,-0.009645478564382885)
x=c(x,-0.010402079366669351)
x=c(x,0.00722459984465842)
x=c(x,0.007442097547248218)
x=c(x,0.021614695941553786)
x=c(x,-0.022823428975156327)
x=c(x,0.002495335277847749)
x=c(x,0.01861277915686697)
x=c(x,-0.005045702320539288)
x=c(x,-0.04805833148744993)
x=c(x,-0.014449311779593499)
x=c(x,-0.042226917095430666)
x=c(x,-0.006377041545023499)
x=c(x,-0.0016580641295382444)
x=c(x,-0.00047289628441799745)
x=c(x,-0.001692867257871391)
x=c(x,0.0021752939084845493)
x=c(x,-0.010213272045503386)
x=c(x,0.02008925653756745)
x=c(x,0.0030344652463662612)
x=c(x,0.017760392507139674)
x=c(x,-0.0011509560580740545)
x=c(x,-0.01807916745003658)
x=c(x,-0.057139912307153866)
x=c(x,0.0037656079019761425)
x=c(x,-0.015481266281821069)
x=c(x,-0.009732196551121538)
x=c(x,0.017983055311759838)
x=c(x,-0.0035122454532909462)
x=c(x,0.0029561478350878592)
x=c(x,0.0209615609284627)
x=c(x,-0.01692591428436166)
x=c(x,-0.008806474891422365)
x=c(x,-0.008380533213328765)
x=c(x,-0.022828791109651036)
x=c(x,0.05525424456682204)
x=c(x,0.008967046489299482)
x=c(x,0.055766305548096334)
x=c(x,0.005807756912023563)
x=c(x,0.03816010352815727)
x=c(x,-0.04768770504752676)
x=c(x,0.0022257956034128197)
x=c(x,-0.08664672143689423)
x=c(x,0.015420388169493286)
x=c(x,0.02587723157626442)
x=c(x,0.03250472864727741)
x=c(x,0.02755497992913423)
x=c(x,-0.03343180827483009)
x=c(x,0.054761768609272794)
x=c(x,0.021676145258923193)
x=c(x,0.004817788973459067)
x=c(x,-0.03341201108306152)
x=c(x,-0.03340932444446314)
x=c(x,0.023964074282456244)
x=c(x,-0.013954031192568052)
x=c(x,-0.014685244575386178)
x=c(x,-0.06491154633906952)
x=c(x,-0.0346815939277851)
x=c(x,-0.027350348773727745)
x=c(x,-0.01829641827432907)
x=c(x,-0.005263462166606839)
x=c(x,0.029862823215870558)
x=c(x,0.03353489584429241)
x=c(x,-0.03276226972856361)
x=c(x,-0.0340858670881976)
x=c(x,0.046879319713211555)
x=c(x,0.012587624549128141)
x=c(x,-0.038570266539755906)
x=c(x,-0.0021157030737977973)
x=c(x,-0.046800553013645184)
x=c(x,-0.03665933881426151)
x=c(x,0.02508287686970917)
x=c(x,-0.07638634017323044)
x=c(x,0.05812058011871222)
x=c(x,-0.048333972740994345)
x=c(x,-0.02908287757271453)
x=c(x,-0.06877125310165974)
x=c(x,0.00023443291219177532)
x=c(x,0.0029156469484485467)
x=c(x,-0.035054605072188987)
x=c(x,0.09532700740292119)
x=c(x,-0.0326456953343623)
x=c(x,-0.07744691353643954)
x=c(x,0.006464103037245309)
x=c(x,-0.180517010647014)
x=c(x,0.7350522401479704)
x=c(x,-0.1301714950645147)
x=c(x,-0.07959559762696518)
x=c(x,-0.08340796951835482)
x=c(x,-0.14674660847674462)
x=c(x,-0.0049193477085129715)
x=c(x,-0.2086631394477339)
x=c(x,-0.1400125086115691)
x=c(x,-0.1769707917883018)
x=c(x,0.06420241103446675)
x=c(x,0.010015709627582466)
x=c(x,0.02274339897705156)
x=c(x,0.03365354866963445)
x=c(x,-0.00997909505444804)
x=c(x,-0.04245154488921419)
x=c(x,-0.13483669013983515)
x=c(x,0.08790576301892647)
x=c(x,0.09703751083955954)
x=c(x,-0.050097599164292426)
x=c(x,-0.04428311027754804)
x=c(x,-0.0079778745306823)
x=c(x,-0.11926205993823477)
x=c(x,0.13939555212556992)
x=c(x,-0.06998926342734388)
x=c(x,-0.1493626571425084)
x=c(x,0.08461055953155008)
x=c(x,0.14391841123246904)
x=c(x,-0.06638137919407731)
x=c(x,-0.02880655515376367)
x=c(x,0.07602593925984584)
x=c(x,-0.024990362357793783)
x=c(x,-0.012993626689567005)
x=c(x,-0.029467031035577844)
x=c(x,-0.046937347491045625)
x=c(x,0.02967389652663526)
x=c(x,-0.0014446491998531307)
x=c(x,0.07827795808062048)
x=c(x,0.0015231173208914194)
x=c(x,0.00028898465541694435)
x=c(x,-0.011017576937795402)
x=c(x,0.11499878290679934)
x=c(x,0.07610494138890542)
x=c(x,0.010320678049964508)
x=c(x,-0.05583094305015563)
x=c(x,0.026878750235868717)
x=c(x,0.07725545897933449)
x=c(x,0.011075597209242278)
x=c(x,-0.037317790192672)
x=c(x,0.07489528462216119)
x=c(x,0.00917672741032293)
x=c(x,0.032999137821477266)
x=c(x,-0.0731365496607617)
x=c(x,0.03427379895976787)
x=c(x,-0.027615306214322455)
x=c(x,-0.009125509092758976)
x=c(x,0.006687273638033979)
x=c(x,0.03024859398144299)
x=c(x,-0.06682861807021567)
x=c(x,0.015352984301887553)
x=c(x,-0.02970607975787143)
x=c(x,0.00006361741837442168)
x=c(x,0.00005906228545233153)
x=c(x,-0.0005825241939072781)
x=c(x,0.00044322104296254)
x=c(x,0.0004727348775341998)
x=c(x,-0.0017823265680862422)
x=c(x,0.000421518779158068)
x=c(x,0.0005250014040322827)
x=c(x,-0.0010959032209123245)
x=c(x,-0.0008984507496217821)
x=c(x,-0.0002943918018416549)
x=c(x,-0.002236146914763622)
x=c(x,0.00024093482071335212)
x=c(x,-0.003457516827895137)
x=c(x,-0.002071671021324184)
x=c(x,-0.0014884435376239721)
x=c(x,-0.0011603174856032552)
x=c(x,0.0020924773397981633)
x=c(x,-0.000964049567590036)
x=c(x,-0.0031401520394051586)
x=c(x,0.0059898337265840915)
x=c(x,-0.0032055194582933173)
x=c(x,-0.005645907868777843)
x=c(x,-0.0026131334358304725)
x=c(x,-0.0033305732079805385)
x=c(x,-0.0050894467752348165)
x=c(x,-0.0032778408080094937)
x=c(x,0.0008161993148854967)
x=c(x,0.0010140514231843348)
x=c(x,0.017119275748280302)
x=c(x,-0.00032568480412058774)
x=c(x,-0.0056204475446182635)
x=c(x,0.011183558531960526)
x=c(x,-0.0010946885654213698)
x=c(x,0.0268033371309956)
x=c(x,-0.0024560100617957775)
x=c(x,-0.0016656002827488132)
x=c(x,0.017529776101017455)
x=c(x,-0.0014692564299063483)
x=c(x,0.004071540577823246)
x=c(x,-0.0021487804714907257)
x=c(x,-0.01263660694238508)
x=c(x,-0.0032803346170519943)
x=c(x,0.0008454880970397611)
x=c(x,-0.016524741075320926)
x=c(x,0.017819494387412406)
x=c(x,0.001479571595310131)
x=c(x,0.006745084222701181)
x=c(x,-0.00950510170702807)
x=c(x,-0.007466832332513022)
x=c(x,-0.012371443403172575)
x=c(x,-0.026272651778598298)
x=c(x,-0.006210865849065587)
x=c(x,-0.021200040421743123)
x=c(x,-0.02057574007424121)
x=c(x,-0.0171822092631526)
x=c(x,0.04940131744658056)
x=c(x,0.012350573447719856)
x=c(x,-0.009171107979545099)
x=c(x,-0.005582351277281857)
x=c(x,-0.06269333157717986)
x=c(x,0.017352586034356285)
x=c(x,0.0029137138499365084)
x=c(x,0.007948817480922243)
x=c(x,-0.012651427677023281)
x=c(x,0.02253204257151926)
x=c(x,0.0017029444605131225)
x=c(x,-0.011044876395382545)
x=c(x,0.00912272145288193)
x=c(x,0.007667402214089651)
x=c(x,-0.015945588687507818)
x=c(x,0.011956326157900952)
x=c(x,0.012120086233131743)
x=c(x,0.04369443760020474)
x=c(x,-0.013421865308091656)
x=c(x,0.0025819524319614477)
x=c(x,-0.04356309388809199)
x=c(x,-0.017154773946863672)
x=c(x,-0.001009676100331866)
x=c(x,0.006937947019612472)
x=c(x,0.0023080565048311475)
x=c(x,0.01606804847299816)
x=c(x,0.0038835139356706828)
x=c(x,0.0005588020585187644)
x=c(x,-0.005122535212702436)
x=c(x,0.022511417053630522)
x=c(x,-0.006632922970852051)
x=c(x,0.005289668765559045)
x=c(x,-0.009568702501850013)
x=c(x,-0.011226751774351784)
x=c(x,0.0037045631168772207)
x=c(x,0.0075560191111638045)
x=c(x,0.019743762059900048)
x=c(x,-0.02312024894735565)
x=c(x,0.0027489017448318726)
x=c(x,0.015051015891083895)
x=c(x,-0.0051654677204957524)
x=c(x,-0.04715939403215483)
x=c(x,-0.01331597725521111)
x=c(x,-0.042961402221514663)
x=c(x,-0.009293220257561479)
x=c(x,-0.001014650495736662)
x=c(x,-0.0007875204836220992)
x=c(x,-0.0018866922930826976)
x=c(x,0.0031376066105729384)
x=c(x,-0.009708293003731288)
x=c(x,0.018099275108079786)
x=c(x,0.004347046058748162)
x=c(x,0.017508294875882287)
x=c(x,-0.0015469143965511694)
x=c(x,-0.009424605989485814)
x=c(x,-0.05662771453925906)
x=c(x,0.0028910717207096086)
x=c(x,-0.016064327792911042)
x=c(x,-0.004311938095894816)
x=c(x,0.01897930018255393)
x=c(x,-0.003921617721771642)
x=c(x,0.0030570871109686024)
x=c(x,0.020597223497280603)
x=c(x,-0.0158805253767895)
x=c(x,-0.010130946083805794)
x=c(x,-0.008066350466582363)
x=c(x,-0.021370581414332172)
x=c(x,0.06505692792405768)
x=c(x,0.008310091864910671)
x=c(x,0.05491768465915759)
x=c(x,0.001439654530626248)
x=c(x,0.0379270053485637)
x=c(x,-0.04683107576081278)
x=c(x,0.001943451133719213)
x=c(x,-0.08537697715623845)
x=c(x,0.01994675211853408)
x=c(x,0.02207378714542769)
x=c(x,0.04285222740756662)
x=c(x,0.02734561797887848)
x=c(x,-0.029734024479199088)
x=c(x,0.054270823151216896)
x=c(x,0.021926731862097135)
x=c(x,0.005018940646233683)
x=c(x,-0.03513236172991011)
x=c(x,-0.033088976526466175)
x=c(x,0.023241396431645123)
x=c(x,-0.01303028948575341)
x=c(x,-0.014383695604791712)
x=c(x,-0.0649143863991414)
x=c(x,-0.03524088614060655)
x=c(x,-0.031211179522610027)
x=c(x,-0.017496399648801186)
x=c(x,-0.006099452046653714)
x=c(x,0.02933944602416201)
x=c(x,0.032310047194249236)
x=c(x,-0.0271866891185619)
x=c(x,-0.03736560453878433)
x=c(x,0.048547730333715705)
x=c(x,0.023260471347749716)
x=c(x,-0.03932527262722765)
x=c(x,-0.007228073096383524)
x=c(x,-0.04636535717922851)
x=c(x,-0.03520940175718862)
x=c(x,0.024758705553042604)
x=c(x,-0.07333207689564113)
x=c(x,0.06289291656900757)
x=c(x,-0.047559766073156186)
x=c(x,-0.037501904936934484)
x=c(x,-0.07166400577235205)
x=c(x,-0.00015577851250480864)
x=c(x,0.002566115972942106)
x=c(x,-0.034173451144984136)
x=c(x,0.09381340781844028)
x=c(x,-0.03163162380906436)
x=c(x,-0.08214373127177726)
x=c(x,0.006271637585298731)
x=c(x,-0.17757699422327627)
x=c(x,0.7301192883490656)
x=c(x,-0.1296561621356695)
x=c(x,-0.07820693114243722)
x=c(x,-0.08290123264079817)
x=c(x,-0.14616324627246996)
x=c(x,-0.0049030249306803485)
x=c(x,-0.20857458705285448)
x=c(x,-0.15404262308298763)
x=c(x,-0.1787475294549745)
x=c(x,0.061498696908901605)
x=c(x,0.012337058148538213)
x=c(x,0.02095843943589732)
x=c(x,0.03889260400213744)
x=c(x,-0.010083862158257231)
x=c(x,-0.042204749361973506)
x=c(x,-0.1390064189854215)
x=c(x,0.08690555025824155)
x=c(x,0.09698360304823767)
x=c(x,-0.0491066605653221)
x=c(x,-0.04316463784134908)
x=c(x,-0.009266618123125752)
x=c(x,-0.11794985865120874)
x=c(x,0.13771568622953476)
x=c(x,-0.069571141416406)
x=c(x,-0.14609013985454955)
x=c(x,0.08311997327370742)
x=c(x,0.14258035709331152)
x=c(x,-0.0644192101063134)
x=c(x,-0.027116603818568234)
x=c(x,0.07589460747960278)
x=c(x,-0.021920324817338892)
x=c(x,-0.01298404806939071)
x=c(x,-0.028819121655863516)
x=c(x,-0.046387345747950955)
x=c(x,0.03037783206848485)
x=c(x,-0.0015500894393804384)
x=c(x,0.07864444884101028)
x=c(x,0.0015233275207988015)
x=c(x,0.004867487094033568)
x=c(x,-0.009987935678960414)
x=c(x,0.11388329055998624)
x=c(x,0.0761945481239257)
x=c(x,0.00993292674565118)
x=c(x,-0.05349808689857109)
x=c(x,0.02586369892094879)
x=c(x,0.07562537506054186)
x=c(x,0.011636097386543774)
x=c(x,-0.0361963293246657)
x=c(x,0.07329198152214575)
x=c(x,0.00833972761309765)
x=c(x,0.03505966362041081)
x=c(x,-0.07251051816047699)
x=c(x,0.03848052995085668)
x=c(x,-0.01427547298920756)
x=c(x,-0.009707090925051797)
x=c(x,0.006107642076218975)
x=c(x,0.026844927325835558)
x=c(x,-0.06482301454612412)
x=c(x,0.01605933392162883)
x=c(x,-0.028657341719123153)
x=c(x,0.00009398203018723603)
x=c(x,0.0002964572161043017)
x=c(x,-0.0006453771342491456)
x=c(x,-0.0001381113518491129)
x=c(x,0.000440438929291799)
x=c(x,-0.001832754491454777)
x=c(x,0.0003770632476448788)
x=c(x,0.0009293210602048715)
x=c(x,-0.0005761417265204332)
x=c(x,-0.0009207332448966138)
x=c(x,0.00006563291771077852)
x=c(x,-0.002001468899413765)
x=c(x,0.00249779608928562)
x=c(x,-0.00483457307994069)
x=c(x,-0.0026894809129652834)
x=c(x,-0.001309874317879841)
x=c(x,-0.001371164565851914)
x=c(x,0.0023251098504080752)
x=c(x,-0.0016052283911409562)
x=c(x,-0.0031247710832922426)
x=c(x,0.0073589224718400865)
x=c(x,-0.0031676834226589436)
x=c(x,-0.006608715364327043)
x=c(x,-0.00000922596790418211)
x=c(x,-0.0038032437126416666)
x=c(x,-0.004297855714736152)
x=c(x,-0.003058869525771734)
x=c(x,0.00000959325440830886)
x=c(x,0.0006713740435691063)
x=c(x,0.01627265720594724)
x=c(x,-0.0007687337970850214)
x=c(x,-0.005718553983325067)
x=c(x,0.010326293946804706)
x=c(x,0.002573221015542888)
x=c(x,0.024716351189740225)
x=c(x,-0.002806647158726317)
x=c(x,-0.0014666938425606847)
x=c(x,0.01670512710221013)
x=c(x,-0.0014999147162689534)
x=c(x,0.0021268833068007202)
x=c(x,-0.0016474681508299581)
x=c(x,-0.014375949010659014)
x=c(x,-0.0023110564411063985)
x=c(x,0.0007344419610632206)
x=c(x,-0.018152209888161155)
x=c(x,0.016792600146594762)
x=c(x,0.0011369014433073345)
x=c(x,0.010046310070904767)
x=c(x,-0.009518585454323289)
x=c(x,-0.008583308213548526)
x=c(x,-0.01095278580678874)
x=c(x,-0.025554955016753544)
x=c(x,-0.006293579040063201)
x=c(x,-0.02087474496214848)
x=c(x,-0.021428854981698015)
x=c(x,-0.017728036893764194)
x=c(x,0.04778430817106066)
x=c(x,0.009025975897859109)
x=c(x,-0.01450299825484345)
x=c(x,-0.005374836670958063)
x=c(x,-0.06233304840562784)
x=c(x,0.015760675776144983)
x=c(x,0.003401143250549323)
x=c(x,0.006538439350017277)
x=c(x,-0.018620674005722395)
x=c(x,0.022449934118243035)
x=c(x,-0.007851321279037189)
x=c(x,-0.010068816940862011)
x=c(x,0.0084804801088188)
x=c(x,0.0071858368374459365)
x=c(x,-0.021162336647819215)
x=c(x,0.012557245148661151)
x=c(x,0.012287530074486942)
x=c(x,0.03969079923904651)
x=c(x,-0.014537821609032584)
x=c(x,-0.0009458950293197217)
x=c(x,-0.04061901145957483)
x=c(x,-0.017162069033837584)
x=c(x,-0.00016201420298299308)
x=c(x,0.004274183552480589)
x=c(x,-0.0008360935095961394)
x=c(x,0.013908448619928163)
x=c(x,0.008515177858141706)
x=c(x,0.0009720695115410767)
x=c(x,0.001628633821937085)
x=c(x,0.02047396519607502)
x=c(x,-0.004874882631229486)
x=c(x,0.004834306867020997)
x=c(x,-0.009002496211932713)
x=c(x,-0.012771793290421793)
x=c(x,-0.006747223844138445)
x=c(x,0.008174733420526856)
x=c(x,0.014951175417292054)
x=c(x,-0.021150994881487837)
x=c(x,-0.0018654707188322508)
x=c(x,0.006000569730861824)
x=c(x,-0.004947182170150063)
x=c(x,-0.04367551654565485)
x=c(x,-0.011681229297483954)
x=c(x,-0.032898104335651025)
x=c(x,-0.009166542787065354)
x=c(x,-0.0018619677187412876)
x=c(x,-0.001680095859773832)
x=c(x,-0.0015889588387814934)
x=c(x,0.004897501674003784)
x=c(x,-0.008891919087803483)
x=c(x,0.01652301421744099)
x=c(x,0.0037639544453199002)
x=c(x,0.016966679808576947)
x=c(x,-0.001108387761759697)
x=c(x,-0.006676346139412215)
x=c(x,-0.05550953640552789)
x=c(x,0.000362176226703186)
x=c(x,-0.015981330100760503)
x=c(x,-0.0008194782294233077)
x=c(x,0.018717854364603527)
x=c(x,-0.003944777227535937)
x=c(x,0.004489801712096844)
x=c(x,0.006851345054111123)
x=c(x,-0.013746253875271347)
x=c(x,-0.008167087744396924)
x=c(x,-0.007471606730075214)
x=c(x,-0.020525987633313734)
x=c(x,0.008907008282710018)
x=c(x,0.00754795846532312)
x=c(x,0.052850518707963784)
x=c(x,-0.007481627602145819)
x=c(x,0.036331462110084006)
x=c(x,-0.04568345565574178)
x=c(x,0.0025435148286100493)
x=c(x,-0.08260807145936082)
x=c(x,0.023393096934435323)
x=c(x,0.017988925326205954)
x=c(x,0.04758258793498113)
x=c(x,0.02715903415576484)
x=c(x,-0.02356950083795573)
x=c(x,0.0519018856720575)
x=c(x,0.021152947475064233)
x=c(x,0.005157999750552045)
x=c(x,-0.03278563185203333)
x=c(x,-0.03149629972438937)
x=c(x,0.02061770443244177)
x=c(x,-0.012931528460559168)
x=c(x,-0.01397749913405821)
x=c(x,-0.08870010257800452)
x=c(x,-0.03571227365614799)
x=c(x,-0.06058400388080704)
x=c(x,-0.01603459327382113)
x=c(x,-0.006212591218795214)
x=c(x,0.028249707005745042)
x=c(x,0.040409923638805814)
x=c(x,-0.006815510328028407)
x=c(x,-0.04470664471227365)
x=c(x,0.04216115337375797)
x=c(x,0.027103114934196672)
x=c(x,-0.03936045556745933)
x=c(x,-0.010882661774331635)
x=c(x,-0.047915424370907164)
x=c(x,-0.032408804481077004)
x=c(x,0.02413126924869095)
x=c(x,-0.06944891728862844)
x=c(x,0.062486472862613454)
x=c(x,-0.04325255253902863)
x=c(x,-0.04568241939871208)
x=c(x,-0.0778109605074425)
x=c(x,-0.0019876070173617693)
x=c(x,0.0007391955814924294)
x=c(x,-0.033144507879679035)
x=c(x,0.08885427787727741)
x=c(x,-0.028545887596979323)
x=c(x,-0.08758546060302497)
x=c(x,0.005269120867669982)
x=c(x,-0.1569278425421399)
x=c(x,0.7203655409728653)
x=c(x,-0.12919225611109142)
x=c(x,-0.07643361368868742)
x=c(x,-0.0824238492498134)
x=c(x,-0.13779707105937078)
x=c(x,-0.004703313515158939)
x=c(x,-0.20787413729614057)
x=c(x,-0.1862059556935578)
x=c(x,-0.17894682997172712)
x=c(x,0.04719480820860235)
x=c(x,0.013802089384782685)
x=c(x,0.01903623202902855)
x=c(x,0.04605664312955246)
x=c(x,-0.020671820234045624)
x=c(x,-0.038978824647936644)
x=c(x,-0.14454677033523605)
x=c(x,0.08372730205105829)
x=c(x,0.09692212371355287)
x=c(x,-0.04769927460710559)
x=c(x,-0.04270838192852446)
x=c(x,-0.00899496310147839)
x=c(x,-0.11630572353571332)
x=c(x,0.13528831731198845)
x=c(x,-0.06800561769673145)
x=c(x,-0.14044705403130694)
x=c(x,0.08068362699721464)
x=c(x,0.13751454448952358)
x=c(x,-0.06114598474559965)
x=c(x,-0.032068916655999036)
x=c(x,0.07395337838693214)
x=c(x,-0.016119087182838374)
x=c(x,-0.017193074227171673)
x=c(x,-0.027251846270609434)
x=c(x,-0.0436296997769812)
x=c(x,0.029838866677112608)
x=c(x,0.00027799149871892434)
x=c(x,0.07461893823512304)
x=c(x,0.0006295887014442431)
x=c(x,0.014083718471546646)
x=c(x,0.003028493472951405)
x=c(x,0.11020393104664468)
x=c(x,0.07515601503400218)
x=c(x,0.0017364130987343575)
x=c(x,-0.05187406996545875)
x=c(x,0.024175633374994766)
x=c(x,0.07336327532216594)
x=c(x,0.012601348906992632)
x=c(x,-0.03417696886303439)
x=c(x,0.07122625783292212)
x=c(x,0.007767816072741019)
x=c(x,0.034869494354815955)
x=c(x,-0.06990209058545484)
x=c(x,0.04532140068634926)
x=c(x,-0.00113648259763278)
x=c(x,-0.009142176683666337)
x=c(x,0.000392053161143623)
x=c(x,0.008542265080522705)
x=c(x,-0.06231689778103848)
x=c(x,0.02463488757452323)
x=c(x,-0.03786932892415784)
x=c(x,0.000008268638977927401)
x=c(x,0.00019315320799592783)
x=c(x,-0.00010220214161658949)
x=c(x,0.0004385376615202484)
x=c(x,0.0004128453520157749)
x=c(x,-0.001434353773665272)
x=c(x,0.0006119671756356568)
x=c(x,-0.000145671407059327)
x=c(x,-0.0023991152587776407)
x=c(x,-0.0005407072409463431)
x=c(x,-0.0007721548219954464)
x=c(x,-0.0020318135835616508)
x=c(x,0.0006546955455339845)
x=c(x,-0.001435815227374254)
x=c(x,-0.001540300161843864)
x=c(x,-0.0008005133045222777)
x=c(x,-0.0011168666772178465)
x=c(x,-0.0009728037736804018)
x=c(x,0.0003709037192784792)
x=c(x,-0.002700315205225759)
x=c(x,0.002803958028767576)
x=c(x,0.0006985178411924993)
x=c(x,-0.004224271147268767)
x=c(x,-0.0014330907817406116)
x=c(x,-0.0033461746178228393)
x=c(x,-0.003080163740152317)
x=c(x,-0.0035620169092745635)
x=c(x,0.0011377485434105547)
x=c(x,0.00014987722043153)
x=c(x,0.009617876623191841)
x=c(x,0.0006329124003150524)
x=c(x,-0.0028520666882657854)
x=c(x,0.006095066941758274)
x=c(x,-0.0018280204059072918)
x=c(x,0.020837010525870593)
x=c(x,-0.0003499692318803485)
x=c(x,0.0015305229510878975)
x=c(x,0.014830856157271399)
x=c(x,-0.0026726380529367585)
x=c(x,-0.0009083042452522249)
x=c(x,-0.0026365588236015847)
x=c(x,-0.009871067448689824)
x=c(x,0.0003527729763674838)
x=c(x,0.0005138821032486489)
x=c(x,-0.007766626944215285)
x=c(x,0.012737721998447013)
x=c(x,-0.00297225428405013)
x=c(x,0.0013555199107265067)
x=c(x,-0.006774185833962071)
x=c(x,-0.00499361348340204)
x=c(x,-0.005446332296717454)
x=c(x,-0.012847420286997651)
x=c(x,-0.0011007274264472834)
x=c(x,-0.013190471246052778)
x=c(x,-0.004718273991329754)
x=c(x,-0.013151097118211674)
x=c(x,0.03030924465470781)
x=c(x,0.008983530113993771)
x=c(x,-0.008641563411899691)
x=c(x,-0.004601042061685112)
x=c(x,-0.05760194985088856)
x=c(x,0.014325081388381759)
x=c(x,0.0040238575163298405)
x=c(x,0.007947082849268861)
x=c(x,-0.003465475709620699)
x=c(x,0.018136069214334916)
x=c(x,0.0020988895113220134)
x=c(x,-0.006187564523771648)
x=c(x,0.008411907909675793)
x=c(x,0.008997579538118791)
x=c(x,-0.0032474256319869996)
x=c(x,0.002158882291780028)
x=c(x,0.008331567630647234)
x=c(x,0.024985195176733234)
x=c(x,-0.004097027881475821)
x=c(x,-0.0014115402241144089)
x=c(x,-0.02499045118103416)
x=c(x,-0.009336933487221775)
x=c(x,0.003447134290280301)
x=c(x,0.008524663189120004)
x=c(x,0.0017482298174090651)
x=c(x,0.004771614098961381)
x=c(x,-0.0006823774818889287)
x=c(x,-0.0047533414022785814)
x=c(x,-0.011961083737119202)
x=c(x,0.009441392152609291)
x=c(x,-0.014237512125347128)
x=c(x,0.0052020038252237975)
x=c(x,-0.00515248780823689)
x=c(x,-0.0013076887259165925)
x=c(x,-0.000961959635071418)
x=c(x,0.00297975045787435)
x=c(x,0.019928061126847176)
x=c(x,-0.02194515469532036)
x=c(x,0.0028841012369280627)
x=c(x,0.0064019733669370095)
x=c(x,-0.004696831495250117)
x=c(x,-0.02786604424917959)
x=c(x,-0.008689454978913509)
x=c(x,-0.04097087594196004)
x=c(x,-0.010846243737849159)
x=c(x,0.002042648648839179)
x=c(x,0.0017227939949038128)
x=c(x,-0.00024571985148020295)
x=c(x,-0.0022061596092560606)
x=c(x,-0.004654296511082687)
x=c(x,0.014839361540562496)
x=c(x,0.0021055110096355125)
x=c(x,0.003650097752938546)
x=c(x,-0.0006061707468473847)
x=c(x,-0.02222094844136447)
x=c(x,-0.03867108926643534)
x=c(x,0.02375844202998165)
x=c(x,0.011091093227625085)
x=c(x,-0.00881778442726856)
x=c(x,0.006845633597456975)
x=c(x,-0.0001538556769553451)
x=c(x,0.0077373387645664525)
x=c(x,0.010714316435022892)
x=c(x,-0.010649623222508736)
x=c(x,0.0011681758561832927)
x=c(x,-0.0034575371955119483)
x=c(x,-0.020794765501004123)
x=c(x,0.031768213085306043)
x=c(x,0.005162489646323736)
x=c(x,0.033589000533859215)
x=c(x,-0.008932705020079408)
x=c(x,0.010079298464602138)
x=c(x,-0.04048972456613915)
x=c(x,-0.0015382246310328548)
x=c(x,-0.03735110080941927)
x=c(x,0.01554603137724577)
x=c(x,0.020954450313797737)
x=c(x,0.017376362163359315)
x=c(x,0.006031228739534336)
x=c(x,-0.01719306093250713)
x=c(x,0.08316546730221808)
x=c(x,0.007850205212221696)
x=c(x,-0.011809502956758276)
x=c(x,-0.03648322116480463)
x=c(x,-0.009591923410826987)
x=c(x,0.027241466725571498)
x=c(x,-0.009319300986597048)
x=c(x,-0.028712433156170364)
x=c(x,-0.014336235219985173)
x=c(x,-0.034407962225261476)
x=c(x,-0.03422883114838129)
x=c(x,-0.022396177321410096)
x=c(x,0.00444185924067385)
x=c(x,0.02583191787517572)
x=c(x,0.009358143217586963)
x=c(x,-0.017103351082969828)
x=c(x,-0.03647111640325105)
x=c(x,0.02338478859763562)
x=c(x,-0.0005335381064486922)
x=c(x,-0.0219457705414722)
x=c(x,-0.0015302842833505024)
x=c(x,-0.016019505299707748)
x=c(x,-0.013483983527363807)
x=c(x,0.017845054186539172)
x=c(x,-0.05022453822179592)
x=c(x,0.034194600409427435)
x=c(x,-0.02070698019886405)
x=c(x,-0.02441183648529213)
x=c(x,-0.03957816783007125)
x=c(x,0.006634767577720088)
x=c(x,0.002403895666495632)
x=c(x,-0.03166880182114164)
x=c(x,0.05971893600986573)
x=c(x,-0.03743254536517753)
x=c(x,-0.02498907740768297)
x=c(x,-0.011216457526425359)
x=c(x,-0.06504254939814307)
x=c(x,0.1892868466868128)
x=c(x,0.010211304322822768)
x=c(x,-0.0469036652214246)
x=c(x,-0.08569716422606093)
x=c(x,-0.09294986876622602)
x=c(x,0.00792028072837201)
x=c(x,-0.08917043520509232)
x=c(x,-0.06115925164173771)
x=c(x,-0.06515396733098869)
x=c(x,0.04872274482784922)
x=c(x,0.004341715387250534)
x=c(x,0.01070401013341175)
x=c(x,0.012883572443901363)
x=c(x,-0.019340414712008598)
x=c(x,-0.013340014470448386)
x=c(x,-0.04550220122054725)
x=c(x,0.035428579083473515)
x=c(x,0.061613456399125494)
x=c(x,-0.060095045733478965)
x=c(x,-0.007200547780628919)
x=c(x,0.009162776677994268)
x=c(x,-0.07747905446480147)
x=c(x,0.07627077014824533)
x=c(x,-0.036618216191647276)
x=c(x,-0.10704627196532826)
x=c(x,0.06690022317726754)
x=c(x,0.07130852664933654)
x=c(x,-0.03552006210329288)
x=c(x,-0.05040603123612184)
x=c(x,0.043723762574489615)
x=c(x,-0.022384386360126296)
x=c(x,-0.02851392349661731)
x=c(x,-0.01044634087305787)
x=c(x,-0.03884702254299023)
x=c(x,0.036592734844600926)
x=c(x,-0.0029631920698205373)
x=c(x,0.03725987146666388)
x=c(x,0.01459409928748426)
x=c(x,-0.004962086254975477)
x=c(x,-0.0024136716318312)
x=c(x,0.07111979347634823)
x=c(x,0.04303211547816947)
x=c(x,0.0021166674876163328)
x=c(x,-0.04468472883772153)
x=c(x,0.005062122885836388)
x=c(x,0.04504105631920561)
x=c(x,0.010107025042483753)
x=c(x,-0.011903294798433375)
x=c(x,0.039109488080344416)
x=c(x,0.0039760600909945825)
x=c(x,0.02222473270807119)
x=c(x,-0.05506480405600546)
x=c(x,0.02664828713591817)
x=c(x,-0.024564584926645646)
x=c(x,-0.005303120859968229)
x=c(x,-0.005106057148188522)
x=c(x,0.020796850598277742)
x=c(x,-0.06294333264836685)
x=c(x,-0.0013323121467558243)
x=c(x,-0.02177791405844509)
x=c(x,0.00002052139239039603)
x=c(x,0.00022417255095523745)
x=c(x,-0.00021811063346461178)
x=c(x,0.0002653782212875626)
x=c(x,0.0004076015497703635)
x=c(x,-0.0015283697500864237)
x=c(x,0.0005299301814215134)
x=c(x,0.00008217918165950351)
x=c(x,-0.002315269219832331)
x=c(x,-0.0007614866448291712)
x=c(x,-0.00040559354478003786)
x=c(x,-0.0019449933937610647)
x=c(x,0.0011537466411583514)
x=c(x,-0.0021166286663682914)
x=c(x,-0.0017283787530432732)
x=c(x,-0.0007693604460392873)
x=c(x,-0.001189400772157241)
x=c(x,-0.00042438216001681827)
x=c(x,-0.0004267644402146282)
x=c(x,-0.0026225834218266916)
x=c(x,0.003805045130179236)
x=c(x,0.0007779692178760528)
x=c(x,-0.005732338959415323)
x=c(x,-0.001659889738263961)
x=c(x,-0.0034966816443155317)
x=c(x,-0.0023996244226933226)
x=c(x,-0.0034816611719650126)
x=c(x,0.0008276613481096462)
x=c(x,0.00003862280979438272)
x=c(x,0.009379243526192755)
x=c(x,-0.0002498605386792355)
x=c(x,-0.0029110296808647954)
x=c(x,0.006076335827803653)
x=c(x,-0.0009685004844197109)
x=c(x,0.020837010525870468)
x=c(x,-0.0009440525083109557)
x=c(x,0.0019380214904867895)
x=c(x,0.014523832610992458)
x=c(x,-0.0026726380529367585)
x=c(x,-0.0010011112181574936)
x=c(x,-0.0025833235247706833)
x=c(x,-0.010106368480139807)
x=c(x,0.00033061824775266146)
x=c(x,0.000519621716557319)
x=c(x,-0.009377449388216764)
x=c(x,0.012705626941237447)
x=c(x,-0.0020550161386780575)
x=c(x,0.003592808952081747)
x=c(x,-0.0067891454313117215)
x=c(x,-0.004999189374064857)
x=c(x,-0.005607247191390387)
x=c(x,-0.013257140238674227)
x=c(x,-0.0009873482173453883)
x=c(x,-0.013100745456450145)
x=c(x,-0.004723526049380854)
x=c(x,-0.012055899708750867)
x=c(x,0.03027890292071454)
x=c(x,0.008982437211269673)
x=c(x,-0.009596611875729666)
x=c(x,-0.004098853149486833)
x=c(x,-0.05471608385907563)
x=c(x,0.010723610391123396)
x=c(x,0.004096135218338864)
x=c(x,0.008098437999307628)
x=c(x,-0.005405581399147041)
x=c(x,0.017922881581927102)
x=c(x,-0.0006358066503181391)
x=c(x,-0.005902615088374416)
x=c(x,0.008403913607494259)
x=c(x,0.008965340097520523)
x=c(x,-0.0038195231048826416)
x=c(x,0.005269766363457165)
x=c(x,0.007936964071575618)
x=c(x,0.023842737797489112)
x=c(x,-0.007287478017000325)
x=c(x,-0.002445445107669875)
x=c(x,-0.0237564764014044)
x=c(x,-0.010786411368764357)
x=c(x,0.002982180588967649)
x=c(x,0.008346655405486595)
x=c(x,0.0010614884523197474)
x=c(x,0.004941848124708145)
x=c(x,0.0011751210237125169)
x=c(x,-0.004885527174180273)
x=c(x,-0.009519065376021171)
x=c(x,0.00988012105454353)
x=c(x,-0.014167139523828845)
x=c(x,0.0047899363134876706)
x=c(x,-0.005506054865056013)
x=c(x,-0.0007913648339336521)
x=c(x,-0.0021021804557436624)
x=c(x,0.003318072094533685)
x=c(x,0.01926614859840184)
x=c(x,-0.01970266358997555)
x=c(x,0.0029910097654728047)
x=c(x,0.002815872329174355)
x=c(x,-0.005448900442926449)
x=c(x,-0.026266435753509006)
x=c(x,-0.008684809986094314)
x=c(x,-0.039334766940953274)
x=c(x,-0.011615115570611944)
x=c(x,0.00174682120562686)
x=c(x,0.001505704085787747)
x=c(x,-0.00019134716909937886)
x=c(x,-0.0006550445013203063)
x=c(x,-0.004490435117873596)
x=c(x,0.014738979612352269)
x=c(x,0.004435089603193526)
x=c(x,0.0037470493896848115)
x=c(x,-0.0006139568224504271)
x=c(x,-0.020188330900673863)
x=c(x,-0.037739821992169305)
x=c(x,0.023620080965226012)
x=c(x,0.010842543860478676)
x=c(x,-0.00648127019289217)
x=c(x,0.007398369886793196)
x=c(x,-0.00037402659619267494)
x=c(x,0.008025205520318768)
x=c(x,0.01099404530667563)
x=c(x,-0.010275007947100151)
x=c(x,-0.00006023447987675979)
x=c(x,-0.003246129281523805)
x=c(x,-0.019254872564307003)
x=c(x,0.03435837804588519)
x=c(x,0.005303679957477697)
x=c(x,0.03406588405873343)
x=c(x,-0.010784461896420948)
x=c(x,0.010618495113594783)
x=c(x,-0.04048972456613915)
x=c(x,-0.0010142951161386563)
x=c(x,-0.03713813493710227)
x=c(x,0.017374567249449732)
x=c(x,0.019268679714736038)
x=c(x,0.020940940241026895)
x=c(x,0.006698030784109536)
x=c(x,-0.017185920689916295)
x=c(x,0.08246805587467591)
x=c(x,0.008419944772430703)
x=c(x,-0.011053600789484646)
x=c(x,-0.035998296947686796)
x=c(x,-0.009814506534472349)
x=c(x,0.026259862301784346)
x=c(x,-0.008620724519997932)
x=c(x,-0.028772013007855743)
x=c(x,-0.014336235219985173)
x=c(x,-0.03453763006912082)
x=c(x,-0.03402513273136896)
x=c(x,-0.0224633789524657)
x=c(x,0.003892154927356145)
x=c(x,0.02556426727203219)
x=c(x,0.009356348720162588)
x=c(x,-0.01303667500778411)
x=c(x,-0.038868312075051155)
x=c(x,0.023715089426648597)
x=c(x,0.002462152842098394)
x=c(x,-0.021417518393763)
x=c(x,-0.00341858009491871)
x=c(x,-0.01478143550228165)
x=c(x,-0.013799093151406929)
x=c(x,0.017834077133484224)
x=c(x,-0.05020768220839403)
x=c(x,0.03845770743292756)
x=c(x,-0.020631554325917872)
x=c(x,-0.030162215094698023)
x=c(x,-0.04223700541628453)
x=c(x,0.006024737579131169)
x=c(x,0.0021870561101749028)
x=c(x,-0.030969641594594585)
x=c(x,0.05971892722306186)
x=c(x,-0.03816762561258002)
x=c(x,-0.02205233814222204)
x=c(x,-0.011185628741781679)
x=c(x,-0.06483038421218489)
x=c(x,0.18921753106431424)
x=c(x,0.010211303052698748)
x=c(x,-0.046854224463502424)
x=c(x,-0.08564809832152732)
x=c(x,-0.09225047623833271)
x=c(x,0.00792037175531642)
x=c(x,-0.08911007131229427)
x=c(x,-0.06338418714733396)
x=c(x,-0.062051843728840615)
x=c(x,0.04839572036273627)
x=c(x,0.005259260572816524)
x=c(x,0.010506726517979079)
x=c(x,0.01932462944499076)
x=c(x,-0.020189167310945014)
x=c(x,-0.013305786103843042)
x=c(x,-0.04824607872403158)
x=c(x,0.035428485475542094)
x=c(x,0.0617686608102067)
x=c(x,-0.060086946197707616)
x=c(x,-0.007198644080701685)
x=c(x,0.009392903029978932)
x=c(x,-0.07717899704037419)
x=c(x,0.07636876022608849)
x=c(x,-0.03672627624193494)
x=c(x,-0.10692502609229237)
x=c(x,0.06709684883769775)
x=c(x,0.07172374724045966)
x=c(x,-0.035520638124646634)
x=c(x,-0.050948145195434696)
x=c(x,0.043732980821229284)
x=c(x,-0.022492638448127798)
x=c(x,-0.02891750151199736)
x=c(x,-0.01069743172909879)
x=c(x,-0.03884707224338105)
x=c(x,0.03588409048570498)
x=c(x,-0.0024895010988571563)
x=c(x,0.038713570943047095)
x=c(x,0.014491854567883213)
x=c(x,-0.002714733748069925)
x=c(x,-0.0022721816163808277)
x=c(x,0.07100332480940581)
x=c(x,0.043388257777235505)
x=c(x,0.0012683051163910886)
x=c(x,-0.045161421338888445)
x=c(x,0.00498104007799745)
x=c(x,0.0453803994353199)
x=c(x,0.010024418083751957)
x=c(x,-0.011903294798433375)
x=c(x,0.03950449590095364)
x=c(x,0.004054168016552838)
x=c(x,0.021835118011152094)
x=c(x,-0.05413896992076183)
x=c(x,0.029044286488469837)
x=c(x,-0.019125797574112265)
x=c(x,-0.005764581847739072)
x=c(x,-0.005456394077876489)
x=c(x,0.019442582822215452)
x=c(x,-0.0639397659922945)
x=c(x,-0.0031630892883887742)
x=c(x,-0.02189967809137139)
x=c(x,0.00002720205253743858)
x=c(x,0.0003178116028322836)
x=c(x,-0.0002796483353922328)
x=c(x,0.00011151935860362513)
x=c(x,0.0003878608764982965)
x=c(x,-0.0016863669527210977)
x=c(x,0.00047178178450972785)
x=c(x,0.00034417284305489126)
x=c(x,-0.002069696815315235)
x=c(x,-0.0009414286358353833)
x=c(x,-0.00021607894861241345)
x=c(x,-0.0017294790096326995)
x=c(x,0.0017383619508650786)
x=c(x,-0.002986021077191651)
x=c(x,-0.0019299765279463788)
x=c(x,-0.00066789808334887)
x=c(x,-0.0009411776979794666)
x=c(x,0.000356668763318815)
x=c(x,-0.0012062300295585585)
x=c(x,-0.002413998172055113)
x=c(x,0.0047015995658265825)
x=c(x,0.0007502281971710756)
x=c(x,-0.006859759391398874)
x=c(x,-0.00004633394357239014)
x=c(x,-0.0035936776685117707)
x=c(x,-0.0020237099655929028)
x=c(x,-0.003376938832921416)
x=c(x,0.00044012545616055424)
x=c(x,0.0002612451240893321)
x=c(x,0.009086609296623159)
x=c(x,-0.0008404057222834672)
x=c(x,-0.002963546019576221)
x=c(x,0.005645465120266817)
x=c(x,0.000896516367279038)
x=c(x,0.02083701052687097)
x=c(x,-0.002209596679097891)
x=c(x,-0.000607111916902984)
x=c(x,0.01436552474227254)
x=c(x,-0.0014643875960198846)
x=c(x,-0.0014208105262650027)
x=c(x,-0.0019400567130985762)
x=c(x,-0.0126912354088938)
x=c(x,0.00020339939507149892)
x=c(x,0.00012660037133468857)
x=c(x,-0.010605397146460246)
x=c(x,0.012257094964988053)
x=c(x,0.0003818577920310668)
x=c(x,0.005295869937537779)
x=c(x,-0.006845919635360841)
x=c(x,-0.004796880937716761)
x=c(x,-0.005431549762481416)
x=c(x,-0.012015746464821574)
x=c(x,-0.0007767173657296636)
x=c(x,-0.013800118701866542)
x=c(x,-0.005934528725350054)
x=c(x,-0.009326825771120957)
x=c(x,0.030056543097330208)
x=c(x,0.008706982623603098)
x=c(x,-0.012254715263999544)
x=c(x,-0.002985130051193729)
x=c(x,-0.05243273481459125)
x=c(x,0.008452565188339565)
x=c(x,0.004786757614996897)
x=c(x,0.008671039460821659)
x=c(x,-0.008693677430735517)
x=c(x,0.018623811208607066)
x=c(x,-0.004929491989853639)
x=c(x,-0.005499879468146617)
x=c(x,0.00823869556155859)
x=c(x,0.008854345763193975)
x=c(x,-0.0062000121361809445)
x=c(x,0.007425301538267625)
x=c(x,0.007028238523799384)
x=c(x,0.022187053190681157)
x=c(x,-0.010279136526798922)
x=c(x,-0.005354693172219759)
x=c(x,-0.020673931324097235)
x=c(x,-0.012846814973898326)
x=c(x,0.002667757448335724)
x=c(x,0.007356956603544582)
x=c(x,-0.00002890169241355444)
x=c(x,0.009649081517874969)
x=c(x,0.00401876426143688)
x=c(x,-0.0053888618808883345)
x=c(x,-0.00666824115572505)
x=c(x,0.010117356780967646)
x=c(x,-0.014257023124966121)
x=c(x,0.0039836891064855846)
x=c(x,-0.005804446640855477)
x=c(x,0.003710414690121945)
x=c(x,-0.004954451268475566)
x=c(x,0.003980956696514132)
x=c(x,0.017486558542416382)
x=c(x,-0.01664667687411239)
x=c(x,-0.00040294007810656377)
x=c(x,-0.0009140299919098364)
x=c(x,-0.005773419927849082)
x=c(x,-0.025114837871327216)
x=c(x,-0.007928375724029282)
x=c(x,-0.029664287596331784)
x=c(x,-0.006939346254635917)
x=c(x,0.0014049742937035723)
x=c(x,0.0012522329506818404)
x=c(x,-0.0001411137957294499)
x=c(x,0.0032558079049614715)
x=c(x,-0.00414696004273593)
x=c(x,0.013344560450602342)
x=c(x,0.006157040477297882)
x=c(x,0.004145800302994199)
x=c(x,-0.0025416559651726864)
x=c(x,-0.02076781736254428)
x=c(x,-0.03557598878873697)
x=c(x,0.0233689173715102)
x=c(x,0.010178859174452255)
x=c(x,-0.0034285503543446207)
x=c(x,0.007531266697403766)
x=c(x,-0.0008365516136488551)
x=c(x,0.009593301375991953)
x=c(x,0.00360108423666577)
x=c(x,-0.009480430457090206)
x=c(x,-0.002540134756870874)
x=c(x,-0.003085953695409886)
x=c(x,-0.016850462131886772)
x=c(x,-0.0005965248966263195)
x=c(x,0.005480180387031934)
x=c(x,0.03441640970100888)
x=c(x,-0.013676375061347439)
x=c(x,0.01096723389643424)
x=c(x,-0.04048972456613915)
x=c(x,-0.000006044641202358614)
x=c(x,-0.03828676099220099)
x=c(x,0.020325300447667612)
x=c(x,0.016569372867951526)
x=c(x,0.02322855079901918)
x=c(x,0.007595705057826982)
x=c(x,-0.017279122758660063)
x=c(x,0.08067090390413743)
x=c(x,0.008693586362462228)
x=c(x,-0.010196027763275028)
x=c(x,-0.03173856220993146)
x=c(x,-0.009883959240886666)
x=c(x,0.024719032482647736)
x=c(x,-0.006162811460340697)
x=c(x,-0.029012776359981503)
x=c(x,-0.019644098761030678)
x=c(x,-0.034556304999791954)
x=c(x,-0.03979560902689448)
x=c(x,-0.022570288890542262)
x=c(x,0.0026684817247733666)
x=c(x,0.0244878673627765)
x=c(x,0.016759720106507624)
x=c(x,-0.0061543154788004355)
x=c(x,-0.04009960627678631)
x=c(x,0.021540944019390353)
x=c(x,0.003739473551579082)
x=c(x,-0.020897248522543897)
x=c(x,-0.005307354265422717)
x=c(x,-0.011508565365507123)
x=c(x,-0.014537657884100668)
x=c(x,0.01781388116365615)
x=c(x,-0.04990398911430912)
x=c(x,0.041244905458568126)
x=c(x,-0.02052710103696807)
x=c(x,-0.035852685521323376)
x=c(x,-0.04998206408605635)
x=c(x,0.005137136098368609)
x=c(x,0.0007698855796537527)
x=c(x,-0.029661277751502943)
x=c(x,0.059717304267197804)
x=c(x,-0.04108364625885988)
x=c(x,-0.016205071632391932)
x=c(x,-0.011159746814307522)
x=c(x,-0.06109091630108321)
x=c(x,0.18918781665045653)
x=c(x,0.01015926360725965)
x=c(x,-0.04687687625583499)
x=c(x,-0.08561874194834035)
x=c(x,-0.08721841314966751)
x=c(x,0.008017958989845598)
x=c(x,-0.08918615429382032)
x=c(x,-0.06893950545168076)
x=c(x,-0.060967713010608174)
x=c(x,0.04423292104837566)
x=c(x,0.004910285436037658)
x=c(x,0.010309212845704616)
x=c(x,0.03141500396802299)
x=c(x,-0.032996339573159325)
x=c(x,-0.01258783834096898)
x=c(x,-0.05429842818122448)
x=c(x,0.035180677465727186)
x=c(x,0.061952307694511634)
x=c(x,-0.06005201191758214)
x=c(x,-0.007194394767237496)
x=c(x,0.011333841754113328)
x=c(x,-0.07661109489727633)
x=c(x,0.07607097181548245)
x=c(x,-0.036880765281657124)
x=c(x,-0.10540765360810966)
x=c(x,0.06684899595832962)
x=c(x,0.07186475514358778)
x=c(x,-0.03554121042274963)
x=c(x,-0.056322693023248806)
x=c(x,0.0437326371860805)
x=c(x,-0.02293026957814013)
x=c(x,-0.030696929996894738)
x=c(x,-0.013034143966927758)
x=c(x,-0.03886994641009419)
x=c(x,0.035843759469566805)
x=c(x,-0.0007908649790261944)
x=c(x,0.04126101062861587)
x=c(x,0.01388673989596813)
x=c(x,0.002881454332339899)
x=c(x,0.0025188835205397888)
x=c(x,0.07193523053403154)
x=c(x,0.04291142024684241)
x=c(x,-0.003985922124870821)
x=c(x,-0.04356888489591583)
x=c(x,0.005068032002604774)
x=c(x,0.04552074277471242)
x=c(x,0.009280031643602213)
x=c(x,-0.011711648472273302)
x=c(x,0.04226477589747055)
x=c(x,0.00441378863130476)
x=c(x,0.017682874130221824)
x=c(x,-0.05372607893139394)
x=c(x,0.034624736313703386)
x=c(x,-0.013039469261972903)
x=c(x,-0.006750640949120288)
x=c(x,-0.010561081884699751)
x=c(x,0.012437555077181266)
x=c(x,-0.06540500611375394)
x=c(x,0.00719115342812319)
x=c(x,-0.02774467499420208)
x=c(x,0.000023524438678177)
x=c(x,0.0002486531513687728)
x=c(x,-0.00008983419894251254)
x=c(x,0.0006132294050421629)
x=c(x,0.0006277681381010839)
x=c(x,-0.0017048433739591691)
x=c(x,0.0008601464089060166)
x=c(x,-0.0000856867051731384)
x=c(x,-0.0018627951242959613)
x=c(x,-0.0005083112458896953)
x=c(x,-0.0007892364885971998)
x=c(x,-0.0024385654674115896)
x=c(x,0.0005944765331745328)
x=c(x,-0.0021389680591961317)
x=c(x,-0.002196029065560273)
x=c(x,-0.0011912615561873602)
x=c(x,-0.0009726782938274132)
x=c(x,-0.001311676848610687)
x=c(x,-0.0003316109585734237)
x=c(x,-0.0027946194840688067)
x=c(x,0.0027918352178022427)
x=c(x,-0.002203132372304416)
x=c(x,-0.004826172264072796)
x=c(x,-0.0015787392032781658)
x=c(x,-0.0036679195727768437)
x=c(x,-0.004112027740461191)
x=c(x,-0.004109199702494643)
x=c(x,0.0012577601817723393)
x=c(x,0.0003056311349261795)
x=c(x,0.01934092311712352)
x=c(x,0.0020452337708815023)
x=c(x,-0.006242846664899685)
x=c(x,0.009883774602638106)
x=c(x,-0.0007548071615721677)
x=c(x,0.02697634277015784)
x=c(x,-0.0005115791598499784)
x=c(x,0.00006810701243625028)
x=c(x,0.018299786789089015)
x=c(x,-0.0017084928373636255)
x=c(x,0.00007002167851906327)
x=c(x,-0.002818269409475035)
x=c(x,-0.013615891318815191)
x=c(x,0.001370186116907836)
x=c(x,0.0001417857726363518)
x=c(x,-0.012144636625121018)
x=c(x,0.01752323358117086)
x=c(x,-0.0029763713989835214)
x=c(x,0.0033207295413617455)
x=c(x,-0.010912632350802717)
x=c(x,-0.00628180199855545)
x=c(x,-0.011061409108137712)
x=c(x,-0.019680355418835338)
x=c(x,-0.0052776049589613626)
x=c(x,-0.0157067609398086)
x=c(x,-0.011639665828902655)
x=c(x,-0.01658811470847435)
x=c(x,0.04789581402583386)
x=c(x,0.011552959063941192)
x=c(x,-0.011792088342975258)
x=c(x,-0.004672659790223563)
x=c(x,-0.06629493687142628)
x=c(x,0.02762572490160271)
x=c(x,0.0032745009377000865)
x=c(x,0.01137781841415277)
x=c(x,-0.006819382468057456)
x=c(x,0.024880118504056168)
x=c(x,0.0008567710965184201)
x=c(x,-0.008674206636246767)
x=c(x,0.011300367763975843)
x=c(x,0.009256577374993151)
x=c(x,-0.004983917918967936)
x=c(x,0.0018701990702752601)
x=c(x,0.009504583076448822)
x=c(x,0.04017975795014084)
x=c(x,-0.006155141167612354)
x=c(x,-0.001693540994649986)
x=c(x,-0.043506525512779184)
x=c(x,-0.012535637936029487)
x=c(x,0.003088791545226657)
x=c(x,0.008990543567500946)
x=c(x,0.0019726418810401994)
x=c(x,0.009599019859253924)
x=c(x,0.001069612386359555)
x=c(x,-0.0004561786696315273)
x=c(x,-0.014023568148064785)
x=c(x,0.011850560530158573)
x=c(x,-0.014306068906564806)
x=c(x,0.005563088816282359)
x=c(x,-0.00549946273432424)
x=c(x,-0.00871206743039418)
x=c(x,-0.002038159899603644)
x=c(x,0.002332337240107213)
x=c(x,0.021003899864219844)
x=c(x,-0.021155123181650286)
x=c(x,0.004290813168441335)
x=c(x,0.00730942511754898)
x=c(x,-0.002909970417613165)
x=c(x,-0.039103273626646735)
x=c(x,-0.008070666860126492)
x=c(x,-0.05088962068484089)
x=c(x,-0.010255370887955244)
x=c(x,0.004912861527120794)
x=c(x,0.001948947686384878)
x=c(x,0.0022876154732185067)
x=c(x,0.0034549757704723503)
x=c(x,-0.006074908367122996)
x=c(x,0.01567204551083585)
x=c(x,0.0017161559681886148)
x=c(x,0.013598232672268371)
x=c(x,-0.00241669826237324)
x=c(x,-0.028050006058235908)
x=c(x,-0.054136039918241466)
x=c(x,0.014905437321022019)
x=c(x,0.0004906732215318817)
x=c(x,-0.012274125997030759)
x=c(x,0.008308662510271401)
x=c(x,0.00042277799715950036)
x=c(x,0.0057509959376053745)
x=c(x,0.012164547550341992)
x=c(x,-0.012614485718967195)
x=c(x,-0.00522190677225689)
x=c(x,-0.007923239891864713)
x=c(x,-0.029827483848912973)
x=c(x,0.05368983133088436)
x=c(x,0.0035702419009864747)
x=c(x,0.06771615306323255)
x=c(x,-0.026755758979914765)
x=c(x,0.018652175586280427)
x=c(x,-0.047328269044879454)
x=c(x,-0.006700862371474665)
x=c(x,-0.05117227896939844)
x=c(x,0.019272228476630543)
x=c(x,0.028502121854659997)
x=c(x,0.025397152154696328)
x=c(x,0.014145821404212106)
x=c(x,-0.010370229950190971)
x=c(x,0.10625249533595053)
x=c(x,0.013972444721117925)
x=c(x,-0.004015287233507612)
x=c(x,-0.03968806622942109)
x=c(x,-0.018960240942465456)
x=c(x,0.032250519953530746)
x=c(x,-0.011543456211384471)
x=c(x,-0.03333330933811456)
x=c(x,-0.028514942312737015)
x=c(x,-0.028298410150133894)
x=c(x,-0.03769568637027706)
x=c(x,-0.029955581584770012)
x=c(x,0.0021526133730554453)
x=c(x,0.035930903713302556)
x=c(x,0.013364630704035001)
x=c(x,-0.022126864190293926)
x=c(x,-0.04019554455451118)
x=c(x,0.029388559808414108)
x=c(x,0.002685539821003384)
x=c(x,-0.04579389527121845)
x=c(x,-0.004449940892751016)
x=c(x,-0.03133283219519036)
x=c(x,-0.014715810707851183)
x=c(x,0.025803199217993924)
x=c(x,-0.06905101169380373)
x=c(x,0.04283063225547849)
x=c(x,-0.03269028998649904)
x=c(x,-0.03372404353671045)
x=c(x,-0.06532162142029084)
x=c(x,0.009056313577266098)
x=c(x,-0.0019803032269743205)
x=c(x,-0.04272119116324565)
x=c(x,0.10269085310571485)
x=c(x,-0.0418826463346556)
x=c(x,-0.0669978497670515)
x=c(x,-0.0028988755309358053)
x=c(x,-0.15792217501224462)
x=c(x,0.5226931801696878)
x=c(x,-0.05080853778248909)
x=c(x,-0.08168296219295534)
x=c(x,-0.10229406596280069)
x=c(x,-0.1658369184414679)
x=c(x,-0.00043603942630028933)
x=c(x,-0.1467689843481264)
x=c(x,-0.0944477656846592)
x=c(x,-0.10615032904408125)
x=c(x,0.07615063753607186)
x=c(x,0.004906959192358514)
x=c(x,0.01211542375059038)
x=c(x,0.017809005660037684)
x=c(x,-0.01667799471806569)
x=c(x,-0.014474840612455036)
x=c(x,-0.06696113759619086)
x=c(x,0.11403334933476497)
x=c(x,0.10007197274536735)
x=c(x,-0.06055555090249422)
x=c(x,-0.012899493069183756)
x=c(x,-0.005477046631317495)
x=c(x,-0.11981044206369254)
x=c(x,0.1440145477278616)
x=c(x,-0.05156770444590409)
x=c(x,-0.1454957335773643)
x=c(x,0.08619409762994096)
x=c(x,0.10903122295621842)
x=c(x,-0.05149932098696881)
x=c(x,-0.060777188269456724)
x=c(x,0.06484670200949529)
x=c(x,-0.022995958051982287)
x=c(x,-0.018298588163767008)
x=c(x,-0.006927829112081928)
x=c(x,-0.05720953285265704)
x=c(x,0.03780633782815961)
x=c(x,-0.005630603280846097)
x=c(x,0.052132834795797056)
x=c(x,0.010874395638731322)
x=c(x,-0.00566944135476582)
x=c(x,-0.003323275563525778)
x=c(x,0.11684337857477312)
x=c(x,0.0687281014664392)
x=c(x,0.0014958852310878706)
x=c(x,-0.05013883268374814)
x=c(x,0.015371571316410964)
x=c(x,0.06155466447495134)
x=c(x,0.01072054437936254)
x=c(x,-0.019455182695451413)
x=c(x,0.04990722592547099)
x=c(x,0.004599984483889832)
x=c(x,0.02555488461718754)
x=c(x,-0.06960839618009752)
x=c(x,0.030845870215239733)
x=c(x,-0.025920141371961258)
x=c(x,-0.005353506063644508)
x=c(x,0.0006037309160338911)
x=c(x,0.02386805652717317)
x=c(x,-0.07259101911266107)
x=c(x,0.006955066326381737)
x=c(x,-0.0262960488491375)
x=c(x,0.00003346580029415412)
x=c(x,0.00028457728338829384)
x=c(x,-0.00023820314297758136)
x=c(x,0.00037565022850881235)
x=c(x,0.0006085987787650426)
x=c(x,-0.0017698086679163972)
x=c(x,0.0007595005666280824)
x=c(x,0.00014038175071201815)
x=c(x,-0.0016874029118877244)
x=c(x,-0.0007244250259426886)
x=c(x,-0.0004112389440662243)
x=c(x,-0.0022787311564952954)
x=c(x,0.001336444199067075)
x=c(x,-0.0028544729048031697)
x=c(x,-0.002399840580290219)
x=c(x,-0.0011583135529713868)
x=c(x,-0.0010923256904354103)
x=c(x,-0.0006650042267483996)
x=c(x,-0.001176276716382379)
x=c(x,-0.00266628084317334)
x=c(x,0.0038171592074698188)
x=c(x,-0.002186592472563837)
x=c(x,-0.006342205674579028)
x=c(x,-0.0019372208105040997)
x=c(x,-0.00380513090505323)
x=c(x,-0.0032765135467520768)
x=c(x,-0.003970343382973953)
x=c(x,0.0009519383982524529)
x=c(x,0.00020817295808495562)
x=c(x,0.01876414640682657)
x=c(x,0.0009572992296789615)
x=c(x,-0.006337702998850089)
x=c(x,0.009883825097708576)
x=c(x,0.00010497270058772238)
x=c(x,0.026342445677960805)
x=c(x,-0.001230600024820655)
x=c(x,0.00037942891815497795)
x=c(x,0.017773247252104073)
x=c(x,-0.0016304814951940325)
x=c(x,-0.00010313394520656015)
x=c(x,-0.002761000066903306)
x=c(x,-0.013607893157600245)
x=c(x,0.0013122653149756562)
x=c(x,0.00006732713193546521)
x=c(x,-0.013833587260711927)
x=c(x,0.017251406428243306)
x=c(x,-0.0018326368744348758)
x=c(x,0.005541412136165752)
x=c(x,-0.010699084363702342)
x=c(x,-0.0062910855262745015)
x=c(x,-0.01081197187328664)
x=c(x,-0.020616458641730742)
x=c(x,-0.005186138680545608)
x=c(x,-0.015564609526577853)
x=c(x,-0.011562867980784182)
x=c(x,-0.015374546792802783)
x=c(x,0.047622331062683224)
x=c(x,0.011237158962888462)
x=c(x,-0.012408935670668156)
x=c(x,-0.004225686438000217)
x=c(x,-0.06258111328422206)
x=c(x,0.023358530526448918)
x=c(x,0.0030546119958811584)
x=c(x,0.01079054075159597)
x=c(x,-0.008940005107670089)
x=c(x,0.02475253313312736)
x=c(x,-0.002100521957774159)
x=c(x,-0.008286007716432965)
x=c(x,0.011051512368354525)
x=c(x,0.009186260267545182)
x=c(x,-0.005462298807991761)
x=c(x,0.005280463919854476)
x=c(x,0.00883843146844822)
x=c(x,0.03799559590296493)
x=c(x,-0.009120903938926474)
x=c(x,-0.0025384239179161642)
x=c(x,-0.0417114371458728)
x=c(x,-0.013780783898350293)
x=c(x,0.002663480880889066)
x=c(x,0.008727024152467915)
x=c(x,0.0011308351662148819)
x=c(x,0.009877411309041169)
x=c(x,0.002656880635550199)
x=c(x,-0.0003336333049801731)
x=c(x,-0.011044842189548062)
x=c(x,0.01244790744450358)
x=c(x,-0.013673154279583323)
x=c(x,0.005408775273861749)
x=c(x,-0.0056548094871967675)
x=c(x,-0.008277697392510542)
x=c(x,-0.003535650287488363)
x=c(x,0.002587134585182219)
x=c(x,0.020208159837359987)
x=c(x,-0.018544047217550406)
x=c(x,0.004657624926552795)
x=c(x,0.0030734679527453716)
x=c(x,-0.003753721699241344)
x=c(x,-0.036672560772965296)
x=c(x,-0.007636281173092686)
x=c(x,-0.04830682198619672)
x=c(x,-0.011304607858980487)
x=c(x,0.004501694557302111)
x=c(x,0.0015704966667668175)
x=c(x,0.0020383167549568363)
x=c(x,0.005214908778445333)
x=c(x,-0.0056808517833746965)
x=c(x,0.014476752472399664)
x=c(x,0.0038331083309642057)
x=c(x,0.013625650336915412)
x=c(x,-0.002605029819650778)
x=c(x,-0.024409586697865603)
x=c(x,-0.052250275034508735)
x=c(x,0.014312390585541965)
x=c(x,-0.0004024335185255053)
x=c(x,-0.009750560549602081)
x=c(x,0.009202591818223234)
x=c(x,-0.00014778489869127505)
x=c(x,0.005914454813578803)
x=c(x,0.012453209936149782)
x=c(x,-0.011777196682113598)
x=c(x,-0.007047733217336454)
x=c(x,-0.007535315828398998)
x=c(x,-0.02819966591796792)
x=c(x,0.05799556223203813)
x=c(x,0.0032808421566002458)
x=c(x,0.066989585201061)
x=c(x,-0.028597054043919906)
x=c(x,0.019309609105648783)
x=c(x,-0.04663679388778841)
x=c(x,-0.006652937813323686)
x=c(x,-0.050227400278017933)
x=c(x,0.020740354282398996)
x=c(x,0.02614264436823904)
x=c(x,0.030152045995728766)
x=c(x,0.015132230763405589)
x=c(x,-0.008607701079604579)
x=c(x,0.10554884708977409)
x=c(x,0.014784428084731752)
x=c(x,-0.0037748285992903184)
x=c(x,-0.03972773346159046)
x=c(x,-0.018914274659625707)
x=c(x,0.031164376705913214)
x=c(x,-0.010318432177481221)
x=c(x,-0.032882917159688684)
x=c(x,-0.028533892063817703)
x=c(x,-0.028720299291286975)
x=c(x,-0.038902142938586085)
x=c(x,-0.028870151494040094)
x=c(x,0.00007328597570244556)
x=c(x,0.03575843945330507)
x=c(x,0.012902659038160316)
x=c(x,-0.017274992493592135)
x=c(x,-0.043014544477669024)
x=c(x,0.029440238400707704)
x=c(x,0.0072114270507927175)
x=c(x,-0.045465039898455815)
x=c(x,-0.006831531323915009)
x=c(x,-0.029868334962301762)
x=c(x,-0.014655876950478788)
x=c(x,0.025805421389921687)
x=c(x,-0.06716519822412102)
x=c(x,0.046962688945153624)
x=c(x,-0.03230386238787236)
x=c(x,-0.04195075798231092)
x=c(x,-0.06678889891876508)
x=c(x,0.007867906285184433)
x=c(x,-0.002527602711714039)
x=c(x,-0.042130002510763286)
x=c(x,0.10145990913591171)
x=c(x,-0.042693970209369415)
x=c(x,-0.06325546546956176)
x=c(x,-0.002958051519762704)
x=c(x,-0.15584652520053896)
x=c(x,0.5196795685895518)
x=c(x,-0.050501969907373906)
x=c(x,-0.0808607651922596)
x=c(x,-0.10188827600548572)
x=c(x,-0.16548592869323897)
x=c(x,-0.0005107396217220731)
x=c(x,-0.14668910001581142)
x=c(x,-0.09910199397091597)
x=c(x,-0.10248676016076798)
x=c(x,0.07419096160321129)
x=c(x,0.006699425206589497)
x=c(x,0.011181575670782134)
x=c(x,0.02438757582763166)
x=c(x,-0.016686024606557423)
x=c(x,-0.014424723516351278)
x=c(x,-0.06925501496437117)
x=c(x,0.11297653404225634)
x=c(x,0.10069512838479547)
x=c(x,-0.0599138654426837)
x=c(x,-0.012581152582425904)
x=c(x,-0.004236320526889464)
x=c(x,-0.11957531871947669)
x=c(x,0.1426821781889191)
x=c(x,-0.051532033511772414)
x=c(x,-0.14387313805115845)
x=c(x,0.08490700407714857)
x=c(x,0.1097263048810077)
x=c(x,-0.05050231931025102)
x=c(x,-0.0598990632349984)
x=c(x,0.06493384985101978)
x=c(x,-0.021117603670947303)
x=c(x,-0.01842195784452079)
x=c(x,-0.007082976887958432)
x=c(x,-0.056800260920567135)
x=c(x,0.037262373830788315)
x=c(x,-0.005078621100328043)
x=c(x,0.05316461966521258)
x=c(x,0.011276971771692448)
x=c(x,-0.0034938380164973313)
x=c(x,-0.0031578131885151507)
x=c(x,0.11606913854493273)
x=c(x,0.06948642406037073)
x=c(x,0.0010153394741090754)
x=c(x,-0.04908612188412699)
x=c(x,0.014589650165751079)
x=c(x,0.06176197556532833)
x=c(x,0.01050354896620756)
x=c(x,-0.019078977588261638)
x=c(x,0.049961583015674736)
x=c(x,0.004254405118938749)
x=c(x,0.024904959481881307)
x=c(x,-0.0669596125683412)
x=c(x,0.032621901547601764)
x=c(x,-0.0194438459402038)
x=c(x,-0.005917173178078248)
x=c(x,0.00022955340319801582)
x=c(x,0.021809603680830545)
x=c(x,-0.07148710591293539)
x=c(x,0.005228141401711356)
x=c(x,-0.026533965081640076)
x=c(x,0.000037568491010645795)
x=c(x,0.0004223365509166037)
x=c(x,-0.0003145263277299914)
x=c(x,0.00016214118296965492)
x=c(x,0.0005655524145860718)
x=c(x,-0.0018575738796989968)
x=c(x,0.0006777216955080874)
x=c(x,0.00040769822958044424)
x=c(x,-0.001202757477358836)
x=c(x,-0.0008425783406169125)
x=c(x,-0.00021303588846523385)
x=c(x,-0.002026953923557697)
x=c(x,0.0022108279247438287)
x=c(x,-0.0037620605358655583)
x=c(x,-0.0025832883288799294)
x=c(x,-0.001040822433098739)
x=c(x,-0.0008730868749172799)
x=c(x,0.00028358445444444234)
x=c(x,-0.0019941230850674552)
x=c(x,-0.00241985070257154)
x=c(x,0.004803369227348765)
x=c(x,-0.002247374418798645)
x=c(x,-0.007320756615569354)
x=c(x,0.000041529787411254)
x=c(x,-0.0038900587812494714)
x=c(x,-0.0027808859703831895)
x=c(x,-0.0037588857978684566)
x=c(x,0.0005815579848851897)
x=c(x,0.00040628828460025654)
x=c(x,0.017940029621835562)
x=c(x,0.00012781227603517002)
x=c(x,-0.006430472633792319)
x=c(x,0.009363169154480456)
x=c(x,0.0018202468308983948)
x=c(x,0.024983491471515507)
x=c(x,-0.002711462582926925)
x=c(x,-0.001448354121802053)
x=c(x,0.017501331499620337)
x=c(x,-0.0009134204603116531)
x=c(x,-0.0009234813707828923)
x=c(x,-0.00216773551431088)
x=c(x,-0.015257122472057799)
x=c(x,0.0012895971898352683)
x=c(x,-0.00038377206811005546)
x=c(x,-0.014663131305949234)
x=c(x,0.01631005687760517)
x=c(x,0.0008727825212710436)
x=c(x,0.0069284371898499526)
x=c(x,-0.010590885564590336)
x=c(x,-0.006058629683703781)
x=c(x,-0.009996917120477589)
x=c(x,-0.01989212341412597)
x=c(x,-0.005078409100611133)
x=c(x,-0.01600962612119676)
x=c(x,-0.012782955746035378)
x=c(x,-0.01205837313844322)
x=c(x,0.04727023186283136)
x=c(x,0.009942956734879134)
x=c(x,-0.014466169618453924)
x=c(x,-0.0029702488753630247)
x=c(x,-0.06078955486720669)
x=c(x,0.02029346012114271)
x=c(x,0.003513145912397741)
x=c(x,0.011216881155371538)
x=c(x,-0.012351318268116761)
x=c(x,0.025131038298961815)
x=c(x,-0.006611748757260394)
x=c(x,-0.007445434737979519)
x=c(x,0.010468224331774982)
x=c(x,0.008906908170502156)
x=c(x,-0.008742615437953958)
x=c(x,0.007693015151183024)
x=c(x,0.007325549155295278)
x=c(x,0.03290835923472631)
x=c(x,-0.011755276835614833)
x=c(x,-0.005383374795025021)
x=c(x,-0.035948703915683215)
x=c(x,-0.015806386664123765)
x=c(x,0.002532025088113693)
x=c(x,0.0075463737988413155)
x=c(x,-0.00020057172013189251)
x=c(x,0.014353258290456227)
x=c(x,0.005363057929046234)
x=c(x,-0.00023903411861922228)
x=c(x,-0.0075237569085579836)
x=c(x,0.01274034649478096)
x=c(x,-0.012424083114835612)
x=c(x,0.004758902860711393)
x=c(x,-0.005790117458076112)
x=c(x,-0.00356544552545405)
x=c(x,-0.007327414582903567)
x=c(x,0.003249789241029631)
x=c(x,0.018152481501279863)
x=c(x,-0.015449398170176128)
x=c(x,0.0013716731223805455)
x=c(x,-0.0015337190472534715)
x=c(x,-0.003972450120684109)
x=c(x,-0.034075014831108745)
x=c(x,-0.006206800919252459)
x=c(x,-0.03780262521350609)
x=c(x,-0.006933242164991474)
x=c(x,0.003988720442725442)
x=c(x,0.00034483153135818166)
x=c(x,0.002095021837884625)
x=c(x,0.008966016405054296)
x=c(x,-0.00488178039057047)
x=c(x,0.012369763944837514)
x=c(x,0.005437144768425183)
x=c(x,0.013816456848445768)
x=c(x,-0.0036106343842211394)
x=c(x,-0.02322237644396409)
x=c(x,-0.04821413243163384)
x=c(x,0.012139835325796398)
x=c(x,-0.0018410928753872958)
x=c(x,-0.006153386326801712)
x=c(x,0.009002049643125776)
x=c(x,-0.000496835844607801)
x=c(x,0.006963429667542361)
x=c(x,0.005078465123523144)
x=c(x,-0.010071837431506097)
x=c(x,-0.009495549627477881)
x=c(x,-0.00690149163503745)
x=c(x,-0.025230689793039635)
x=c(x,-0.0023505772082298977)
x=c(x,0.0033267180867861427)
x=c(x,0.0650532098349129)
x=c(x,-0.031287243323812934)
x=c(x,0.018847038389657945)
x=c(x,-0.04572267801566574)
x=c(x,-0.006184320651239249)
x=c(x,-0.049201225665935454)
x=c(x,0.022258450208277044)
x=c(x,0.021987805466089916)
x=c(x,0.03351255905702207)
x=c(x,0.016420866779406185)
x=c(x,-0.00468195691606368)
x=c(x,0.10241950376061107)
x=c(x,0.014781762636174025)
x=c(x,-0.003533044582814001)
x=c(x,-0.03543199314732141)
x=c(x,-0.018293663954197813)
x=c(x,0.028738518577010944)
x=c(x,-0.007250606451521055)
x=c(x,-0.03227222137571064)
x=c(x,-0.0384791091537668)
x=c(x,-0.029538819244800774)
x=c(x,-0.04878864809659699)
x=c(x,-0.02734460776661226)
x=c(x,-0.0009875264621424793)
x=c(x,0.03488746292453933)
x=c(x,0.019657369374236733)
x=c(x,-0.008586936803312519)
x=c(x,-0.04482591619994538)
x=c(x,0.025639825845827236)
x=c(x,0.00911478160852794)
x=c(x,-0.044769794302290576)
x=c(x,-0.009588568548346709)
x=c(x,-0.025261993663315076)
x=c(x,-0.014751920705991085)
x=c(x,0.02535769217622014)
x=c(x,-0.06425190841667477)
x=c(x,0.04945614293939761)
x=c(x,-0.02969950636802472)
x=c(x,-0.049492562567219255)
x=c(x,-0.07292193175436147)
x=c(x,0.0064505020755157415)
x=c(x,-0.00392524402009795)
x=c(x,-0.04109540692256392)
x=c(x,0.09743157747235068)
x=c(x,-0.04585021086995592)
x=c(x,-0.05405697829760105)
x=c(x,-0.0035451098714577487)
x=c(x,-0.1453698273829683)
x=c(x,0.5132154766724285)
x=c(x,-0.050251656304419516)
x=c(x,-0.07972307193546939)
x=c(x,-0.10151545496252873)
x=c(x,-0.15955838536372405)
x=c(x,-0.0005360155122238776)
x=c(x,-0.14616794857484736)
x=c(x,-0.11043842893221466)
x=c(x,-0.10232119226509433)
x=c(x,0.06652743868057895)
x=c(x,0.007581248977937268)
x=c(x,0.00970291351173586)
x=c(x,0.03494259586556724)
x=c(x,-0.029674295417958494)
x=c(x,-0.013213573362066286)
x=c(x,-0.07368985181508629)
x=c(x,0.10955758041162517)
x=c(x,0.10198099782213282)
x=c(x,-0.05896024009801407)
x=c(x,-0.012563543953781996)
x=c(x,0.002049643368785545)
x=c(x,-0.11885997889103354)
x=c(x,0.14083982768790437)
x=c(x,-0.05181824540063215)
x=c(x,-0.14077691727329658)
x=c(x,0.08194209275752172)
x=c(x,0.10731833180955198)
x=c(x,-0.048785109267478984)
x=c(x,-0.06563143125555143)
x=c(x,0.06389391487731352)
x=c(x,-0.017726893451139158)
x=c(x,-0.020513744570094097)
x=c(x,-0.009731839285602758)
x=c(x,-0.05473198463310537)
x=c(x,0.036421050147364374)
x=c(x,-0.0032706277582445096)
x=c(x,0.054697024084090586)
x=c(x,0.010716246712439138)
x=c(x,0.002368058806918614)
x=c(x,0.0019641213442492225)
x=c(x,0.11461736099308392)
x=c(x,0.06889923113262054)
x=c(x,-0.004293716308142711)
x=c(x,-0.04589731099257771)
x=c(x,0.013609992809803843)
x=c(x,0.061383277870209654)
x=c(x,0.009622149292947201)
x=c(x,-0.018276643946367063)
x=c(x,0.05299047263201696)
x=c(x,0.004316098824501684)
x=c(x,0.019883533559727735)
x=c(x,-0.06422211769973905)
x=c(x,0.037739491132934136)
x=c(x,-0.011914253179915534)
x=c(x,-0.006994725285438382)
x=c(x,-0.004818546371043741)
x=c(x,0.013427328466637368)
x=c(x,-0.07034288265647048)
x=c(x,0.014285613199176981)
x=c(x,-0.031918205591050075)
x=c(x,0.0000335196177921377)
x=c(x,0.00028501518323374465)
x=c(x,-0.00008173106408707459)
x=c(x,0.0007276826163151424)
x=c(x,0.0007685796186397235)
x=c(x,-0.001882060698289704)
x=c(x,0.0010227465962211416)
x=c(x,-0.00004638638324761353)
x=c(x,-0.0015114129672218481)
x=c(x,-0.00048708628361119287)
x=c(x,-0.0008004279253363092)
x=c(x,-0.0027050580809684843)
x=c(x,0.0005550226974907324)
x=c(x,-0.0025996543972863135)
x=c(x,-0.0026256445542022066)
x=c(x,-0.0014472690314162216)
x=c(x,-0.0008782100426405259)
x=c(x,-0.0015336971390822853)
x=c(x,-0.0007918791957867274)
x=c(x,-0.0028564050460694592)
x=c(x,0.002783892686480004)
x=c(x,-0.0041042135466644)
x=c(x,-0.00522052127163395)
x=c(x,-0.0016741640311821256)
x=c(x,-0.003878717991539915)
x=c(x,-0.004788076568249539)
x=c(x,-0.004467698773914481)
x=c(x,0.0013363884965609874)
x=c(x,0.00040767680304335647)
x=c(x,0.02571119495797524)
x=c(x,0.002970547772287248)
x=c(x,-0.008464392166832067)
x=c(x,0.012366031345973284)
x=c(x,-0.00005166744976616054)
x=c(x,0.03099866389572524)
x=c(x,-0.0006174615264508053)
x=c(x,-0.0008900275680594371)
x=c(x,0.020572534444417513)
x=c(x,-0.001076811489229546)
x=c(x,0.0007109938354730599)
x=c(x,-0.0029373211726334532)
x=c(x,-0.01606939661303532)
x=c(x,0.002036767140020563)
x=c(x,-0.00010200147845481441)
x=c(x,-0.015012987795369444)
x=c(x,0.02065856875605869)
x=c(x,-0.0029790688191118674)
x=c(x,0.004608280678674262)
x=c(x,-0.01362402834459476)
x=c(x,-0.007125787577448993)
x=c(x,-0.014740252536309449)
x=c(x,-0.024157106022453228)
x=c(x,-0.008014179894056861)
x=c(x,-0.017355364532269768)
x=c(x,-0.016174370825933513)
x=c(x,-0.018839953819336164)
x=c(x,0.05941804913105438)
x=c(x,0.01323637803114795)
x=c(x,-0.013856225366783572)
x=c(x,-0.004719581750300046)
x=c(x,-0.07199034216074436)
x=c(x,0.03633993961716146)
x=c(x,0.0027835431792872594)
x=c(x,0.013625541715283348)
x=c(x,-0.009016769654619918)
x=c(x,0.029298633555942723)
x=c(x,0.00004296937647454321)
x=c(x,-0.010303385951316536)
x=c(x,0.01319280697886185)
x=c(x,0.009426265612944856)
x=c(x,-0.0061216197621623974)
x=c(x,0.0016810617872201)
x=c(x,0.01027311043749107)
x=c(x,0.05013481631892491)
x=c(x,-0.007503560217149445)
x=c(x,-0.001878300120172902)
x=c(x,-0.055637746626681445)
x=c(x,-0.014631340850765591)
x=c(x,0.002854015263984761)
x=c(x,0.009295775539543475)
x=c(x,0.0021196704744541935)
x=c(x,0.012761802943583122)
x=c(x,0.0022174678172806523)
x=c(x,0.0023592038103784577)
x=c(x,-0.015374851037995206)
x=c(x,0.013428981191311404)
x=c(x,-0.014350985418397228)
x=c(x,0.005799661741458874)
x=c(x,-0.005726791134174601)
x=c(x,-0.013563212098845043)
x=c(x,-0.0027432566246412098)
x=c(x,0.0019081699595010992)
x=c(x,0.021708759726636384)
x=c(x,-0.02063751632786711)
x=c(x,0.005212452020121947)
x=c(x,0.0079039624713975)
x=c(x,-0.0017392683322646455)
x=c(x,-0.04646559632222801)
x=c(x,-0.007665253954714268)
x=c(x,-0.05738810861983182)
x=c(x,-0.009868247296646216)
x=c(x,0.006793345826683888)
x=c(x,0.0020971173463205056)
x=c(x,0.003947386892848972)
x=c(x,0.007163995502018604)
x=c(x,-0.00700565406590795)
x=c(x,0.016217597077567175)
x=c(x,0.0014610612858610536)
x=c(x,0.02011597624010534)
x=c(x,-0.0036029059449593664)
x=c(x,-0.03186904380722085)
x=c(x,-0.06426824896597601)
x=c(x,0.009105192856531033)
x=c(x,-0.006454429541081506)
x=c(x,-0.014538625646185075)
x=c(x,0.009267198694529199)
x=c(x,0.0008005724733033754)
x=c(x,0.004449598913043904)
x=c(x,0.013114698970723655)
x=c(x,-0.013901809423543568)
x=c(x,-0.00940851263227059)
x=c(x,-0.010849045106715978)
x=c(x,-0.03574547173202667)
x=c(x,0.06805227087109106)
x=c(x,0.0025270451023172106)
x=c(x,0.09007532196178712)
x=c(x,-0.038432932263944855)
x=c(x,0.024268888183241733)
x=c(x,-0.05180869473784701)
x=c(x,-0.01008328020141866)
x=c(x,-0.06022753362593694)
x=c(x,0.02171353002450339)
x=c(x,0.03344714803660457)
x=c(x,0.03065215249384859)
x=c(x,0.01946227866727583)
x=c(x,-0.005900099306605116)
x=c(x,0.12137847922011995)
x=c(x,0.01798356715798042)
x=c(x,0.0010912678955184035)
x=c(x,-0.041787792306237616)
x=c(x,-0.025098104152848338)
x=c(x,0.035532313447710656)
x=c(x,-0.013000661358659496)
x=c(x,-0.03636077994007837)
x=c(x,-0.03780444006316158)
x=c(x,-0.024295600169877894)
x=c(x,-0.039967074274277065)
x=c(x,-0.03490829472283265)
x=c(x,0.0006527626322022343)
x=c(x,0.042547480641730646)
x=c(x,0.015989570781363198)
x=c(x,-0.02541813139854088)
x=c(x,-0.04263568713637111)
x=c(x,0.033322065084441965)
x=c(x,0.004794590876921199)
x=c(x,-0.06141852871484513)
x=c(x,-0.0063628193609782)
x=c(x,-0.04136570154050686)
x=c(x,-0.015522869895066486)
x=c(x,0.031017156307568045)
x=c(x,-0.08138559776167027)
x=c(x,0.048488722085649895)
x=c(x,-0.040541423985293694)
x=c(x,-0.03982514470832859)
x=c(x,-0.08218802204836471)
x=c(x,0.010642843714899593)
x=c(x,-0.0048527093985575335)
x=c(x,-0.049962411766693214)
x=c(x,0.13084486775472046)
x=c(x,-0.04479822972845185)
x=c(x,-0.09452083855422505)
x=c(x,0.0025505747419719274)
x=c(x,-0.21877434351803565)
x=c(x,0.7411318124515709)
x=c(x,-0.09078705502389989)
x=c(x,-0.10194757339628491)
x=c(x,-0.11316789813514835)
x=c(x,-0.21359050271145374)
x=c(x,-0.005910869872465769)
x=c(x,-0.1845059648211491)
x=c(x,-0.11625748178174602)
x=c(x,-0.13301001430438436)
x=c(x,0.09412063620697612)
x=c(x,0.005277291340532737)
x=c(x,0.013040143017017744)
x=c(x,0.0210360136292315)
x=c(x,-0.014933650584103472)
x=c(x,-0.01521834739514853)
x=c(x,-0.08102044073885403)
x=c(x,0.16553302639595677)
x=c(x,0.12526893173083622)
x=c(x,-0.06085726118564165)
x=c(x,-0.01663328480996054)
x=c(x,-0.01506865500638339)
x=c(x,-0.1475447994560691)
x=c(x,0.1883984020041614)
x=c(x,-0.061362196750417326)
x=c(x,-0.17068676015076684)
x=c(x,0.09883491192651998)
x=c(x,0.133746092950382)
x=c(x,-0.061968490600411735)
x=c(x,-0.06757208425681292)
x=c(x,0.07868586922553475)
x=c(x,-0.023396642953542508)
x=c(x,-0.011605782256037709)
x=c(x,-0.004622597268684834)
x=c(x,-0.06924014305554312)
x=c(x,0.03860145702428407)
x=c(x,-0.007378217522551876)
x=c(x,0.061877190080401434)
x=c(x,0.008437348420582115)
x=c(x,-0.006132880902904609)
x=c(x,-0.003919222967049812)
x=c(x,0.14680021019098355)
x=c(x,0.08556340263116792)
x=c(x,0.0010891658216375336)
x=c(x,-0.053712211065627305)
x=c(x,0.02212603752954629)
x=c(x,0.07237392499078546)
x=c(x,0.011122505324214221)
x=c(x,-0.024402971317635233)
x=c(x,0.05698160589296683)
x=c(x,0.005008762534406906)
x=c(x,0.027736708281780934)
x=c(x,-0.07913695653726185)
x=c(x,0.03359601085341627)
x=c(x,-0.02680826456027014)
x=c(x,-0.005386517059155635)
x=c(x,0.004344626544318414)
x=c(x,0.025880225928863108)
x=c(x,-0.07891191714099192)
x=c(x,0.012384728084644477)
x=c(x,-0.02925620612579749)
x=c(x,0.000041946619265579863)
x=c(x,0.00032415279774100587)
x=c(x,-0.00025136720093436356)
x=c(x,0.0004478974056537639)
x=c(x,0.0007402866184511889)
x=c(x,-0.0019279927864946722)
x=c(x,0.00090990875003931)
x=c(x,0.000178514468367084)
x=c(x,-0.001276042227372333)
x=c(x,-0.0007001432756377388)
x=c(x,-0.0004149376539433005)
x=c(x,-0.002497386932079882)
x=c(x,0.0014561425990761824)
x=c(x,-0.0033378880955018363)
x=c(x,-0.002839763846417477)
x=c(x,-0.0014131448988924458)
x=c(x,-0.0010287247748243813)
x=c(x,-0.0008226531670207127)
x=c(x,-0.0016673364835265926)
x=c(x,-0.002694910188193558)
x=c(x,0.0038250960167291507)
x=c(x,-0.00412889151112782)
x=c(x,-0.0067417735224450355)
x=c(x,-0.0021189204785233393)
x=c(x,-0.00400721835174354)
x=c(x,-0.003851027110790567)
x=c(x,-0.004290514486738292)
x=c(x,0.0010333612931737474)
x=c(x,0.00031925753799953325)
x=c(x,0.02491287588034524)
x=c(x,0.0017481970089482926)
x=c(x,-0.008582764827875133)
x=c(x,0.012378387033163372)
x=c(x,0.0008082827183514452)
x=c(x,0.02994945491553716)
x=c(x,-0.0014183380528789305)
x=c(x,-0.000641717939579599)
x=c(x,0.01990217408593602)
x=c(x,-0.000947689267707555)
x=c(x,0.00048519599224387843)
x=c(x,-0.0028774088358863694)
x=c(x,-0.01590199553248832)
x=c(x,0.0019554133935012767)
x=c(x,-0.00022900380281699854)
x=c(x,-0.016753125866829317)
x=c(x,0.020229675747315743)
x=c(x,-0.0016869401151028915)
x=c(x,0.0068180831878075455)
x=c(x,-0.013260768491820653)
x=c(x,-0.0071375002466874116)
x=c(x,-0.014221963906253311)
x=c(x,-0.025438081043733147)
x=c(x,-0.007937070363332037)
x=c(x,-0.0171788652966616)
x=c(x,-0.01604381614273847)
x=c(x,-0.017548832813388177)
x=c(x,0.05898526674190374)
x=c(x,0.012714390455328291)
x=c(x,-0.014251492639765863)
x=c(x,-0.004308784109784731)
x=c(x,-0.06773406359724927)
x=c(x,0.031636581649593175)
x=c(x,0.002372234712201879)
x=c(x,0.012554332209991493)
x=c(x,-0.01125566202015064)
x=c(x,0.02922713242529265)
x=c(x,-0.0030601630212797448)
x=c(x,-0.009847540817574918)
x=c(x,0.012786146039262552)
x=c(x,0.00933100106859543)
x=c(x,-0.006538600130718639)
x=c(x,0.0052874726637002455)
x=c(x,0.009429048038812803)
x=c(x,0.04726815811000069)
x=c(x,-0.010322114025705742)
x=c(x,-0.0025993410694563853)
x=c(x,-0.05347503211638688)
x=c(x,-0.015742614176355085)
x=c(x,0.0024546776238725983)
x=c(x,0.00897623126255941)
x=c(x,0.0011762692201461066)
x=c(x,0.013111056153948808)
x=c(x,0.0036276886570993754)
x=c(x,0.002648641988633514)
x=c(x,-0.012044489067376181)
x=c(x,0.014130250251718867)
x=c(x,-0.013349508774732604)
x=c(x,0.005814221489278967)
x=c(x,-0.005752269412047115)
x=c(x,-0.013182535965370968)
x=c(x,-0.004474820177251526)
x=c(x,0.0021082444928482284)
x=c(x,0.02082533961460761)
x=c(x,-0.017784953732168117)
x=c(x,0.005749545204502232)
x=c(x,0.003242237499223776)
x=c(x,-0.002643087349930272)
x=c(x,-0.04349036682019484)
x=c(x,-0.006949314019746936)
x=c(x,-0.05418506494687381)
x=c(x,-0.011101171772048805)
x=c(x,0.006306611580813127)
x=c(x,0.0016129469784430237)
x=c(x,0.003499131050028192)
x=c(x,0.009060740237602323)
x=c(x,-0.006460779943530762)
x=c(x,0.01430494848415544)
x=c(x,0.003438706807779751)
x=c(x,0.020097837164411773)
x=c(x,-0.003909525921265541)
x=c(x,-0.02717523704775017)
x=c(x,-0.061757123579490626)
x=c(x,0.008214248612645105)
x=c(x,-0.007769832490975954)
x=c(x,-0.011892509403998183)
x=c(x,0.010384668256056329)
x=c(x,4.424203618499988e-7)
x=c(x,0.004531549178128168)
x=c(x,0.013409214348563719)
x=c(x,-0.012761389301605239)
x=c(x,-0.011625749631534586)
x=c(x,-0.0103454725315252)
x=c(x,-0.03406004777036744)
x=c(x,0.07348199325055148)
x=c(x,0.0019555346318875892)
x=c(x,0.0885602859494824)
x=c(x,-0.04026737303710945)
x=c(x,0.025003787238374316)
x=c(x,-0.05066418413300671)
x=c(x,-0.01034722095975474)
x=c(x,-0.05880312584620365)
x=c(x,0.022945525097089196)
x=c(x,0.030646276382602224)
x=c(x,0.03618690838674067)
x=c(x,0.020658085922253946)
x=c(x,-0.0029874882314693788)
x=c(x,0.120670744782424)
x=c(x,0.018954261978997702)
x=c(x,0.0009940221460088248)
x=c(x,-0.0421711573844921)
x=c(x,-0.024876191707140005)
x=c(x,0.034377679246549796)
x=c(x,-0.01143072340135021)
x=c(x,-0.035576268155716836)
x=c(x,-0.03783580516839653)
x=c(x,-0.024908944643741823)
x=c(x,-0.04209742548814143)
x=c(x,-0.033067692124725954)
x=c(x,-0.002428731613311501)
x=c(x,0.04243737984793268)
x=c(x,0.015226103729261484)
x=c(x,-0.020051821191190346)
x=c(x,-0.045731041569039954)
x=c(x,0.03319119807336776)
x=c(x,0.010323020497867765)
x=c(x,-0.061220312608427654)
x=c(x,-0.009067602818775269)
x=c(x,-0.039752855298176994)
x=c(x,-0.015217218060215273)
x=c(x,0.031028026247587073)
x=c(x,-0.07827529492407952)
x=c(x,0.052534918211784645)
x=c(x,-0.03995123663535993)
x=c(x,-0.04967428608109143)
x=c(x,-0.0828746222479763)
x=c(x,0.009075499575355995)
x=c(x,-0.0056165171122616)
x=c(x,-0.04944196311101153)
x=c(x,0.1288074490098475)
x=c(x,-0.04565950632450692)
x=c(x,-0.09025061785643877)
x=c(x,0.002432430108456168)
x=c(x,-0.2154777899860133)
x=c(x,0.7361891793819475)
x=c(x,-0.0902796315019041)
x=c(x,-0.10058180202700298)
x=c(x,-0.11252839241911433)
x=c(x,-0.2134677768533503)
x=c(x,-0.006034571213574299)
x=c(x,-0.18441329123535724)
x=c(x,-0.12250331568291747)
x=c(x,-0.1289786019609951)
x=c(x,0.09109129207110891)
x=c(x,0.007642981345957734)
x=c(x,0.01162371821917093)
x=c(x,0.027704678630052645)
x=c(x,-0.014390862145061767)
x=c(x,-0.015157820441788004)
x=c(x,-0.08301949043217922)
x=c(x,0.163783876206655)
x=c(x,0.12619867610607785)
x=c(x,-0.0598004677066339)
x=c(x,-0.01610762366976252)
x=c(x,-0.013165811822770188)
x=c(x,-0.14735221912992194)
x=c(x,0.1861289003024984)
x=c(x,-0.06123235724028668)
x=c(x,-0.16808052174834556)
x=c(x,0.09657572647541014)
x=c(x,0.1346245323006773)
x=c(x,-0.060317903535301975)
x=c(x,-0.06576345781264376)
x=c(x,0.07882407438777861)
x=c(x,-0.020216718816931833)
x=c(x,-0.011545567165829138)
x=c(x,-0.004714885785142426)
x=c(x,-0.06856269488148171)
x=c(x,0.03816538705687659)
x=c(x,-0.00677494110129106)
x=c(x,0.06263254813835493)
x=c(x,0.0091706692500501)
x=c(x,-0.004004285640638818)
x=c(x,-0.003738054563362095)
x=c(x,0.14559501650958878)
x=c(x,0.08658522265966631)
x=c(x,0.0008496033636488421)
x=c(x,-0.051657477413766396)
x=c(x,0.0208849464301416)
x=c(x,0.0724947323401622)
x=c(x,0.010817462302988239)
x=c(x,-0.02378028700228688)
x=c(x,0.0568127780218719)
x=c(x,0.004385594944640811)
x=c(x,0.02691623492822051)
x=c(x,-0.07535934395813526)
x=c(x,0.034965856241515436)
x=c(x,-0.019652222455919587)
x=c(x,-0.006017146808300727)
x=c(x,0.003954829339074017)
x=c(x,0.02336041045026744)
x=c(x,-0.07643191482645972)
x=c(x,0.010725844267639595)
x=c(x,-0.029570222075264496)
x=c(x,0.000044360295527568626)
x=c(x,0.0004908184134546228)
x=c(x,-0.00033737742615819606)
x=c(x,0.00019530720583017127)
x=c(x,0.000681971008505684)
x=c(x,-0.00196974393530518)
x=c(x,0.0008126478440932104)
x=c(x,0.0004493183104075379)
x=c(x,-0.0006347627386977102)
x=c(x,-0.0007778143540944968)
x=c(x,-0.0002110421594032914)
x=c(x,-0.002221851280956847)
x=c(x,0.0025203745972850636)
x=c(x,-0.004270500181203654)
x=c(x,-0.003011320198457058)
x=c(x,-0.001285152179486586)
x=c(x,-0.0008284756460144422)
x=c(x,0.00023570163138886667)
x=c(x,-0.002510328880056043)
x=c(x,-0.0024236851191166316)
x=c(x,0.00487004590213916)
x=c(x,-0.004211320960296164)
x=c(x,-0.00762278927968113)
x=c(x,0.0000990956801247239)
x=c(x,-0.004084239510284464)
x=c(x,-0.0032769668011077015)
x=c(x,-0.004009126912833722)
x=c(x,0.000674220676118409)
x=c(x,0.0005013165621763544)
x=c(x,0.023740546386629983)
x=c(x,0.0007621619990716783)
x=c(x,-0.008701907312071738)
x=c(x,0.011798906280344587)
x=c(x,0.0024254495484420406)
x=c(x,0.027700151400765358)
x=c(x,-0.003040271278539033)
x=c(x,-0.0019995128077702476)
x=c(x,0.019555825582020927)
x=c(x,-0.0005524419920889152)
x=c(x,-0.0005976450275361367)
x=c(x,-0.0023169043840705716)
x=c(x,-0.016938220892751543)
x=c(x,0.0020012440208872907)
x=c(x,-0.0007181540111944539)
x=c(x,-0.017321646789752374)
x=c(x,0.018965445716905765)
x=c(x,0.0011944228611180583)
x=c(x,0.007998050217226957)
x=c(x,-0.013044483932016522)
x=c(x,-0.006885292655212818)
x=c(x,-0.01298801987226836)
x=c(x,-0.025052508311946085)
x=c(x,-0.007896758857947132)
x=c(x,-0.017457234430413013)
x=c(x,-0.017269856207863823)
x=c(x,-0.013848007620481566)
x=c(x,0.0585481658816081)
x=c(x,0.010752732876749759)
x=c(x,-0.01591505350585521)
x=c(x,-0.0029604991394738813)
x=c(x,-0.0662647128327137)
x=c(x,0.02805128783573746)
x=c(x,0.0026787106589700564)
x=c(x,0.01288484640352442)
x=c(x,-0.01474770364433222)
x=c(x,0.029394393978849572)
x=c(x,-0.007713916984181856)
x=c(x,-0.008720108880283873)
x=c(x,0.01192895007777908)
x=c(x,0.008941345609773417)
x=c(x,-0.010408458980494646)
x=c(x,0.007868413725162053)
x=c(x,0.007520338879378382)
x=c(x,0.03993266319461796)
x=c(x,-0.012722403244838512)
x=c(x,-0.005402166203069548)
x=c(x,-0.045956313544653626)
x=c(x,-0.017745416392202278)
x=c(x,0.0024430969900373968)
x=c(x,0.007670474719897779)
x=c(x,-0.00031304518656792194)
x=c(x,0.0174353051414571)
x=c(x,0.006243802056101024)
x=c(x,0.003134990967005486)
x=c(x,-0.00808426722937915)
x=c(x,0.014458856996934725)
x=c(x,-0.011223191384060322)
x=c(x,0.005266801527272887)
x=c(x,-0.005780729372807023)
x=c(x,-0.008332388425313784)
x=c(x,-0.008882114685460421)
x=c(x,0.0027707484943324716)
x=c(x,0.018588775853638353)
x=c(x,-0.014664974191734933)
x=c(x,0.0025343507364926302)
x=c(x,-0.0019397222214442894)
x=c(x,-0.0027925043849546666)
x=c(x,-0.039945475597862184)
x=c(x,-0.005078872598881548)
x=c(x,-0.04313463951441281)
x=c(x,-0.0069292429338443755)
x=c(x,0.005681519643808243)
x=c(x,-0.0002496728468193667)
x=c(x,0.0035600762185279146)
x=c(x,0.012707187491322597)
x=c(x,-0.0053632144115663746)
x=c(x,0.0117311041651989)
x=c(x,0.004965488959163248)
x=c(x,0.02015240424029427)
x=c(x,-0.0043109995553219935)
x=c(x,-0.024830535842135425)
x=c(x,-0.05649429550801463)
x=c(x,0.004782850537226086)
x=c(x,-0.009716233873558307)
x=c(x,-0.007938623688065725)
x=c(x,0.009965666055839968)
x=c(x,-0.00027426344420223816)
x=c(x,0.005240410272351631)
x=c(x,0.006046404325256785)
x=c(x,-0.01045931096646775)
x=c(x,-0.014052545577185672)
x=c(x,-0.00940132683686179)
x=c(x,-0.03072118377793226)
x=c(x,-0.0034997838951426347)
x=c(x,0.0019158289935220431)
x=c(x,0.08512559612953981)
x=c(x,-0.042825398392323945)
x=c(x,0.024009668919701303)
x=c(x,-0.04915116475845811)
x=c(x,-0.01023215665781555)
x=c(x,-0.056352081831485414)
x=c(x,0.023524996603158193)
x=c(x,0.025537813030387924)
x=c(x,0.040250357570886394)
x=c(x,0.02220286928664816)
x=c(x,0.0035713586359822766)
x=c(x,0.11666858642519672)
x=c(x,0.018770567781019598)
x=c(x,0.0008323581905916792)
x=c(x,-0.03785182720975006)
x=c(x,-0.023803470490505168)
x=c(x,0.03137197498366283)
x=c(x,-0.007963299721604073)
x=c(x,-0.03440771983429234)
x=c(x,-0.05081928837659366)
x=c(x,-0.026251500991529716)
x=c(x,-0.054680639211230564)
x=c(x,-0.03047260978886487)
x=c(x,-0.003382842170811269)
x=c(x,0.041700991051212694)
x=c(x,0.021555829239299412)
x=c(x,-0.01018072318833823)
x=c(x,-0.04792246408063563)
x=c(x,0.028325300145906698)
x=c(x,0.012636535163081048)
x=c(x,-0.06041042774419395)
x=c(x,-0.01239350204405508)
x=c(x,-0.034272860479120315)
x=c(x,-0.014892299796195359)
x=c(x,0.030300189046520792)
x=c(x,-0.07365226933891499)
x=c(x,0.054835919219940694)
x=c(x,-0.03570901330906055)
x=c(x,-0.05842903373521884)
x=c(x,-0.08795150022669851)
x=c(x,0.007310983232956559)
x=c(x,-0.007001363413037749)
x=c(x,-0.0485867329311914)
x=c(x,0.12214092888262391)
x=c(x,-0.04897313251170779)
x=c(x,-0.07885650335411716)
x=c(x,0.0014437901945477886)
x=c(x,-0.20058704498834173)
x=c(x,0.7255094608247548)
x=c(x,-0.08983122452241617)
x=c(x,-0.09850235621386262)
x=c(x,-0.11193054279941025)
x=c(x,-0.20695353957293433)
x=c(x,-0.006140343634267918)
x=c(x,-0.18350084827621072)
x=c(x,-0.13762737879877052)
x=c(x,-0.1294148510869999)
x=c(x,0.08113419161202115)
x=c(x,0.009331190608835813)
x=c(x,0.009305682913619412)
x=c(x,0.037253776763958225)
x=c(x,-0.02749778373006806)
x=c(x,-0.013623537686232307)
x=c(x,-0.08639457764416811)
x=c(x,0.1582872754451445)
x=c(x,0.12820669135402266)
x=c(x,-0.058244941319676495)
x=c(x,-0.016081262386346287)
x=c(x,-0.004033107297462933)
x=c(x,-0.14654028219728849)
x=c(x,0.18327459532845655)
x=c(x,-0.061604870306167146)
x=c(x,-0.16394988312290193)
x=c(x,0.09183067341906145)
x=c(x,0.13054653721139142)
x=c(x,-0.05746214644161091)
x=c(x,-0.07173025975257803)
x=c(x,0.07710302784743159)
x=c(x,-0.014317784954138187)
x=c(x,-0.013842002393913916)
x=c(x,-0.007568260356458943)
x=c(x,-0.06512435450335435)
x=c(x,0.03679927507419621)
x=c(x,-0.004895299923939071)
x=c(x,0.06349992945146973)
x=c(x,0.008639027040472157)
x=c(x,0.002031696221296724)
x=c(x,0.0016006564701284709)
x=c(x,0.14258151543177394)
x=c(x,0.08592572791985477)
x=c(x,-0.004495374566147991)
x=c(x,-0.04742283153866667)
x=c(x,0.019206449890381307)
x=c(x,0.07177597327760392)
x=c(x,0.009846295339068742)
x=c(x,-0.0225778478776703)
x=c(x,0.06001765325120183)
x=c(x,0.004252095157974965)
x=c(x,0.021325344910094773)
x=c(x,-0.0710988327548607)
x=c(x,0.039780192566222304)
x=c(x,-0.011177042643394683)
x=c(x,-0.007154642609233853)
x=c(x,-0.0010561955172693732)
x=c(x,0.014075800687315457)
x=c(x,-0.07357804314997414)
x=c(x,0.01893370753193699)
x=c(x,-0.03465258770622626)
x=c(x,-0.0000010470946153939884)
x=c(x,0.00032943256310436744)
x=c(x,-0.000017664575359503526)
x=c(x,0.0004026999473979235)
x=c(x,0.0007527820316434814)
x=c(x,-0.001444578598370555)
x=c(x,0.0009692003585620358)
x=c(x,-0.0001470522136773905)
x=c(x,-0.002654858916665229)
x=c(x,-0.000618404137380508)
x=c(x,-0.0005705195823436691)
x=c(x,-0.0022088965374893466)
x=c(x,0.0011020685545351083)
x=c(x,-0.0006775408373293526)
x=c(x,-0.0025174278575401787)
x=c(x,-0.0009943200205933824)
x=c(x,-0.0006248636524935574)
x=c(x,-0.0020103280083561465)
x=c(x,-0.00044835568171894204)
x=c(x,-0.0022290180042495917)
x=c(x,0.0022871578293433346)
x=c(x,0.00046362001900292183)
x=c(x,-0.006004479004431549)
x=c(x,-0.0008336553775657475)
x=c(x,-0.0034560005327405165)
x=c(x,-0.0019182377595388077)
x=c(x,-0.003679354756072748)
x=c(x,0.0018465911848138282)
x=c(x,-0.00046388793372055835)
x=c(x,0.015259891455635326)
x=c(x,0.00046013482254065463)
x=c(x,-0.003984113672674777)
x=c(x,0.004225007964604255)
x=c(x,-0.0015187810678304586)
x=c(x,0.01794358453005963)
x=c(x,-0.0006088887942346385)
x=c(x,0.0021759324243789623)
x=c(x,0.014441012054275863)
x=c(x,-0.0017762322571844818)
x=c(x,-0.0038544921341403474)
x=c(x,-0.0037048712283543196)
x=c(x,-0.011049896720246043)
x=c(x,0.0037095227000647985)
x=c(x,-0.0008123367108757706)
x=c(x,-0.00905032660695993)
x=c(x,0.01117466581998691)
x=c(x,-0.003764834808054546)
x=c(x,0.004597104698330989)
x=c(x,-0.007328955949152629)
x=c(x,-0.0064375168310528)
x=c(x,-0.004310549201456721)
x=c(x,-0.009389301253573006)
x=c(x,-0.004464878822435055)
x=c(x,-0.013116237032503295)
x=c(x,-0.007482230729309448)
x=c(x,-0.012250916060578864)
x=c(x,0.02933281408744242)
x=c(x,0.006660107161250864)
x=c(x,-0.011963262622016914)
x=c(x,-0.0037123753831967933)
x=c(x,-0.04935556225197601)
x=c(x,0.015772011672924698)
x=c(x,0.003288795139230435)
x=c(x,0.010778046990549385)
x=c(x,-0.0032201444019769273)
x=c(x,0.019245169069218172)
x=c(x,-0.0021106110140309167)
x=c(x,-0.007454092866477557)
x=c(x,0.009196793272135092)
x=c(x,0.00824718524655086)
x=c(x,-0.00144807261725205)
x=c(x,0.00018049498165358292)
x=c(x,0.004749810466502517)
x=c(x,0.02201061974163001)
x=c(x,-0.0036493531157475606)
x=c(x,-0.005605943726355891)
x=c(x,-0.03451229186411458)
x=c(x,-0.006548967780411438)
x=c(x,0.0036322381784873563)
x=c(x,0.010101374174118858)
x=c(x,0.000942038884151977)
x=c(x,0.0017843047293783745)
x=c(x,0.0002062651767469286)
x=c(x,0.002611730017533469)
x=c(x,-0.021482684116138965)
x=c(x,0.006201915391925065)
x=c(x,-0.011369134875551863)
x=c(x,0.005908095892908064)
x=c(x,-0.0037278946891642177)
x=c(x,-0.0031331007118277784)
x=c(x,-0.0034159022753099066)
x=c(x,-0.0006715359389003235)
x=c(x,0.017825814833428297)
x=c(x,-0.014325802457847585)
x=c(x,0.0024217002360388254)
x=c(x,0.0033189929349235186)
x=c(x,-0.0028504002302379527)
x=c(x,-0.024021602343527428)
x=c(x,-0.006764481698586357)
x=c(x,-0.04666587643483431)
x=c(x,-0.01640911214541266)
x=c(x,0.003931445584652205)
x=c(x,0.00586948384822094)
x=c(x,-0.0003540642555916319)
x=c(x,-0.0006811691134457984)
x=c(x,-0.004548170887244501)
x=c(x,0.009406776293862258)
x=c(x,0.0018675447330670299)
x=c(x,0.002614611836238343)
x=c(x,-0.005347863153139762)
x=c(x,-0.022951138733815275)
x=c(x,-0.039959753940503905)
x=c(x,0.025066058914104194)
x=c(x,0.0236906087987979)
x=c(x,-0.008216991236659057)
x=c(x,-0.0019885609844735807)
x=c(x,0.006635038104253193)
x=c(x,0.0076985177465939865)
x=c(x,0.007302826553948658)
x=c(x,-0.006009801357769492)
x=c(x,0.0023868434217674274)
x=c(x,-0.0027627682945391145)
x=c(x,-0.020354298863007794)
x=c(x,0.029193827521935962)
x=c(x,-0.00432419399540962)
x=c(x,0.047179431704692146)
x=c(x,-0.019611804396048493)
x=c(x,-0.0016737582520351055)
x=c(x,-0.043864559702639846)
x=c(x,-0.003984079250592459)
x=c(x,-0.027116239078522432)
x=c(x,0.019230635087933823)
x=c(x,0.02177458650947134)
x=c(x,0.021032950221417053)
x=c(x,-0.0004588752874495415)
x=c(x,-0.009376758486235072)
x=c(x,0.07420144324026418)
x=c(x,0.007899971377191537)
x=c(x,-0.015167051652796526)
x=c(x,-0.03271605260080147)
x=c(x,-0.0041854016280019005)
x=c(x,0.03437395754014281)
x=c(x,-0.009037350142031924)
x=c(x,-0.027418564015744995)
x=c(x,-0.017724551286709956)
x=c(x,-0.022320095107354002)
x=c(x,-0.035162799796908)
x=c(x,-0.02411611681570865)
x=c(x,0.010907592987821157)
x=c(x,0.037916869610234945)
x=c(x,0.005974990613856422)
x=c(x,-0.014909036675780037)
x=c(x,-0.03637344382234601)
x=c(x,0.017703104659415058)
x=c(x,0.002217847347766701)
x=c(x,-0.036769023219456194)
x=c(x,-0.004891537579287018)
x=c(x,-0.0018748796493112643)
x=c(x,-0.006586749795516246)
x=c(x,0.017271051311477634)
x=c(x,-0.048265683276588235)
x=c(x,0.027715905327680326)
x=c(x,-0.028921034078774773)
x=c(x,-0.03333501618402677)
x=c(x,-0.042305470768228)
x=c(x,0.00928920611787281)
x=c(x,0.001962590763250498)
x=c(x,-0.03752669557760444)
x=c(x,0.07264346992926375)
x=c(x,-0.04071679103173831)
x=c(x,-0.05958188295688187)
x=c(x,-0.007863411314175188)
x=c(x,-0.08066032484115679)
x=c(x,0.19670508604283282)
x=c(x,-0.0068226136891086486)
x=c(x,-0.029108077809824835)
x=c(x,-0.1068415952569511)
x=c(x,-0.10779228145215144)
x=c(x,-0.01810143594956358)
x=c(x,-0.06929015659854382)
x=c(x,-0.08470102134401704)
x=c(x,-0.06739430182719224)
x=c(x,0.06623285394753797)
x=c(x,-0.005878855992770578)
x=c(x,0.0071211404348965925)
x=c(x,0.010732468102791631)
x=c(x,-0.0365446142735085)
x=c(x,-0.0005622976587614642)
x=c(x,-0.03383743113644469)
x=c(x,0.08202806003358809)
x=c(x,0.051385014501137194)
x=c(x,-0.058453754988250756)
x=c(x,-0.005581711651922304)
x=c(x,-0.013228075830380005)
x=c(x,-0.06570146893689224)
x=c(x,0.08329879221651636)
x=c(x,-0.022445902060486432)
x=c(x,-0.11269495611896194)
x=c(x,0.06984243892901378)
x=c(x,0.0545395953480498)
x=c(x,-0.030055731535848725)
x=c(x,-0.053179891915492314)
x=c(x,0.033006813715128334)
x=c(x,-0.016872307684181194)
x=c(x,-0.02257066114882395)
x=c(x,0.0063606754018651875)
x=c(x,-0.03563325293384887)
x=c(x,0.03206202150577836)
x=c(x,-0.0044262969085026435)
x=c(x,0.025232130791823626)
x=c(x,0.009052965063774055)
x=c(x,-0.005322822629597871)
x=c(x,0.0009878203921506706)
x=c(x,0.08190926529071907)
x=c(x,0.05941001795301922)
x=c(x,-0.0039611442877734)
x=c(x,-0.036967410819033736)
x=c(x,0.006958653782520547)
x=c(x,0.035346332267917994)
x=c(x,0.0060356169277552205)
x=c(x,-0.006570273703703463)
x=c(x,0.029928043669617266)
x=c(x,-0.0015233014665361412)
x=c(x,0.019383886413769053)
x=c(x,-0.04380575792421569)
x=c(x,0.016407404110144647)
x=c(x,-0.02457422553854407)
x=c(x,-0.005036906286500049)
x=c(x,-0.017613771140942352)
x=c(x,0.019570836203536654)
x=c(x,-0.06324792768400907)
x=c(x,-0.0018174604609457337)
x=c(x,-0.018849344529551004)
x=c(x,0.000008692932205751344)
x=c(x,0.0003304853333698012)
x=c(x,-0.00009494431490588164)
x=c(x,0.0002953291292905139)
x=c(x,0.0007468642804948758)
x=c(x,-0.0015190888108985337)
x=c(x,0.0009128560777972633)
x=c(x,0.00000940616437376959)
x=c(x,-0.002572849442037034)
x=c(x,-0.001130493766257656)
x=c(x,-0.00033620772896582964)
x=c(x,-0.002206800932550786)
x=c(x,0.0014689093753042896)
x=c(x,-0.0012231099454481677)
x=c(x,-0.0026309207391914877)
x=c(x,-0.0009734546113761165)
x=c(x,-0.00036887003096195764)
x=c(x,-0.0015994985263994377)
x=c(x,-0.0015301646323947775)
x=c(x,-0.002022273372339647)
x=c(x,0.003013404057919764)
x=c(x,0.0004557508387384647)
x=c(x,-0.006532840722380377)
x=c(x,-0.0010297322574031715)
x=c(x,-0.0033955799963922106)
x=c(x,-0.0014824569679684446)
x=c(x,-0.003678425983424354)
x=c(x,0.0016289491401528075)
x=c(x,-0.000293136227925296)
x=c(x,0.014972118340324681)
x=c(x,-0.00016390095561118827)
x=c(x,-0.004071366416501936)
x=c(x,0.004377114005804276)
x=c(x,-0.0008493629037758318)
x=c(x,0.017943584530059384)
x=c(x,-0.0011290685343051305)
x=c(x,0.0016977596635303833)
x=c(x,0.014482112040189612)
x=c(x,-0.0017762322571844818)
x=c(x,-0.003836016528540375)
x=c(x,-0.0036426125814930845)
x=c(x,-0.011124125889467667)
x=c(x,0.003669009353258997)
x=c(x,-0.0007774381469121385)
x=c(x,-0.010051616117110192)
x=c(x,0.011167582800399985)
x=c(x,-0.0028931681416532115)
x=c(x,0.006000653628046247)
x=c(x,-0.007350124354625442)
x=c(x,-0.006355577840192613)
x=c(x,-0.004110580778746871)
x=c(x,-0.009856627940745145)
x=c(x,-0.004344638843780233)
x=c(x,-0.013250263829723012)
x=c(x,-0.00746818141404365)
x=c(x,-0.011096727013104333)
x=c(x,0.02976613293698965)
x=c(x,0.0066520811241931625)
x=c(x,-0.012650429083492813)
x=c(x,-0.0032101178902317353)
x=c(x,-0.04513999200045903)
x=c(x,0.01329906121382612)
x=c(x,0.003284535416417957)
x=c(x,0.01201388882581447)
x=c(x,-0.004524991294604705)
x=c(x,0.019463302695337872)
x=c(x,-0.003956724952382905)
x=c(x,-0.006976052269390737)
x=c(x,0.00919773885075854)
x=c(x,0.008308253749715182)
x=c(x,-0.0018198006706899243)
x=c(x,0.002282009712715082)
x=c(x,0.0042478691592737075)
x=c(x,0.02090140199068937)
x=c(x,-0.00583548180450467)
x=c(x,-0.006137943915255032)
x=c(x,-0.03140312941279394)
x=c(x,-0.007987921906841935)
x=c(x,0.0033158202875532487)
x=c(x,0.010295132845398514)
x=c(x,0.0004716781570782156)
x=c(x,0.002715674270458684)
x=c(x,0.0016420431234034068)
x=c(x,0.0023807625753712817)
x=c(x,-0.019337034389639584)
x=c(x,0.006573413162254473)
x=c(x,-0.011494370495900746)
x=c(x,0.005874016082869183)
x=c(x,-0.0039762011471743)
x=c(x,-0.0026146080812300162)
x=c(x,-0.004206419677245826)
x=c(x,-0.00022434618899345923)
x=c(x,0.01786107760102199)
x=c(x,-0.012942271268249001)
x=c(x,0.0027034828802779483)
x=c(x,0.0004749793151154083)
x=c(x,-0.0035392271092067715)
x=c(x,-0.023016516010194773)
x=c(x,-0.006733216488614579)
x=c(x,-0.04264737789809037)
x=c(x,-0.014567092815756457)
x=c(x,0.003991115199958357)
x=c(x,0.005686473734248797)
x=c(x,-0.00022460679359929904)
x=c(x,0.001859668275804622)
x=c(x,-0.004392003953709375)
x=c(x,0.009248315102138945)
x=c(x,0.006991984662408203)
x=c(x,0.0025268648884473476)
x=c(x,-0.005352770222138061)
x=c(x,-0.021625546300924767)
x=c(x,-0.03890276305472659)
x=c(x,0.02496274627702161)
x=c(x,0.023335413255282104)
x=c(x,-0.006802271405178752)
x=c(x,-0.002703011330112436)
x=c(x,0.006337699654736638)
x=c(x,0.007730625379750473)
x=c(x,0.00756352570472573)
x=c(x,-0.006015276527967154)
x=c(x,0.0010418639118579883)
x=c(x,-0.0026419322179885595)
x=c(x,-0.019301023128886083)
x=c(x,0.031580310054561946)
x=c(x,-0.0044630692627090525)
x=c(x,0.04735632608631178)
x=c(x,-0.020837450713032495)
x=c(x,-0.0011769687907535135)
x=c(x,-0.043864559702639846)
x=c(x,-0.00404420423458428)
x=c(x,-0.02693876313298702)
x=c(x,0.020290544006465214)
x=c(x,0.02089587363690362)
x=c(x,0.023388847476894088)
x=c(x,0.00012613515621684644)
x=c(x,-0.009303936196891101)
x=c(x,0.07485919569143502)
x=c(x,0.008421534407388975)
x=c(x,-0.015316160834444321)
x=c(x,-0.03129389455084399)
x=c(x,-0.0042323778840361445)
x=c(x,0.03415339926452462)
x=c(x,-0.008456310248645148)
x=c(x,-0.027469266318996495)
x=c(x,-0.017724551286709956)
x=c(x,-0.022316572269669193)
x=c(x,-0.036277875269720955)
x=c(x,-0.02366299076158223)
x=c(x,0.009649202614813791)
x=c(x,0.038131786451267656)
x=c(x,0.0058927677400476865)
x=c(x,-0.012254497710565656)
x=c(x,-0.035701090684726204)
x=c(x,0.017814444041388048)
x=c(x,0.004183728959576041)
x=c(x,-0.03596862338556313)
x=c(x,-0.006295910742125813)
x=c(x,-0.0021360483880036077)
x=c(x,-0.006823106101915566)
x=c(x,0.01751780476957614)
x=c(x,-0.048230029672844045)
x=c(x,0.030897499717517398)
x=c(x,-0.028846780862657153)
x=c(x,-0.03685092059245011)
x=c(x,-0.04411073174983315)
x=c(x,0.008660554540967688)
x=c(x,0.001651877323833962)
x=c(x,-0.03795056731487307)
x=c(x,0.07264345812198401)
x=c(x,-0.04161763096829325)
x=c(x,-0.05638533251351351)
x=c(x,-0.007797072229621535)
x=c(x,-0.08050868381595087)
x=c(x,0.196729348778201)
x=c(x,-0.006822614852476674)
x=c(x,-0.02899641068091719)
x=c(x,-0.10673224213380941)
x=c(x,-0.10787026202227429)
x=c(x,-0.018101299408749424)
x=c(x,-0.06915294804052126)
x=c(x,-0.08614781331981922)
x=c(x,-0.06496807735096048)
x=c(x,0.06602361761786985)
x=c(x,-0.0060125874171502395)
x=c(x,0.006932411878130224)
x=c(x,0.015697378811815956)
x=c(x,-0.03676481952219862)
x=c(x,-0.000578014027867939)
x=c(x,-0.03563583588012356)
x=c(x,0.0820279653930463)
x=c(x,0.0518152049924029)
x=c(x,-0.05845083053505806)
x=c(x,-0.005578317323123035)
x=c(x,-0.012191505475845361)
x=c(x,-0.06624652828377729)
x=c(x,0.08354890004979378)
x=c(x,-0.022681074436446187)
x=c(x,-0.11295707313500879)
x=c(x,0.06966093916887733)
x=c(x,0.05515169834368439)
x=c(x,-0.030054424530607506)
x=c(x,-0.053644986319895754)
x=c(x,0.03311295615916462)
x=c(x,-0.016964676294052582)
x=c(x,-0.022440889049224706)
x=c(x,0.0061451480278462344)
x=c(x,-0.03563335388931854)
x=c(x,0.031148688183299283)
x=c(x,-0.004051996428755567)
x=c(x,0.026402970540904278)
x=c(x,0.0098899966104937)
x=c(x,-0.0041162920329148945)
x=c(x,0.001062229508592001)
x=c(x,0.08179742388726362)
x=c(x,0.05981290102162708)
x=c(x,-0.004408563502226635)
x=c(x,-0.03721320186787238)
x=c(x,0.006591962700860344)
x=c(x,0.03611735450402267)
x=c(x,0.005439523179779246)
x=c(x,-0.006570273703703463)
x=c(x,0.030409983317588523)
x=c(x,-0.0013600041711286993)
x=c(x,0.01848914115529221)
x=c(x,-0.042179478835123574)
x=c(x,0.018090325210392007)
x=c(x,-0.021043822979331907)
x=c(x,-0.0063390192417205615)
x=c(x,-0.017566332163943654)
x=c(x,0.01866431375993503)
x=c(x,-0.06310576385480712)
x=c(x,-0.004601931257576161)
x=c(x,-0.01975911701216493)
x=c(x,-9.511260692556533e-7)
x=c(x,0.00029823229036952855)
x=c(x,-0.00013804820502514618)
x=c(x,0.00019870145142960807)
x=c(x,0.0007234502183508254)
x=c(x,-0.0016393053815937067)
x=c(x,0.000879900008123758)
x=c(x,0.00017318012278846865)
x=c(x,-0.0022014838692000563)
x=c(x,-0.0012411403807368526)
x=c(x,-0.0002183236520415977)
x=c(x,-0.0022096856612354525)
x=c(x,0.0018747824666882436)
x=c(x,-0.001892193424062909)
x=c(x,-0.00275207810523723)
x=c(x,-0.0009975329272140375)
x=c(x,-0.000013017379066324805)
x=c(x,-0.0010000551293625004)
x=c(x,-0.0017566109467593012)
x=c(x,-0.0017500146225327268)
x=c(x,0.00368149558700854)
x=c(x,0.000008328753763026891)
x=c(x,-0.00648087428206129)
x=c(x,0.00013570307308803794)
x=c(x,-0.003018765666175333)
x=c(x,-0.0012226783294455664)
x=c(x,-0.0036778939302137665)
x=c(x,0.001512949186970898)
x=c(x,0.00017014708137322437)
x=c(x,0.01468317609770283)
x=c(x,-0.0006131777173004793)
x=c(x,-0.004155497713553659)
x=c(x,0.00422269886155341)
x=c(x,0.00021156997933434362)
x=c(x,0.017943584530690435)
x=c(x,-0.002121878630419282)
x=c(x,-0.0007175215942308628)
x=c(x,0.014468691774401975)
x=c(x,-0.0009069978314389255)
x=c(x,-0.003083515900559833)
x=c(x,-0.0032062477411223035)
x=c(x,-0.012887033081388392)
x=c(x,0.0036651631956414353)
x=c(x,-0.0010291097273742178)
x=c(x,-0.01078941071621644)
x=c(x,0.010919809727999451)
x=c(x,-0.0005930236989877922)
x=c(x,0.007097210361872569)
x=c(x,-0.007415624480186302)
x=c(x,-0.006139518692081858)
x=c(x,-0.004272492777833909)
x=c(x,-0.00915226718045762)
x=c(x,-0.004094849398811229)
x=c(x,-0.013881626079354028)
x=c(x,-0.00809311556638042)
x=c(x,-0.008937228839878573)
x=c(x,0.030490271334529397)
x=c(x,0.00650730073689564)
x=c(x,-0.014204306535814693)
x=c(x,-0.0026544823582593025)
x=c(x,-0.042889474442683956)
x=c(x,0.011678867137162008)
x=c(x,0.0029878801417022554)
x=c(x,0.013627937708072824)
x=c(x,-0.006818561791650932)
x=c(x,0.019755933974677023)
x=c(x,-0.006977248844630341)
x=c(x,-0.006191427188443429)
x=c(x,0.009213366631219175)
x=c(x,0.008481293337361792)
x=c(x,-0.0034771938319154523)
x=c(x,0.0038960146847617336)
x=c(x,0.0033825918215328902)
x=c(x,0.01892587442491072)
x=c(x,-0.008057317074606375)
x=c(x,-0.005967629410546288)
x=c(x,-0.02701052740623292)
x=c(x,-0.011065745177153105)
x=c(x,0.002779870512208116)
x=c(x,0.009776064947790718)
x=c(x,-0.0002271868216086844)
x=c(x,0.008098034203913826)
x=c(x,0.003501640496051931)
x=c(x,0.0014030707386916592)
x=c(x,-0.017044928218754384)
x=c(x,0.00688825122445261)
x=c(x,-0.011921041430498366)
x=c(x,0.005476285918566946)
x=c(x,-0.004230707236346149)
x=c(x,0.0014210072471273916)
x=c(x,-0.006107912295207591)
x=c(x,-0.000016150441933277296)
x=c(x,0.018122655366196352)
x=c(x,-0.011971806918002625)
x=c(x,0.0004989997853174727)
x=c(x,-0.0022942857830332186)
x=c(x,-0.0038599638778414797)
x=c(x,-0.02233854310827117)
x=c(x,-0.006147550106929285)
x=c(x,-0.0355927777147497)
x=c(x,-0.009576442359170345)
x=c(x,0.005497294245209575)
x=c(x,0.005140527347431181)
x=c(x,-0.00011405211757482634)
x=c(x,0.005560217021021323)
x=c(x,-0.003985306140193354)
x=c(x,0.007832745120996257)
x=c(x,0.006615375231303684)
x=c(x,0.0024152130038493946)
x=c(x,-0.007106613784518856)
x=c(x,-0.02161874154436836)
x=c(x,-0.036637078334533814)
x=c(x,0.024715720884395238)
x=c(x,0.02232431211754246)
x=c(x,-0.004598641944905804)
x=c(x,-0.003422372010338002)
x=c(x,0.005865626648055256)
x=c(x,0.006580558603995919)
x=c(x,0.002685582504948553)
x=c(x,-0.006039195108347872)
x=c(x,-0.002605206464587307)
x=c(x,-0.002454766480734375)
x=c(x,-0.01740058766126933)
x=c(x,-0.002505250362071602)
x=c(x,-0.0042462772131385)
x=c(x,0.047486187832912675)
x=c(x,-0.022626935879652026)
x=c(x,-0.0008467649783997558)
x=c(x,-0.043864559702639846)
x=c(x,-0.003939913076930075)
x=c(x,-0.029282055999747054)
x=c(x,0.02224557516619939)
x=c(x,0.019085317056973264)
x=c(x,0.025161325268051454)
x=c(x,0.0007975303905550191)
x=c(x,-0.008561395669894174)
x=c(x,0.07553395562972452)
x=c(x,0.008683356746778049)
x=c(x,-0.015446440562401817)
x=c(x,-0.02960477399351459)
x=c(x,-0.004252130331745019)
x=c(x,0.03434677518189914)
x=c(x,-0.006633143714853652)
x=c(x,-0.02765909457328826)
x=c(x,-0.02125138219695558)
x=c(x,-0.022721632068957734)
x=c(x,-0.04093657303133241)
x=c(x,-0.023505729929550256)
x=c(x,0.00935663027644984)
x=c(x,0.03834453893700047)
x=c(x,0.01102617230182639)
x=c(x,-0.00802181150166916)
x=c(x,-0.031593655795397003)
x=c(x,0.01599719198099999)
x=c(x,0.0049269983002585525)
x=c(x,-0.03540771374850973)
x=c(x,-0.007756800315793846)
x=c(x,-0.0052996167317742185)
x=c(x,-0.007492271919357923)
x=c(x,0.01751161253418276)
x=c(x,-0.04754145480590469)
x=c(x,0.033273513133600094)
x=c(x,-0.028515852047770938)
x=c(x,-0.037134285789964284)
x=c(x,-0.049887864674477145)
x=c(x,0.007940856822589557)
x=c(x,0.00058905325594657)
x=c(x,-0.03837939636441932)
x=c(x,0.07264193552058419)
x=c(x,-0.04417315320543839)
x=c(x,-0.05085826061569662)
x=c(x,-0.007811456003348415)
x=c(x,-0.07812694524976659)
x=c(x,0.19673963660630522)
x=c(x,-0.006870297337369401)
x=c(x,-0.02894605190025837)
x=c(x,-0.10665428416220199)
x=c(x,-0.10588247559921905)
x=c(x,-0.01795446213263843)
x=c(x,-0.0691036437065693)
x=c(x,-0.08980946209564117)
x=c(x,-0.06422451011073396)
x=c(x,0.06339745353772312)
x=c(x,-0.00709846714221864)
x=c(x,0.006557758607312916)
x=c(x,0.023456647816330254)
x=c(x,-0.040839936991701666)
x=c(x,-0.00010277363401051167)
x=c(x,-0.03918677338877615)
x=c(x,0.08177622406543857)
x=c(x,0.052754729422544236)
x=c(x,-0.05845730706317185)
x=c(x,-0.005573689111923198)
x=c(x,-0.007976111754548083)
x=c(x,-0.06695444926617469)
x=c(x,0.08401702316752378)
x=c(x,-0.023248352240724066)
x=c(x,-0.11360982727215982)
x=c(x,0.06852649006834008)
x=c(x,0.05537254228438899)
x=c(x,-0.030008524621227523)
x=c(x,-0.057103008238572416)
x=c(x,0.033197659707482154)
x=c(x,-0.017286919214222547)
x=c(x,-0.018670338285641744)
x=c(x,0.0036260779567285238)
x=c(x,-0.03568015273271808)
x=c(x,0.03096853219049394)
x=c(x,-0.002864609590785569)
x=c(x,0.029069943522673197)
x=c(x,0.010652351101970955)
x=c(x,-0.0005256169883439718)
x=c(x,0.004135913539290914)
x=c(x,0.08288766118272037)
x=c(x,0.05963334357705977)
x=c(x,-0.00619438756176538)
x=c(x,-0.03503624222844567)
x=c(x,0.006414483869283116)
x=c(x,0.03656595224328287)
x=c(x,0.004268701386206742)
x=c(x,-0.00650337330862197)
x=c(x,0.033099851920613085)
x=c(x,-0.0008639189670766847)
x=c(x,0.014945498150718654)
x=c(x,-0.04176192180013309)
x=c(x,0.022265993352600152)
x=c(x,-0.016893561543199036)
x=c(x,-0.007498158848904239)
x=c(x,-0.017351395636486085)
x=c(x,0.014013819401876737)
x=c(x,-0.06283268706266948)
x=c(x,0.002658923358931145)
x=c(x,-0.02453143785492351)
x=c(x,0.000012228400291348114)
x=c(x,0.0004306762762475289)
x=c(x,0.000020936332291408406)
x=c(x,0.0005640391354809802)
x=c(x,0.001124354459550714)
x=c(x,-0.0016676481463701774)
x=c(x,0.0014274115932154025)
x=c(x,-0.00010351258920964144)
x=c(x,-0.00173586220988878)
x=c(x,-0.0004907345751844304)
x=c(x,-0.0005857096290694807)
x=c(x,-0.0025815282536395504)
x=c(x,0.001319905091169819)
x=c(x,-0.001255807442528889)
x=c(x,-0.0035027697295318305)
x=c(x,-0.0015310051333534086)
x=c(x,-0.00039865148084045955)
x=c(x,-0.0026307968894040508)
x=c(x,-0.0014111451593959478)
x=c(x,-0.002281229702517549)
x=c(x,0.0023212647609353733)
x=c(x,-0.0029204272438376837)
x=c(x,-0.00673674063684378)
x=c(x,-0.0008598879007722913)
x=c(x,-0.003778733753135165)
x=c(x,-0.0025967325821261915)
x=c(x,-0.0042099163231217995)
x=c(x,0.002101695018109808)
x=c(x,-0.00036389645544873683)
x=c(x,0.0294608111663194)
x=c(x,0.0021640987195769307)
x=c(x,-0.00821654651465825)
x=c(x,0.006729771661010081)
x=c(x,-0.0004027228099359562)
x=c(x,0.025208267065267676)
x=c(x,-0.0007393496213056139)
x=c(x,0.0007826809297774834)
x=c(x,0.01589930585949306)
x=c(x,-0.0011264838824798353)
x=c(x,-0.003963060969069246)
x=c(x,-0.0040749996105435135)
x=c(x,-0.014799851850148801)
x=c(x,0.006509842817807021)
x=c(x,-0.001751638643787324)
x=c(x,-0.013963225497197907)
x=c(x,0.01577728990623326)
x=c(x,-0.003976477917927234)
x=c(x,0.008862441990219514)
x=c(x,-0.012215233257750134)
x=c(x,-0.008418313207314674)
x=c(x,-0.009271046095112498)
x=c(x,-0.014660144388656088)
x=c(x,-0.008892216741492327)
x=c(x,-0.015277845968165706)
x=c(x,-0.01594557621233142)
x=c(x,-0.015127700445876295)
x=c(x,0.04530537626214661)
x=c(x,0.008619290549736747)
x=c(x,-0.01571652447933432)
x=c(x,-0.003504829136760256)
x=c(x,-0.0654834064755806)
x=c(x,0.029387077815872863)
x=c(x,0.002018499522601936)
x=c(x,0.014355768035331052)
x=c(x,-0.005881743023261124)
x=c(x,0.025750280728868563)
x=c(x,-0.004672231893182479)
x=c(x,-0.008467211699303345)
x=c(x,0.0128855075310074)
x=c(x,0.008495036802612089)
x=c(x,-0.0024816638723874724)
x=c(x,-0.000521139374748251)
x=c(x,0.0047869104586898735)
x=c(x,0.03557865265704682)
x=c(x,-0.0056945972541371575)
x=c(x,-0.005855944070219834)
x=c(x,-0.060489200578822795)
x=c(x,-0.009063911455600152)
x=c(x,0.0033860598512787466)
x=c(x,0.010647414839474963)
x=c(x,0.0010479028854552858)
x=c(x,0.005530822485664871)
x=c(x,0.001953386118761431)
x=c(x,0.014654390247952743)
x=c(x,-0.025432078708621502)
x=c(x,0.007810118944396774)
x=c(x,-0.011933559801753016)
x=c(x,0.006332377484931794)
x=c(x,-0.003979383811902367)
x=c(x,-0.013394290279652084)
x=c(x,-0.005034916419628908)
x=c(x,-0.002398115383846424)
x=c(x,0.01870931317236281)
x=c(x,-0.008978943833708395)
x=c(x,0.003442952119033083)
x=c(x,0.00379280531560329)
x=c(x,-0.0015063179077929173)
x=c(x,-0.033394155830449315)
x=c(x,-0.005944054359850988)
x=c(x,-0.05752302034304858)
x=c(x,-0.016277436028988367)
x=c(x,0.006731150853465388)
x=c(x,0.006880007684301733)
x=c(x,0.0018683832441902654)
x=c(x,0.007352324437923285)
x=c(x,-0.005798348900812492)
x=c(x,0.009854017564285392)
x=c(x,0.0017062808567959657)
x=c(x,0.017397407066398852)
x=c(x,-0.008480714746068468)
x=c(x,-0.029966886984110493)
x=c(x,-0.05645629473259998)
x=c(x,0.015637347447980877)
x=c(x,0.01861826383230768)
x=c(x,-0.011157921118679076)
x=c(x,-0.005056219976367693)
x=c(x,0.00840841760048259)
x=c(x,0.005425312152963827)
x=c(x,0.008329502759466447)
x=c(x,-0.00690749711156786)
x=c(x,-0.0026990050525149255)
x=c(x,-0.0066344197890784475)
x=c(x,-0.02841183414540512)
x=c(x,0.04912891429154752)
x=c(x,-0.008606848179230268)
x=c(x,0.1039066361284058)
x=c(x,-0.04428024116690591)
x=c(x,-0.0013512851952622296)
x=c(x,-0.046752960513092495)
x=c(x,-0.013256118607083532)
x=c(x,-0.03676060329098257)
x=c(x,0.023451104420698653)
x=c(x,0.02991976854051666)
x=c(x,0.030995774949252184)
x=c(x,0.0038364881611998077)
x=c(x,-0.0017943596774319497)
x=c(x,0.09566852575756331)
x=c(x,0.013600294484178724)
x=c(x,-0.008010034510537438)
x=c(x,-0.03717289272427173)
x=c(x,-0.011084419848482687)
x=c(x,0.04082580524226911)
x=c(x,-0.010764279541802804)
x=c(x,-0.0324788131355236)
x=c(x,-0.03632210851603378)
x=c(x,-0.012528984168865259)
x=c(x,-0.039956122601452815)
x=c(x,-0.03193526511956556)
x=c(x,0.010017573851664251)
x=c(x,0.05164002275749545)
x=c(x,0.009378400874831343)
x=c(x,-0.019662820272114603)
x=c(x,-0.041124353735285474)
x=c(x,0.023169484735834762)
x=c(x,0.006235774059211755)
x=c(x,-0.07049043261095189)
x=c(x,-0.008539352605017852)
x=c(x,-0.015381907524874013)
x=c(x,-0.00624738706187269)
x=c(x,0.02472776744778997)
x=c(x,-0.07144632496707122)
x=c(x,0.0357795991425466)
x=c(x,-0.041614727016544256)
x=c(x,-0.046186472119126694)
x=c(x,-0.07310169780187831)
x=c(x,0.012066208939461892)
x=c(x,-0.0011853981373465708)
x=c(x,-0.05110989647558835)
x=c(x,0.12626359857926867)
x=c(x,-0.05161507079072485)
x=c(x,-0.1146882212860426)
x=c(x,-0.0016819253600378326)
x=c(x,-0.18567254071665057)
x=c(x,0.5078787917742605)
x=c(x,-0.09874153037500152)
x=c(x,-0.07132751134676524)
x=c(x,-0.13490302418600908)
x=c(x,-0.20107746413907263)
x=c(x,-0.05227897975403797)
x=c(x,-0.11204951769318035)
x=c(x,-0.13885119063703802)
x=c(x,-0.11220298274725493)
x=c(x,0.10222602452984003)
x=c(x,-0.010927949373014778)
x=c(x,0.008029161863650169)
x=c(x,0.014283121871340487)
x=c(x,-0.03359497469326009)
x=c(x,0.004172832586512661)
x=c(x,-0.04876655758260691)
x=c(x,0.20289032709924015)
x=c(x,0.07233488597876854)
x=c(x,-0.06522442450913667)
x=c(x,-0.010267770433003632)
x=c(x,-0.04543302411923414)
x=c(x,-0.09845816898904507)
x=c(x,0.15522287934153645)
x=c(x,-0.03177702211775016)
x=c(x,-0.15982836276259688)
x=c(x,0.10471371723787067)
x=c(x,0.08330033904482102)
x=c(x,-0.04370727480617078)
x=c(x,-0.0714346800060974)
x=c(x,0.04854880471407783)
x=c(x,-0.016479704673828692)
x=c(x,-0.011155757865082995)
x=c(x,0.018996690211293132)
x=c(x,-0.0536681879208493)
x=c(x,0.03638008609711878)
x=c(x,-0.006838498873623412)
x=c(x,0.03585041057470675)
x=c(x,0.0031274229898237303)
x=c(x,-0.006347913710848303)
x=c(x,0.0008478129778407642)
x=c(x,0.13937575570409846)
x=c(x,0.09609471419565922)
x=c(x,-0.005358934378428512)
x=c(x,-0.042363105717136994)
x=c(x,0.01943109872509475)
x=c(x,0.050733172277213814)
x=c(x,0.004948185480477533)
x=c(x,-0.011463735615862202)
x=c(x,0.03856346818968022)
x=c(x,-0.003104239973074176)
x=c(x,0.023931816288044756)
x=c(x,-0.057350114364877115)
x=c(x,0.018034330085831888)
x=c(x,-0.02652613078496903)
x=c(x,-0.004839704326124463)
x=c(x,-0.0128383735478969)
x=c(x,0.022725836815685675)
x=c(x,-0.07149503424527325)
x=c(x,0.004394324354765998)
x=c(x,-0.022992468561168877)
x=c(x,0.00001959333436937726)
x=c(x,0.0004247273355553322)
x=c(x,-0.00008097025689485755)
x=c(x,0.00041684010933858444)
x=c(x,0.001093076918350339)
x=c(x,-0.0017119077186587956)
x=c(x,0.0013778353136934694)
x=c(x,0.0000499657064437213)
x=c(x,-0.0015901569971413752)
x=c(x,-0.0010204905021628248)
x=c(x,-0.0003431995657812138)
x=c(x,-0.0025123713350325423)
x=c(x,0.0018543455539225568)
x=c(x,-0.0018571723743516393)
x=c(x,-0.0035908750528658977)
x=c(x,-0.0015073966168356104)
x=c(x,-0.00019033378338713348)
x=c(x,-0.002129333849347905)
x=c(x,-0.002593290009537642)
x=c(x,-0.002042148770663748)
x=c(x,0.0030677113471422254)
x=c(x,-0.0031083194179730355)
x=c(x,-0.007241616916539434)
x=c(x,-0.0011629691789530208)
x=c(x,-0.0036811291091418184)
x=c(x,-0.0020546994350445174)
x=c(x,-0.0041554140087588344)
x=c(x,0.0018798397352864373)
x=c(x,-0.0001670918950169003)
x=c(x,0.028874245459385668)
x=c(x,0.0014020398051498941)
x=c(x,-0.00833377177534324)
x=c(x,0.006890277378772619)
x=c(x,0.0002734674996638233)
x=c(x,0.024675450595232563)
x=c(x,-0.0013614194645148)
x=c(x,0.0003930695771227465)
x=c(x,0.01584588399821543)
x=c(x,-0.0010749634145040927)
x=c(x,-0.00397136693776064)
x=c(x,-0.004002197902840328)
x=c(x,-0.014729830916408676)
x=c(x,0.006260971095130378)
x=c(x,-0.0017601690167087858)
x=c(x,-0.014782072130942157)
x=c(x,0.015566680446332734)
x=c(x,-0.0028963347072698204)
x=c(x,0.009925441222569324)
x=c(x,-0.0119657134579317)
x=c(x,-0.008361852703130581)
x=c(x,-0.008729193106131357)
x=c(x,-0.01565232891109464)
x=c(x,-0.00882573471375479)
x=c(x,-0.015441707370413955)
x=c(x,-0.015764875451902347)
x=c(x,-0.013800222596785507)
x=c(x,0.045712552245967084)
x=c(x,0.00837441155842229)
x=c(x,-0.016025683232899927)
x=c(x,-0.003137125550771984)
x=c(x,-0.06057302834600402)
x=c(x,0.026176881682548128)
x=c(x,0.0016722995445056287)
x=c(x,0.014799067728346778)
x=c(x,-0.007429801807950675)
x=c(x,0.026182209902030205)
x=c(x,-0.006502502978045029)
x=c(x,-0.008053952938856286)
x=c(x,0.012599436619963558)
x=c(x,0.008523198162161884)
x=c(x,-0.002800173856027789)
x=c(x,0.001787470883177304)
x=c(x,0.003978172628539003)
x=c(x,0.03355319600785675)
x=c(x,-0.007729680255174933)
x=c(x,-0.00600930224331531)
x=c(x,-0.0558301349704704)
x=c(x,-0.010331786043671545)
x=c(x,0.003087451657830595)
x=c(x,0.010724191045029332)
x=c(x,0.0004714900410765699)
x=c(x,0.006517552874229446)
x=c(x,0.003278448717615123)
x=c(x,0.014644374856868989)
x=c(x,-0.022438409326764306)
x=c(x,0.00831583450263593)
x=c(x,-0.011729481430948464)
x=c(x,0.0066362138637652635)
x=c(x,-0.0040859787127658755)
x=c(x,-0.012831761379793888)
x=c(x,-0.0060012024811844965)
x=c(x,-0.002100255897084441)
x=c(x,0.018668565012342597)
x=c(x,-0.007474500843483298)
x=c(x,0.003969039596098026)
x=c(x,0.00043287154940459884)
x=c(x,-0.0022586825199598644)
x=c(x,-0.03177242586869733)
x=c(x,-0.0055836884171469175)
x=c(x,-0.05263688009181378)
x=c(x,-0.014728352209373335)
x=c(x,0.006544414900138628)
x=c(x,0.006533891275816278)
x=c(x,0.0016571944905127154)
x=c(x,0.010281455711788925)
x=c(x,-0.005448073704162659)
x=c(x,0.008914903753900848)
x=c(x,0.006256381403801987)
x=c(x,0.017415515146720413)
x=c(x,-0.008515788599542658)
x=c(x,-0.027450317557173486)
x=c(x,-0.054491084097355966)
x=c(x,0.015078213192143313)
x=c(x,0.017591871003368082)
x=c(x,-0.009581866642780717)
x=c(x,-0.005432932843259978)
x=c(x,0.007654734062684304)
x=c(x,0.0053621787209963976)
x=c(x,0.008633064528901927)
x=c(x,-0.006643631208477796)
x=c(x,-0.004689789060777269)
x=c(x,-0.006459929804387636)
x=c(x,-0.0272998437539189)
x=c(x,0.05325878544616238)
x=c(x,-0.009047621646846627)
x=c(x,0.10173301632584231)
x=c(x,-0.04528250986116546)
x=c(x,-0.0008640525461332618)
x=c(x,-0.045919904813790144)
x=c(x,-0.014167882085354572)
x=c(x,-0.03601564703539425)
x=c(x,0.024128369158453646)
x=c(x,0.02851530041513347)
x=c(x,0.034210339453148685)
x=c(x,0.004830415823830273)
x=c(x,-0.0004447394332274277)
x=c(x,0.09679880398900448)
x=c(x,0.014291432660662982)
x=c(x,-0.00916136674909446)
x=c(x,-0.03646115455125281)
x=c(x,-0.01079722405273192)
x=c(x,0.04092336202384036)
x=c(x,-0.009701800303032212)
x=c(x,-0.0320189818321899)
x=c(x,-0.036353678050999164)
x=c(x,-0.012718514314858967)
x=c(x,-0.04224816380124302)
x=c(x,-0.03031669710584721)
x=c(x,0.007184422502675398)
x=c(x,0.052120839269003946)
x=c(x,0.009001480067296506)
x=c(x,-0.016729509192906993)
x=c(x,-0.040260545473898686)
x=c(x,0.02289408741745493)
x=c(x,0.009260742578867215)
x=c(x,-0.07011558075905501)
x=c(x,-0.010436157323753142)
x=c(x,-0.01599352658032358)
x=c(x,-0.006214082993223105)
x=c(x,0.025024667067680598)
x=c(x,-0.06971835952013365)
x=c(x,0.038909353276708976)
x=c(x,-0.041112651080606265)
x=c(x,-0.05147690962243331)
x=c(x,-0.07376526309284118)
x=c(x,0.010791746107443951)
x=c(x,-0.0018556356207914174)
x=c(x,-0.05165415849873913)
x=c(x,0.12484454693188893)
x=c(x,-0.05250924462351674)
x=c(x,-0.1091262537429044)
x=c(x,-0.001776260870620816)
x=c(x,-0.1835009842344455)
x=c(x,0.5051855887020997)
x=c(x,-0.09819948859007356)
x=c(x,-0.07055430896195555)
x=c(x,-0.1344035104320425)
x=c(x,-0.20213459245879928)
x=c(x,-0.052293460357668894)
x=c(x,-0.11192246742947035)
x=c(x,-0.14146559429734576)
x=c(x,-0.10923313753775706)
x=c(x,0.0997391156894841)
x=c(x,-0.009923572343287213)
x=c(x,0.007323980862107435)
x=c(x,0.01950590218814322)
x=c(x,-0.032138335688607855)
x=c(x,0.00406752318668833)
x=c(x,-0.05024337018715038)
x=c(x,0.20131645275942697)
x=c(x,0.07333850220705795)
x=c(x,-0.06464700597730279)
x=c(x,-0.0100519625752337)
x=c(x,-0.043310465731535845)
x=c(x,-0.09991937981562748)
x=c(x,0.1538337118747046)
x=c(x,-0.03191333467097856)
x=c(x,-0.15872328858612014)
x=c(x,0.10259889799428244)
x=c(x,0.08448639563920567)
x=c(x,-0.04284374016377679)
x=c(x,-0.07028864230209535)
x=c(x,0.048841938965151176)
x=c(x,-0.015024471748369395)
x=c(x,-0.010787954433867902)
x=c(x,0.01866394374989959)
x=c(x,-0.05330615242475228)
x=c(x,0.03551188140030946)
x=c(x,-0.006400380780153698)
x=c(x,0.03676597588507635)
x=c(x,0.004492586627094431)
x=c(x,-0.005324425737473064)
x=c(x,0.0008902125483337654)
x=c(x,0.13864869816665937)
x=c(x,0.09705295478760936)
x=c(x,-0.005202149461799191)
x=c(x,-0.041273222081989414)
x=c(x,0.018353154659756798)
x=c(x,0.05164749337012874)
x=c(x,0.004156612225323736)
x=c(x,-0.01133263037873474)
x=c(x,0.038880826100788426)
x=c(x,-0.0032475707913027247)
x=c(x,0.022652553737511388)
x=c(x,-0.054032328842209085)
x=c(x,0.019335698177464437)
x=c(x,-0.02232294834239576)
x=c(x,-0.006347849556403541)
x=c(x,-0.012363248239145294)
x=c(x,0.02099560035343093)
x=c(x,-0.06941406435296699)
x=c(x,0.0017331385383423748)
x=c(x,-0.024138761593144764)
x=c(x,0.000007095817344497871)
x=c(x,0.0003949193343276287)
x=c(x,-0.0001408194762198389)
x=c(x,0.00027959783038724836)
x=c(x,0.0010330497423893792)
x=c(x,-0.0017501954066164675)
x=c(x,0.0013330432029835153)
x=c(x,0.00021612570290731307)
x=c(x,-0.0010401597767447442)
x=c(x,-0.0010775868233955691)
x=c(x,-0.00021783675759612898)
x=c(x,-0.002518638885436383)
x=c(x,0.0024648727045832597)
x=c(x,-0.002623121688025644)
x=c(x,-0.0036404080943024547)
x=c(x,-0.0014943926869521458)
x=c(x,0.00012634886893539158)
x=c(x,-0.001411041103645706)
x=c(x,-0.002594993396966285)
x=c(x,-0.0017519515685429576)
x=c(x,0.0037932781118959866)
x=c(x,-0.003624583320787618)
x=c(x,-0.007019672597604652)
x=c(x,0.00026872771010619375)
x=c(x,-0.003271729501740093)
x=c(x,-0.0017249786473389284)
x=c(x,-0.0040523785613699)
x=c(x,0.0017560158773673473)
x=c(x,0.0002773063464509955)
x=c(x,0.028002130437208877)
x=c(x,0.0007969061201724188)
x=c(x,-0.008455511361922116)
x=c(x,0.006653273372642546)
x=c(x,0.0011351293854186082)
x=c(x,0.023534733684796607)
x=c(x,-0.002509220788410216)
x=c(x,-0.0013655922153105815)
x=c(x,0.0159167615750073)
x=c(x,-0.0005449132151347894)
x=c(x,-0.003327642792766037)
x=c(x,-0.003595883372109487)
x=c(x,-0.01569894273180954)
x=c(x,0.0060238805171637985)
x=c(x,-0.0020350057236999146)
x=c(x,-0.014920660991649872)
x=c(x,0.014910917342193285)
x=c(x,-0.0003151287299444772)
x=c(x,0.01039437809666214)
x=c(x,-0.011814914021492392)
x=c(x,-0.008142683654142124)
x=c(x,-0.008436681918640944)
x=c(x,-0.015433594319886135)
x=c(x,-0.008664970591988308)
x=c(x,-0.01578197217505807)
x=c(x,-0.016093772790914125)
x=c(x,-0.011102697158280902)
x=c(x,0.04667172536451412)
x=c(x,0.007482220157143722)
x=c(x,-0.016914048918204642)
x=c(x,-0.0025487974603350407)
x=c(x,-0.058593357518932576)
x=c(x,0.023837985764890112)
x=c(x,0.0012114553497820067)
x=c(x,0.016342749812749104)
x=c(x,-0.009938627053974742)
x=c(x,0.026236994920594642)
x=c(x,-0.009436629006227054)
x=c(x,-0.0071235404685737755)
x=c(x,0.012148024453079465)
x=c(x,0.008534479480914074)
x=c(x,-0.00507396482160769)
x=c(x,0.0036627355423154333)
x=c(x,0.0025579367880526806)
x=c(x,0.028666054466883296)
x=c(x,-0.009652540651938232)
x=c(x,-0.005958461007875205)
x=c(x,-0.0479421178535865)
x=c(x,-0.013282737799673504)
x=c(x,0.002688972911207497)
x=c(x,0.009967695826296146)
x=c(x,-0.0003846120395657477)
x=c(x,0.011770051937935443)
x=c(x,0.005161661568368067)
x=c(x,0.014062695666494183)
x=c(x,-0.019054664222218538)
x=c(x,0.008712028469772462)
x=c(x,-0.011062644637921351)
x=c(x,0.006440661889704589)
x=c(x,-0.004232022446800236)
x=c(x,-0.008476380979349076)
x=c(x,-0.008450137888048782)
x=c(x,-0.0018747883438543411)
x=c(x,0.01876361475216837)
x=c(x,-0.007098619919230971)
x=c(x,0.001835937743959963)
x=c(x,-0.0029261060645535725)
x=c(x,-0.002485332627423117)
x=c(x,-0.02989133363686583)
x=c(x,-0.004456043738843491)
x=c(x,-0.04395333939450034)
x=c(x,-0.009946920931833327)
x=c(x,0.00787655376143625)
x=c(x,0.0049035821515246054)
x=c(x,0.0017727425491052414)
x=c(x,0.013561038413456227)
x=c(x,-0.00464238830558224)
x=c(x,0.006930331143122966)
x=c(x,0.005962496770325707)
x=c(x,0.017544821277851844)
x=c(x,-0.009166789956511639)
x=c(x,-0.02584679512694979)
x=c(x,-0.05063263042917907)
x=c(x,0.012813229499225231)
x=c(x,0.015624777967465683)
x=c(x,-0.006937247061432983)
x=c(x,-0.006225936122109545)
x=c(x,0.007301753790303996)
x=c(x,0.004235561070715721)
x=c(x,0.0038002017940199874)
x=c(x,-0.005994179364642583)
x=c(x,-0.008636726030320084)
x=c(x,-0.006001074373066695)
x=c(x,-0.02487744771326756)
x=c(x,-0.004950711358563935)
x=c(x,-0.00861255482474768)
x=c(x,0.09837648696746747)
x=c(x,-0.046469143873431464)
x=c(x,-0.0011658783362601096)
x=c(x,-0.0448134344679895)
x=c(x,-0.01492126951098862)
x=c(x,-0.03659051882456226)
x=c(x,0.024398636160715872)
x=c(x,0.025506457048618154)
x=c(x,0.03690924797094125)
x=c(x,0.006082077907001007)
x=c(x,0.0038182431659262183)
x=c(x,0.09730679589413366)
x=c(x,0.014339316294163292)
x=c(x,-0.010439299916437996)
x=c(x,-0.034622297924120145)
x=c(x,-0.010528130338751168)
x=c(x,0.04083767508736373)
x=c(x,-0.007277496805401502)
x=c(x,-0.03128093309300038)
x=c(x,-0.04252568560033326)
x=c(x,-0.013917928439270075)
x=c(x,-0.04941940642076478)
x=c(x,-0.02849983170729157)
x=c(x,0.006914133065361207)
x=c(x,0.053371932939297616)
x=c(x,0.013724927770384872)
x=c(x,-0.011679129764879392)
x=c(x,-0.03558348593776674)
x=c(x,0.019230720190473078)
x=c(x,0.010794483480762522)
x=c(x,-0.06951803062452881)
x=c(x,-0.012556529614589054)
x=c(x,-0.017816048301992925)
x=c(x,-0.006485154628313426)
x=c(x,0.02466181447735381)
x=c(x,-0.06661110663202753)
x=c(x,0.041161476497243304)
x=c(x,-0.03755906739791394)
x=c(x,-0.0512981774361231)
x=c(x,-0.07836768748959781)
x=c(x,0.00926087709806678)
x=c(x,-0.002962676233224234)
x=c(x,-0.05249401833329233)
x=c(x,0.12018304688131035)
x=c(x,-0.05528893925824967)
x=c(x,-0.09802854269596842)
x=c(x,-0.0023430465261984642)
x=c(x,-0.1748329007200895)
x=c(x,0.4985717513850604)
x=c(x,-0.09717849383084136)
x=c(x,-0.06955233325232724)
x=c(x,-0.13392850819405588)
x=c(x,-0.19946435743885388)
x=c(x,-0.05200219546669187)
x=c(x,-0.11088735023448756)
x=c(x,-0.1476665043679466)
x=c(x,-0.10898959673433654)
x=c(x,0.09232157738813072)
x=c(x,-0.009365725353851918)
x=c(x,0.006001370213175657)
x=c(x,0.026267968887917666)
x=c(x,-0.035656898582589545)
x=c(x,0.004882448242922817)
x=c(x,-0.05253114541558842)
x=c(x,0.1964078155328072)
x=c(x,0.07576931863929122)
x=c(x,-0.06379710490680153)
x=c(x,-0.010019810813704375)
x=c(x,-0.03479465333708526)
x=c(x,-0.10123354629864392)
x=c(x,0.15309980575513743)
x=c(x,-0.03301890566378479)
x=c(x,-0.15883027910241845)
x=c(x,0.09735852266777682)
x=c(x,0.08283570946236894)
x=c(x,-0.04125023451490292)
x=c(x,-0.07260900144733155)
x=c(x,0.04836174739056619)
x=c(x,-0.012375528385168092)
x=c(x,-0.008427390447603498)
x=c(x,0.01538668172057006)
x=c(x,-0.05141744122864127)
x=c(x,0.03450611686833892)
x=c(x,-0.0051800284633899095)
x=c(x,0.03916732834917723)
x=c(x,0.005388817692545001)
x=c(x,-0.0015519166787385955)
x=c(x,0.004154633759700925)
x=c(x,0.13704187874542625)
x=c(x,0.09750374973867672)
x=c(x,-0.006697277282711813)
x=c(x,-0.037683249634487125)
x=c(x,0.01684947685328757)
x=c(x,0.05202654751984055)
x=c(x,0.0027169808264720322)
x=c(x,-0.011221354991208386)
x=c(x,0.04197170432083439)
x=c(x,-0.002959346756140276)
x=c(x,0.018250163685733234)
x=c(x,-0.05153786285693364)
x=c(x,0.02314170252724389)
x=c(x,-0.01712239528572715)
x=c(x,-0.0077513568322855565)
x=c(x,-0.011893036261284066)
x=c(x,0.01462402483683354)
x=c(x,-0.06666828275757318)
x=c(x,0.008148487558441216)
x=c(x,-0.028703307043144832)
x=c(x,0.000020926138333699272)
x=c(x,0.0004970083641689027)
x=c(x,0.000046226582131657136)
x=c(x,0.000669744120776778)
x=c(x,0.00136779846404167)
x=c(x,-0.001813797160576811)
x=c(x,0.0017276189538503685)
x=c(x,-0.0000749866283514207)
x=c(x,-0.0011337609192421877)
x=c(x,-0.0004070889999524544)
x=c(x,-0.0005956617286483702)
x=c(x,-0.0028256662745654907)
x=c(x,0.0014626255806891553)
x=c(x,-0.0016346717700734573)
x=c(x,-0.00414833854221602)
x=c(x,-0.0018826264141271847)
x=c(x,-0.00025044350630909804)
x=c(x,-0.003037310983883592)
x=c(x,-0.0020419382654601856)
x=c(x,-0.0023154373669001097)
x=c(x,0.0023436106816336006)
x=c(x,-0.005137561657422718)
x=c(x,-0.00721649825807952)
x=c(x,-0.0008770747263215319)
x=c(x,-0.003990179656152358)
x=c(x,-0.0030412636727866265)
x=c(x,-0.004557525625670978)
x=c(x,0.00226883201233823)
x=c(x,-0.00029838479727062545)
x=c(x,0.03876486201125019)
x=c(x,0.0032804888590143807)
x=c(x,-0.010989519755957775)
x=c(x,0.008370823737965303)
x=c(x,0.000328487772822718)
x=c(x,0.02996788665730071)
x=c(x,-0.0008248239562830622)
x=c(x,-0.000130139014961739)
x=c(x,0.016854739731876983)
x=c(x,-0.0007007866714666904)
x=c(x,-0.004034192274712587)
x=c(x,-0.004317497516115705)
x=c(x,-0.017256719004223455)
x=c(x,0.00834453530874135)
x=c(x,-0.0023670433584533413)
x=c(x,-0.017182021321836913)
x=c(x,0.018792802238601466)
x=c(x,-0.004115140645084952)
x=c(x,0.011656973319387984)
x=c(x,-0.015416587356486086)
x=c(x,-0.009716076350383039)
x=c(x,-0.012521026818541827)
x=c(x,-0.018113455408193316)
x=c(x,-0.011792886412598945)
x=c(x,-0.016694072512219583)
x=c(x,-0.021490526701207935)
x=c(x,-0.017012490215553268)
x=c(x,0.05577015837660821)
x=c(x,0.009902893459434457)
x=c(x,-0.018175558109991153)
x=c(x,-0.0033688505615091643)
x=c(x,-0.07604992510483802)
x=c(x,0.03830729356470028)
x=c(x,0.001186236877225066)
x=c(x,0.016699792168119825)
x=c(x,-0.007625549016516303)
x=c(x,0.030012250436915595)
x=c(x,-0.006350535227799262)
x=c(x,-0.009130979210464685)
x=c(x,0.01530225135578581)
x=c(x,0.008657422304859632)
x=c(x,-0.003158844349890299)
x=c(x,-0.000980830849632091)
x=c(x,0.004811217350123455)
x=c(x,0.044468053532664996)
x=c(x,-0.007034584793082099)
x=c(x,-0.00601973739895854)
x=c(x,-0.0775085545643211)
x=c(x,-0.010711633173827078)
x=c(x,0.0032247706024184425)
x=c(x,0.01100516562022559)
x=c(x,0.0011172620587237012)
x=c(x,0.007985437567369658)
x=c(x,0.0030980515635294905)
x=c(x,0.022544409019607185)
x=c(x,-0.02801961309679915)
x=c(x,0.008863769547739883)
x=c(x,-0.012303355443057573)
x=c(x,0.006610355079706571)
x=c(x,-0.004144152547488749)
x=c(x,-0.02011713861719234)
x=c(x,-0.006095649824527122)
x=c(x,-0.0035293226063979094)
x=c(x,0.019288156911664623)
x=c(x,-0.005475829562720692)
x=c(x,0.00411204818030556)
x=c(x,0.004103234116738903)
x=c(x,-0.0006257122482592867)
x=c(x,-0.03953479432187984)
x=c(x,-0.005406532999990746)
x=c(x,-0.0646363215242916)
x=c(x,-0.01619116546995264)
x=c(x,0.008565440512342717)
x=c(x,0.007542075025181229)
x=c(x,0.003324469537149725)
x=c(x,0.01261564779916436)
x=c(x,-0.0066174310476343106)
x=c(x,0.010147037706977266)
x=c(x,0.00160062521372206)
x=c(x,0.027082686699952858)
x=c(x,-0.010533272686264033)
x=c(x,-0.03456341169982)
x=c(x,-0.06726437318259382)
x=c(x,0.00945991579776375)
x=c(x,0.015295003337021072)
x=c(x,-0.013084737248278945)
x=c(x,-0.007066065522781811)
x=c(x,0.009570286925597435)
x=c(x,0.003935970557136454)
x=c(x,0.009002152687219319)
x=c(x,-0.007495642605436307)
x=c(x,-0.006031112673597068)
x=c(x,-0.009171019044121185)
x=c(x,-0.03369090898559594)
x=c(x,0.06218983320956777)
x=c(x,-0.011412725058285706)
x=c(x,0.141072735578425)
x=c(x,-0.06044232043057099)
x=c(x,-0.0011400097442720789)
x=c(x,-0.04864536104407891)
x=c(x,-0.01933090301305991)
x=c(x,-0.043079324671560074)
x=c(x,0.026216239500787275)
x=c(x,0.035256267112582285)
x=c(x,0.037523142874385594)
x=c(x,0.006650691799969844)
x=c(x,0.0031734188524742283)
x=c(x,0.1097331660275167)
x=c(x,0.01733498893358435)
x=c(x,-0.0033209543138845847)
x=c(x,-0.040092891425855474)
x=c(x,-0.015604466268798526)
x=c(x,0.045052877874696695)
x=c(x,-0.0118957160451003)
x=c(x,-0.03579414876572401)
x=c(x,-0.04850671497662359)
x=c(x,-0.006114118381579729)
x=c(x,-0.04309657547339641)
x=c(x,-0.037058155387608475)
x=c(x,0.009434457865906892)
x=c(x,0.06063105412983902)
x=c(x,0.011608221390642767)
x=c(x,-0.022777368145574347)
x=c(x,-0.044237018850660156)
x=c(x,0.026750906165212876)
x=c(x,0.00886820880119301)
x=c(x,-0.09258376979848358)
x=c(x,-0.010929300380495454)
x=c(x,-0.024231339581276094)
x=c(x,-0.006025045960520002)
x=c(x,0.0296132021577875)
x=c(x,-0.08663364193669641)
x=c(x,0.041062708883320025)
x=c(x,-0.04993128445853127)
x=c(x,-0.054606391524881066)
x=c(x,-0.09327853620323363)
x=c(x,0.013885624581190534)
x=c(x,-0.003247873623944707)
x=c(x,-0.06000923499495651)
x=c(x,0.16139402769478894)
x=c(x,-0.05875532304661222)
x=c(x,-0.15079237398445702)
x=c(x,0.0023680137133613344)
x=c(x,-0.2544736476695609)
x=c(x,0.7117512196672646)
x=c(x,-0.1589642688933456)
x=c(x,-0.0946844436417391)
x=c(x,-0.1532880983119449)
x=c(x,-0.2621953424511947)
x=c(x,-0.074671163625936)
x=c(x,-0.14006427151380477)
x=c(x,-0.17432888776005043)
x=c(x,-0.1415603943845376)
x=c(x,0.1258077569803133)
x=c(x,-0.014235976070414864)
x=c(x,0.008624072454902598)
x=c(x,0.016609412271423457)
x=c(x,-0.03166245220964789)
x=c(x,0.00727515929893414)
x=c(x,-0.058547709392161945)
x=c(x,0.2820759503491508)
x=c(x,0.08606066384342302)
x=c(x,-0.06966038040213154)
x=c(x,-0.013337946875780637)
x=c(x,-0.06653281782572508)
x=c(x,-0.11991945523011195)
x=c(x,0.20234555711310037)
x=c(x,-0.03789051456906181)
x=c(x,-0.19070887056359964)
x=c(x,0.1275604168195372)
x=c(x,0.1021435849151189)
x=c(x,-0.052651389362586634)
x=c(x,-0.08339471358270013)
x=c(x,0.05873148847200873)
x=c(x,-0.016222482011874238)
x=c(x,-0.0036770281274594928)
x=c(x,0.027275458534710532)
x=c(x,-0.06548417980888491)
x=c(x,0.039209162898343745)
x=c(x,-0.008418907057668961)
x=c(x,0.042807214570389544)
x=c(x,-0.0007548287137994127)
x=c(x,-0.007019525108908476)
x=c(x,0.0007560839822588676)
x=c(x,0.17702621494045084)
x=c(x,0.12012951518221586)
x=c(x,-0.006274727886100595)
x=c(x,-0.045898216167617405)
x=c(x,0.0276027005840224)
x=c(x,0.06081420538675313)
x=c(x,0.004235730394329167)
x=c(x,-0.014669796868655677)
x=c(x,0.044221160116618474)
x=c(x,-0.0041400272704620504)
x=c(x,0.02691149448153598)
x=c(x,-0.06622400306737916)
x=c(x,0.01910024710438575)
x=c(x,-0.027804965256764267)
x=c(x,-0.004710503041740213)
x=c(x,-0.009709664780039566)
x=c(x,0.024792906182266712)
x=c(x,-0.07689831095782691)
x=c(x,0.008464114406439476)
x=c(x,-0.02570692913360695)
x=c(x,0.000026734977166230634)
x=c(x,0.0004864720956079204)
x=c(x,-0.00007181483957729984)
x=c(x,0.0004964507514390002)
x=c(x,0.0013199058879797422)
x=c(x,-0.0018382373478810566)
x=c(x,0.001682476882039287)
x=c(x,0.00007653919952394456)
x=c(x,-0.0009463240160028376)
x=c(x,-0.0009484193981007531)
x=c(x,-0.0003477804243844036)
x=c(x,-0.0027125726332102727)
x=c(x,0.0021068727054311047)
x=c(x,-0.0022725925863919805)
x=c(x,-0.004219810637687118)
x=c(x,-0.0018572206893779806)
x=c(x,-0.00007336175911416445)
x=c(x,-0.0024764673367969284)
x=c(x,-0.0032898204290450128)
x=c(x,-0.002055170583358833)
x=c(x,0.003103291984908661)
x=c(x,-0.0054433999309909395)
x=c(x,-0.007705987526505829)
x=c(x,-0.0012502623344510335)
x=c(x,-0.0038682130105983114)
x=c(x,-0.0024296169134735202)
x=c(x,-0.004467923404667212)
x=c(x,0.00204421633209796)
x=c(x,-0.00008451112518070122)
x=c(x,0.037982535640839137)
x=c(x,0.002428000993235)
x=c(x,-0.01112638218285994)
x=c(x,0.008536832692097034)
x=c(x,0.0010091150053655336)
x=c(x,0.02908598353448405)
x=c(x,-0.0015136493843072025)
x=c(x,-0.00046172737604105224)
x=c(x,0.01673938976381867)
x=c(x,-0.0006155114141273987)
x=c(x,-0.004060044792077413)
x=c(x,-0.004237788285792094)
x=c(x,-0.017092189382335476)
x=c(x,0.007959152926011515)
x=c(x,-0.002404027172782399)
x=c(x,-0.017881336415866568)
x=c(x,0.018448847869530275)
x=c(x,-0.0028984093537082773)
x=c(x,0.012496853784498232)
x=c(x,-0.014989720111822378)
x=c(x,-0.00967630864781415)
x=c(x,-0.011755180493038858)
x=c(x,-0.01944951230546162)
x=c(x,-0.011761625111324692)
x=c(x,-0.016877480724659683)
x=c(x,-0.02120064051118839)
x=c(x,-0.015571478324025664)
x=c(x,0.05616020627598679)
x=c(x,0.009502834946365203)
x=c(x,-0.018237056641131504)
x=c(x,-0.00308930298353961)
x=c(x,-0.07068432802067161)
x=c(x,0.034614074403434524)
x=c(x,0.0006160070767012289)
x=c(x,0.016623840112764438)
x=c(x,-0.009332953523591182)
x=c(x,0.03058425255469067)
x=c(x,-0.008170426512099411)
x=c(x,-0.008760163722299933)
x=c(x,0.01482813515840865)
x=c(x,0.008664023811695648)
x=c(x,-0.0034424873222839245)
x=c(x,0.0014634626845153663)
x=c(x,0.003801474901505638)
x=c(x,0.04184230243289696)
x=c(x,-0.008970706826303826)
x=c(x,-0.005925019768595747)
x=c(x,-0.07183403516343177)
x=c(x,-0.011867421167801656)
x=c(x,0.0029378308314600286)
x=c(x,0.011005298141339229)
x=c(x,0.00047136679266134674)
x=c(x,0.009008438856011231)
x=c(x,0.004350576520719404)
x=c(x,0.022679155317160617)
x=c(x,-0.02447034463039744)
x=c(x,0.00945742089805748)
x=c(x,-0.01188351962977329)
x=c(x,0.007135584823661636)
x=c(x,-0.004157901945395331)
x=c(x,-0.01952575836850939)
x=c(x,-0.0071770946630746475)
x=c(x,-0.0033293001885929957)
x=c(x,0.01919760848872493)
x=c(x,-0.0038921684962227626)
x=c(x,0.004798197444394287)
x=c(x,0.00040528370290544526)
x=c(x,-0.0014197050304536438)
x=c(x,-0.037509056465646666)
x=c(x,-0.004830549335840211)
x=c(x,-0.059181726356666645)
x=c(x,-0.014834004915535586)
x=c(x,0.008217266427842452)
x=c(x,0.0070890958720157575)
x=c(x,0.002890098780102836)
x=c(x,0.01579917851467591)
x=c(x,-0.0061399814717019545)
x=c(x,0.008696461836090299)
x=c(x,0.005774434441267403)
x=c(x,0.027170148074554822)
x=c(x,-0.010588110984739172)
x=c(x,-0.031266547000922684)
x=c(x,-0.06470412202183587)
x=c(x,0.008602139791704603)
x=c(x,0.01382886056245894)
x=c(x,-0.01140298076396887)
x=c(x,-0.007221502110493246)
x=c(x,0.008517618674789007)
x=c(x,0.0038104378066404535)
x=c(x,0.009333796861982114)
x=c(x,-0.007055311861227705)
x=c(x,-0.008445009973883729)
x=c(x,-0.008961376498924405)
x=c(x,-0.03254045037031826)
x=c(x,0.06746192449583104)
x=c(x,-0.012051293898522561)
x=c(x,0.13735912372415637)
x=c(x,-0.06129823826856214)
x=c(x,-0.000659038454831229)
x=c(x,-0.04726651023144124)
x=c(x,-0.020800636539308495)
x=c(x,-0.04196257097145246)
x=c(x,0.0266428063269963)
x=c(x,0.033507338649146054)
x=c(x,0.041300282472072854)
x=c(x,0.00791253074398957)
x=c(x,0.0053595618946903414)
x=c(x,0.11117303011499839)
x=c(x,0.018137228067979707)
x=c(x,-0.005128915451795673)
x=c(x,-0.03984660075841775)
x=c(x,-0.015098330163256133)
x=c(x,0.04535885486615064)
x=c(x,-0.010517811028321538)
x=c(x,-0.03499982992704194)
x=c(x,-0.048558968000016155)
x=c(x,-0.0064301315168805925)
x=c(x,-0.04615973214948085)
x=c(x,-0.03467602195208945)
x=c(x,0.005569566567137356)
x=c(x,0.061286080770280665)
x=c(x,0.011038222626527257)
x=c(x,-0.019661413267545145)
x=c(x,-0.043247774473701865)
x=c(x,0.026222129629360734)
x=c(x,0.012587061846680524)
x=c(x,-0.09248772524513686)
x=c(x,-0.013148732670335797)
x=c(x,-0.025072564016672492)
x=c(x,-0.005815067853046855)
x=c(x,0.029942956159543177)
x=c(x,-0.083796920454564)
x=c(x,0.044158498712040826)
x=c(x,-0.04914891087857463)
x=c(x,-0.06105945415931722)
x=c(x,-0.09319409397274453)
x=c(x,0.01218804403030695)
x=c(x,-0.004153661343132577)
x=c(x,-0.06063237341230522)
x=c(x,0.15904526029010221)
x=c(x,-0.05964512943211069)
x=c(x,-0.14368065041043462)
x=c(x,0.002168408640446852)
x=c(x,-0.2509786983017355)
x=c(x,0.7072776079625867)
x=c(x,-0.15806709552160375)
x=c(x,-0.09341415847750781)
x=c(x,-0.1525329620757132)
x=c(x,-0.2638939813654889)
x=c(x,-0.074695220979374)
x=c(x,-0.1399438766842999)
x=c(x,-0.1777082783860689)
x=c(x,-0.138234383867038)
x=c(x,0.12182857994329929)
x=c(x,-0.012485941777653898)
x=c(x,0.00758052605850574)
x=c(x,0.022001141641601035)
x=c(x,-0.02910719110798145)
x=c(x,0.007111151016913082)
x=c(x,-0.05981382369864867)
x=c(x,0.27947097896498824)
x=c(x,0.0874399727959693)
x=c(x,-0.068706569198083)
x=c(x,-0.012982971533515063)
x=c(x,-0.06369875003698874)
x=c(x,-0.12198090323304746)
x=c(x,0.19988238169102376)
x=c(x,-0.037962056893603546)
x=c(x,-0.188708050433399)
x=c(x,0.1241789399833414)
x=c(x,0.10370568007420182)
x=c(x,-0.051222946957920804)
x=c(x,-0.08119310656629664)
x=c(x,0.059147134596661176)
x=c(x,-0.013753303252922967)
x=c(x,-0.0031532731341526415)
x=c(x,0.026865913360900696)
x=c(x,-0.0648848824996932)
x=c(x,0.038370525232143654)
x=c(x,-0.007938977424173104)
x=c(x,0.04355553111056967)
x=c(x,0.0009563525000386132)
x=c(x,-0.006115961612874095)
x=c(x,0.0007775117812682679)
x=c(x,0.1758960847635067)
x=c(x,0.12145161070325142)
x=c(x,-0.005722085090485635)
x=c(x,-0.04393323532572113)
x=c(x,0.02605876318455133)
x=c(x,0.061822411937575934)
x=c(x,0.0033160843586123594)
x=c(x,-0.014452795096860085)
x=c(x,0.04443068861391842)
x=c(x,-0.0044842523700366664)
x=c(x,0.025380306808620662)
x=c(x,-0.0617979891916785)
x=c(x,0.02015163219037476)
x=c(x,-0.023160995994058745)
x=c(x,-0.006353634934987748)
x=c(x,-0.008954331184967395)
x=c(x,0.022522995018136153)
x=c(x,-0.0735470888172785)
x=c(x,0.005883701508081125)
x=c(x,-0.027008183904822403)
x=c(x,0.000012367952684544333)
x=c(x,0.00045826601830016665)
x=c(x,-0.00014263513665775318)
x=c(x,0.0003325989062560112)
x=c(x,0.001235890809862893)
x=c(x,-0.0018228474919761918)
x=c(x,0.0016299301237537864)
x=c(x,0.00024426246229551114)
x=c(x,-0.000279292267894638)
x=c(x,-0.0009704310444479347)
x=c(x,-0.00021751775778712902)
x=c(x,-0.0027210565150852335)
x=c(x,0.0028514835501007585)
x=c(x,-0.0031020057230357685)
x=c(x,-0.004222417397483042)
x=c(x,-0.001819921495056318)
x=c(x,0.00021765779004005695)
x=c(x,-0.0016803077764519486)
x=c(x,-0.0031442784505502524)
x=c(x,-0.001753220602136071)
x=c(x,0.0038665149385463905)
x=c(x,-0.00600476709376905)
x=c(x,-0.007372678390546805)
x=c(x,0.0003558817826353722)
x=c(x,-0.0034374644284895276)
x=c(x,-0.0020540719590623527)
x=c(x,-0.004297730561093077)
x=c(x,0.0019152664676269136)
x=c(x,0.00034751414081256196)
x=c(x,0.03672834190102324)
x=c(x,0.0017207541516200352)
x=c(x,-0.01127276168326696)
x=c(x,0.008245718741976802)
x=c(x,0.0017402200307839867)
x=c(x,0.027197900371969622)
x=c(x,-0.002762996685025346)
x=c(x,-0.001790190208431602)
x=c(x,0.01686549696161096)
x=c(x,-0.000307685363073299)
x=c(x,-0.003487587998004334)
x=c(x,-0.003851161888963557)
x=c(x,-0.017541228364844258)
x=c(x,0.007569247038161394)
x=c(x,-0.002694041031637781)
x=c(x,-0.017627342206589146)
x=c(x,0.017525780951492282)
x=c(x,-0.00013305961229575326)
x=c(x,0.012554591440144713)
x=c(x,-0.014697207169244199)
x=c(x,-0.009455102077560701)
x=c(x,-0.01116494376951459)
x=c(x,-0.01954894658364965)
x=c(x,-0.011659187925448802)
x=c(x,-0.0170270265136226)
x=c(x,-0.02133558269664308)
x=c(x,-0.012521452263440895)
x=c(x,0.05727336766002187)
x=c(x,0.008120960466961277)
x=c(x,-0.018689397375632754)
x=c(x,-0.002479555630660641)
x=c(x,-0.06888210849992325)
x=c(x,0.03180430486581517)
x=c(x,0.00004759083093777025)
x=c(x,0.018121419812364932)
x=c(x,-0.011982807743083532)
x=c(x,0.03048320726447228)
x=c(x,-0.011047947043134656)
x=c(x,-0.007734235376244863)
x=c(x,0.014070731301884846)
x=c(x,0.008569325574965418)
x=c(x,-0.006120125125198911)
x=c(x,0.003509897483471346)
x=c(x,0.002017645559221151)
x=c(x,0.03504755173576171)
x=c(x,-0.010697687133638547)
x=c(x,-0.005952454123366756)
x=c(x,-0.06165591849150786)
x=c(x,-0.014735250207531142)
x=c(x,0.0026294193105519882)
x=c(x,0.01009324709152385)
x=c(x,-0.0004877526996071365)
x=c(x,0.01417585666022539)
x=c(x,0.006249261581264567)
x=c(x,0.022356932688157742)
x=c(x,-0.020371387810695283)
x=c(x,0.009906917009810189)
x=c(x,-0.010500246739336883)
x=c(x,0.007072494422518523)
x=c(x,-0.004232884136407954)
x=c(x,-0.014960876713936744)
x=c(x,-0.00998469948335896)
x=c(x,-0.003092516624423828)
x=c(x,0.019183553660218896)
x=c(x,-0.003905842230380854)
x=c(x,0.0027118626134152186)
x=c(x,-0.0033400572834810815)
x=c(x,-0.0015847121530115004)
x=c(x,-0.03483971363835863)
x=c(x,-0.003347815428719259)
x=c(x,-0.04943094877088834)
x=c(x,-0.010189648272543818)
x=c(x,0.009435378961722946)
x=c(x,0.00474834219558516)
x=c(x,0.0030089183652059967)
x=c(x,0.018802955877465215)
x=c(x,-0.005072890413940906)
x=c(x,0.00633909439899874)
x=c(x,0.005534748813133839)
x=c(x,0.027457323250474074)
x=c(x,-0.010516560551954877)
x=c(x,-0.02861689919829698)
x=c(x,-0.059802130077394475)
x=c(x,0.005015045488251878)
x=c(x,0.011235428007070643)
x=c(x,-0.008469436620536553)
x=c(x,-0.008062753988442636)
x=c(x,0.008242664676605862)
x=c(x,0.0026991833764970124)
x=c(x,0.004530469604101249)
x=c(x,-0.005964686291180298)
x=c(x,-0.012588411263041535)
x=c(x,-0.00832451747494027)
x=c(x,-0.029776080161129325)
x=c(x,-0.006552909942472967)
x=c(x,-0.011473219466836583)
x=c(x,0.13171840709010743)
x=c(x,-0.062089900834873174)
x=c(x,-0.001374952605203698)
x=c(x,-0.04543511103839174)
x=c(x,-0.022115951312614134)
x=c(x,-0.0413788220546155)
x=c(x,0.02580926232953876)
x=c(x,0.02971341083624674)
x=c(x,0.044606162845247696)
x=c(x,0.009544367659155326)
x=c(x,0.011929041023878283)
x=c(x,0.11157176020529778)
x=c(x,0.018044944963140214)
x=c(x,-0.007158759493220194)
x=c(x,-0.037909641189000476)
x=c(x,-0.014639992412306273)
x=c(x,0.04509033364611745)
x=c(x,-0.007699659175070248)
x=c(x,-0.03365386177832929)
x=c(x,-0.05646402231289083)
x=c(x,-0.008149984681888428)
x=c(x,-0.054977124848324614)
x=c(x,-0.03177182942374382)
x=c(x,0.005313876271889517)
x=c(x,0.06321746694080385)
x=c(x,0.015493077904957618)
x=c(x,-0.014075303799396333)
x=c(x,-0.0381975125827669)
x=c(x,0.021349238672541924)
x=c(x,0.014638697909368111)
x=c(x,-0.09186616926743658)
x=c(x,-0.015701179844834)
x=c(x,-0.026016468985929495)
x=c(x,-0.005825319161768313)
x=c(x,0.02934642954356836)
x=c(x,-0.07910501644914279)
x=c(x,0.046329452494113646)
x=c(x,-0.04348393262731924)
x=c(x,-0.06057796851464068)
x=c(x,-0.09702688174778114)
x=c(x,0.010125717968207831)
x=c(x,-0.005289671415783965)
x=c(x,-0.06174152927841669)
x=c(x,0.15133067156592359)
x=c(x,-0.06257169563767785)
x=c(x,-0.1289332102658011)
x=c(x,0.0012397045105551371)
x=c(x,-0.2381919749937503)
x=c(x,0.6963238265849349)
x=c(x,-0.15634593291277255)
x=c(x,-0.09146615531465953)
x=c(x,-0.1517978273873384)
x=c(x,-0.2607766248510277)
x=c(x,-0.07430933109934765)
x=c(x,-0.13826288209760604)
x=c(x,-0.18557284240842442)
x=c(x,-0.13831844659117826)
x=c(x,0.11127186542805285)
x=c(x,-0.01085117038905867)
x=c(x,0.005636839885982544)
x=c(x,0.02810986890033868)
x=c(x,-0.03226111479730913)
x=c(x,0.008148628093327115)
x=c(x,-0.0612740098469482)
x=c(x,0.27151127201142633)
x=c(x,0.09084784260888595)
x=c(x,-0.0672955931491807)
x=c(x,-0.012932787101078012)
x=c(x,-0.05236542196012706)
x=c(x,-0.12369226504405433)
x=c(x,0.1983609391746073)
x=c(x,-0.039420302734067665)
x=c(x,-0.1884574716808633)
x=c(x,0.11624847506051049)
x=c(x,0.10082881899276987)
x=c(x,-0.048615492721105345)
x=c(x,-0.08276810044617425)
x=c(x,0.058296839320864796)
x=c(x,-0.00915772060061659)
x=c(x,-0.0017164935881996103)
x=c(x,0.02309190487618941)
x=c(x,-0.061728078519074185)
x=c(x,0.036823844760719385)
x=c(x,-0.006697027035096262)
x=c(x,0.0457828563389574)
x=c(x,0.0019402958036100874)
x=c(x,-0.002224319924170893)
x=c(x,0.004166898731694025)
x=c(x,0.17252222818306162)
x=c(x,0.12231539515490887)
x=c(x,-0.007026756755056759)
x=c(x,-0.03941749586603244)
x=c(x,0.023686196394532875)
x=c(x,0.06215590304585982)
x=c(x,0.0017003363218170357)
x=c(x,-0.014312446438419777)
x=c(x,0.0477842972727024)
x=c(x,-0.004332213238628412)
x=c(x,0.020415289381086603)
x=c(x,-0.05794278975621816)
x=c(x,0.023715443020976976)
x=c(x,-0.017272320841176574)
x=c(x,-0.007917245166225408)
x=c(x,-0.008316869774082683)
x=c(x,0.015023814604564653)
x=c(x,-0.0691812592473374)
x=c(x,0.01174509858570521)
x=c(x,-0.03143660064922038)
x=c(x,-0.00013237654845347209)
x=c(x,3.7955643568757654e-18)
x=c(x,-0.0003394279676432685)
x=c(x,0.0005194967123762972)
x=c(x,0.0011683350988578995)
x=c(x,-0.00021730334611653343)
x=c(x,-0.00016154536047781014)
x=c(x,0.005440639809264325)
x=c(x,-0.0019629069077265093)
x=c(x,-0.001031008753258457)
x=c(x,0.0008585626251797597)
x=c(x,0.00018587117892200766)
x=c(x,-0.0017809730605704613)
x=c(x,-0.0022582395466770417)
x=c(x,-0.003883785458914428)
x=c(x,0.0023924897351868283)
x=c(x,-0.006371650590549752)
x=c(x,0.00048246368990690865)
x=c(x,0.0006959954224262198)
x=c(x,0.004899165707000891)
x=c(x,0.007455151693364295)
x=c(x,0.004136410949158366)
x=c(x,0.005357826858730474)
x=c(x,-0.0021699523334536815)
x=c(x,0.001820702652625441)
x=c(x,-0.0022691255271448437)
x=c(x,-0.0064772570425290985)
x=c(x,-0.0021940609632570265)
x=c(x,-0.0043336564471367104)
x=c(x,0.006902428980100991)
x=c(x,0.002571187502376983)
x=c(x,-0.007445919450960265)
x=c(x,0.013405828635209971)
x=c(x,-0.002444911320284676)
x=c(x,-0.008711207487728374)
x=c(x,0.00010681424969439087)
x=c(x,-0.0007675450506935028)
x=c(x,0.003356067966071409)
x=c(x,0.0027216198343203665)
x=c(x,0.003789290357751141)
x=c(x,-0.00577062079656874)
x=c(x,0.002419946433221298)
x=c(x,0.0004921635076190993)
x=c(x,-0.0022667186322302864)
x=c(x,0.0010297778641990606)
x=c(x,-0.04167014151220188)
x=c(x,-0.00529562447274321)
x=c(x,-0.009914748626163672)
x=c(x,-0.010041640813133081)
x=c(x,0.019210430621176743)
x=c(x,-0.01610657898474948)
x=c(x,-0.014912111264800873)
x=c(x,0.0032973797179972936)
x=c(x,0.00735099126668326)
x=c(x,0.01454759990093279)
x=c(x,0)
x=c(x,-0.019030016480734727)
x=c(x,0.029851577823111118)
x=c(x,0.006986048243428739)
x=c(x,0.0007395299298412454)
x=c(x,0.0026153207726023944)
x=c(x,0.024995372220008555)
x=c(x,0.001086748279806661)
x=c(x,-0.00018336551135731503)
x=c(x,-0.004480116587777761)
x=c(x,0.023182957762917122)
x=c(x,-0.0034969250743216895)
x=c(x,0.012738218108163094)
x=c(x,0.009503367639123253)
x=c(x,0.00907919856880317)
x=c(x,0.0010913817170707335)
x=c(x,-0.0016568029185619277)
x=c(x,0.0072226581349193525)
x=c(x,0.009401865219770633)
x=c(x,0.0029476999438960974)
x=c(x,0.006644710268827317)
x=c(x,-0.011994654897313725)
x=c(x,0.005334595692548791)
x=c(x,0.014932597560734449)
x=c(x,-0.01045806570063543)
x=c(x,0.004247873706262542)
x=c(x,-0.004289146938040563)
x=c(x,0.03022250704320029)
x=c(x,-0.0018968532397613382)
x=c(x,-0.009860219265227664)
x=c(x,-0.008120046197751278)
x=c(x,-0.024843968308140927)
x=c(x,-0.005095420708108529)
x=c(x,0.003431204765758907)
x=c(x,-0.02508623015336147)
x=c(x,-0.010733513351487823)
x=c(x,0.0009282948825811918)
x=c(x,0.01593176523180801)
x=c(x,-0.003457380190164878)
x=c(x,0.015649934691460206)
x=c(x,0.0013735684300537612)
x=c(x,0.009381209149611623)
x=c(x,0.02471459527848881)
x=c(x,0.009705862368687172)
x=c(x,0.007240948633009422)
x=c(x,-0.0013202551238849)
x=c(x,-0.007808383859785275)
x=c(x,0.002481002707335132)
x=c(x,-0.012351113446420257)
x=c(x,0.01014921754348354)
x=c(x,-0.02344014545636989)
x=c(x,-0.0004800305940087803)
x=c(x,0.0119819191026034)
x=c(x,-0.0035964703517084953)
x=c(x,0.03170648751752295)
x=c(x,-0.04244752311202418)
x=c(x,-0.01076402989900222)
x=c(x,-0.0063703615324658455)
x=c(x,-0.01193886279537455)
x=c(x,0.014594637561171547)
x=c(x,-0.0020795271578533366)
x=c(x,-0.007630675284810918)
x=c(x,0.01579172855136665)
x=c(x,-0.010284075916684733)
x=c(x,0.021322482751892677)
x=c(x,0.009855019023161484)
x=c(x,0.008502196102276177)
x=c(x,-1.7255502656490533e-16)
x=c(x,0.11667045805783051)
x=c(x,0.04423014750664513)
x=c(x,-0.07429517020412575)
x=c(x,0.008419191096611225)
x=c(x,0.0004674018822605794)
x=c(x,-0.01206322255475805)
x=c(x,0.02196707938665631)
x=c(x,0.018056878932333133)
x=c(x,0.0170686866478295)
x=c(x,0.0013562773241827361)
x=c(x,-0.040458462334791404)
x=c(x,-0.011329937611111325)
x=c(x,-0.022237387555993988)
x=c(x,-0.001762454938270465)
x=c(x,-0.06553498376444891)
x=c(x,-0.05364947361125811)
x=c(x,-0.00413114324417223)
x=c(x,-0.02226971586712679)
x=c(x,-0.014824829852186864)
x=c(x,0.020703218661531967)
x=c(x,0.0027536692519927173)
x=c(x,0.03661649661179441)
x=c(x,-0.03829449265833255)
x=c(x,0.03784406463295079)
x=c(x,-0.026564962764080834)
x=c(x,0.051368717820470054)
x=c(x,-0.004961666647435288)
x=c(x,-0.017502703600696397)
x=c(x,0.004498458331789349)
x=c(x,0.01782706139320593)
x=c(x,-0.05918744746346808)
x=c(x,0.008506076639516207)
x=c(x,-0.026497355764794193)
x=c(x,0.04993867078878211)
x=c(x,-0.02628341152479009)
x=c(x,-0.01931615470630949)
x=c(x,-0.05553092250443003)
x=c(x,-0.02577933854671959)
x=c(x,0.021654657950323963)
x=c(x,0.010493107160409304)
x=c(x,-0.025461262094762595)
x=c(x,0.09195273536705768)
x=c(x,-0.010494934921317771)
x=c(x,0.0009916580488406675)
x=c(x,-0.018400634775853995)
x=c(x,-0.05730073625324472)
x=c(x,0.06858678042798676)
x=c(x,-0.08667957608597651)
x=c(x,0.07944192054405727)
x=c(x,-0.0375472513534037)
x=c(x,-0.18930626301100317)
x=c(x,0.10044479192121644)
x=c(x,-0.08076886589618006)
x=c(x,0.015743286899312856)
x=c(x,-0.035767549469516734)
x=c(x,-0.06560152267514507)
x=c(x,-0.018135338356396812)
x=c(x,0.025721066398911734)
x=c(x,-0.01662458848927513)
x=c(x,-0.024804587826823217)
x=c(x,-0.011922488021439288)
x=c(x,0.0005006852210519403)
x=c(x,0.058364292680210025)
x=c(x,-0.03907333471140428)
x=c(x,0.00932522860894348)
x=c(x,-0.13135911234751751)
x=c(x,-0.005632328116155975)
x=c(x,0.13497466116205128)
x=c(x,-0.028510472858877752)
x=c(x,-0.05706014194345706)
x=c(x,-0.10541324650939742)
x=c(x,-0.05390237300532763)
x=c(x,0.08370017310786909)
x=c(x,0.023745601769894348)
x=c(x,0.05945885535124986)
x=c(x,0.0329097199655437)
x=c(x,0.046940021278306154)
x=c(x,-0.023728187701110858)
x=c(x,0.08380698624852506)
x=c(x,-0.032026780607065465)
x=c(x,-0.04071670742525522)
x=c(x,0.039785776267070236)
x=c(x,-0.023202909676962254)
x=c(x,0.055418321139804994)
x=c(x,0.05744630098682318)
x=c(x,0.05179868719430662)
x=c(x,0.030921893410191217)
x=c(x,-0.030098518070445068)
x=c(x,0.0008492096472987463)
x=c(x,-0.04252308333316559)
x=c(x,0.08090870060770124)
x=c(x,-0.03498420674340199)
x=c(x,0.0029647611755502633)
x=c(x,0.0016912229998650246)
x=c(x,0.005479853692560756)
x=c(x,0.02983177410166339)
x=c(x,0.01096607098861772)
x=c(x,-0.0024276219587435048)
x=c(x,0.009679343693800064)
x=c(x,0.01593262887835185)
x=c(x,0.011398168078637897)
x=c(x,-0.023335231335568488)
x=c(x,0.023341686447971355)
x=c(x,0.03648320762636369)
x=c(x,0.05574812416494996)
x=c(x,-0.010400615118590745)
x=c(x,0.02808607905194804)
x=c(x,0.038178952816365755)
x=c(x,-0.00033754652812036155)
x=c(x,-0.01359640251709937)
x=c(x,0.0001377241067955324)
x=c(x,-0.00038805371743600624)
x=c(x,0.00024150890859579092)
x=c(x,-0.0009745857569095431)
x=c(x,0.0004211410501058135)
x=c(x,0.00008733712805938574)
x=c(x,-0.0001795091011878065)
x=c(x,0.0026142842207548408)
x=c(x,-0.0015204025899702744)
x=c(x,-0.0015862422516170539)
x=c(x,-0.0006151974753311591)
x=c(x,0.00039895081303574704)
x=c(x,0.0006128759019999618)
x=c(x,0.001483369760497044)
x=c(x,0.002874099916887884)
x=c(x,-0.0005369639149659353)
x=c(x,0.0038090917314784066)
x=c(x,0.0009627357526300211)
x=c(x,-0.0038968468127358975)
x=c(x,-0.0033322852169617306)
x=c(x,0.005466215848030216)
x=c(x,0.001934383671615347)
x=c(x,0.003142436119155928)
x=c(x,-0.000105468673086784)
x=c(x,-0.001305214020578136)
x=c(x,0.0005171778031218119)
x=c(x,0.0014370155487359994)
x=c(x,0.0005433018535058272)
x=c(x,0.00008865471869780425)
x=c(x,-0.0016673174252498533)
x=c(x,0.0016302661936969656)
x=c(x,-0.007461283232134782)
x=c(x,0.005819102581316285)
x=c(x,0.004539873537248714)
x=c(x,0.006711932103978158)
x=c(x,0.00247254512040608)
x=c(x,-0.0014010109576532927)
x=c(x,-0.011630617751284305)
x=c(x,-0.003344744570563109)
x=c(x,0.004698687408320133)
x=c(x,0.009780932797310864)
x=c(x,-0.004308840644277656)
x=c(x,0.00026557987698083756)
x=c(x,-0.0009341448393389815)
x=c(x,-0.0026569226804275775)
x=c(x,0.022889267697469153)
x=c(x,0.0034962742739839867)
x=c(x,0.00709903258294151)
x=c(x,-0.0019222910683810424)
x=c(x,-0.013840489808230645)
x=c(x,0.005798415978175896)
x=c(x,0.009119064711023464)
x=c(x,0.0031946146666835683)
x=c(x,0.009413048629516701)
x=c(x,0.0003390261077733183)
x=c(x,-0.010722511692115013)
x=c(x,0.0016423419371314303)
x=c(x,-0.011264549419841759)
x=c(x,-0.0056774520827809856)
x=c(x,-0.010060535825316503)
x=c(x,0.00030160420062004875)
x=c(x,0.006346399618510949)
x=c(x,-0.00048689051263730356)
x=c(x,-0.000899451119723585)
x=c(x,-0.00323428452445081)
x=c(x,0.01703846427672735)
x=c(x,0.005719107327025868)
x=c(x,0.002563975469797535)
x=c(x,0.007786110438661019)
x=c(x,-0.00432664811768032)
x=c(x,-0.003963530242074794)
x=c(x,-0.0028400923065873304)
x=c(x,-0.0021151859961239757)
x=c(x,0.004340421475747544)
x=c(x,-0.003847613406251812)
x=c(x,0.006667849135824421)
x=c(x,0.0007887771017815186)
x=c(x,-0.008141084213650425)
x=c(x,0.007515824461563554)
x=c(x,0.002918372149430193)
x=c(x,-0.002731663275419826)
x=c(x,0.00043176367243211226)
x=c(x,-0.0240545233469101)
x=c(x,-0.002079300324802845)
x=c(x,-0.02467964234949129)
x=c(x,0.0074683291489415615)
x=c(x,0.01232439650563087)
x=c(x,-0.018446553639586864)
x=c(x,0.001206222685814915)
x=c(x,-0.013106544347402058)
x=c(x,0.0020993440224322864)
x=c(x,-0.006155190443329321)
x=c(x,0.0030080257672590255)
x=c(x,-0.008687478776197384)
x=c(x,0.01614737073236431)
x=c(x,-0.0023916059072365344)
x=c(x,0.0061090176943047626)
x=c(x,0.016670561372484214)
x=c(x,-0.0014134322927885795)
x=c(x,-0.010630774163818338)
x=c(x,-0.007993453637979285)
x=c(x,-0.013027144832105986)
x=c(x,0.009272599699925742)
x=c(x,-0.0005800314205059862)
x=c(x,-0.012542323402529571)
x=c(x,0.012207799271973905)
x=c(x,-0.02192074240442212)
x=c(x,0.0012097972816581732)
x=c(x,-0.01576366698603501)
x=c(x,0.021743940543453643)
x=c(x,0.022517843812941984)
x=c(x,-0.0021564331502524113)
x=c(x,0.018323332332030262)
x=c(x,0.0015222168870254783)
x=c(x,0.0024388304140636665)
x=c(x,-0.009805279295134755)
x=c(x,-0.019260538221311116)
x=c(x,-0.008023174605199863)
x=c(x,-0.008931850709128712)
x=c(x,0.029236440564022474)
x=c(x,-0.017711170692643722)
x=c(x,0.004156649822625897)
x=c(x,0.004302142931377378)
x=c(x,0.04395682338706867)
x=c(x,-0.012117852586456528)
x=c(x,0.039180245702469974)
x=c(x,-0.02754866120295687)
x=c(x,-0.0009112685293916809)
x=c(x,0.012872918925266898)
x=c(x,0.005714074213305696)
x=c(x,-0.02367240824565167)
x=c(x,0.004784761101345687)
x=c(x,-0.009325500739676546)
x=c(x,0.03421928843961461)
x=c(x,-0.0026684350235198742)
x=c(x,-0.012519318656381175)
x=c(x,0.03746011231533194)
x=c(x,-0.04288651665978584)
x=c(x,0.011810247721911157)
x=c(x,0.0014194839008991405)
x=c(x,0.017099957861356877)
x=c(x,0.014108587774720583)
x=c(x,-0.01744359877865415)
x=c(x,0.046642037384399385)
x=c(x,0.021234054980959354)
x=c(x,0.025720211083471282)
x=c(x,0.013290742452429654)
x=c(x,-0.020050390939523172)
x=c(x,0.03481870840437706)
x=c(x,-0.06033085851315197)
x=c(x,0.0045467547168241565)
x=c(x,-0.03565884754288811)
x=c(x,0.026170064494314884)
x=c(x,0.03782433838154637)
x=c(x,-0.01480609975337588)
x=c(x,0.005183168165276709)
x=c(x,-0.011325911179920848)
x=c(x,-0.009373576708808454)
x=c(x,-0.0250027513773132)
x=c(x,0.04629300262963784)
x=c(x,0.006387821668960227)
x=c(x,-0.047000963913336795)
x=c(x,-0.04476207909451766)
x=c(x,-0.035491949996099365)
x=c(x,0.00998556220931234)
x=c(x,0.0013274375158388132)
x=c(x,-0.004777265264863444)
x=c(x,-0.014934303932714103)
x=c(x,0.007215067004688264)
x=c(x,-0.012577783484201495)
x=c(x,0.03842233577049302)
x=c(x,0.0032960261926278955)
x=c(x,-0.04619144612586103)
x=c(x,0.16146609183397853)
x=c(x,-0.09228707521937025)
x=c(x,0.007558426298116567)
x=c(x,-0.07894425822423701)
x=c(x,0.011488501958589565)
x=c(x,0.0877937818103022)
x=c(x,-0.07726179098272092)
x=c(x,-0.044813797666243535)
x=c(x,-0.09531254127966865)
x=c(x,0.0649902958105893)
x=c(x,-0.05292214064224949)
x=c(x,-0.009457591813947994)
x=c(x,0.03062757609956017)
x=c(x,-0.058037589200978706)
x=c(x,-0.020578497939450456)
x=c(x,-0.11656891372817095)
x=c(x,-0.01970703150943422)
x=c(x,0.06737854994568972)
x=c(x,0.0038572352329939216)
x=c(x,-0.04656722211613627)
x=c(x,0.011492392360132381)
x=c(x,-0.06393040294403514)
x=c(x,-0.06155869959623219)
x=c(x,-0.02025586788338479)
x=c(x,-0.10563230749081952)
x=c(x,0.001349445889706439)
x=c(x,0.04014196189169122)
x=c(x,-0.03327776711674039)
x=c(x,0.05254205350204337)
x=c(x,-0.031197941412100586)
x=c(x,0.00032856630599737346)
x=c(x,-0.025202816904372167)
x=c(x,0.05539937729035002)
x=c(x,0.0016739559139505257)
x=c(x,0.012257570573834982)
x=c(x,0.044932608394469324)
x=c(x,-0.010164929650713023)
x=c(x,-0.04988149257508592)
x=c(x,-0.05810322604312932)
x=c(x,0.03125431070001074)
x=c(x,-0.00898852777134385)
x=c(x,-0.007104054122620721)
x=c(x,0.01583327428181166)
x=c(x,0.009138735306625905)
x=c(x,0.0056243819831458325)
x=c(x,0.00753564875974419)
x=c(x,0.01484505105069843)
x=c(x,0.032559267344931406)
x=c(x,0.01073058690453883)
x=c(x,0.0047029709790869095)
x=c(x,0.013044557841386799)
x=c(x,-0.025044380606511145)
x=c(x,-0.0022118519330898098)
x=c(x,0.032356470373495004)
x=c(x,0.04845983762470848)
x=c(x,0.026520639117687022)
x=c(x,0.006202820172741742)
x=c(x,0.036177688555183725)
x=c(x,-0.016069448333771795)
x=c(x,-0.010439279535633283)
x=c(x,0.00013605883986379162)
x=c(x,-0.0004556364293122504)
x=c(x,0.00024354675216514625)
x=c(x,-0.0009509586344937195)
x=c(x,0.0004104650963561844)
x=c(x,0.0000880625820739702)
x=c(x,-0.00018063141852999414)
x=c(x,0.0023755448362604297)
x=c(x,-0.0014645645552788186)
x=c(x,-0.001283380492196123)
x=c(x,-0.0006296105564951117)
x=c(x,0.0002015207988570959)
x=c(x,0.0005581403488169065)
x=c(x,0.0013952676840945266)
x=c(x,0.0027573397589157845)
x=c(x,-0.00043270022475214127)
x=c(x,0.002879910855301787)
x=c(x,0.0009078246925393113)
x=c(x,-0.003937289266645164)
x=c(x,-0.003990630773828949)
x=c(x,0.005370342185418386)
x=c(x,0.0021904412807616457)
x=c(x,0.0030650878125399205)
x=c(x,0.0003771494728442047)
x=c(x,-0.0006557144647574278)
x=c(x,0.0007259571917039311)
x=c(x,0.0012845142687204659)
x=c(x,-0.00003480685542443828)
x=c(x,0.0013785849545761854)
x=c(x,-0.0015439889662734441)
x=c(x,0.0023567234163674937)
x=c(x,-0.0074935488163805335)
x=c(x,0.00579880870766647)
x=c(x,0.004459077589665594)
x=c(x,0.006775207783362859)
x=c(x,0.0030065009324158035)
x=c(x,-0.0028246581110706777)
x=c(x,-0.011298038088815417)
x=c(x,-0.003624528107075308)
x=c(x,0.0048345189011621955)
x=c(x,0.01002426999243395)
x=c(x,-0.004654823572670527)
x=c(x,0.0025514771269466194)
x=c(x,0.0001399413388844583)
x=c(x,-0.0025838415750523347)
x=c(x,0.023436614743244603)
x=c(x,0.003496274276630947)
x=c(x,0.007292732224225667)
x=c(x,-0.002091689269771553)
x=c(x,-0.013860273464828491)
x=c(x,0.0057814993927285075)
x=c(x,0.009004451312484662)
x=c(x,0.003217081172103635)
x=c(x,0.0091064762864028)
x=c(x,0.003754825209679376)
x=c(x,-0.011021587748879924)
x=c(x,0.0015832626347304939)
x=c(x,-0.012031840907536312)
x=c(x,-0.00549525413629289)
x=c(x,-0.008810292769402569)
x=c(x,-0.0009892783326089795)
x=c(x,0.005899767206303848)
x=c(x,-0.0023918862599924193)
x=c(x,-0.0017962135878652312)
x=c(x,-0.0030335936849490565)
x=c(x,0.01655999430544018)
x=c(x,0.006738985608822369)
x=c(x,0.0024038256052955607)
x=c(x,0.008135886591319471)
x=c(x,-0.003257299403015827)
x=c(x,-0.004263700645135917)
x=c(x,-0.0037329300555927936)
x=c(x,0.00023993479213927472)
x=c(x,0.004163094642894598)
x=c(x,-0.004004895777069179)
x=c(x,0.007066989111919622)
x=c(x,0.0007540683128128979)
x=c(x,-0.007591564580631327)
x=c(x,0.009376672373537754)
x=c(x,0.0028754055656057893)
x=c(x,-0.002691120455091783)
x=c(x,0.00043176367243211226)
x=c(x,-0.02389475945321368)
x=c(x,-0.0018498912149579891)
x=c(x,-0.02413488681643516)
x=c(x,0.006915010111432272)
x=c(x,0.011946439923332162)
x=c(x,-0.01856014344842608)
x=c(x,0.0016559109910697426)
x=c(x,0.0028750042586949604)
x=c(x,0.0019057553673898077)
x=c(x,-0.008591131058893777)
x=c(x,0.005297330520740093)
x=c(x,-0.013889843656303453)
x=c(x,0.016194249880130015)
x=c(x,-0.002053394060410818)
x=c(x,0.00618831318145142)
x=c(x,0.016768860301826203)
x=c(x,-0.00097724124070057)
x=c(x,-0.011763427655500954)
x=c(x,-0.010169025093214159)
x=c(x,-0.012419825341653784)
x=c(x,0.007775352217573031)
x=c(x,0.004550372355916048)
x=c(x,-0.01257324401298469)
x=c(x,0.02188468559553194)
x=c(x,-0.021995490429618975)
x=c(x,0.0008249413524648387)
x=c(x,-0.007607717067096616)
x=c(x,0.02146950616934448)
x=c(x,0.02224337737527021)
x=c(x,-0.0019161550945525387)
x=c(x,0.018380984435204476)
x=c(x,0.0015225892666338194)
x=c(x,0.004571527550174426)
x=c(x,-0.011419604974014574)
x=c(x,-0.02118654294234091)
x=c(x,-0.007426827174812565)
x=c(x,-0.010725410454664021)
x=c(x,0.029808306117231943)
x=c(x,-0.017548140032833292)
x=c(x,0.004460118711617446)
x=c(x,0.0037443098426048916)
x=c(x,0.043977227731858456)
x=c(x,-0.012117849737709461)
x=c(x,0.04054057324982745)
x=c(x,-0.028075291337422877)
x=c(x,0.008055798212437355)
x=c(x,0.012789858840383712)
x=c(x,0.006198025091379941)
x=c(x,-0.02290341481152112)
x=c(x,0.004888316581090195)
x=c(x,-0.00848627821591843)
x=c(x,0.0397174132125962)
x=c(x,0.0010848896439660837)
x=c(x,-0.012620437187609568)
x=c(x,0.04133644898023185)
x=c(x,-0.04796623165492856)
x=c(x,0.011826330422013831)
x=c(x,0.0017365839514730107)
x=c(x,0.017099845702335612)
x=c(x,0.010116439387686471)
x=c(x,-0.017258031559463406)
x=c(x,0.046583400103467815)
x=c(x,0.021234054980959354)
x=c(x,0.025667675155746337)
x=c(x,0.01328811286356294)
x=c(x,-0.020050390939523172)
x=c(x,0.03464432182317868)
x=c(x,-0.05956443491918815)
x=c(x,0.004544836840419261)
x=c(x,-0.03692334717413255)
x=c(x,0.02789021476660482)
x=c(x,0.04081681042361873)
x=c(x,-0.014651447779521428)
x=c(x,0.004105400779118184)
x=c(x,-0.011888771056294564)
x=c(x,-0.009299466852780202)
x=c(x,-0.02396194410950042)
x=c(x,0.04620047366313728)
x=c(x,0.0070991658128416)
x=c(x,-0.046140081401638985)
x=c(x,-0.04961097759770126)
x=c(x,-0.03531234859186531)
x=c(x,0.009717833172553678)
x=c(x,0.0014177533061762147)
x=c(x,-0.005984843741242953)
x=c(x,-0.014453030501548454)
x=c(x,0.006806721355814164)
x=c(x,-0.007230854385319543)
x=c(x,0.0375146082362635)
x=c(x,-0.0031578578392810175)
x=c(x,-0.04588673707073114)
x=c(x,0.16148511801181095)
x=c(x,-0.09204832224513035)
x=c(x,0.007558426298116619)
x=c(x,-0.07989082787600114)
x=c(x,0.011833310462909431)
x=c(x,0.08818755081465593)
x=c(x,-0.07726174277916131)
x=c(x,-0.04481389801787275)
x=c(x,-0.09403350930942433)
x=c(x,0.06496716698408643)
x=c(x,-0.05339607772261931)
x=c(x,-0.009316356648059163)
x=c(x,0.02870127345677739)
x=c(x,-0.05818630570931803)
x=c(x,-0.020541900881129616)
x=c(x,-0.1192242425154491)
x=c(x,-0.01935304799675826)
x=c(x,0.0673785489205034)
x=c(x,0.00342839544646186)
x=c(x,-0.04651929890805966)
x=c(x,0.020870244079166142)
x=c(x,-0.06402791485378258)
x=c(x,-0.06149883924593737)
x=c(x,-0.014392656748573884)
x=c(x,-0.10570441159905693)
x=c(x,0.001732567162030927)
x=c(x,0.040351899252913125)
x=c(x,-0.033195741624658735)
x=c(x,0.05263949895293934)
x=c(x,-0.031177163796501376)
x=c(x,-0.00041174235874504456)
x=c(x,-0.025344457869135754)
x=c(x,0.05498186484277369)
x=c(x,0.0016752096691376468)
x=c(x,0.011904411638075027)
x=c(x,0.04463993674686707)
x=c(x,-0.023527145530664987)
x=c(x,-0.04924578269485521)
x=c(x,-0.057993414445456686)
x=c(x,0.03191268425716772)
x=c(x,-0.008988743761639542)
x=c(x,-0.00733459709584464)
x=c(x,0.015637242729429644)
x=c(x,0.009621332550419298)
x=c(x,0.0056240437982017)
x=c(x,0.007562532416399175)
x=c(x,0.01514461662352639)
x=c(x,0.03265547828439238)
x=c(x,0.010812270142319728)
x=c(x,0.005406430307277769)
x=c(x,0.013564626862867905)
x=c(x,-0.0028165012838507497)
x=c(x,-0.003262952474500044)
x=c(x,0.03344305593507)
x=c(x,0.048464710998038514)
x=c(x,0.0274826208511597)
x=c(x,0.007893070110649917)
x=c(x,0.03546031584770786)
x=c(x,-0.014512825758536319)
x=c(x,-0.009827956418123174)
x=c(x,0.0001314638774931419)
x=c(x,-0.000492309235785739)
x=c(x,0.00022408118634717922)
x=c(x,-0.0009332495602649692)
x=c(x,0.00041151774694675946)
x=c(x,0.00029473332785353136)
x=c(x,-0.00023682355750062164)
x=c(x,0.0021875009091832606)
x=c(x,-0.0010889069091382887)
x=c(x,-0.0011052545091843155)
x=c(x,-0.0009146651430716515)
x=c(x,0.00012500010539168505)
x=c(x,0.0005224709373156338)
x=c(x,0.0012841217213720177)
x=c(x,0.0025827229718256672)
x=c(x,-0.0017564141946305764)
x=c(x,0.0023427105994773987)
x=c(x,0.000822172891964942)
x=c(x,-0.003027682961958587)
x=c(x,-0.005782388105955791)
x=c(x,0.005069085669043705)
x=c(x,0.0022342960697431646)
x=c(x,0.0027883156968618785)
x=c(x,0.0004561040119659479)
x=c(x,-0.0008859346159240074)
x=c(x,-0.00016313766428891784)
x=c(x,0.006007157896088152)
x=c(x,-0.00019724970895612987)
x=c(x,0.0022223283165503)
x=c(x,-0.001327939994753149)
x=c(x,0.0026841440256032212)
x=c(x,-0.007304702809061384)
x=c(x,0.005812514046206196)
x=c(x,0.0035422447478455133)
x=c(x,0.007042510098534489)
x=c(x,0.003251871972739301)
x=c(x,-0.004188517650812786)
x=c(x,-0.007264707383985489)
x=c(x,-0.003797450041965609)
x=c(x,0.0029448515966918774)
x=c(x,0.011866958494451291)
x=c(x,-0.004767065630321724)
x=c(x,0.004903582777817142)
x=c(x,0.0016827521752254924)
x=c(x,-0.0038816529722884305)
x=c(x,0.007182020310302888)
x=c(x,0.0034969687459063393)
x=c(x,0.007843716310318096)
x=c(x,-0.002072280515467749)
x=c(x,-0.014018965909255452)
x=c(x,0.0035294918922294145)
x=c(x,0.0087563558810729)
x=c(x,0.0031624802768264256)
x=c(x,0.007977347474657068)
x=c(x,0.004841413258044443)
x=c(x,-0.008934197851335174)
x=c(x,0.0014921830749717552)
x=c(x,-0.014756481541947118)
x=c(x,-0.005501590119188045)
x=c(x,-0.007288926969249732)
x=c(x,-0.001808290622001403)
x=c(x,0.005567096092919741)
x=c(x,-0.00359003672237983)
x=c(x,-0.003065202721676617)
x=c(x,-0.0028914738440816126)
x=c(x,0.009568270620044316)
x=c(x,0.0070454713340530615)
x=c(x,0.0021356984655324326)
x=c(x,0.008295554900405192)
x=c(x,-0.0024147075505874275)
x=c(x,-0.00441007393409807)
x=c(x,-0.004030096995063528)
x=c(x,0.0000643287753223098)
x=c(x,0.005712705529499269)
x=c(x,-0.008080657062574647)
x=c(x,0.007922459780003338)
x=c(x,0.002894832385250606)
x=c(x,-0.006345225975599982)
x=c(x,0.009749813515179223)
x=c(x,0.0038692080185900738)
x=c(x,-0.003291396019485914)
x=c(x,0.00043176367243214446)
x=c(x,-0.023563923360762597)
x=c(x,-0.0016525353030448376)
x=c(x,-0.02365624081572364)
x=c(x,-0.0006614332680783662)
x=c(x,0.011416111580354951)
x=c(x,-0.02448542848917863)
x=c(x,0.0030737539224184643)
x=c(x,0.00648467511937296)
x=c(x,0.0040358754307052965)
x=c(x,-0.015809099557036098)
x=c(x,0.015671355695271852)
x=c(x,-0.018510828273014233)
x=c(x,0.014650677865737463)
x=c(x,-0.0018420955818972138)
x=c(x,0.0063619230986818225)
x=c(x,0.01699545568395065)
x=c(x,0.0019953073571144946)
x=c(x,-0.012340268410169733)
x=c(x,0.0008717976164005365)
x=c(x,-0.01205387398204892)
x=c(x,0.004511670131573142)
x=c(x,0.008967649139795628)
x=c(x,-0.012597764230917213)
x=c(x,0.02508872383293197)
x=c(x,-0.021399530881353452)
x=c(x,0.0006727840421539677)
x=c(x,-0.0064774424791822945)
x=c(x,0.02034409524643409)
x=c(x,0.02204495734710713)
x=c(x,-0.0013320917947300139)
x=c(x,0.01623203647885945)
x=c(x,0.0017601807539949076)
x=c(x,0.005512714921207357)
x=c(x,-0.012841867950343437)
x=c(x,-0.02265696590861528)
x=c(x,-0.007046303158124643)
x=c(x,-0.01924171948921986)
x=c(x,0.030148070175405446)
x=c(x,-0.01767579570747729)
x=c(x,0.005100858377341508)
x=c(x,0.004508846000583248)
x=c(x,0.04399916794902367)
x=c(x,-0.012109689396800346)
x=c(x,0.03961223260195928)
x=c(x,-0.030124653239295623)
x=c(x,0.011444892132047513)
x=c(x,0.012793148534668659)
x=c(x,0.007185884457125667)
x=c(x,-0.021906189299734258)
x=c(x,0.004574268811549274)
x=c(x,-0.0077761440517583914)
x=c(x,0.04102522506531522)
x=c(x,0.007791992995760927)
x=c(x,0.0011924602914611404)
x=c(x,0.05115558078506647)
x=c(x,-0.05386219196317326)
x=c(x,0.012010955365879853)
x=c(x,-0.010248161567366373)
x=c(x,0.01709977627031082)
x=c(x,-0.002729521723595627)
x=c(x,-0.016865789589440936)
x=c(x,0.045078731211184525)
x=c(x,0.016243210207140216)
x=c(x,0.023816949175566315)
x=c(x,0.013035436357454322)
x=c(x,-0.019719179255039607)
x=c(x,0.03384424594627633)
x=c(x,-0.058187115323168025)
x=c(x,0.0044338580294278505)
x=c(x,-0.040029377523960685)
x=c(x,0.028404987820740822)
x=c(x,0.04274685818226684)
x=c(x,-0.01409293950328649)
x=c(x,-0.0002220060798594359)
x=c(x,-0.013378379249106611)
x=c(x,-0.009249453312515516)
x=c(x,-0.022831902833514866)
x=c(x,0.044057832554683735)
x=c(x,0.012381296700718185)
x=c(x,-0.04599743327584169)
x=c(x,-0.047991357748191764)
x=c(x,-0.035089836557209354)
x=c(x,0.012551593074421417)
x=c(x,0.001668718584529682)
x=c(x,-0.006794780708807398)
x=c(x,-0.013727530187821768)
x=c(x,0.006439333826912764)
x=c(x,0.020639972192329662)
x=c(x,0.036496747422971536)
x=c(x,-0.007974640010768945)
x=c(x,-0.04475077737315061)
x=c(x,0.1614976108808092)
x=c(x,-0.09048391596524162)
x=c(x,0.007558426298116515)
x=c(x,-0.08021944611046673)
x=c(x,0.012031212561665817)
x=c(x,0.08917232755781267)
x=c(x,-0.07726144649430053)
x=c(x,-0.0447626654331437)
x=c(x,-0.0935248778902961)
x=c(x,0.06489227343847223)
x=c(x,-0.05220173493661002)
x=c(x,-0.00917963587993485)
x=c(x,0.027018025062416618)
x=c(x,-0.05858721885715692)
x=c(x,-0.022148086352487762)
x=c(x,-0.12843833972728338)
x=c(x,-0.018279295938011902)
x=c(x,0.0673663217894397)
x=c(x,0.002793794537107614)
x=c(x,-0.04651935567567543)
x=c(x,0.026303128531349387)
x=c(x,-0.06411338611081646)
x=c(x,-0.06196950643093443)
x=c(x,-0.0007226187661068911)
x=c(x,-0.10695938490500234)
x=c(x,0.0031390709494552504)
x=c(x,0.04272823743099947)
x=c(x,-0.031658620373675214)
x=c(x,0.053545111027587626)
x=c(x,-0.030861378026343072)
x=c(x,-0.0009374431599116105)
x=c(x,-0.019233122987289623)
x=c(x,0.05583980537466977)
x=c(x,0.0018420882560248456)
x=c(x,0.011675869100885972)
x=c(x,0.044162324216726674)
x=c(x,-0.03476796027545401)
x=c(x,-0.05063031232591214)
x=c(x,-0.05710496406212671)
x=c(x,0.031562982626556095)
x=c(x,-0.009179179174800519)
x=c(x,-0.008524283809983418)
x=c(x,0.013001724002787917)
x=c(x,0.01233802708967701)
x=c(x,0.00633637065429664)
x=c(x,0.009163985000003417)
x=c(x,0.01846489126053924)
x=c(x,0.034815300444032846)
x=c(x,0.01086810323157542)
x=c(x,0.010324741298750504)
x=c(x,0.010039106896865825)
x=c(x,0.015068972137121292)
x=c(x,0.0006177200844344639)
x=c(x,0.03719467902753418)
x=c(x,0.047655529936350145)
x=c(x,0.028448526085622153)
x=c(x,0.013040593404198553)
x=c(x,0.03428631723513296)
x=c(x,0.007254862366142495)
x=c(x,-0.010103662958655946)
x=c(x,0.00014520739237627563)
x=c(x,-0.0003944628422903034)
x=c(x,0.00025582826307555027)
x=c(x,-0.0012077737264178528)
x=c(x,0.0005555363380505)
x=c(x,0.000028618303319821147)
x=c(x,-0.00015820249420915562)
x=c(x,0.003287832886276507)
x=c(x,-0.0018156036751311702)
x=c(x,-0.0017843754512370774)
x=c(x,-0.0006136927787246044)
x=c(x,0.0003763793082376665)
x=c(x,0.0006744649761128001)
x=c(x,0.0016066495342380062)
x=c(x,0.0036277207655002683)
x=c(x,-0.0002224080263178797)
x=c(x,0.0050464747171957485)
x=c(x,0.0010240295607318694)
x=c(x,-0.004142191799725892)
x=c(x,-0.003825585805319843)
x=c(x,0.006754868370534941)
x=c(x,0.002095260163930469)
x=c(x,0.003746450156050587)
x=c(x,-0.000025982123641428106)
x=c(x,-0.0010130526175259923)
x=c(x,0.0005020331059966663)
x=c(x,0.0023696644182358696)
x=c(x,0.00040500447736191545)
x=c(x,0.00012291829654646435)
x=c(x,-0.0012501056818444486)
x=c(x,0.0015233923070748332)
x=c(x,-0.008805882731909378)
x=c(x,0.007078082555927679)
x=c(x,0.006382943519897601)
x=c(x,0.008032759106644678)
x=c(x,0.0026615552397482823)
x=c(x,-0.0017713707568010933)
x=c(x,-0.012928903189615747)
x=c(x,-0.004523227557124806)
x=c(x,0.004928069304978819)
x=c(x,0.013193627258566378)
x=c(x,-0.004611413766038676)
x=c(x,0.00036837014138018764)
x=c(x,-0.0009492100178885558)
x=c(x,-0.004865920778892111)
x=c(x,0.03428260115654196)
x=c(x,0.006924534960615624)
x=c(x,0.012087264576476598)
x=c(x,0.0015687105524898207)
x=c(x,-0.02057100160087342)
x=c(x,0.005627274249209495)
x=c(x,0.00946439266847142)
x=c(x,0.002932388884837012)
x=c(x,0.01027167226610057)
x=c(x,-0.001059864532403332)
x=c(x,-0.011258461327656157)
x=c(x,0.007869827824018573)
x=c(x,-0.0165856367751616)
x=c(x,-0.0059381481496218105)
x=c(x,-0.01192489241289885)
x=c(x,0.0003665682607367247)
x=c(x,0.006755120014720783)
x=c(x,-0.0007796342528818075)
x=c(x,-0.0007515664413816422)
x=c(x,-0.0029859618622633016)
x=c(x,0.02082612397719179)
x=c(x,0.005231644729171473)
x=c(x,0.0027879365751028117)
x=c(x,0.00759343887944894)
x=c(x,-0.0032485126034989074)
x=c(x,-0.003832577834166759)
x=c(x,-0.003468372081454454)
x=c(x,-0.0032792178521296135)
x=c(x,0.005468536768619059)
x=c(x,-0.0041999426610778)
x=c(x,0.008197406205118437)
x=c(x,-0.0005911777817247158)
x=c(x,-0.009853074031792915)
x=c(x,0.006794057749470376)
x=c(x,0.0023632687774404145)
x=c(x,-0.0030423319110807227)
x=c(x,0.0004008918376070724)
x=c(x,-0.027067397770688645)
x=c(x,-0.0029600251418788618)
x=c(x,-0.02865230016595851)
x=c(x,0.006833572779856402)
x=c(x,0.014144023490140618)
x=c(x,-0.019367575776389367)
x=c(x,-0.0005583277724111167)
x=c(x,-0.014439185300606016)
x=c(x,0.00002642672287678713)
x=c(x,-0.004187078016377195)
x=c(x,0.010072816989163279)
x=c(x,-0.009898108945315828)
x=c(x,0.017768475981434096)
x=c(x,-0.003270857530706313)
x=c(x,0.007546543811249455)
x=c(x,0.025375316875140382)
x=c(x,-0.00621278017561788)
x=c(x,-0.011338009927896207)
x=c(x,-0.007945344610401375)
x=c(x,-0.018294580879629558)
x=c(x,0.01135240196078311)
x=c(x,-0.0014558170934108265)
x=c(x,-0.013806916782328702)
x=c(x,0.011945539198287631)
x=c(x,-0.022957521858997274)
x=c(x,0.0006213060395900506)
x=c(x,-0.021485081841008984)
x=c(x,0.020825737047454027)
x=c(x,0.04237470121517462)
x=c(x,-0.001919374632672092)
x=c(x,0.024751499395363617)
x=c(x,-0.00280047128162369)
x=c(x,0.0014255204543501862)
x=c(x,-0.010975885863699849)
x=c(x,-0.02142997078042307)
x=c(x,-0.007652633965122931)
x=c(x,-0.012550854223137228)
x=c(x,0.03886495860605893)
x=c(x,-0.01964023207158276)
x=c(x,0.0037469962993289248)
x=c(x,0.006990262228015693)
x=c(x,0.10866344047735717)
x=c(x,-0.03979287372918694)
x=c(x,0.059910466628166965)
x=c(x,-0.040015767781319815)
x=c(x,-0.004718284822843627)
x=c(x,0.013453758642403908)
x=c(x,0.012941704740689402)
x=c(x,-0.02821169361033844)
x=c(x,0.001496016307200352)
x=c(x,-0.009773934592880656)
x=c(x,0.04376952224875075)
x=c(x,-0.0066124733829507135)
x=c(x,-0.007347160299389008)
x=c(x,0.05387981756944678)
x=c(x,-0.06043116886984397)
x=c(x,0.02485944092955461)
x=c(x,-0.004617040674995457)
x=c(x,0.02395605219653497)
x=c(x,0.010532034898518727)
x=c(x,-0.02825206430242799)
x=c(x,0.05791053971516657)
x=c(x,0.03541826011256646)
x=c(x,0.029441290047141556)
x=c(x,0.015297244499113577)
x=c(x,-0.02979407358791674)
x=c(x,0.04148170477785835)
x=c(x,-0.09042244633641952)
x=c(x,0.022982447437715426)
x=c(x,-0.047260478708149214)
x=c(x,0.023850005560013775)
x=c(x,0.0501028829345286)
x=c(x,-0.01608254878439185)
x=c(x,0.006310280945730694)
x=c(x,-0.008710439514263214)
x=c(x,-0.024004956463009902)
x=c(x,-0.035046198827838194)
x=c(x,0.07980707485914096)
x=c(x,0.005533400014565753)
x=c(x,-0.05039441215016714)
x=c(x,-0.0513545831483882)
x=c(x,-0.0421218795442035)
x=c(x,0.03324708529219149)
x=c(x,0.002386722324812)
x=c(x,-0.011240493357956535)
x=c(x,-0.019108355712975877)
x=c(x,0.009669705053764499)
x=c(x,-0.014634312497901448)
x=c(x,0.07946823318707952)
x=c(x,0.04172722468658801)
x=c(x,-0.07524447267435576)
x=c(x,0.39146566405397515)
x=c(x,-0.2977960163150363)
x=c(x,-0.004432584030954258)
x=c(x,-0.10690095779521182)
x=c(x,-0.021380359537403755)
x=c(x,0.20558099128480542)
x=c(x,-0.1138382252482746)
x=c(x,-0.06798683164539077)
x=c(x,-0.12799984407851372)
x=c(x,0.054926243974044726)
x=c(x,-0.0652550702639419)
x=c(x,-0.010781476840222454)
x=c(x,0.035263696299385194)
x=c(x,-0.07433615201003865)
x=c(x,-0.007997548477130165)
x=c(x,-0.20612415580457177)
x=c(x,-0.043490687723107796)
x=c(x,0.11463695758174475)
x=c(x,-0.012738285115339773)
x=c(x,-0.06226508240004625)
x=c(x,0.030580899822945175)
x=c(x,-0.08015065095094798)
x=c(x,-0.05667390799093686)
x=c(x,-0.02190824748598357)
x=c(x,-0.147770711258631)
x=c(x,0.003909277211080733)
x=c(x,0.05768977530559596)
x=c(x,-0.05876219710564758)
x=c(x,0.0662126917182075)
x=c(x,-0.07996146664202515)
x=c(x,0.005453137472650165)
x=c(x,-0.029873152923754566)
x=c(x,0.06680393522108753)
x=c(x,-0.0039288690705267795)
x=c(x,0.011787810574150757)
x=c(x,0.06533999914780264)
x=c(x,-0.0175131919098691)
x=c(x,-0.07182340803147663)
x=c(x,-0.06872206262216232)
x=c(x,0.05382830221256589)
x=c(x,-0.0029857632266936133)
x=c(x,-0.038658011895361055)
x=c(x,0.04855782557242503)
x=c(x,0.01207998903811465)
x=c(x,0.008232804055407085)
x=c(x,0.014216334652376964)
x=c(x,0.017852480448757823)
x=c(x,0.04799537569186382)
x=c(x,0.014570790539719927)
x=c(x,0.005324340460414619)
x=c(x,0.00923975212769912)
x=c(x,-0.030625436881445606)
x=c(x,-0.007669837350264944)
x=c(x,0.0388182532101048)
x=c(x,0.06394695271087972)
x=c(x,0.09160000137769236)
x=c(x,0.01554882829487304)
x=c(x,0.0368642807620931)
x=c(x,-0.017045561542341946)
x=c(x,-0.012398441785753889)
x=c(x,0.00014332129660631567)
x=c(x,-0.0004831389444945213)
x=c(x,0.0002448369806112404)
x=c(x,-0.001164588885420343)
x=c(x,0.0005418423354262389)
x=c(x,0.000029672436468444662)
x=c(x,-0.00014514028787758365)
x=c(x,0.002994932384081694)
x=c(x,-0.0017626990382068619)
x=c(x,-0.0014044211379913758)
x=c(x,-0.0006203646641407644)
x=c(x,0.00012823465334965426)
x=c(x,0.0006148303781952832)
x=c(x,0.0015085906297739211)
x=c(x,0.0034862648225107602)
x=c(x,-0.00015981130725194136)
x=c(x,0.003943530194152685)
x=c(x,0.0009996137806213103)
x=c(x,-0.004110817680084635)
x=c(x,-0.004481758213398217)
x=c(x,0.006560087121148938)
x=c(x,0.002337653025826752)
x=c(x,0.0036366940458771755)
x=c(x,0.0004476582205565043)
x=c(x,-0.0003894743564120019)
x=c(x,0.0007125750894102588)
x=c(x,0.002278386431120676)
x=c(x,-0.00015379955736638244)
x=c(x,0.0015340494083800934)
x=c(x,-0.0011497673172824597)
x=c(x,0.0022818075990431188)
x=c(x,-0.008529888475493947)
x=c(x,0.006923144882030215)
x=c(x,0.006293146391897071)
x=c(x,0.0080361591988982)
x=c(x,0.003205453240190036)
x=c(x,-0.0031056761356321235)
x=c(x,-0.012520759877419706)
x=c(x,-0.004737528809042116)
x=c(x,0.004960810275162756)
x=c(x,0.013375327505398696)
x=c(x,-0.0049207198654721545)
x=c(x,0.0028459048970178903)
x=c(x,0.00019153292075480295)
x=c(x,-0.0045938378540673645)
x=c(x,0.03255133921984075)
x=c(x,0.0067832046403231)
x=c(x,0.012159563940715181)
x=c(x,0.0015187346832964167)
x=c(x,-0.02030637238201014)
x=c(x,0.0054866115937631)
x=c(x,0.009276834173450484)
x=c(x,0.0030111355112909886)
x=c(x,0.009608635812232697)
x=c(x,0.0032526235068041217)
x=c(x,-0.011232278294877752)
x=c(x,0.007855625450861813)
x=c(x,-0.017918313691998547)
x=c(x,-0.005582948757334787)
x=c(x,-0.010292803816508335)
x=c(x,-0.0008699309047767508)
x=c(x,0.006136490769709204)
x=c(x,-0.002541651626982649)
x=c(x,-0.001674925289747984)
x=c(x,-0.0028034287355322447)
x=c(x,0.020223588226475773)
x=c(x,0.006291544338932902)
x=c(x,0.0026532551609405484)
x=c(x,0.007704504164297966)
x=c(x,-0.0022304042450199016)
x=c(x,-0.003986155997025843)
x=c(x,-0.00416456913026942)
x=c(x,-0.0003233402207295661)
x=c(x,0.00506256460356695)
x=c(x,-0.004211496197056457)
x=c(x,0.008632218711007684)
x=c(x,-0.0008592672691485469)
x=c(x,-0.009266984801535753)
x=c(x,0.009077963979628548)
x=c(x,0.002266266988257074)
x=c(x,-0.0029530379550012664)
x=c(x,0.0004159183781010228)
x=c(x,-0.02648213394647822)
x=c(x,-0.002665828366072181)
x=c(x,-0.027485847258414124)
x=c(x,0.006520900957753903)
x=c(x,0.01345214938886463)
x=c(x,-0.019585703861764548)
x=c(x,-0.00044137109643722374)
x=c(x,0.002851488786884548)
x=c(x,-0.0004852575122118378)
x=c(x,-0.006584067792541725)
x=c(x,0.011680327711409495)
x=c(x,-0.01552182981588041)
x=c(x,0.01767704852933008)
x=c(x,-0.002963889900287104)
x=c(x,0.007240909741346417)
x=c(x,0.025177310475237653)
x=c(x,-0.005898285001235127)
x=c(x,-0.012216435160214346)
x=c(x,-0.01030773478505622)
x=c(x,-0.017013013089206806)
x=c(x,0.009455020247344065)
x=c(x,0.0036981196056935493)
x=c(x,-0.01336111219285624)
x=c(x,0.023248947717940296)
x=c(x,-0.02243244683768035)
x=c(x,0.00039419307950483375)
x=c(x,-0.012993069747728923)
x=c(x,0.020212569652438197)
x=c(x,0.04197254474653719)
x=c(x,-0.0013178417827460539)
x=c(x,0.023818287953974285)
x=c(x,-0.0028539817431130457)
x=c(x,0.003845830925253272)
x=c(x,-0.012703247507130797)
x=c(x,-0.023403241622504754)
x=c(x,-0.007030699468314971)
x=c(x,-0.014125276178016247)
x=c(x,0.039867938570476866)
x=c(x,-0.019219596335807887)
x=c(x,0.003469110251796098)
x=c(x,0.0060205771321168505)
x=c(x,0.10801969129946988)
x=c(x,-0.039786430161162054)
x=c(x,0.06127653902509852)
x=c(x,-0.03971472324990562)
x=c(x,0.003699323578092781)
x=c(x,0.013073085139495183)
x=c(x,0.012610248013431188)
x=c(x,-0.02735695695199826)
x=c(x,0.0008044422184029981)
x=c(x,-0.009139642803730426)
x=c(x,0.0507978780985191)
x=c(x,-0.0023188118733454602)
x=c(x,-0.007167728540746324)
x=c(x,0.05808536561812722)
x=c(x,-0.06887293816499108)
x=c(x,0.02468081730006923)
x=c(x,-0.004502053892680056)
x=c(x,0.023706304029261268)
x=c(x,0.005582917925005158)
x=c(x,-0.027962042781805762)
x=c(x,0.05648047764796321)
x=c(x,0.03543736990159551)
x=c(x,0.02887825622956024)
x=c(x,0.01516780586753581)
x=c(x,-0.029474210546330603)
x=c(x,0.04071492216753098)
x=c(x,-0.08956564150304538)
x=c(x,0.022807945129251984)
x=c(x,-0.04934354394477782)
x=c(x,0.02528949422117522)
x=c(x,0.05273990073235393)
x=c(x,-0.015631732742589253)
x=c(x,0.004933308507249586)
x=c(x,-0.009145568293583097)
x=c(x,-0.022413771468778952)
x=c(x,-0.03286626149643882)
x=c(x,0.07785403284151826)
x=c(x,0.006331497199784436)
x=c(x,-0.04885244101202015)
x=c(x,-0.053346694382402686)
x=c(x,-0.041370172349548755)
x=c(x,0.03284596251750127)
x=c(x,0.002426603306331458)
x=c(x,-0.01276986523173834)
x=c(x,-0.018179143451906424)
x=c(x,0.009188271026673677)
x=c(x,-0.008058330618048073)
x=c(x,0.07902459555456776)
x=c(x,0.03613274727043672)
x=c(x,-0.07361621419173504)
x=c(x,0.39034511150300666)
x=c(x,-0.2980464034066325)
x=c(x,-0.004193836942279973)
x=c(x,-0.10760487455533785)
x=c(x,-0.02147603068820825)
x=c(x,0.20494908620027674)
x=c(x,-0.11339925307010491)
x=c(x,-0.06797706129328185)
x=c(x,-0.12773905476778827)
x=c(x,0.0537946152862221)
x=c(x,-0.06696592588359182)
x=c(x,-0.010290491030311724)
x=c(x,0.030770040541512125)
x=c(x,-0.0732751625965491)
x=c(x,-0.007460966274758572)
x=c(x,-0.20993099815891347)
x=c(x,-0.04320379134013387)
x=c(x,0.11303196076904504)
x=c(x,-0.012850048281964831)
x=c(x,-0.058986785632474496)
x=c(x,0.04367859127850513)
x=c(x,-0.07834834606068039)
x=c(x,-0.05602028037967678)
x=c(x,-0.014788800759477153)
x=c(x,-0.14533677530148184)
x=c(x,0.0035661994694715965)
x=c(x,0.05791419964116597)
x=c(x,-0.059274651246778935)
x=c(x,0.06461476698525054)
x=c(x,-0.07920523257407736)
x=c(x,0.005327909299663394)
x=c(x,-0.02928832778952385)
x=c(x,0.06536148151915845)
x=c(x,-0.0037131207295452804)
x=c(x,0.011463870591647185)
x=c(x,0.06445261930453983)
x=c(x,-0.031078953652836572)
x=c(x,-0.06958434104524168)
x=c(x,-0.06765615672063621)
x=c(x,0.055490755710067986)
x=c(x,-0.0028059110422025417)
x=c(x,-0.037994268245040395)
x=c(x,0.04803513909556383)
x=c(x,0.01209473771079637)
x=c(x,0.00834081283356451)
x=c(x,0.013855112191138757)
x=c(x,0.017098544055819388)
x=c(x,0.04720668119006552)
x=c(x,0.014565064284495563)
x=c(x,0.005850813812481386)
x=c(x,0.011066211934371593)
x=c(x,-0.003871612354624238)
x=c(x,-0.007905814113116352)
x=c(x,0.03971793739971419)
x=c(x,0.06198480976798615)
x=c(x,0.09123941233662447)
x=c(x,0.016973176010322617)
x=c(x,0.03574890241220921)
x=c(x,-0.015355738019565341)
x=c(x,-0.012029379755015945)
x=c(x,0.00013820051542222782)
x=c(x,-0.0005324559913148731)
x=c(x,0.00020672932175650572)
x=c(x,-0.0011146606760114026)
x=c(x,0.0005288704179809452)
x=c(x,0.0002322474947336277)
x=c(x,-0.00018729516436054511)
x=c(x,0.0027580225010455793)
x=c(x,-0.0014549763714678532)
x=c(x,-0.0011074322104313802)
x=c(x,-0.0008947802052734981)
x=c(x,0.000011227826188879803)
x=c(x,0.0005679017013536971)
x=c(x,0.0013839713129511436)
x=c(x,0.0032786681494378746)
x=c(x,-0.0014686344821912582)
x=c(x,0.0032303570100670593)
x=c(x,0.0009501791306180462)
x=c(x,-0.0032043803940009293)
x=c(x,-0.006205418313851589)
x=c(x,0.006186532012896675)
x=c(x,0.002309835352176138)
x=c(x,0.003327141652455143)
x=c(x,0.0004868563748216341)
x=c(x,-0.0006018867497131033)
x=c(x,-0.00016630254965597217)
x=c(x,0.006700001126751215)
x=c(x,-0.0003107503381246086)
x=c(x,0.0024170076613459946)
x=c(x,-0.0010051591305382636)
x=c(x,0.0025927392699703878)
x=c(x,-0.007824169052175249)
x=c(x,0.0067083736062683655)
x=c(x,0.005242548420088684)
x=c(x,0.008223393728992135)
x=c(x,0.003478619162432801)
x=c(x,-0.0043649935018486245)
x=c(x,-0.00834354804748078)
x=c(x,-0.0048131480518776)
x=c(x,0.0030247666638094097)
x=c(x,0.015372014781661671)
x=c(x,-0.004768625694545435)
x=c(x,0.005396400884646639)
x=c(x,0.0017787883204912168)
x=c(x,-0.005735355812677607)
x=c(x,0.010104405465534408)
x=c(x,0.006486838143931873)
x=c(x,0.01210558129985925)
x=c(x,0.0014418777640423433)
x=c(x,-0.019909817980407203)
x=c(x,0.003480470325865997)
x=c(x,0.008837480877496345)
x=c(x,0.003006553740224265)
x=c(x,0.008429974679042933)
x=c(x,0.0045111492846558994)
x=c(x,-0.009133482056925792)
x=c(x,0.007970149478407107)
x=c(x,-0.02130126311801743)
x=c(x,-0.0052949237449982315)
x=c(x,-0.007959531727627143)
x=c(x,-0.0016680671394798225)
x=c(x,0.00564139703719291)
x=c(x,-0.0037367024185163576)
x=c(x,-0.0029855634764406696)
x=c(x,-0.0027421196452970978)
x=c(x,0.013054294807116961)
x=c(x,0.006448290810134747)
x=c(x,0.0022652383013421233)
x=c(x,0.007767123345082616)
x=c(x,-0.001771834088217162)
x=c(x,-0.004011485298254458)
x=c(x,-0.004271522147507975)
x=c(x,-0.00014557326905258053)
x=c(x,0.006461868225519261)
x=c(x,-0.008076216351905714)
x=c(x,0.009383460682067099)
x=c(x,0.0012229683951426379)
x=c(x,-0.007754023865839552)
x=c(x,0.009859935939239473)
x=c(x,0.0032783643865675395)
x=c(x,-0.0032631857179621724)
x=c(x,0.00044881664947959564)
x=c(x,-0.02556278150526931)
x=c(x,-0.0021999417613344226)
x=c(x,-0.02584093256080819)
x=c(x,-0.0006961664544850335)
x=c(x,0.012746114376122195)
x=c(x,-0.02474017310935901)
x=c(x,0.0006884691384963117)
x=c(x,0.007316624917168879)
x=c(x,0.0022203064249433787)
x=c(x,-0.014523771539960055)
x=c(x,0.018875916774654177)
x=c(x,-0.02022387872596981)
x=c(x,0.015341033672672203)
x=c(x,-0.002778028497870151)
x=c(x,0.006888126965123547)
x=c(x,0.024908887047985953)
x=c(x,-0.0030684841761931805)
x=c(x,-0.012258541101552533)
x=c(x,0.0007914421225692385)
x=c(x,-0.015986943649512537)
x=c(x,0.005202090460814581)
x=c(x,0.007914668217866273)
x=c(x,-0.012351746177083997)
x=c(x,0.027013354034010242)
x=c(x,-0.02115838617398449)
x=c(x,0.0003403315236408476)
x=c(x,-0.011622414729018015)
x=c(x,0.019145142634937724)
x=c(x,0.041195555771602346)
x=c(x,0.000262682980724382)
x=c(x,0.019986878586595234)
x=c(x,-0.0028052001982997138)
x=c(x,0.005011299036068305)
x=c(x,-0.01449731140885624)
x=c(x,-0.024402859483182635)
x=c(x,-0.0061934113651479755)
x=c(x,-0.021479841861382312)
x=c(x,0.03871674922708048)
x=c(x,-0.01827186143359754)
x=c(x,0.00349931364965121)
x=c(x,0.006168152575140585)
x=c(x,0.10560376691828884)
x=c(x,-0.03964028137540327)
x=c(x,0.05913659826663845)
x=c(x,-0.04063790965090722)
x=c(x,0.006453332824513188)
x=c(x,0.012461747764438584)
x=c(x,0.011534975519509057)
x=c(x,-0.025949534422034872)
x=c(x,-0.0008886053977282301)
x=c(x,-0.008367432949072395)
x=c(x,0.0522848524292244)
x=c(x,0.005670561114294374)
x=c(x,0.003302701748557002)
x=c(x,0.06868770978381988)
x=c(x,-0.07932857165492768)
x=c(x,0.02456158843223946)
x=c(x,-0.013833532150157727)
x=c(x,0.022636127214232915)
x=c(x,-0.010564297788523523)
x=c(x,-0.027119283280969096)
x=c(x,0.052399649504883246)
x=c(x,0.027596277933457928)
x=c(x,0.02564179186203408)
x=c(x,0.01417242485765224)
x=c(x,-0.027661170989063753)
x=c(x,0.03851763901626178)
x=c(x,-0.08612237049781575)
x=c(x,0.022731732866807797)
x=c(x,-0.05483082825827733)
x=c(x,0.024600952453808562)
x=c(x,0.053646607267016456)
x=c(x,-0.01454473381148841)
x=c(x,-0.00003292979753547378)
x=c(x,-0.009625449864167367)
x=c(x,-0.019498251003688648)
x=c(x,-0.030003074038025487)
x=c(x,0.07383974317139198)
x=c(x,0.012212350712321844)
x=c(x,-0.04787664007296918)
x=c(x,-0.05210052916911594)
x=c(x,-0.03948277860126816)
x=c(x,0.03374943860586773)
x=c(x,0.002852356205420133)
x=c(x,-0.013078561560963105)
x=c(x,-0.017071811867951814)
x=c(x,0.008666913892111468)
x=c(x,0.02754560532354334)
x=c(x,0.07819076348857273)
x=c(x,0.03145867541553759)
x=c(x,-0.07138535274456148)
x=c(x,0.3811889206522798)
x=c(x,-0.2992358548004549)
x=c(x,-0.004886237668335219)
x=c(x,-0.10595333612596462)
x=c(x,-0.02162338321398394)
x=c(x,0.20676677663924511)
x=c(x,-0.11219450216109825)
x=c(x,-0.06775621876751398)
x=c(x,-0.12866948910368609)
x=c(x,0.04932593525885455)
x=c(x,-0.06763316783788653)
x=c(x,-0.009724518131368157)
x=c(x,0.028476320169451293)
x=c(x,-0.07146885784170418)
x=c(x,-0.00862557739143448)
x=c(x,-0.22418608331610593)
x=c(x,-0.042277826416184584)
x=c(x,0.1100028668534715)
x=c(x,-0.013368644108511994)
x=c(x,-0.05339674692349159)
x=c(x,0.05318722868148817)
x=c(x,-0.07423070251315395)
x=c(x,-0.051107930996862644)
x=c(x,0.0011235449981112319)
x=c(x,-0.14127821096248683)
x=c(x,0.002433188994862028)
x=c(x,0.06147164450621922)
x=c(x,-0.05975950883340859)
x=c(x,0.06394886978981353)
x=c(x,-0.07732622476102881)
x=c(x,0.0057203209978173575)
x=c(x,-0.021879777089271656)
x=c(x,0.06579405081520116)
x=c(x,-0.003498071787764153)
x=c(x,0.01151917489654761)
x=c(x,0.06270716249920917)
x=c(x,-0.04243743505263263)
x=c(x,-0.0678961349895982)
x=c(x,-0.0659308179221836)
x=c(x,0.05524616179854826)
x=c(x,-0.0013651021250353965)
x=c(x,-0.037217458417790186)
x=c(x,0.043722629845109766)
x=c(x,0.013942693333781227)
x=c(x,0.00869607560635591)
x=c(x,0.01318139840933702)
x=c(x,0.019074601094445514)
x=c(x,0.04714738080377437)
x=c(x,0.01436385939961732)
x=c(x,0.010836983617944893)
x=c(x,0.010697857314945285)
x=c(x,0.01709926712256248)
x=c(x,-0.0022587994439568805)
x=c(x,0.04321174136950691)
x=c(x,0.05659501986895213)
x=c(x,0.08978796487475361)
x=c(x,0.021600858935269276)
x=c(x,0.033773630151082)
x=c(x,0.005648540042387593)
x=c(x,-0.01208566277098616)
x=c(x,0.00015011023465331445)
x=c(x,-0.0003986619240913929)
x=c(x,0.00026520990911401543)
x=c(x,-0.0013605520512681255)
x=c(x,0.0006435884232556426)
x=c(x,-0.000009852650819892219)
x=c(x,-0.00014424299308520898)
x=c(x,0.0037291233912734594)
x=c(x,-0.0020090112826503716)
x=c(x,-0.0019141868578846713)
x=c(x,-0.0006127069430168508)
x=c(x,0.00036159108095616064)
x=c(x,0.0007148164384625793)
x=c(x,0.001687419041171731)
x=c(x,0.004121472355970439)
x=c(x,-0.00001631968547949138)
x=c(x,0.005857173914734712)
x=c(x,0.0010641875729365312)
x=c(x,-0.004302935067064163)
x=c(x,-0.0041487827425199806)
x=c(x,0.007599157954244938)
x=c(x,0.0022006620037231346)
x=c(x,0.004142183490567784)
x=c(x,0.00002609527082276385)
x=c(x,-0.0008216365258711356)
x=c(x,0.000492110718225012)
x=c(x,0.002980710229287505)
x=c(x,0.00031439585161245696)
x=c(x,0.00014536684755075402)
x=c(x,-0.000976760056854711)
x=c(x,0.0014533714848051543)
x=c(x,-0.009686827231761726)
x=c(x,0.007902931504811)
x=c(x,0.0075904721292192915)
x=c(x,0.008898128522184813)
x=c(x,0.0027853894558690392)
x=c(x,-0.002014020280380693)
x=c(x,-0.013779503994039785)
x=c(x,-0.005295337100044551)
x=c(x,0.005078353995893141)
x=c(x,0.015429530526285491)
x=c(x,-0.004809651328571741)
x=c(x,0.000435715487021154)
x=c(x,-0.000959080307283088)
x=c(x,-0.006313195395127492)
x=c(x,0.04174719894007243)
x=c(x,0.009170636789788066)
x=c(x,0.015355416572240956)
x=c(x,0.0038559185109914343)
x=c(x,-0.024980647258122116)
x=c(x,0.0055151469095418406)
x=c(x,0.009690642019902836)
x=c(x,0.0027605857863858122)
x=c(x,0.010834218786621014)
x=c(x,-0.001976379089760445)
x=c(x,-0.011609600744045172)
x=c(x,0.011949904784392907)
x=c(x,-0.020071866421750482)
x=c(x,-0.006108949021000269)
x=c(x,-0.013146367418556248)
x=c(x,0.00040913092081316666)
x=c(x,0.007022902343272028)
x=c(x,-0.0009714318758006007)
x=c(x,-0.000654676479709349)
x=c(x,-0.0028232677042783804)
x=c(x,0.02330769412577196)
x=c(x,0.004912272682301379)
x=c(x,0.0029346697130614567)
x=c(x,0.007467205788930687)
x=c(x,-0.0025421479562765838)
x=c(x,-0.0037467814289856302)
x=c(x,-0.003880003658091552)
x=c(x,-0.004041859412960882)
x=c(x,0.006207646788086606)
x=c(x,-0.004430779069412038)
x=c(x,0.009199529802242121)
x=c(x,-0.0014952861536770736)
x=c(x,-0.01097472253333454)
x=c(x,0.006321176110512788)
x=c(x,0.0019995803613091926)
x=c(x,-0.003245873430996504)
x=c(x,0.0003806654630665219)
x=c(x,-0.029041349979371165)
x=c(x,-0.0035370517461700618)
x=c(x,-0.03125507597674737)
x=c(x,0.006417697917352311)
x=c(x,0.015336192893784972)
x=c(x,-0.019971004072915192)
x=c(x,-0.0017144125553867594)
x=c(x,-0.01531229489063617)
x=c(x,-0.0013316915078665132)
x=c(x,-0.002897625046994766)
x=c(x,0.014701473306962613)
x=c(x,-0.010691280435427948)
x=c(x,0.018830579420479828)
x=c(x,-0.0038469189391865427)
x=c(x,0.008488371267178725)
x=c(x,0.031078432549294484)
x=c(x,-0.009357180512643958)
x=c(x,-0.011801371290567943)
x=c(x,-0.007913824902677905)
x=c(x,-0.021745659669386384)
x=c(x,0.012715031028241395)
x=c(x,-0.0020296077066932817)
x=c(x,-0.014635443479438482)
x=c(x,0.01177371363276903)
x=c(x,-0.023636791156822348)
x=c(x,0.00023574281202817034)
x=c(x,-0.02523359502185402)
x=c(x,0.020224155446626754)
x=c(x,0.05538436640974086)
x=c(x,-0.0017640604314987653)
x=c(x,0.02896305712651304)
x=c(x,-0.005632577323152452)
x=c(x,0.0007616277221241222)
x=c(x,-0.011742834994828743)
x=c(x,-0.022851323146737778)
x=c(x,-0.0074098659595553205)
x=c(x,-0.014921925490935935)
x=c(x,0.0451732980129104)
x=c(x,-0.020904099871577358)
x=c(x,0.0034786026116515544)
x=c(x,0.008751443836158022)
x=c(x,0.15105743098478755)
x=c(x,-0.05792478413304477)
x=c(x,0.07349233551052013)
x=c(x,-0.04818387209128176)
x=c(x,-0.00721253687717423)
x=c(x,0.013834308801907443)
x=c(x,0.017677048879320104)
x=c(x,-0.031185708159615983)
x=c(x,-0.0006586785579292925)
x=c(x,-0.010067736082910905)
x=c(x,0.05002657198577099)
x=c(x,-0.009196498514991578)
x=c(x,-0.003958504824118222)
x=c(x,0.06463755549455646)
x=c(x,-0.07192594100746823)
x=c(x,0.03340891234145899)
x=c(x,-0.008572005052305712)
x=c(x,0.0284479760713068)
x=c(x,0.00818877611755891)
x=c(x,-0.03533347274903841)
x=c(x,0.06529335158704852)
x=c(x,0.044711360026378044)
x=c(x,0.03187923833368412)
x=c(x,0.016611849288320293)
x=c(x,-0.03617786566789874)
x=c(x,0.04584711619496677)
x=c(x,-0.11013762456545685)
x=c(x,0.03506100473760969)
x=c(x,-0.054861547402630675)
x=c(x,0.022329966947885478)
x=c(x,0.05814744660717211)
x=c(x,-0.016918842977126432)
x=c(x,0.007048734146717774)
x=c(x,-0.006996854629866809)
x=c(x,-0.033591032853693574)
x=c(x,-0.041626388536802846)
x=c(x,0.10176457045778095)
x=c(x,0.0049736065168589924)
x=c(x,-0.052617705822573205)
x=c(x,-0.055673809942303414)
x=c(x,-0.046465626489513065)
x=c(x,0.048487393518905436)
x=c(x,0.0030807365100013312)
x=c(x,-0.015475022108603716)
x=c(x,-0.021843079293147365)
x=c(x,0.011277916189366131)
x=c(x,-0.01598169357584278)
x=c(x,0.10636037287380856)
x=c(x,0.0668816733202941)
x=c(x,-0.09427921420612816)
x=c(x,0.5421550389567317)
x=c(x,-0.4324398053087486)
x=c(x,-0.01228876321206963)
x=c(x,-0.12521741613481593)
x=c(x,-0.04291513086236489)
x=c(x,0.2827519216301696)
x=c(x,-0.13780209597398216)
x=c(x,-0.0831691642524182)
x=c(x,-0.1494156631536192)
x=c(x,0.04833255483975688)
x=c(x,-0.07333526553332657)
x=c(x,-0.01164884978847126)
x=c(x,0.03830115436133955)
x=c(x,-0.08501452074700903)
x=c(x,0.0002451425499072835)
x=c(x,-0.26479827992359295)
x=c(x,-0.05907308317344565)
x=c(x,0.1455993625846774)
x=c(x,-0.02361121224011013)
x=c(x,-0.07254988741364252)
x=c(x,0.043087163333063894)
x=c(x,-0.0907777099899599)
x=c(x,-0.05347352728401912)
x=c(x,-0.022990841018720752)
x=c(x,-0.17537863096857642)
x=c(x,0.005586408076808775)
x=c(x,0.06918661857677486)
x=c(x,-0.07545889261562122)
x=c(x,0.07516931675638389)
x=c(x,-0.11190998317197563)
x=c(x,0.00881061513356075)
x=c(x,-0.03293302824679805)
x=c(x,0.07427588696881209)
x=c(x,-0.007599685439667046)
x=c(x,0.011480036781254253)
x=c(x,0.07871035860688308)
x=c(x,-0.022327570631385137)
x=c(x,-0.08619914574428443)
x=c(x,-0.07567923141532189)
x=c(x,0.06861815872079154)
x=c(x,0.0009470825094565302)
x=c(x,-0.05933129457405301)
x=c(x,0.06999804883179239)
x=c(x,0.014007017344952025)
x=c(x,0.0099417702406817)
x=c(x,0.018593335754446768)
x=c(x,0.01982286522679675)
x=c(x,0.0581086880570954)
x=c(x,0.01708678602483875)
x=c(x,0.005731444603353612)
x=c(x,0.006746948384248626)
x=c(x,-0.03428199099260958)
x=c(x,-0.011245758830483036)
x=c(x,0.0430518350685732)
x=c(x,0.0740936832845781)
x=c(x,0.13423820423769595)
x=c(x,0.02167207499557983)
x=c(x,0.03731411703558556)
x=c(x,-0.017685083989336294)
x=c(x,-0.013682030846177695)
x=c(x,0.0001480794579203834)
x=c(x,-0.0005011578337518728)
x=c(x,0.0002456823026966133)
x=c(x,-0.0013045535325791671)
x=c(x,0.0006279170782652426)
x=c(x,-0.00000858317616965672)
x=c(x,-0.00012188747813979292)
x=c(x,0.0034007380188611444)
x=c(x,-0.0019580285270217887)
x=c(x,-0.0014837236300641197)
x=c(x,-0.0006143070105292897)
x=c(x,0.00008021959249995092)
x=c(x,0.0006519721215811174)
x=c(x,0.0015828366976328404)
x=c(x,0.003963836415900575)
x=c(x,0.000018977983524058536)
x=c(x,0.00464038424374465)
x=c(x,0.001059751459019872)
x=c(x,-0.004224508709579455)
x=c(x,-0.004803531363460856)
x=c(x,0.007339575182489635)
x=c(x,0.0024341021001797495)
x=c(x,0.004011194681511916)
x=c(x,0.0004938536069887058)
x=c(x,-0.00021504118197879384)
x=c(x,0.0007038075051488824)
x=c(x,0.0029295440547621875)
x=c(x,-0.0002317602931214517)
x=c(x,0.0016359054298378253)
x=c(x,-0.0008914841679435387)
x=c(x,0.0022327248221754433)
x=c(x,-0.009208869631464785)
x=c(x,0.0076597789273030095)
x=c(x,0.007494777676117711)
x=c(x,0.008862299781490331)
x=c(x,0.003335801303904183)
x=c(x,-0.0032897913931034107)
x=c(x,-0.013321853463056994)
x=c(x,-0.005466736165503125)
x=c(x,0.00504355289950795)
x=c(x,0.01557084794492734)
x=c(x,-0.005094927781445632)
x=c(x,0.0030388058498232104)
x=c(x,0.00022533430198021427)
x=c(x,-0.005910731967904783)
x=c(x,0.03852305525623133)
x=c(x,0.008936710740673145)
x=c(x,0.015348177823932437)
x=c(x,0.003884184859444414)
x=c(x,-0.024529678569129167)
x=c(x,0.005293409242716794)
x=c(x,0.009455291909945335)
x=c(x,0.0028762055955861635)
x=c(x,0.009937636880879853)
x=c(x,0.0029235948049203355)
x=c(x,-0.011370316928462534)
x=c(x,0.011965104537292685)
x=c(x,-0.02177496827492208)
x=c(x,-0.005640403853879484)
x=c(x,-0.011264104157715582)
x=c(x,-0.0007917377624039148)
x=c(x,0.006291585518147159)
x=c(x,-0.0026397737639762514)
x=c(x,-0.0015954605427056345)
x=c(x,-0.00265263101005228)
x=c(x,0.022623873898878405)
x=c(x,0.0059983931621087954)
x=c(x,0.002816674524983827)
x=c(x,0.007421874298318386)
x=c(x,-0.0015576108656432475)
x=c(x,-0.0038043163999882225)
x=c(x,-0.004447367144712728)
x=c(x,-0.0006923824705402006)
x=c(x,0.005651872508835047)
x=c(x,-0.004346855092910177)
x=c(x,0.009657713965582607)
x=c(x,-0.0019162802366405357)
x=c(x,-0.01036467391178347)
x=c(x,0.008882258480170793)
x=c(x,0.0018671761962010139)
x=c(x,-0.003124639075631616)
x=c(x,0.0004055369783668323)
x=c(x,-0.02817731033861704)
x=c(x,-0.0032004078788711297)
x=c(x,-0.029681304099710707)
x=c(x,0.0062626915122404835)
x=c(x,0.014438648693868659)
x=c(x,-0.020257622753262147)
x=c(x,-0.0018154524641141952)
x=c(x,0.0028360820984570244)
x=c(x,-0.002051783191950831)
x=c(x,-0.005269095307690395)
x=c(x,0.015862291388054988)
x=c(x,-0.016591062127327364)
x=c(x,0.018648537299495598)
x=c(x,-0.0035604216574474583)
x=c(x,0.007930541970243126)
x=c(x,0.030686295071610643)
x=c(x,-0.009122417120206054)
x=c(x,-0.012513233180543806)
x=c(x,-0.010398613548676886)
x=c(x,-0.02002234299277606)
x=c(x,0.01055549240478025)
x=c(x,0.0031397471141684755)
x=c(x,-0.013877301690013435)
x=c(x,0.024142774625725092)
x=c(x,-0.02271872862227226)
x=c(x,0.00011197869377241187)
x=c(x,-0.016521404262625935)
x=c(x,0.019389059520672044)
x=c(x,0.054898550955298324)
x=c(x,-0.0009258434060452905)
x=c(x,0.027380659224892474)
x=c(x,-0.005721390335705809)
x=c(x,0.0033703745158221755)
x=c(x,-0.01354425468400007)
x=c(x,-0.02485556144743966)
x=c(x,-0.006771167522678562)
x=c(x,-0.016352774410557366)
x=c(x,0.046458732246740776)
x=c(x,-0.020314688396377425)
x=c(x,0.002819828847085556)
x=c(x,0.0075119246666246866)
x=c(x,0.14997854674031874)
x=c(x,-0.057914120783424124)
x=c(x,0.07486217177441404)
x=c(x,-0.0473405579511874)
x=c(x,0.0008450815762808266)
x=c(x,0.013258647197533727)
x=c(x,0.016811359583050977)
x=c(x,-0.030274794906103922)
x=c(x,-0.001871199605426537)
x=c(x,-0.00956770925781413)
x=c(x,0.058057493023778946)
x=c(x,-0.004548823212273712)
x=c(x,-0.0035952642548704233)
x=c(x,0.06905879376019662)
x=c(x,-0.08257043553365272)
x=c(x,0.033102722496036574)
x=c(x,-0.008589437307814805)
x=c(x,0.028034673277936704)
x=c(x,0.002612679725317399)
x=c(x,-0.03497501565161627)
x=c(x,0.0629647698322878)
x=c(x,0.04474299002201234)
x=c(x,0.030981740381369333)
x=c(x,0.016399328870138726)
x=c(x,-0.03564843718527341)
x=c(x,0.044692212048313536)
x=c(x,-0.10922160443729666)
x=c(x,0.03477342987021136)
x=c(x,-0.0574809142427868)
x=c(x,0.023585573863824788)
x=c(x,0.0605515805898011)
x=c(x,-0.01627398840804749)
x=c(x,0.005475730811887403)
x=c(x,-0.007348297518013529)
x=c(x,-0.03100590207926087)
x=c(x,-0.03870012461201917)
x=c(x,0.098592571613561)
x=c(x,0.005828541901574612)
x=c(x,-0.050629504205028535)
x=c(x,-0.05579423296548295)
x=c(x,-0.04533909136320341)
x=c(x,0.04799887484694971)
x=c(x,0.003087573996088365)
x=c(x,-0.017215224139304302)
x=c(x,-0.020620389867658195)
x=c(x,0.010748596673098857)
x=c(x,-0.00860047021880125)
x=c(x,0.10622079414242228)
x=c(x,0.06187486785956212)
x=c(x,-0.09178380265032385)
x=c(x,0.5402878658593072)
x=c(x,-0.43301066347796147)
x=c(x,-0.011893595617022572)
x=c(x,-0.12576235341421363)
x=c(x,-0.04329939213204395)
x=c(x,0.28144802317706274)
x=c(x,-0.1370755529158955)
x=c(x,-0.0831529268875154)
x=c(x,-0.14982199834395774)
x=c(x,0.04647466762210408)
x=c(x,-0.07585651605802211)
x=c(x,-0.01092871700489101)
x=c(x,0.03212543966599348)
x=c(x,-0.08316096538473497)
x=c(x,0.0011093012259672918)
x=c(x,-0.2693595622011831)
x=c(x,-0.058830140427173126)
x=c(x,0.14294281680774473)
x=c(x,-0.023515235552313295)
x=c(x,-0.06715513900364296)
x=c(x,0.058621991167727254)
x=c(x,-0.08773069754106166)
x=c(x,-0.052430879743161164)
x=c(x,-0.01504834338731037)
x=c(x,-0.1713028066927257)
x=c(x,0.0047675447743465256)
x=c(x,0.06942053437829718)
x=c(x,-0.07636083341299564)
x=c(x,0.0724606322477992)
x=c(x,-0.11067189832490307)
x=c(x,0.009088370731034474)
x=c(x,-0.03187224256495053)
x=c(x,0.07216192003127256)
x=c(x,-0.007243406163165106)
x=c(x,0.011175240250884219)
x=c(x,0.0774333423595669)
x=c(x,-0.03602669000874202)
x=c(x,-0.08290960341273633)
x=c(x,-0.07398691890092635)
x=c(x,0.07093845769645102)
x=c(x,0.0012449103946700095)
x=c(x,-0.05808163899796172)
x=c(x,0.06926134705958269)
x=c(x,0.01371524454000908)
x=c(x,0.010120764960181432)
x=c(x,0.017977836871140428)
x=c(x,0.01837870340801126)
x=c(x,0.05674022792136864)
x=c(x,0.01702379148109352)
x=c(x,0.00614196162623551)
x=c(x,0.009429319395012027)
x=c(x,-0.004562892021682614)
x=c(x,-0.010947688979795948)
x=c(x,0.04382906663517071)
x=c(x,0.07084280551381396)
x=c(x,0.13301110330985996)
x=c(x,0.022922210910108185)
x=c(x,0.035937976368261806)
x=c(x,-0.015907990880239576)
x=c(x,-0.013471691596428415)
x=c(x,0.00014261417475507727)
x=c(x,-0.0005587590380408572)
x=c(x,0.00019536085874882265)
x=c(x,-0.0012335162346038921)
x=c(x,0.0006057566507274812)
x=c(x,0.00019130850062059061)
x=c(x,-0.00015484552747566666)
x=c(x,0.0031318125095070965)
x=c(x,-0.0016948149847182629)
x=c(x,-0.0011088589802139375)
x=c(x,-0.0008817521425781604)
x=c(x,-0.00006331263259915964)
x=c(x,0.0005976666846889827)
x=c(x,0.0014493900108822873)
x=c(x,0.003734632231321729)
x=c(x,-0.0012800891533517062)
x=c(x,0.00381191845148787)
x=c(x,0.0010340452869769714)
x=c(x,-0.003320147677063151)
x=c(x,-0.006482576036266081)
x=c(x,0.00691865203128311)
x=c(x,0.002359326606183947)
x=c(x,0.0036801655543955637)
x=c(x,0.0005070044746236439)
x=c(x,-0.0004157864235749237)
x=c(x,-0.00016837609524129635)
x=c(x,0.0071539328985649525)
x=c(x,-0.00038511281930395965)
x=c(x,0.0025445561975914513)
x=c(x,-0.0007936820126043761)
x=c(x,0.0025328533955902626)
x=c(x,-0.008164509004560193)
x=c(x,0.007295316076653926)
x=c(x,0.006356540481213524)
x=c(x,0.008997076107567831)
x=c(x,0.0036271776660250984)
x=c(x,-0.004480615611147972)
x=c(x,-0.009050374689081155)
x=c(x,-0.005478605368716489)
x=c(x,0.003077124811231251)
x=c(x,0.017668430969834007)
x=c(x,-0.004769647805588554)
x=c(x,0.005719281713259055)
x=c(x,0.0018417085535963541)
x=c(x,-0.006949850777070503)
x=c(x,0.012019071601720572)
x=c(x,0.00844571809436239)
x=c(x,0.014897837672317258)
x=c(x,0.00374425732647999)
x=c(x,-0.02376934175116182)
x=c(x,0.003448352747903754)
x=c(x,0.008890631737222062)
x=c(x,0.002904394974864229)
x=c(x,0.008726523537088852)
x=c(x,0.004294769440022028)
x=c(x,-0.009264047570933437)
x=c(x,0.012214334363416462)
x=c(x,-0.025589223460960042)
x=c(x,-0.005159521637770412)
x=c(x,-0.008398893465874396)
x=c(x,-0.0015761965819656896)
x=c(x,0.005690076966199476)
x=c(x,-0.0038327937366747925)
x=c(x,-0.002933386039906795)
x=c(x,-0.002644266894369307)
x=c(x,0.015338241688302499)
x=c(x,0.006057034604808958)
x=c(x,0.002350109228251918)
x=c(x,0.00742090956745748)
x=c(x,-0.0013506411301125027)
x=c(x,-0.00375034101959831)
x=c(x,-0.004429697247385357)
x=c(x,-0.00028309529812579746)
x=c(x,0.006952698957394423)
x=c(x,-0.008073306920777797)
x=c(x,0.010340668169626123)
x=c(x,0.00012760922920981185)
x=c(x,-0.008677029380134458)
x=c(x,0.009932085113623762)
x=c(x,0.0028912599380010637)
x=c(x,-0.0032447031066190324)
x=c(x,0.0004599892896141354)
x=c(x,-0.026872378220635783)
x=c(x,-0.0025585873719379355)
x=c(x,-0.027272282324829075)
x=c(x,-0.0007189226800618144)
x=c(x,0.013617495518176604)
x=c(x,-0.024907074757063392)
x=c(x,-0.0008743036509698934)
x=c(x,0.007861695474345506)
x=c(x,0.0010307956970304086)
x=c(x,-0.013681660080496403)
x=c(x,0.020975456792180533)
x=c(x,-0.021346222126182084)
x=c(x,0.01579333575307771)
x=c(x,-0.0033912259255765445)
x=c(x,0.007232881222447451)
x=c(x,0.03009354897614699)
x=c(x,-0.006386140698015437)
x=c(x,-0.012204995623493)
x=c(x,0.0007387954197142526)
x=c(x,-0.018563782397161138)
x=c(x,0.0056544348144555445)
x=c(x,0.00722478416556772)
x=c(x,-0.012190561934917419)
x=c(x,0.028274318648509815)
x=c(x,-0.02100039481398413)
x=c(x,0.00012251780461500997)
x=c(x,-0.01499325861684143)
x=c(x,0.018359621958440084)
x=c(x,0.05374249956696131)
x=c(x,0.0013075354198151896)
x=c(x,0.02244694755373247)
x=c(x,-0.005796311856699651)
x=c(x,0.004682785180287562)
x=c(x,-0.01558191229546805)
x=c(x,-0.0255467207906578)
x=c(x,-0.0056346201904391505)
x=c(x,-0.02294619789831632)
x=c(x,0.044330711364384795)
x=c(x,-0.01866238725415909)
x=c(x,0.0024500257246127173)
x=c(x,0.007255284468816048)
x=c(x,0.14596540072573844)
x=c(x,-0.05767756577517759)
x=c(x,0.07192842404694547)
x=c(x,-0.04752590523092859)
x=c(x,0.0031830008644044756)
x=c(x,0.012244623121874045)
x=c(x,0.014384380008656793)
x=c(x,-0.028598622605611138)
x=c(x,-0.004467729879668673)
x=c(x,-0.008754829123174684)
x=c(x,0.059661849667647655)
x=c(x,0.004280657467816252)
x=c(x,0.004685273737688775)
x=c(x,0.08017427705886523)
x=c(x,-0.09601344110814611)
x=c(x,0.03278441699295782)
x=c(x,-0.016182568049227915)
x=c(x,0.02626339162576807)
x=c(x,-0.015697426934510754)
x=c(x,-0.033837089492659955)
x=c(x,0.05719611321454795)
x=c(x,0.035034494719666076)
x=c(x,0.026837378449719874)
x=c(x,0.014917348357781909)
x=c(x,-0.03286454488376923)
x=c(x,0.04157951723452808)
x=c(x,-0.10442477906051599)
x=c(x,0.0347199956912981)
x=c(x,-0.06452833046351926)
x=c(x,0.02210865342030121)
x=c(x,0.06078782218461101)
x=c(x,-0.014840736978931027)
x=c(x,0.00009094776674578371)
x=c(x,-0.00716663406024165)
x=c(x,-0.026212980525491727)
x=c(x,-0.0347014275858083)
x=c(x,0.09335202943751116)
x=c(x,0.012101661961303543)
x=c(x,-0.04910784452625961)
x=c(x,-0.05479274492765244)
x=c(x,-0.04236091304392739)
x=c(x,0.047637682229918814)
x=c(x,0.0036278429225552714)
x=c(x,-0.017195521429616858)
x=c(x,-0.019262892968726682)
x=c(x,0.010126362900345099)
x=c(x,0.03206998565089023)
x=c(x,0.10550753263500114)
x=c(x,0.057224382747813905)
x=c(x,-0.08883559178100311)
x=c(x,0.5251246063646224)
x=c(x,-0.43600436645111185)
x=c(x,-0.01303963819807946)
x=c(x,-0.12281347096370465)
x=c(x,-0.043672945963547594)
x=c(x,0.2838114156925973)
x=c(x,-0.1350816765634829)
x=c(x,-0.08282096060727383)
x=c(x,-0.15169526886418294)
x=c(x,0.03912729989979469)
x=c(x,-0.07774341698010222)
x=c(x,-0.010081509951272742)
x=c(x,0.02943175489474987)
x=c(x,-0.07990855234882137)
x=c(x,0.00023399744511767823)
x=c(x,-0.28691736359843784)
x=c(x,-0.05800100155705635)
x=c(x,0.13793715499887163)
x=c(x,-0.0239578280487456)
x=c(x,-0.05790262394792282)
x=c(x,0.07080094946951015)
x=c(x,-0.08085928912158195)
x=c(x,-0.04399172640212593)
x=c(x,0.0023331005677713888)
x=c(x,-0.16376295906911453)
x=c(x,0.001970714610818142)
x=c(x,0.07375180776239763)
x=c(x,-0.07817043575530291)
x=c(x,0.07076512553058215)
x=c(x,-0.1077687105527194)
x=c(x,0.010082304411501838)
x=c(x,-0.02361379184574256)
x=c(x,0.07231579782796313)
x=c(x,-0.006996797333694816)
x=c(x,0.011416513176463914)
x=c(x,0.07485722896014606)
x=c(x,-0.04746226335492199)
x=c(x,-0.07920822570028911)
x=c(x,-0.0717132738994623)
x=c(x,0.07076272746295681)
x=c(x,0.00375446559722457)
x=c(x,-0.05601643488497383)
x=c(x,0.06385011987973445)
x=c(x,0.014994026390263334)
x=c(x,0.010242089195636054)
x=c(x,0.015813496849935008)
x=c(x,0.01947406615803921)
x=c(x,0.055227019660156675)
x=c(x,0.016654182406265483)
x=c(x,0.011172590654658438)
x=c(x,0.011129452416445746)
x=c(x,0.01842946038888605)
x=c(x,-0.004143415686696059)
x=c(x,0.047153954628040715)
x=c(x,0.06245192706617418)
x=c(x,0.12997587304694327)
x=c(x,0.027209308765970785)
x=c(x,0.033437731716703785)
x=c(x,0.00459612196820331)
x=c(x,-0.013384214372168019)
x=c(x,0.00009633954915238136)
x=c(x,-0.0003484602835943344)
x=c(x,0.00026677034222706065)
x=c(x,-0.0010399925481958312)
x=c(x,0.0006393588760810441)
x=c(x,0.00009237156017175746)
x=c(x,-0.0001450770817851089)
x=c(x,0.003031389052334222)
x=c(x,-0.002350949440759113)
x=c(x,-0.001548662559924283)
x=c(x,-0.0009207754807330353)
x=c(x,0.00029118574149855576)
x=c(x,0.0009116374384972178)
x=c(x,0.0018333920859678326)
x=c(x,0.0034934598864402957)
x=c(x,-0.00016922558484904152)
x=c(x,0.004517543242643455)
x=c(x,0.000748765947898808)
x=c(x,-0.003820584357408172)
x=c(x,-0.001974131401450896)
x=c(x,0.0067298657050690385)
x=c(x,0.0024605003325459743)
x=c(x,0.004187146370385859)
x=c(x,-0.0009624520298857982)
x=c(x,-0.00044674045841424785)
x=c(x,-0.00014404720450601833)
x=c(x,0.002556742969118039)
x=c(x,0.0005245293712031038)
x=c(x,0.0008448283727605581)
x=c(x,-0.001954103739828265)
x=c(x,0.0017778039802515508)
x=c(x,-0.005312655482586449)
x=c(x,0.0028641090051696825)
x=c(x,0.004418393846761549)
x=c(x,0.006611550912524636)
x=c(x,0.0021795187355275517)
x=c(x,-0.001541399389708145)
x=c(x,-0.009856189162827114)
x=c(x,-0.00258921168135046)
x=c(x,0.002895899377197717)
x=c(x,0.010814371316494709)
x=c(x,-0.0031115354654596013)
x=c(x,0.0017794739640353105)
x=c(x,0.00011220979263021187)
x=c(x,-0.004189570632606555)
x=c(x,0.01027501217263751)
x=c(x,0.006576462909689047)
x=c(x,0.014603705493759878)
x=c(x,0.0016475746496789538)
x=c(x,-0.01203120609525147)
x=c(x,0.0037632382252572646)
x=c(x,0.008293257611154252)
x=c(x,0.0029733250430033086)
x=c(x,0.00971673612713154)
x=c(x,0.002214074129658252)
x=c(x,-0.01213976247233153)
x=c(x,0.0033917421839202936)
x=c(x,-0.01726591133874443)
x=c(x,-0.006692547444601815)
x=c(x,-0.008871724237050871)
x=c(x,-0.0010715451911752758)
x=c(x,0.007917041879430431)
x=c(x,-0.0015555643963425566)
x=c(x,-0.0021854168676524836)
x=c(x,-0.0015964191061281611)
x=c(x,0.017365821825026582)
x=c(x,0.0026137260159154814)
x=c(x,0.001875158370468282)
x=c(x,0.006291582967168742)
x=c(x,-0.0043446493774827516)
x=c(x,-0.004044742028556206)
x=c(x,-0.0017707988969444977)
x=c(x,-0.0005836811814795481)
x=c(x,0.0021214856940120846)
x=c(x,-0.007412397980092664)
x=c(x,0.003116729347701537)
x=c(x,0.002465914310764439)
x=c(x,-0.009048974742082444)
x=c(x,0.007984906283569074)
x=c(x,0.0018005322996927022)
x=c(x,-0.0028168084953835775)
x=c(x,0.00015794413207310257)
x=c(x,-0.021343885499386633)
x=c(x,-0.0016807420797272901)
x=c(x,-0.021065189335878243)
x=c(x,0.00473055645101668)
x=c(x,0.015511260680876694)
x=c(x,-0.010691628389817801)
x=c(x,0.0004922861280557277)
x=c(x,-0.008547796548939505)
x=c(x,0.0040423119798852925)
x=c(x,-0.011154308326191716)
x=c(x,0.005056416112320648)
x=c(x,-0.012149757020660316)
x=c(x,0.012924488469538467)
x=c(x,-0.00516450485714072)
x=c(x,0.006717408838755553)
x=c(x,0.014519483737697143)
x=c(x,0.00004427846737499006)
x=c(x,-0.01019400255435587)
x=c(x,-0.004877884885974638)
x=c(x,-0.012939673186495198)
x=c(x,0.006333113855788991)
x=c(x,0.0023402952597224185)
x=c(x,-0.015709369564998677)
x=c(x,0.010740774557755357)
x=c(x,-0.02435430359340376)
x=c(x,0.004207697727930965)
x=c(x,-0.015422472602699615)
x=c(x,0.01900578390166099)
x=c(x,0.02900386423672286)
x=c(x,-0.010364911736968976)
x=c(x,0.016791112763093412)
x=c(x,-0.0015150587097609294)
x=c(x,0.0060236988325048394)
x=c(x,-0.008903568953914249)
x=c(x,-0.02227989974768299)
x=c(x,-0.011512808075708439)
x=c(x,-0.012783431639043703)
x=c(x,0.02315484246211039)
x=c(x,-0.014629045418884058)
x=c(x,0.0014422372277515538)
x=c(x,-0.010438391357458783)
x=c(x,0.06302007284057874)
x=c(x,-0.015798392509589466)
x=c(x,0.04008110126385563)
x=c(x,-0.036927799708791106)
x=c(x,-0.00426351465633817)
x=c(x,0.003227357739549531)
x=c(x,-0.005214694794089373)
x=c(x,-0.02062431546297743)
x=c(x,0.004402015076396801)
x=c(x,-0.012840022776755453)
x=c(x,0.019042293591684918)
x=c(x,-0.016983693943088952)
x=c(x,-0.017837229487226016)
x=c(x,0.02694665511408851)
x=c(x,-0.05955322582996637)
x=c(x,0.018070102441257774)
x=c(x,-0.003055744729249546)
x=c(x,0.020910988204498798)
x=c(x,0.014471433972375878)
x=c(x,-0.02321036978603353)
x=c(x,0.0466638371537416)
x=c(x,0.004383626624438608)
x=c(x,0.022430752148066953)
x=c(x,0.013611111286372119)
x=c(x,-0.019183982429025054)
x=c(x,0.032231253949351564)
x=c(x,-0.06010508617071393)
x=c(x,0.006416328574359601)
x=c(x,-0.034898453209481026)
x=c(x,0.016248660892280435)
x=c(x,0.0476699281246173)
x=c(x,-0.01885256662469029)
x=c(x,0.0016722464906488374)
x=c(x,0.00452305901614242)
x=c(x,-0.014026786475870575)
x=c(x,-0.025953645298307952)
x=c(x,0.05538455923787055)
x=c(x,0.00012135497072823417)
x=c(x,-0.0600676002850951)
x=c(x,-0.0355263311323448)
x=c(x,-0.04632211923849433)
x=c(x,0.01357156587743178)
x=c(x,-0.002796498174872631)
x=c(x,0.007410609083833728)
x=c(x,-0.02231255440055177)
x=c(x,0.010978469264387525)
x=c(x,-0.003465424658700111)
x=c(x,0.04592843397064508)
x=c(x,0.013714285112943609)
x=c(x,-0.05609992696074998)
x=c(x,0.17662079928337152)
x=c(x,-0.12966468956875762)
x=c(x,0.00678597670921938)
x=c(x,-0.07961757003609884)
x=c(x,-0.008154208084984939)
x=c(x,0.08736666791652664)
x=c(x,-0.050288999252190304)
x=c(x,-0.04828861462223096)
x=c(x,-0.05760308167075726)
x=c(x,0.06809605692079158)
x=c(x,-0.05466155894349202)
x=c(x,-0.007797803266561197)
x=c(x,0.03541170698231892)
x=c(x,-0.06787714159447432)
x=c(x,-0.03678139925010133)
x=c(x,-0.15783737872975445)
x=c(x,-0.02474919389377943)
x=c(x,0.08134788115721223)
x=c(x,-0.016886317290063048)
x=c(x,-0.02941852047249576)
x=c(x,0.00026802705705263584)
x=c(x,-0.04587156068566658)
x=c(x,-0.058384371434017084)
x=c(x,-0.01698254609891924)
x=c(x,-0.10663983166887225)
x=c(x,0.005377879500133037)
x=c(x,0.020343388864948516)
x=c(x,-0.040875423568503114)
x=c(x,0.04227404255067276)
x=c(x,-0.03303230657525064)
x=c(x,0.007280716458150509)
x=c(x,-0.010373044734978645)
x=c(x,0.049428065866677126)
x=c(x,-0.00048475578461226477)
x=c(x,0.02114748208861427)
x=c(x,0.03802866249509723)
x=c(x,-0.004965709386819528)
x=c(x,-0.057610715417493415)
x=c(x,-0.057560030282128194)
x=c(x,0.03426806335992547)
x=c(x,0.006791609086308254)
x=c(x,-0.01500712738328586)
x=c(x,0.015224388307643399)
x=c(x,0.002595364814618089)
x=c(x,-0.002112898942587045)
x=c(x,0.010688668652044658)
x=c(x,0.020843776638777962)
x=c(x,0.03617749500806149)
x=c(x,0.011019213565337716)
x=c(x,0.006259071353271933)
x=c(x,0.007198318862704877)
x=c(x,-0.01511020971410377)
x=c(x,0.005425550213880646)
x=c(x,0.03014588606692462)
x=c(x,0.049889713177152684)
x=c(x,0.017824409182878687)
x=c(x,-0.0038733004910843317)
x=c(x,0.028790823523773223)
x=c(x,-0.011316494195175128)
x=c(x,-0.013287461085971897)
x=c(x,0.00011505566675760518)
x=c(x,-0.0003392183675459986)
x=c(x,0.00026920921041053244)
x=c(x,-0.0010191800380280405)
x=c(x,0.000623232900835684)
x=c(x,0.00009757120252983907)
x=c(x,-0.00017017356479619942)
x=c(x,0.002771241311263051)
x=c(x,-0.0022132722029102794)
x=c(x,-0.0014338506162625436)
x=c(x,-0.0009307428161893412)
x=c(x,0.000215227600979153)
x=c(x,0.0008368212692101304)
x=c(x,0.0017839434487019019)
x=c(x,0.003447406243973578)
x=c(x,-0.00005176878076793639)
x=c(x,0.004160498757103931)
x=c(x,0.0007736995092845829)
x=c(x,-0.0037158778248522328)
x=c(x,-0.0031938263450817976)
x=c(x,0.0066603118083886905)
x=c(x,0.002556526212775672)
x=c(x,0.004114681464465466)
x=c(x,-0.0005173067190979227)
x=c(x,-0.00001904676987853243)
x=c(x,-0.00018686668177631587)
x=c(x,0.00257170362999147)
x=c(x,0.000054242832579456855)
x=c(x,0.001385040032383557)
x=c(x,-0.001807851229350741)
x=c(x,0.002111063702520188)
x=c(x,-0.005177914359848461)
x=c(x,0.0028371317065006537)
x=c(x,0.004386132207429124)
x=c(x,0.006724633202309233)
x=c(x,0.002488790875071551)
x=c(x,-0.0023833998953970473)
x=c(x,-0.007990315137000648)
x=c(x,-0.0035242287348703012)
x=c(x,0.0031865597394991753)
x=c(x,0.011710076797300437)
x=c(x,-0.003353008163501665)
x=c(x,0.0030271549238934463)
x=c(x,0.0005947608677678998)
x=c(x,-0.003998573194038781)
x=c(x,0.010990834116544999)
x=c(x,0.006576462899264068)
x=c(x,0.014843083911700646)
x=c(x,0.0014252692752612407)
x=c(x,-0.01206553039002304)
x=c(x,0.0037542230065250428)
x=c(x,0.008440209345995537)
x=c(x,0.0024913902001607565)
x=c(x,0.009868115408514606)
x=c(x,0.003670862232028732)
x=c(x,-0.012303185306574356)
x=c(x,0.0033144724267461408)
x=c(x,-0.01805905911045945)
x=c(x,-0.006686542473684751)
x=c(x,-0.00822107158836096)
x=c(x,-0.0011815410982250812)
x=c(x,0.007508565939271064)
x=c(x,-0.0024021106147991815)
x=c(x,-0.0025611016195493472)
x=c(x,-0.0017644476889915755)
x=c(x,0.017580932689290923)
x=c(x,0.004482233357272776)
x=c(x,0.0017618169214354842)
x=c(x,0.005687467655244893)
x=c(x,-0.004756288837451529)
x=c(x,-0.004196885571279243)
x=c(x,-0.002174240294693433)
x=c(x,0.0004600732173815295)
x=c(x,0.0018201449851066064)
x=c(x,-0.007361916904027004)
x=c(x,0.00289310538691579)
x=c(x,0.0021015582705884144)
x=c(x,-0.008707270260385707)
x=c(x,0.008432710554956032)
x=c(x,0.0019265113152609216)
x=c(x,-0.002755470552673427)
x=c(x,0.00015794413207310257)
x=c(x,-0.02205258645487103)
x=c(x,-0.0016013182379204687)
x=c(x,-0.021641278047009563)
x=c(x,0.003034234516056461)
x=c(x,0.015204140638283735)
x=c(x,-0.013593217260305528)
x=c(x,0.000866202656786318)
x=c(x,-0.0010220493851599895)
x=c(x,0.003984087808351467)
x=c(x,-0.013843760012849728)
x=c(x,0.0063148567974917694)
x=c(x,-0.01661674110141279)
x=c(x,0.014271766565964102)
x=c(x,-0.005046314296215673)
x=c(x,0.006834373379311915)
x=c(x,0.015290927533424386)
x=c(x,0.0005143768392118227)
x=c(x,-0.011594267514362851)
x=c(x,-0.005638728461675976)
x=c(x,-0.012335174472010837)
x=c(x,0.004819923320255764)
x=c(x,0.004322103091775843)
x=c(x,-0.01566078179248455)
x=c(x,0.015462278630421579)
x=c(x,-0.024542159130915762)
x=c(x,0.0040225324947201525)
x=c(x,-0.011380757840214788)
x=c(x,0.0204915882718696)
x=c(x,0.02901798509988438)
x=c(x,-0.010107528724310295)
x=c(x,0.016881927449486488)
x=c(x,-0.0015415255364883227)
x=c(x,0.0066249399471777016)
x=c(x,-0.010388510954433614)
x=c(x,-0.024840854632599454)
x=c(x,-0.010761292655114114)
x=c(x,-0.014241501932208639)
x=c(x,0.024753387011508685)
x=c(x,-0.015841422709286013)
x=c(x,0.0002727998144532044)
x=c(x,-0.00785563798569551)
x=c(x,0.06250670777153657)
x=c(x,-0.015798391303059208)
x=c(x,0.04259195331420194)
x=c(x,-0.03765405359172076)
x=c(x,0.00008914936436132794)
x=c(x,0.005280922272479376)
x=c(x,-0.004682037454161595)
x=c(x,-0.02054659260998313)
x=c(x,0.003314620230239789)
x=c(x,-0.011964378880245246)
x=c(x,0.023514597214360156)
x=c(x,-0.01446425854337295)
x=c(x,-0.017675522382688214)
x=c(x,0.03253958727303628)
x=c(x,-0.06266560302901474)
x=c(x,0.01808637712833948)
x=c(x,-0.003107925890302101)
x=c(x,0.020910930787877)
x=c(x,0.012276078999045455)
x=c(x,-0.023028762525515663)
x=c(x,0.04554873938798449)
x=c(x,0.004383626624438608)
x=c(x,0.022356107723192638)
x=c(x,0.013609388677609746)
x=c(x,-0.019183982429025054)
x=c(x,0.03202213734629286)
x=c(x,-0.059392576998677726)
x=c(x,0.0064159860014194854)
x=c(x,-0.03670711449487343)
x=c(x,0.019392183678998542)
x=c(x,0.05138967156367038)
x=c(x,-0.0183843202362941)
x=c(x,-0.002247299344049509)
x=c(x,0.003995759476510976)
x=c(x,-0.014590284856755332)
x=c(x,-0.024333665580547066)
x=c(x,0.055357219352407415)
x=c(x,0.0005616092685016829)
x=c(x,-0.059408326970314326)
x=c(x,-0.03855318848674576)
x=c(x,-0.04613514251524924)
x=c(x,0.013228027575366886)
x=c(x,-0.002640766940970555)
x=c(x,0.0043368450622175425)
x=c(x,-0.02432038147687331)
x=c(x,0.010390985004886026)
x=c(x,-0.0010544921661190295)
x=c(x,0.04568671026085541)
x=c(x,0.009606320349790812)
x=c(x,-0.055702920126115954)
x=c(x,0.17663701806429685)
x=c(x,-0.12969612137705408)
x=c(x,0.00678597670921938)
x=c(x,-0.08070784211647554)
x=c(x,-0.007696369480242959)
x=c(x,0.08656925834067852)
x=c(x,-0.05028892284580196)
x=c(x,-0.04828771421340564)
x=c(x,-0.05698717754930762)
x=c(x,0.06806496704955635)
x=c(x,-0.05613765011855508)
x=c(x,-0.008129578135284489)
x=c(x,0.03428801740968973)
x=c(x,-0.06806854216626837)
x=c(x,-0.037518637877517795)
x=c(x,-0.15957778193949596)
x=c(x,-0.02520218197196911)
x=c(x,0.08134788143347256)
x=c(x,-0.01681827879226399)
x=c(x,-0.02936841811546886)
x=c(x,0.009052526726082737)
x=c(x,-0.04639255079298939)
x=c(x,-0.058352875446100884)
x=c(x,-0.0136622354986385)
x=c(x,-0.10672456487075496)
x=c(x,0.00574315896368714)
x=c(x,0.02052649093598109)
x=c(x,-0.042098507459114774)
x=c(x,0.04238649391941351)
x=c(x,-0.033009305967933174)
x=c(x,0.007593604895674542)
x=c(x,-0.010133100770359197)
x=c(x,0.050727062598380404)
x=c(x,-0.0004967655502386266)
x=c(x,0.020783069921591218)
x=c(x,0.038481317234964015)
x=c(x,-0.0103792680573183)
x=c(x,-0.05750751957497915)
x=c(x,-0.0579207259761749)
x=c(x,0.035202946279984625)
x=c(x,0.0067915041216728795)
x=c(x,-0.014549785077068033)
x=c(x,0.015013160391061379)
x=c(x,0.002530099497728874)
x=c(x,-0.0011246649417632917)
x=c(x,0.011248923732430988)
x=c(x,0.02240221882843872)
x=c(x,0.03630922679827031)
x=c(x,0.01144687124815018)
x=c(x,0.00752283593281308)
x=c(x,0.010635728906338009)
x=c(x,-0.004219951051177421)
x=c(x,0.0040132724156979)
x=c(x,0.032479554616144095)
x=c(x,0.048563629389820895)
x=c(x,0.019524044762200342)
x=c(x,-0.0026734577551090163)
x=c(x,0.02979277936393578)
x=c(x,-0.008485190589516578)
x=c(x,-0.013712548476032538)
x=c(x,0.0001297981582019318)
x=c(x,-0.0003365876572959014)
x=c(x,0.00025756626586003275)
x=c(x,-0.0010025540096143943)
x=c(x,0.0006165932133940102)
x=c(x,0.00027238319031802784)
x=c(x,-0.00012634174791024372)
x=c(x,0.002588294861877826)
x=c(x,-0.001801557697688522)
x=c(x,-0.0013745187911645789)
x=c(x,-0.001213341124255032)
x=c(x,0.00017107524430328455)
x=c(x,0.0007877523624159048)
x=c(x,0.001704619080171223)
x=c(x,0.0033450307836223213)
x=c(x,-0.0007928240502015005)
x=c(x,0.00387261075343009)
x=c(x,0.0007655666737329967)
x=c(x,-0.001881521375084508)
x=c(x,-0.005966722995112162)
x=c(x,0.006500499149991615)
x=c(x,0.00261719870373498)
x=c(x,0.003850576868189148)
x=c(x,-0.0002354934890357438)
x=c(x,-0.00008885548630324574)
x=c(x,-0.0009618748721841262)
x=c(x,0.005278226244006595)
x=c(x,0.0005932163137578899)
x=c(x,0.0019109080445455593)
x=c(x,-0.0016249735008746096)
x=c(x,0.0022887348895391534)
x=c(x,-0.005032428075478272)
x=c(x,0.002839560238210389)
x=c(x,0.003725145757205151)
x=c(x,0.00737396422842715)
x=c(x,0.0019169014915819372)
x=c(x,-0.003166425210869311)
x=c(x,-0.005402531040764026)
x=c(x,-0.0040135320327724525)
x=c(x,0.0025957880838638906)
x=c(x,0.013618593679383251)
x=c(x,-0.003449902546753385)
x=c(x,0.004045376595027983)
x=c(x,0.0012677702477183691)
x=c(x,-0.004407392918218263)
x=c(x,0.002708399515595004)
x=c(x,0.006573734234040448)
x=c(x,0.015006929861045341)
x=c(x,0.00017499004378231878)
x=c(x,-0.012181607295732559)
x=c(x,0.0027457629018569235)
x=c(x,0.00852114199179498)
x=c(x,0.0016764008064897495)
x=c(x,0.01044277355706296)
x=c(x,0.003837759170429451)
x=c(x,-0.010236653319198666)
x=c(x,0.003172664962967695)
x=c(x,-0.019510460409933785)
x=c(x,-0.006783672091491294)
x=c(x,-0.007441337127754316)
x=c(x,-0.0007943899797813451)
x=c(x,0.0071282671421527)
x=c(x,-0.0034763658343100923)
x=c(x,-0.003146602490675451)
x=c(x,-0.0015695335971598952)
x=c(x,0.014803636038889983)
x=c(x,0.005724637249085827)
x=c(x,0.0015184363052962622)
x=c(x,0.006174515614770845)
x=c(x,-0.0047950520765828505)
x=c(x,-0.0042723878373923715)
x=c(x,-0.00253839701949908)
x=c(x,0.0005680373866056606)
x=c(x,0.003522617695987217)
x=c(x,-0.01005655574883438)
x=c(x,0.004390765887566732)
x=c(x,0.00410701406939541)
x=c(x,-0.007609121909518479)
x=c(x,0.00930498698974518)
x=c(x,0.0005910878146198655)
x=c(x,-0.0029840646768308043)
x=c(x,0.00015794413207310257)
x=c(x,-0.022725925198249)
x=c(x,-0.0024335673153448372)
x=c(x,-0.022140516200366448)
x=c(x,-0.0015053561139936932)
x=c(x,0.01466908040111807)
x=c(x,-0.019322615873274235)
x=c(x,0.0011691874311575473)
x=c(x,0.0036613369800010363)
x=c(x,0.007282385942456788)
x=c(x,-0.0197407931730313)
x=c(x,0.01188496070312788)
x=c(x,-0.017790317432093035)
x=c(x,0.01342101319562508)
x=c(x,-0.004308850924206748)
x=c(x,0.0070566589726583214)
x=c(x,0.01682858590053558)
x=c(x,0.0035674794734196547)
x=c(x,-0.011689472440233181)
x=c(x,-0.00011771330296693065)
x=c(x,-0.012127135273763221)
x=c(x,0.0030733522360117966)
x=c(x,0.006784142228751577)
x=c(x,-0.015505241493924576)
x=c(x,0.0188523412715133)
x=c(x,-0.02537374147874677)
x=c(x,0.00382661092874393)
x=c(x,-0.010039346187105537)
x=c(x,0.02186403728981443)
x=c(x,0.02899837290448919)
x=c(x,-0.008164455251721228)
x=c(x,0.014033909638797009)
x=c(x,-0.0014593391010193847)
x=c(x,0.006166058694869753)
x=c(x,-0.013325403291501385)
x=c(x,-0.026759470023649184)
x=c(x,-0.009949336635018645)
x=c(x,-0.01960298984167896)
x=c(x,0.026035587026587193)
x=c(x,-0.016683288830399958)
x=c(x,0.00025963635408835623)
x=c(x,-0.003972003265650705)
x=c(x,0.06229629532880216)
x=c(x,-0.015794918206481746)
x=c(x,0.043088512580302656)
x=c(x,-0.038889162970851404)
x=c(x,0.001707221050199554)
x=c(x,0.007025914138365343)
x=c(x,-0.0032477877651792566)
x=c(x,-0.020086347700204815)
x=c(x,-0.00043460727147597136)
x=c(x,-0.011160392477151632)
x=c(x,0.02705394371036499)
x=c(x,-0.007567068873609978)
x=c(x,0.0028602002599453225)
x=c(x,0.043877604174842426)
x=c(x,-0.06445816242226705)
x=c(x,0.018272089471278768)
x=c(x,-0.011818242277648962)
x=c(x,0.02091089524018651)
x=c(x,0.0055517232896797365)
x=c(x,-0.022557812762917392)
x=c(x,0.0445976157293411)
x=c(x,-0.0013005434457886186)
x=c(x,0.020920548943791598)
x=c(x,0.013441434507270176)
x=c(x,-0.020101693577123696)
x=c(x,0.031059795801697015)
x=c(x,-0.058057751844756776)
x=c(x,0.006291101716285637)
x=c(x,-0.03917063535918961)
x=c(x,0.023126343221211407)
x=c(x,0.051569080874849176)
x=c(x,-0.017604055460318985)
x=c(x,-0.005835484655789109)
x=c(x,0.001709252447091712)
x=c(x,-0.01571016708092599)
x=c(x,-0.023358177384965494)
x=c(x,0.05386370069578855)
x=c(x,0.0029243189368829653)
x=c(x,-0.05886297216993435)
x=c(x,-0.03883705131759128)
x=c(x,-0.04587613151447014)
x=c(x,0.01565673435075072)
x=c(x,-0.00202406561881102)
x=c(x,0.0011975279851406022)
x=c(x,-0.026664399268671528)
x=c(x,0.009858704761573443)
x=c(x,0.011915909638791272)
x=c(x,0.04546436704327281)
x=c(x,0.005428683531193541)
x=c(x,-0.05442680475893719)
x=c(x,0.17664964701371486)
x=c(x,-0.12981733308815532)
x=c(x,0.006785976709219693)
x=c(x,-0.08167548329774722)
x=c(x,-0.007431880126884715)
x=c(x,0.0834640066985226)
x=c(x,-0.050288445043640446)
x=c(x,-0.048218470603400204)
x=c(x,-0.0588211314124463)
x=c(x,0.06796349834981265)
x=c(x,-0.05813118014230806)
x=c(x,-0.008427799096627225)
x=c(x,0.03463965372182243)
x=c(x,-0.06848227896424823)
x=c(x,-0.042140995715032416)
x=c(x,-0.16249613316778302)
x=c(x,-0.025112876191415553)
x=c(x,0.08135113280704967)
x=c(x,-0.01625654413744542)
x=c(x,-0.029368349978564145)
x=c(x,0.01576571769525937)
x=c(x,-0.04884400943990156)
x=c(x,-0.058930432789559443)
x=c(x,-0.007244880159302962)
x=c(x,-0.10701793335877637)
x=c(x,0.0064936936969201215)
x=c(x,0.02352289659762837)
x=c(x,-0.04522596552733792)
x=c(x,0.04197870295785983)
x=c(x,-0.0327391404796439)
x=c(x,0.007713953838978222)
x=c(x,-0.0070833122591187)
x=c(x,0.04563713240689865)
x=c(x,-0.001766267805339339)
x=c(x,0.020591149582123148)
x=c(x,0.03928534498619371)
x=c(x,-0.017286437764709985)
x=c(x,-0.058157399996732355)
x=c(x,-0.05635363766887067)
x=c(x,0.03572057421123733)
x=c(x,0.006696264429259729)
x=c(x,-0.014818012394541084)
x=c(x,0.012948328088067087)
x=c(x,0.0033506164964818915)
x=c(x,0.0008360730875389263)
x=c(x,0.01016020456511209)
x=c(x,0.024599352784742585)
x=c(x,0.0391528976862878)
x=c(x,0.012257155110100351)
x=c(x,0.010119591465882483)
x=c(x,0.011610980882510785)
x=c(x,0.0036841901737122546)
x=c(x,0.0036540749448557086)
x=c(x,0.03598347194953586)
x=c(x,0.04741826055720822)
x=c(x,0.02140019522535297)
x=c(x,0.0012208835241086897)
x=c(x,0.03044310728161257)
x=c(x,0.002619549575227865)
x=c(x,-0.01398672664248668)
x=c(x,0.00010145282824587255)
x=c(x,-0.00034719251491643866)
x=c(x,0.0002852603914671634)
x=c(x,-0.0012823936934923735)
x=c(x,0.0008438580975947607)
x=c(x,-0.0000010864062874904667)
x=c(x,-0.00011105126618877971)
x=c(x,0.003933409024784431)
x=c(x,-0.002839020882878494)
x=c(x,-0.001780594409286741)
x=c(x,-0.000928663911465805)
x=c(x,0.00024059109148313177)
x=c(x,0.0010023416647366784)
x=c(x,0.001990211059571476)
x=c(x,0.004420123612470908)
x=c(x,0.0000463608583305978)
x=c(x,0.006010217469575392)
x=c(x,0.0007834494486642714)
x=c(x,-0.004055937229520865)
x=c(x,-0.0022921882991011606)
x=c(x,0.008337304735771472)
x=c(x,0.002678033179877105)
x=c(x,0.00499089504548141)
x=c(x,-0.0009401998971760238)
x=c(x,-0.0002718222470062331)
x=c(x,-0.00018762984023833724)
x=c(x,0.0035024646446513074)
x=c(x,0.0004218441463072404)
x=c(x,0.0009685798444009505)
x=c(x,-0.0014654259081235959)
x=c(x,0.0015905578878053117)
x=c(x,-0.006267103987658506)
x=c(x,0.0038589440008652966)
x=c(x,0.0068802171065055805)
x=c(x,0.008096486346760808)
x=c(x,0.0022268298799770045)
x=c(x,-0.0018351279458555488)
x=c(x,-0.01116811226167167)
x=c(x,-0.003677041160224263)
x=c(x,0.003037395213341202)
x=c(x,0.014817473032548075)
x=c(x,-0.0033302395705895127)
x=c(x,0.0021879134394790457)
x=c(x,0.0001782833082513416)
x=c(x,-0.006422611064520919)
x=c(x,0.01574097773013174)
x=c(x,0.01057038527065232)
x=c(x,0.019453940355514527)
x=c(x,0.005965017722852883)
x=c(x,-0.017529878785257837)
x=c(x,0.00405364776958538)
x=c(x,0.008912607404213062)
x=c(x,0.002279083603403957)
x=c(x,0.010765463692354408)
x=c(x,0.0009259566927268382)
x=c(x,-0.01283652916612652)
x=c(x,0.008063244007157935)
x=c(x,-0.024728913888364235)
x=c(x,-0.007068415237554787)
x=c(x,-0.010574817934123711)
x=c(x,-0.0010241713395583664)
x=c(x,0.008379536336185999)
x=c(x,-0.0018808327294235767)
x=c(x,-0.001996406851932914)
x=c(x,-0.001308653727022533)
x=c(x,0.02177634438160919)
x=c(x,0.001896669514210864)
x=c(x,0.001630618562139601)
x=c(x,0.006027561893237229)
x=c(x,-0.003227534680996491)
x=c(x,-0.0037987794825700186)
x=c(x,-0.0021502066595400168)
x=c(x,-0.0012767823515187483)
x=c(x,0.00263183593617306)
x=c(x,-0.007813533481112935)
x=c(x,0.004137792050913007)
x=c(x,0.0015666997666781404)
x=c(x,-0.010544006777347244)
x=c(x,0.007084260535455584)
x=c(x,0.0008124257622696728)
x=c(x,-0.0033098084863308758)
x=c(x,0.00013227859746221712)
x=c(x,-0.023582183907743956)
x=c(x,-0.0028040514511547617)
x=c(x,-0.024774432954036505)
x=c(x,0.003858271531175479)
x=c(x,0.017947709909737083)
x=c(x,-0.0111248540968046)
x=c(x,-0.0019458115943755056)
x=c(x,-0.010706467847333725)
x=c(x,0.0016359061120043547)
x=c(x,-0.009189260586949527)
x=c(x,0.010429442998948782)
x=c(x,-0.013496409945540905)
x=c(x,0.014565491262670727)
x=c(x,-0.006559989345656574)
x=c(x,0.008137013330651033)
x=c(x,0.020859472737908853)
x=c(x,-0.004035098216758053)
x=c(x,-0.010715058164976664)
x=c(x,-0.004752937472813579)
x=c(x,-0.01874846391621255)
x=c(x,0.00744568123255166)
x=c(x,0.0010378324744971304)
x=c(x,-0.01710866938529098)
x=c(x,0.009790792139789032)
x=c(x,-0.025787919684874285)
x=c(x,0.004992598383613957)
x=c(x,-0.020792167367922835)
x=c(x,0.017764667911698336)
x=c(x,0.05159941821787754)
x=c(x,-0.012065694993288835)
x=c(x,0.02305512655394687)
x=c(x,-0.006675792630307644)
x=c(x,0.004810783004416672)
x=c(x,-0.010947189396015128)
x=c(x,-0.024417874542701997)
x=c(x,-0.011510460005420045)
x=c(x,-0.01642587698784195)
x=c(x,0.028507638348482762)
x=c(x,-0.01619823929362689)
x=c(x,0.00009149764398889084)
x=c(x,-0.009181136439370597)
x=c(x,0.14039068231553592)
x=c(x,-0.050099828201760885)
x=c(x,0.06305409819910898)
x=c(x,-0.05305910364857861)
x=c(x,-0.007160641295880096)
x=c(x,-0.0001589800377657077)
x=c(x,0.003204624071031771)
x=c(x,-0.024292297252906398)
x=c(x,0.002917661605604448)
x=c(x,-0.013467359092548314)
x=c(x,0.023411138836379054)
x=c(x,-0.024555185637882213)
x=c(x,-0.013623511266534764)
x=c(x,0.036705812851613936)
x=c(x,-0.08315066046896999)
x=c(x,0.03786123719314619)
x=c(x,-0.008541338237850292)
x=c(x,0.029536350043692355)
x=c(x,0.009719869078442304)
x=c(x,-0.03733201961667904)
x=c(x,0.05590106977156644)
x=c(x,0.0072178350977127265)
x=c(x,0.02912966583680091)
x=c(x,0.015266008511374596)
x=c(x,-0.028702218718628932)
x=c(x,0.04147562656532042)
x=c(x,-0.09568147018031169)
x=c(x,0.03344421351441509)
x=c(x,-0.04747622743465944)
x=c(x,0.011959131411520255)
x=c(x,0.06429156448510237)
x=c(x,-0.020488763718650212)
x=c(x,0.0038027924201567464)
x=c(x,0.013685268822991387)
x=c(x,-0.029308431718257703)
x=c(x,-0.03610289752943361)
x=c(x,0.09169969173761004)
x=c(x,-0.001619114857103262)
x=c(x,-0.07066423150362407)
x=c(x,-0.042620634594473975)
x=c(x,-0.05449749693575624)
x=c(x,0.042866264493785305)
x=c(x,-0.003393913664848491)
x=c(x,0.0033281056990969514)
x=c(x,-0.028563419659891284)
x=c(x,0.014711504760859282)
x=c(x,-0.0023622011606964015)
x=c(x,0.09219160910417122)
x=c(x,0.04478112374113131)
x=c(x,-0.09473198408440911)
x=c(x,0.44165548751709416)
x=c(x,-0.38845413637180126)
x=c(x,-0.02656385638172527)
x=c(x,-0.10306748281943007)
x=c(x,-0.044150476301271786)
x=c(x,0.20380993946193504)
x=c(x,-0.08134598010049908)
x=c(x,-0.08213195223190488)
x=c(x,-0.08156067169221021)
x=c(x,0.057405498656892706)
x=c(x,-0.07131589484573793)
x=c(x,-0.009194118817348707)
x=c(x,0.04179841649482498)
x=c(x,-0.08650709184650739)
x=c(x,-0.031731770622380535)
x=c(x,-0.28183771926540835)
x=c(x,-0.047173575497918806)
x=c(x,0.13653805206326616)
x=c(x,-0.03954627113470666)
x=c(x,-0.0403103349461809)
x=c(x,0.008520298709863112)
x=c(x,-0.057371110669516175)
x=c(x,-0.04418885599486787)
x=c(x,-0.01730376314616129)
x=c(x,-0.1602954222684211)
x=c(x,0.006862374313700727)
x=c(x,0.029147327160526287)
x=c(x,-0.07230745751771658)
x=c(x,0.0522332708158792)
x=c(x,-0.09325661026854004)
x=c(x,0.010430830384058168)
x=c(x,-0.014060815652621787)
x=c(x,0.05946098905603312)
x=c(x,-0.008460038105819913)
x=c(x,0.02360734161897426)
x=c(x,0.054182660871982695)
x=c(x,-0.009096019576788864)
x=c(x,-0.08398052936261376)
x=c(x,-0.06800199254099022)
x=c(x,0.0586392246459024)
x=c(x,0.017580734299391203)
x=c(x,-0.05990217666647827)
x=c(x,0.05213738056210221)
x=c(x,0.002341711862499858)
x=c(x,-0.0016697657191950595)
x=c(x,0.01674728204621328)
x=c(x,0.024501538649017177)
x=c(x,0.05105969687781073)
x=c(x,0.016074150620102364)
x=c(x,0.007101149855543669)
x=c(x,0.005033037955254658)
x=c(x,-0.01886450686862729)
x=c(x,0.000011411513408125366)
x=c(x,0.035988132139814014)
x=c(x,0.06061601823152335)
x=c(x,0.05609592198401997)
x=c(x,0.004061278586594166)
x=c(x,0.029699559399159952)
x=c(x,-0.01283523132026239)
x=c(x,-0.01556798732802922)
x=c(x,0.00012112522634020877)
x=c(x,-0.0003493711682710168)
x=c(x,0.00027322870105372276)
x=c(x,-0.0012481272010360514)
x=c(x,0.0008232339866635939)
x=c(x,0.000005353941766775048)
x=c(x,-0.00011905159800356811)
x=c(x,0.0036146487656396717)
x=c(x,-0.0027007780514025984)
x=c(x,-0.0015782233263243483)
x=c(x,-0.0009218287057730235)
x=c(x,0.00013662316205278202)
x=c(x,0.0009209264227474433)
x=c(x,0.001933432974834306)
x=c(x,0.004367266739993631)
x=c(x,0.00015864062874116697)
x=c(x,0.005509885530455307)
x=c(x,0.0008648373233428288)
x=c(x,-0.0038739700646461604)
x=c(x,-0.0035590763212484926)
x=c(x,0.008160092382996679)
x=c(x,0.002743429761027763)
x=c(x,0.004882846064089001)
x=c(x,-0.0004948813973124564)
x=c(x,0.00015265196145306618)
x=c(x,-0.00022625118291756959)
x=c(x,0.0035234462729258143)
x=c(x,-0.000046824107292781665)
x=c(x,0.0015421668000127349)
x=c(x,-0.0013583771939648173)
x=c(x,0.0019147292209557606)
x=c(x,-0.005970372530727236)
x=c(x,0.0037791451783409356)
x=c(x,0.00685764615993321)
x=c(x,0.008201736914619829)
x=c(x,0.0025751911526061314)
x=c(x,-0.0026196750055126066)
x=c(x,-0.009136758690805658)
x=c(x,-0.0046016950460703535)
x=c(x,0.003272347258672551)
x=c(x,0.015637983726257385)
x=c(x,-0.0035346863105793426)
x=c(x,0.003437979483925761)
x=c(x,0.0006936404976392751)
x=c(x,-0.006153984785886003)
x=c(x,0.015317935619428744)
x=c(x,0.010417077279276477)
x=c(x,0.019479433644320872)
x=c(x,0.005749123588754527)
x=c(x,-0.01731098341245406)
x=c(x,0.00397197844627072)
x=c(x,0.00901620278256332)
x=c(x,0.0017868982598750983)
x=c(x,0.010680992059941427)
x=c(x,0.0027353590659034547)
x=c(x,-0.01270757452495246)
x=c(x,0.007968851819908288)
x=c(x,-0.026001595403719643)
x=c(x,-0.006828662855631969)
x=c(x,-0.009588071742238928)
x=c(x,-0.001096698610115887)
x=c(x,0.007789256422308621)
x=c(x,-0.0026483284147386828)
x=c(x,-0.002408709203332706)
x=c(x,-0.0015385150890225878)
x=c(x,0.022017548013344455)
x=c(x,0.0037382985053589926)
x=c(x,0.001612752642659706)
x=c(x,0.005225812298743682)
x=c(x,-0.0037086393439856344)
x=c(x,-0.003792050849520179)
x=c(x,-0.002445096328748836)
x=c(x,0.00009771752124468431)
x=c(x,0.002233799353745861)
x=c(x,-0.007546179714367972)
x=c(x,0.004040663716117093)
x=c(x,0.0008454749702591905)
x=c(x,-0.010326016350534314)
x=c(x,0.007854433140172108)
x=c(x,0.0009046993862456299)
x=c(x,-0.003203169565595527)
x=c(x,0.00013892640879806034)
x=c(x,-0.023911032622082048)
x=c(x,-0.0026429373126205893)
x=c(x,-0.024770579842936194)
x=c(x,0.0023173849567056605)
x=c(x,0.017230716306168833)
x=c(x,-0.014427429990743245)
x=c(x,-0.002041213848950667)
x=c(x,-0.0024152084147486784)
x=c(x,0.001027874152831591)
x=c(x,-0.011605207634466807)
x=c(x,0.011333179365787475)
x=c(x,-0.018466531796377566)
x=c(x,0.01589992562956997)
x=c(x,-0.006345722539963426)
x=c(x,0.007826397773593778)
x=c(x,0.021781699729820587)
x=c(x,-0.0039492513526425705)
x=c(x,-0.011892091362371583)
x=c(x,-0.005695692313192082)
x=c(x,-0.017503585336191018)
x=c(x,0.005601738847230944)
x=c(x,0.003032063096728149)
x=c(x,-0.01643183803873802)
x=c(x,0.015618260741236081)
x=c(x,-0.02533695800612911)
x=c(x,0.004842380566121074)
x=c(x,-0.016683635860639784)
x=c(x,0.019049603584617443)
x=c(x,0.05172453255239737)
x=c(x,-0.011348055955415963)
x=c(x,0.022202502106173062)
x=c(x,-0.006748056148625853)
x=c(x,0.005798123921660764)
x=c(x,-0.012470634189759586)
x=c(x,-0.027103142070050757)
x=c(x,-0.010604643245742526)
x=c(x,-0.017551969387999765)
x=c(x,0.030692750914962142)
x=c(x,-0.01728111861422044)
x=c(x,-0.0014205190966559739)
x=c(x,-0.006357410855800519)
x=c(x,0.13890887706083488)
x=c(x,-0.050101524645685735)
x=c(x,0.06581507185955111)
x=c(x,-0.05284074233737621)
x=c(x,-0.0033273771123624087)
x=c(x,0.002387783848957965)
x=c(x,0.003020980188353199)
x=c(x,-0.02426335651225804)
x=c(x,0.0007190839376332817)
x=c(x,-0.01289044301020912)
x=c(x,0.02922991262986455)
x=c(x,-0.021539771367889003)
x=c(x,-0.01292695367624543)
x=c(x,0.04311030156084417)
x=c(x,-0.08939042968032439)
x=c(x,0.037587141708253384)
x=c(x,-0.008676356341118468)
x=c(x,0.029228034810094828)
x=c(x,0.0066045954708985714)
x=c(x,-0.03706762007041128)
x=c(x,0.053025550456370446)
x=c(x,0.0074614982296199155)
x=c(x,0.02868872849205503)
x=c(x,0.015173930832976351)
x=c(x,-0.02833396636509617)
x=c(x,0.04081365402259168)
x=c(x,-0.09532940574884098)
x=c(x,0.033191734492231256)
x=c(x,-0.05020189824875075)
x=c(x,0.014843314522263179)
x=c(x,0.0675086666015329)
x=c(x,-0.019608729738697126)
x=c(x,-0.000930895311969229)
x=c(x,0.012811688116577673)
x=c(x,-0.028187446492098995)
x=c(x,-0.033110358267012356)
x=c(x,0.08937032996945164)
x=c(x,-0.00114671992790532)
x=c(x,-0.06924700303672263)
x=c(x,-0.043274476825529797)
x=c(x,-0.05356428182347812)
x=c(x,0.042424780270786396)
x=c(x,-0.003261727181026575)
x=c(x,-0.0007322762236046422)
x=c(x,-0.03011883316039441)
x=c(x,0.014024881037361487)
x=c(x,0.0004735279057406653)
x=c(x,0.09364588809075822)
x=c(x,0.041005829644499954)
x=c(x,-0.09259634441467655)
x=c(x,0.44054097095425954)
x=c(x,-0.38962489193905536)
x=c(x,-0.02630852236036006)
x=c(x,-0.10422660091732727)
x=c(x,-0.044139432945604455)
x=c(x,0.19987668851726945)
x=c(x,-0.08106926698360499)
x=c(x,-0.08212015658654864)
x=c(x,-0.08119170890437154)
x=c(x,0.05611485881776637)
x=c(x,-0.07422005039437365)
x=c(x,-0.009263564609665544)
x=c(x,0.03847754666136202)
x=c(x,-0.0852876783136152)
x=c(x,-0.032422135593103106)
x=c(x,-0.2841590356436995)
x=c(x,-0.04797228644154175)
x=c(x,0.13468671183274394)
x=c(x,-0.038835235467298126)
x=c(x,-0.03827723718584344)
x=c(x,0.02009503879634579)
x=c(x,-0.05652487503460772)
x=c(x,-0.043505455090702826)
x=c(x,-0.013313910717251711)
x=c(x,-0.15760049224155273)
x=c(x,0.006224555556282328)
x=c(x,0.02938104664253545)
x=c(x,-0.07415276091600734)
x=c(x,0.05100736367436608)
x=c(x,-0.09238717785131204)
x=c(x,0.011461363562742603)
x=c(x,-0.013338888582697044)
x=c(x,0.06024700551836435)
x=c(x,-0.008265686376834796)
x=c(x,0.023221741220573886)
x=c(x,0.05484028426788948)
x=c(x,-0.014361687767608825)
x=c(x,-0.08240102758951613)
x=c(x,-0.06739055841447972)
x=c(x,0.0606909464443316)
x=c(x,0.01747680849119644)
x=c(x,-0.058427267631753994)
x=c(x,0.05156873410961161)
x=c(x,0.0022019657224547034)
x=c(x,-0.00017888861393468023)
x=c(x,0.01687369044054775)
x=c(x,0.02466637617968329)
x=c(x,0.050183394632650764)
x=c(x,0.016397093895311046)
x=c(x,0.00826388531860916)
x=c(x,0.009316451313875523)
x=c(x,-0.005734820678713948)
x=c(x,-0.0005895229828282787)
x=c(x,0.03840843310404444)
x=c(x,0.056958327358249045)
x=c(x,0.05735632177001205)
x=c(x,0.005045071006534727)
x=c(x,0.030616705942430402)
x=c(x,-0.010027570044074048)
x=c(x,-0.016209728399795953)
x=c(x,0.00013631013102794427)
x=c(x,-0.00035556792981520404)
x=c(x,0.00023920096956539573)
x=c(x,-0.0012054345080818789)
x=c(x,0.000794010341154911)
x=c(x,0.00017748271213835238)
x=c(x,-0.000069937903878315)
x=c(x,0.00338490987150268)
x=c(x,-0.0023760103033626558)
x=c(x,-0.001384016122583845)
x=c(x,-0.0011864816891481486)
x=c(x,0.00006836528115234415)
x=c(x,0.000855540636623479)
x=c(x,0.001840652467366618)
x=c(x,0.004252651446780164)
x=c(x,-0.0005677806586900081)
x=c(x,0.0050407804915943415)
x=c(x,0.000926219024086311)
x=c(x,-0.001969408612512157)
x=c(x,-0.006373002752998367)
x=c(x,0.007954155722300281)
x=c(x,0.002711840591955199)
x=c(x,0.004581908543464315)
x=c(x,-0.00021640135882722733)
x=c(x,0.00009939645056791494)
x=c(x,-0.0009781376108375067)
x=c(x,0.006140139638641092)
x=c(x,0.00043084308878853347)
x=c(x,0.002061397929461339)
x=c(x,-0.0012697078122761048)
x=c(x,0.0020485993861926277)
x=c(x,-0.005499548702339677)
x=c(x,0.0036738970829003027)
x=c(x,0.006102611488128835)
x=c(x,0.008823778130479982)
x=c(x,0.0020817001798360763)
x=c(x,-0.003328334043685166)
x=c(x,-0.006382304337712514)
x=c(x,-0.004990508263171136)
x=c(x,0.002627627852120216)
x=c(x,0.017629889548774164)
x=c(x,-0.003419680536511963)
x=c(x,0.004408486607459173)
x=c(x,0.0013630178343767934)
x=c(x,-0.006407952052326716)
x=c(x,0.003916021306346724)
x=c(x,0.010033010672829525)
x=c(x,0.018706056052308167)
x=c(x,0.004521346819651822)
x=c(x,-0.016930661662637334)
x=c(x,0.003066851382575713)
x=c(x,0.008983635858593074)
x=c(x,0.0009176717804918451)
x=c(x,0.011307280863299558)
x=c(x,0.003037891826694474)
x=c(x,-0.01046197520786698)
x=c(x,0.007870803331045732)
x=c(x,-0.02766754351586717)
x=c(x,-0.006507655342313847)
x=c(x,-0.007933911893553497)
x=c(x,-0.0007036564647134763)
x=c(x,0.007241019109280949)
x=c(x,-0.0036919856276427746)
x=c(x,-0.0030500377632292704)
x=c(x,-0.00145195676603318)
x=c(x,0.01931761032829826)
x=c(x,0.004764390771065414)
x=c(x,0.0013734157197201563)
x=c(x,0.005620839428599999)
x=c(x,-0.004124286771413338)
x=c(x,-0.0037413325883020217)
x=c(x,-0.002681806215290464)
x=c(x,0.0004601817974871878)
x=c(x,0.003892125636114709)
x=c(x,-0.01003360420025682)
x=c(x,0.005650965336260164)
x=c(x,0.0027036987868540273)
x=c(x,-0.009108323344051072)
x=c(x,0.009157216733710097)
x=c(x,-0.00012198583738769611)
x=c(x,-0.003160486445371026)
x=c(x,0.00015416975732734063)
x=c(x,-0.024117699836504462)
x=c(x,-0.0030574471431989198)
x=c(x,-0.024237465701661205)
x=c(x,-0.0019870237926562857)
x=c(x,0.016495555730207744)
x=c(x,-0.020254937590628012)
x=c(x,-0.0021602608321448238)
x=c(x,0.00309324063458671)
x=c(x,0.004915725317215618)
x=c(x,-0.018009685268415832)
x=c(x,0.01589940756830013)
x=c(x,-0.019520752529647207)
x=c(x,0.01431091414769308)
x=c(x,-0.005536421267840466)
x=c(x,0.007448911347454813)
x=c(x,0.0232946374220164)
x=c(x,-0.0014093385524315439)
x=c(x,-0.011527056738162478)
x=c(x,-0.00015584441135866288)
x=c(x,-0.016760080335054713)
x=c(x,0.0033565847984623315)
x=c(x,0.0053660888860187555)
x=c(x,-0.014881981586883164)
x=c(x,0.019825486740909504)
x=c(x,-0.025175296017105022)
x=c(x,0.00453213415715187)
x=c(x,-0.015250662606267017)
x=c(x,0.020573065836982235)
x=c(x,0.05093644601892325)
x=c(x,-0.007983342439858201)
x=c(x,0.01756943301429418)
x=c(x,-0.006857101194226869)
x=c(x,0.005607701472340212)
x=c(x,-0.015811568131604444)
x=c(x,-0.028534579778547925)
x=c(x,-0.009141405910572869)
x=c(x,-0.02260186331056734)
x=c(x,0.03098737804000633)
x=c(x,-0.017214563090655388)
x=c(x,-0.001838322490881188)
x=c(x,-0.002673408688166095)
x=c(x,0.13533830425650256)
x=c(x,-0.049981244126188144)
x=c(x,0.06605198538573992)
x=c(x,-0.052293270528763584)
x=c(x,-0.0021898806866269154)
x=c(x,0.0041191337054795754)
x=c(x,0.0023657750068512133)
x=c(x,-0.023607957109263097)
x=c(x,-0.005038505522932131)
x=c(x,-0.012007229477900729)
x=c(x,0.033965431257295495)
x=c(x,-0.013329518448707537)
x=c(x,0.0032499676026678374)
x=c(x,0.056381910558726815)
x=c(x,-0.09472908030632658)
x=c(x,0.03730847713769995)
x=c(x,-0.015147405120381758)
x=c(x,0.027901871468638623)
x=c(x,-0.002289764251372996)
x=c(x,-0.036064153703987877)
x=c(x,0.04938873200067482)
x=c(x,-0.001606050816546464)
x=c(x,0.026183220918035696)
x=c(x,0.014318622040688237)
x=c(x,-0.027687930091020024)
x=c(x,0.03901793521138209)
x=c(x,-0.09313556168599509)
x=c(x,0.03313426912093881)
x=c(x,-0.05468475595208047)
x=c(x,0.017509168673129634)
x=c(x,0.06641988644833509)
x=c(x,-0.018185977854784527)
x=c(x,-0.005512541965509788)
x=c(x,0.0101408418425992)
x=c(x,-0.026239369708178622)
x=c(x,-0.030314502311331842)
x=c(x,0.08673780193668792)
x=c(x,0.001438965137465123)
x=c(x,-0.0676801666972548)
x=c(x,-0.04400135195372781)
x=c(x,-0.05104427795585224)
x=c(x,0.0424012049190587)
x=c(x,-0.0023371929566396213)
x=c(x,-0.004191138482086553)
x=c(x,-0.031872199549962656)
x=c(x,0.013267495324582204)
x=c(x,0.01684011962570172)
x=c(x,0.09498391644063495)
x=c(x,0.037109018395776724)
x=c(x,-0.09018607617059543)
x=c(x,0.43110751509217304)
x=c(x,-0.396570321060255)
x=c(x,-0.02742119610848853)
x=c(x,-0.10415327234630628)
x=c(x,-0.04405940934935509)
x=c(x,0.188827475481054)
x=c(x,-0.08031575885705779)
x=c(x,-0.08191682329203798)
x=c(x,-0.08426037121810866)
x=c(x,0.0513438759446338)
x=c(x,-0.07906336558045417)
x=c(x,-0.009260641674941521)
x=c(x,0.038447277959167074)
x=c(x,-0.08311726151304959)
x=c(x,-0.03922878352030905)
x=c(x,-0.2884023084445919)
x=c(x,-0.048716113354254346)
x=c(x,0.13121808723512035)
x=c(x,-0.03770513531429803)
x=c(x,-0.034832790947322494)
x=c(x,0.030459225582254626)
x=c(x,-0.05578524464188764)
x=c(x,-0.03867169262572347)
x=c(x,-0.006207114279213703)
x=c(x,-0.15258687439514007)
x=c(x,0.002764523473281235)
x=c(x,0.034051807650192424)
x=c(x,-0.08071370693877997)
x=c(x,0.049294636186689327)
x=c(x,-0.09040736009476999)
x=c(x,0.012283330543052725)
x=c(x,-0.009267140928236451)
x=c(x,0.05506358271838863)
x=c(x,-0.009760633309937886)
x=c(x,0.023009642559100457)
x=c(x,0.05579253835440506)
x=c(x,-0.02082216944349396)
x=c(x,-0.08002550831473741)
x=c(x,-0.06452457065360316)
x=c(x,0.061858281663516035)
x=c(x,0.018191000003255204)
x=c(x,-0.05618051594795358)
x=c(x,0.04798716260544572)
x=c(x,0.0029044171930283696)
x=c(x,0.0018263967046368958)
x=c(x,0.01390817811137998)
x=c(x,0.02525499936580243)
x=c(x,0.050486154525853894)
x=c(x,0.016881143905715466)
x=c(x,0.010665501937834238)
x=c(x,0.01166612435272031)
x=c(x,0.003691172301042206)
x=c(x,-0.0006493101555800928)
x=c(x,0.041796083480678856)
x=c(x,0.05089307444364308)
x=c(x,0.05807930371170088)
x=c(x,0.008283443637370326)
x=c(x,0.030988010628902437)
x=c(x,0.0005435069235086156)
x=c(x,-0.016095713793610855)
x=c(x,0.00010480290765195287)
x=c(x,-0.0003463619078516093)
x=c(x,0.00029737456165895203)
x=c(x,-0.0014412082369625195)
x=c(x,0.0009778403461727038)
x=c(x,-0.00006231748776078403)
x=c(x,-0.00008875849045324668)
x=c(x,0.004524387627424217)
x=c(x,-0.0031587918277153353)
x=c(x,-0.0019325497588690312)
x=c(x,-0.0009338321936700292)
x=c(x,0.00020744287250752682)
x=c(x,0.0010617685715832105)
x=c(x,0.0020929545250359337)
x=c(x,0.005027248122628884)
x=c(x,0.0001876071486896754)
x=c(x,0.0069881764458411405)
x=c(x,0.0008061731215795766)
x=c(x,-0.0042101339388360744)
x=c(x,-0.0025005704044582413)
x=c(x,0.00939045444554204)
x=c(x,0.0028205547005423185)
x=c(x,0.0055174890050267685)
x=c(x,-0.0009256209136765395)
x=c(x,-0.00015722066022167094)
x=c(x,-0.00021618398089054457)
x=c(x,0.00412207539758689)
x=c(x,0.00035456761965134035)
x=c(x,0.0010496583947860129)
x=c(x,-0.0011452576735584382)
x=c(x,0.0014678794134439872)
x=c(x,-0.006892432318567774)
x=c(x,0.004510732446321039)
x=c(x,0.008493135793924078)
x=c(x,0.009069375079536233)
x=c(x,0.0022578268366852806)
x=c(x,-0.002027570792986631)
x=c(x,-0.012027648085052545)
x=c(x,-0.00438975702569334)
x=c(x,0.003130099381848977)
x=c(x,0.017440194846514063)
x=c(x,-0.0034735284670539173)
x=c(x,0.002455511716493876)
x=c(x,0.00022157285296863218)
x=c(x,-0.00788563755439582)
x=c(x,0.019322127578145193)
x=c(x,0.013187093024386937)
x=c(x,0.02263168043735378)
x=c(x,0.00879368732251853)
x=c(x,-0.02113245744422753)
x=c(x,0.004243916091731395)
x=c(x,0.00931838830311367)
x=c(x,0.0018242357636664383)
x=c(x,0.011452561062672851)
x=c(x,0.00008201768232354434)
x=c(x,-0.013293031482750822)
x=c(x,0.011123883132727379)
x=c(x,-0.029618467282942696)
x=c(x,-0.007314673446730835)
x=c(x,-0.011690637942550734)
x=c(x,-0.0009931332988438255)
x=c(x,0.008682549945784511)
x=c(x,-0.002093939568338699)
x=c(x,-0.0018725727037027984)
x=c(x,-0.0011201177889878463)
x=c(x,0.02466599709109437)
x=c(x,0.0014268738751630071)
x=c(x,0.0014704028256484001)
x=c(x,0.005854582568937271)
x=c(x,-0.0024956319488158634)
x=c(x,-0.0036376316076135494)
x=c(x,-0.0023987841591715537)
x=c(x,-0.0017308831180961656)
x=c(x,0.0029662033362095473)
x=c(x,-0.008076346395574462)
x=c(x,0.004806764166810193)
x=c(x,0.000977559203311234)
x=c(x,-0.011523510524589668)
x=c(x,0.0064941822866915145)
x=c(x,0.00016504561706146798)
x=c(x,-0.003632808480399857)
x=c(x,0.00011546324719990843)
x=c(x,-0.025048655278736672)
x=c(x,-0.003540012763469269)
x=c(x,-0.027204627048691886)
x=c(x,0.003286774514727754)
x=c(x,0.019544004232093896)
x=c(x,-0.011408691628968456)
x=c(x,-0.0035431859642442516)
x=c(x,-0.012120769732488566)
x=c(x,0.000059295370978984796)
x=c(x,-0.00790181551641156)
x=c(x,0.013949701993636208)
x=c(x,-0.014378699792876473)
x=c(x,0.015640631023688407)
x=c(x,-0.007474272286408298)
x=c(x,0.009067099032237683)
x=c(x,0.025013258634599307)
x=c(x,-0.006707793285672818)
x=c(x,-0.011056439427107554)
x=c(x,-0.004671075374535566)
x=c(x,-0.022554223359820467)
x=c(x,0.008174604686292799)
x=c(x,0.00018449478762533417)
x=c(x,-0.01802545202617211)
x=c(x,0.009168389865949032)
x=c(x,-0.026727185399975612)
x=c(x,0.005506843640785659)
x=c(x,-0.024310243248586418)
x=c(x,0.016951522952757266)
x=c(x,0.06640340186070309)
x=c(x,-0.013180001264670867)
x=c(x,0.027159135589333593)
x=c(x,-0.010056963129976237)
x=c(x,0.004016114013600192)
x=c(x,-0.0122861131339433)
x=c(x,-0.025818616649783327)
x=c(x,-0.011508921614541414)
x=c(x,-0.018812306699123562)
x=c(x,0.03201464254989915)
x=c(x,-0.017226331832251415)
x=c(x,-0.0007934696695107345)
x=c(x,-0.008357417699933494)
x=c(x,0.19108177128188716)
x=c(x,-0.0725731826207698)
x=c(x,0.07810537205324054)
x=c(x,-0.06362788898843945)
x=c(x,-0.00905875874937304)
x=c(x,-0.002377615133248161)
x=c(x,0.00872072953438692)
x=c(x,-0.026695457735963213)
x=c(x,0.0019451541592232298)
x=c(x,-0.013878372540826375)
x=c(x,0.026273485720833847)
x=c(x,-0.029515818127574363)
x=c(x,-0.010862799328840513)
x=c(x,0.04309974378309606)
x=c(x,-0.09861104868073103)
x=c(x,0.0508278427202455)
x=c(x,-0.012135347777968049)
x=c(x,0.035187449179715634)
x=c(x,0.006606774837589307)
x=c(x,-0.04658413502296405)
x=c(x,0.06195304976255506)
x=c(x,0.0090747303043407)
x=c(x,0.033518609288040416)
x=c(x,0.016350251520858883)
x=c(x,-0.03493830456354173)
x=c(x,0.047532284486127646)
x=c(x,-0.11899013556591019)
x=c(x,0.051152138130313565)
x=c(x,-0.05571683813391426)
x=c(x,0.009148750027573855)
x=c(x,0.07518160210059266)
x=c(x,-0.021560754918141252)
x=c(x,0.005198667339489541)
x=c(x,0.019688095937823485)
x=c(x,-0.03932054411844236)
x=c(x,-0.04275240761189525)
x=c(x,0.11549236475468067)
x=c(x,-0.0027594226753377285)
x=c(x,-0.07760685195714295)
x=c(x,-0.04726862651793782)
x=c(x,-0.05985377887534165)
x=c(x,0.062059342897603134)
x=c(x,-0.0037853238134534883)
x=c(x,0.0006533621022005173)
x=c(x,-0.03265881414014807)
x=c(x,0.017157286637858087)
x=c(x,-0.0016393995585561255)
x=c(x,0.12250196522613656)
x=c(x,0.06510094237132275)
x=c(x,-0.12004264219990995)
x=c(x,0.6152989039460848)
x=c(x,-0.5580058428979332)
x=c(x,-0.04841374702751645)
x=c(x,-0.11843121878092297)
x=c(x,-0.06773423823608057)
x=c(x,0.280100358750306)
x=c(x,-0.10169365720801175)
x=c(x,-0.10430517342444993)
x=c(x,-0.09725702377523117)
x=c(x,0.050401339794338286)
x=c(x,-0.0822273562989336)
x=c(x,-0.010108946247175059)
x=c(x,0.04598281238232894)
x=c(x,-0.09871292132197747)
x=c(x,-0.028423393245597853)
x=c(x,-0.3630793216853194)
x=c(x,-0.06186541172132055)
x=c(x,0.1726971295534395)
x=c(x,-0.054392447791542134)
x=c(x,-0.04744635132549194)
x=c(x,0.013926959447911192)
x=c(x,-0.06490529858996945)
x=c(x,-0.03488834587956335)
x=c(x,-0.0175142156943541)
x=c(x,-0.19544908507502198)
x=c(x,0.00783497436396922)
x=c(x,0.034915424664525685)
x=c(x,-0.09290085907064954)
x=c(x,0.058758282437910925)
x=c(x,-0.13271391268828123)
x=c(x,0.012494698128618321)
x=c(x,-0.016476941426249853)
x=c(x,0.06603428355940442)
x=c(x,-0.013685223074887039)
x=c(x,0.025218973725072202)
x=c(x,0.06476631498097674)
x=c(x,-0.01180208487366534)
x=c(x,-0.10125730401631332)
x=c(x,-0.07484327815886532)
x=c(x,0.07460653721257712)
x=c(x,0.024649471507962678)
x=c(x,-0.08931617447270804)
x=c(x,0.0763217547977822)
x=c(x,0.002175525445594642)
x=c(x,-0.001379437055593566)
x=c(x,0.02071671840790998)
x=c(x,0.02689800341434628)
x=c(x,0.060810104999370396)
x=c(x,0.01938600593184483)
x=c(x,0.007652856460480309)
x=c(x,0.0036144056365804995)
x=c(x,-0.021324218797453005)
x=c(x,-0.0035357828075911124)
x=c(x,0.03981581060136208)
x=c(x,0.06764359740507649)
x=c(x,0.0811703614054574)
x=c(x,0.009259795913349059)
x=c(x,0.030294938076137548)
x=c(x,-0.013830265988423025)
x=c(x,-0.01706212521075634)
x=c(x,0.00012510183434260365)
x=c(x,-0.00035602300322878894)
x=c(x,0.00027586216044064063)
x=c(x,-0.0013981270664550954)
x=c(x,0.0009542691808267133)
x=c(x,-0.00005506426356074907)
x=c(x,-0.0000855578956221942)
x=c(x,0.004167226063334705)
x=c(x,-0.00302017843489756)
x=c(x,-0.0016728123432613916)
x=c(x,-0.0009159884265347492)
x=c(x,0.00008512370206653745)
x=c(x,0.0009760297992029191)
x=c(x,0.0020313743885072622)
x=c(x,0.004969933961524013)
x=c(x,0.00029649506945403896)
x=c(x,0.006393966519892428)
x=c(x,0.0009245483049671785)
x=c(x,-0.0039775477389939)
x=c(x,-0.003798378029771493)
x=c(x,0.009142707242222584)
x=c(x,0.0028658838098825773)
x=c(x,0.0053861263190147415)
x=c(x,-0.00048018894510818246)
x=c(x,0.0002651442337047892)
x=c(x,-0.0002520548215963204)
x=c(x,0.004147001797606944)
x=c(x,-0.00011304037824355603)
x=c(x,0.0016451119236318343)
x=c(x,-0.0010638942052637013)
x=c(x,0.0017860962847583628)
x=c(x,-0.00648956926337196)
x=c(x,0.004396326418512178)
x=c(x,0.008476913921918666)
x=c(x,0.00916949451923712)
x=c(x,0.0026317982309908817)
x=c(x,-0.0027744759397262484)
x=c(x,-0.009887876881229588)
x=c(x,-0.005307621249960028)
x=c(x,0.003328552874682647)
x=c(x,0.018211439990056765)
x=c(x,-0.0036537168207337193)
x=c(x,0.003707140402567587)
x=c(x,0.0007584237034170714)
x=c(x,-0.0075661510012342125)
x=c(x,0.01815293315580085)
x=c(x,0.012933341873077686)
x=c(x,0.022517042089830703)
x=c(x,0.008581993656215635)
x=c(x,-0.020747659530598525)
x=c(x,0.004114645803345469)
x=c(x,0.009393577792728381)
x=c(x,0.0013253345748603452)
x=c(x,0.011213566417772828)
x=c(x,0.002122443198442044)
x=c(x,-0.012972519185269107)
x=c(x,0.011018272801635195)
x=c(x,-0.031205326078614287)
x=c(x,-0.0069217762093215255)
x=c(x,-0.010483692532710687)
x=c(x,-0.0010411121523891647)
x=c(x,0.007973157083609062)
x=c(x,-0.002809643525043863)
x=c(x,-0.0023088658961562436)
x=c(x,-0.0013904902821463305)
x=c(x,0.02492429598427612)
x=c(x,0.0032508929127258606)
x=c(x,0.0015150898393238676)
x=c(x,0.004923348444484292)
x=c(x,-0.0030222482965425036)
x=c(x,-0.003526814307678043)
x=c(x,-0.002622553730371398)
x=c(x,-0.00013968793484503764)
x=c(x,0.0025048142849232783)
x=c(x,-0.00766690362459134)
x=c(x,0.004792512276628306)
x=c(x,0.000022523842457238713)
x=c(x,-0.011386574133735112)
x=c(x,0.007475561730486145)
x=c(x,0.0002352363982701102)
x=c(x,-0.0034964896085445)
x=c(x,0.0001264665211351094)
x=c(x,-0.025128635283358233)
x=c(x,-0.0033253773960448857)
x=c(x,-0.02682081205406056)
x=c(x,0.0018477249005792258)
x=c(x,0.018558472778231496)
x=c(x,-0.014973983158961118)
x=c(x,-0.0039460729389162496)
x=c(x,-0.0033279677789619286)
x=c(x,-0.0009089554835434811)
x=c(x,-0.010138569869319351)
x=c(x,0.0146210458760501)
x=c(x,-0.01967846363100961)
x=c(x,0.01696665053331178)
x=c(x,-0.00719705897552233)
x=c(x,0.00847634479053711)
x=c(x,0.02603427461711468)
x=c(x,-0.0068736974093748125)
x=c(x,-0.012087217331756571)
x=c(x,-0.0057330134572887975)
x=c(x,-0.020889785557550458)
x=c(x,0.006113962813180122)
x=c(x,0.002186864479283074)
x=c(x,-0.016937012820766185)
x=c(x,0.015720455917287005)
x=c(x,-0.025857688303682694)
x=c(x,0.005379522406004453)
x=c(x,-0.02015793525333208)
x=c(x,0.018104854996417726)
x=c(x,0.06660123605576791)
x=c(x,-0.012160815175795602)
x=c(x,0.025688395846760713)
x=c(x,-0.010159231377267703)
x=c(x,0.005256416870460108)
x=c(x,-0.013834783895662783)
x=c(x,-0.028585330391139595)
x=c(x,-0.010502010874085215)
x=c(x,-0.019720896341793952)
x=c(x,0.03458405829998347)
x=c(x,-0.018224367655384353)
x=c(x,-0.0025299349349688868)
x=c(x,-0.005375813770696913)
x=c(x,0.18896547073313377)
x=c(x,-0.07257599131844107)
x=c(x,0.08103021849271083)
x=c(x,-0.06279064186039181)
x=c(x,-0.005565791010905598)
x=c(x,0.000492279364581913)
x=c(x,0.008067784850690471)
x=c(x,-0.026698477689610606)
x=c(x,-0.0009814398402813605)
x=c(x,-0.01349717468156479)
x=c(x,0.032974429626229526)
x=c(x,-0.026175452183951228)
x=c(x,-0.009815822454782923)
x=c(x,0.05003594195630449)
x=c(x,-0.10689979886566521)
x=c(x,0.05036350470888667)
x=c(x,-0.012324638360618794)
x=c(x,0.03467717192809959)
x=c(x,0.002888795917974699)
x=c(x,-0.04626549225499801)
x=c(x,0.057924150811519845)
x=c(x,0.00947803479853178)
x=c(x,0.03283768692682698)
x=c(x,0.01619897569338895)
x=c(x,-0.03432878342666001)
x=c(x,0.04657361322430468)
x=c(x,-0.11887422458515484)
x=c(x,0.05073446626207339)
x=c(x,-0.05904330829439453)
x=c(x,0.011863020936815898)
x=c(x,0.07806938748840833)
x=c(x,-0.020410929067857773)
x=c(x,-0.00006842370474422322)
x=c(x,0.018587641363517916)
x=c(x,-0.03709593170146208)
x=c(x,-0.0388606051995241)
x=c(x,0.11165478175303227)
x=c(x,-0.00226597009106848)
x=c(x,-0.07569303218367973)
x=c(x,-0.04636773470266425)
x=c(x,-0.058431648956455626)
x=c(x,0.06155368720916463)
x=c(x,-0.003668563200373721)
x=c(x,-0.004053424652246738)
x=c(x,-0.03391781874614971)
x=c(x,0.016405709472431675)
x=c(x,0.0014746445045453463)
x=c(x,0.1250674183931083)
x=c(x,0.06157792194103343)
x=c(x,-0.11676789825890602)
x=c(x,0.6134435607787178)
x=c(x,-0.5599230519624353)
x=c(x,-0.04799112519905006)
x=c(x,-0.11963544289029913)
x=c(x,-0.06801592280222069)
x=c(x,0.27411259104676006)
x=c(x,-0.10123569934975174)
x=c(x,-0.10428623952067688)
x=c(x,-0.09704985013699972)
x=c(x,0.04828547756245567)
x=c(x,-0.08606714023025472)
x=c(x,-0.010006521265294442)
x=c(x,0.04122241065383698)
x=c(x,-0.09656918130670442)
x=c(x,-0.029083047889521027)
x=c(x,-0.3657812363464534)
x=c(x,-0.06289063074919275)
x=c(x,0.16963284209433552)
x=c(x,-0.053260138116458355)
x=c(x,-0.04411404968022691)
x=c(x,0.027329788083759552)
x=c(x,-0.0631632943653232)
x=c(x,-0.03377783485785595)
x=c(x,-0.01308569792944675)
x=c(x,-0.19093299638104091)
x=c(x,0.0065399533238445886)
x=c(x,0.035182307277864276)
x=c(x,-0.0951538235256955)
x=c(x,0.05665551972071424)
x=c(x,-0.131289921499043)
x=c(x,0.013995412344614908)
x=c(x,-0.015439232321814949)
x=c(x,0.06648420950042286)
x=c(x,-0.01335566898736335)
x=c(x,0.0248194913819762)
x=c(x,0.06555822818601331)
x=c(x,-0.016970859301937063)
x=c(x,-0.09871056732317829)
x=c(x,-0.07359493139130015)
x=c(x,0.07738998103476596)
x=c(x,0.024477525147090902)
x=c(x,-0.08717458378827249)
x=c(x,0.07551893758038603)
x=c(x,0.0019869815248610605)
x=c(x,0.00044075794567724496)
x=c(x,0.020558882421727757)
x=c(x,0.026149789616705662)
x=c(x,0.05927336666207232)
x=c(x,0.019640343215864667)
x=c(x,0.008749400433441287)
x=c(x,0.00845209702915866)
x=c(x,-0.00672732146916912)
x=c(x,-0.003605147554276235)
x=c(x,0.04229287073404827)
x=c(x,0.06245830188928795)
x=c(x,0.0821429860165092)
x=c(x,0.01010203812623245)
x=c(x,0.03115651990765117)
x=c(x,-0.011038094514301449)
x=c(x,-0.017845811798123723)
x=c(x,0.0001405765959829171)
x=c(x,-0.0003680032807761254)
x=c(x,0.0002271685340620101)
x=c(x,-0.001338356213974368)
x=c(x,0.0009102491489982575)
x=c(x,0.00011530653677925699)
x=c(x,-0.000032983661236704706)
x=c(x,0.003906830050222413)
x=c(x,-0.002752375803631917)
x=c(x,-0.0013902385121343929)
x=c(x,-0.0011688841282160396)
x=c(x,0.000001072546674137987)
x=c(x,0.0008999536438629163)
x=c(x,0.0019297777900118898)
x=c(x,0.004847299467469804)
x=c(x,-0.0004203384366652162)
x=c(x,0.0058061330786674595)
x=c(x,0.0010314740122488169)
x=c(x,-0.0020269899059992347)
x=c(x,-0.006639186042647957)
x=c(x,0.00890655140760595)
x=c(x,0.0027738473463063814)
x=c(x,0.005061056882437706)
x=c(x,-0.0002038927217940524)
x=c(x,0.00022273392644903264)
x=c(x,-0.0009887925085759284)
x=c(x,0.00670484151788436)
x=c(x,0.00032446063105000776)
x=c(x,0.0021599947506130775)
x=c(x,-0.0010369475335391483)
x=c(x,0.0018912692288276388)
x=c(x,-0.005805593250973002)
x=c(x,0.004220531567352327)
x=c(x,0.007660261449768488)
x=c(x,0.009773656204238706)
x=c(x,0.0021896717342094656)
x=c(x,-0.0034344122444955718)
x=c(x,-0.007024224773644278)
x=c(x,-0.00563059613825993)
x=c(x,0.002648488389943341)
x=c(x,0.02025797994596131)
x=c(x,-0.0033998799091124127)
x=c(x,0.004646386270776175)
x=c(x,0.0014254214256357244)
x=c(x,-0.007718663209156395)
x=c(x,0.004707221789942691)
x=c(x,0.012299433167208607)
x=c(x,0.021129621487963095)
x=c(x,0.007368959879704252)
x=c(x,-0.020042111075437033)
x=c(x,0.0032772196975293937)
x=c(x,0.009286649081667719)
x=c(x,0.0004205734531139402)
x=c(x,0.011873682201868355)
x=c(x,0.0025138408083853537)
x=c(x,-0.010609599893546219)
x=c(x,0.010948893985993392)
x=c(x,-0.03301183934389247)
x=c(x,-0.0063268167825079515)
x=c(x,-0.008256633291835765)
x=c(x,-0.0006442103686344783)
x=c(x,0.0073148910877442975)
x=c(x,-0.0038332537681021158)
x=c(x,-0.0029867712176611092)
x=c(x,-0.0013749236697777594)
x=c(x,0.02227504175928986)
x=c(x,0.004135263768224473)
x=c(x,0.0012784022326185575)
x=c(x,0.005258086065246686)
x=c(x,-0.0036848198473367383)
x=c(x,-0.0033933998388979594)
x=c(x,-0.0027757639642572267)
x=c(x,0.0003895177908233608)
x=c(x,0.004134217045163772)
x=c(x,-0.010018566978775012)
x=c(x,0.006476613250921416)
x=c(x,0.0017842853258786529)
x=c(x,-0.010090558766675901)
x=c(x,0.009060401738376758)
x=c(x,-0.0005891720231857559)
x=c(x,-0.003276073121311196)
x=c(x,0.00015169689111460116)
x=c(x,-0.025029552185706277)
x=c(x,-0.00346619599593094)
x=c(x,-0.02561132916802675)
x=c(x,-0.0023025991683317797)
x=c(x,0.01769221198030097)
x=c(x,-0.02086576906061836)
x=c(x,-0.004341623487411857)
x=c(x,0.0027210395806945412)
x=c(x,0.003365154562747296)
x=c(x,-0.016875511124012643)
x=c(x,0.018529562410999137)
x=c(x,-0.02065448586942414)
x=c(x,0.01489395270249623)
x=c(x,-0.006340691492979785)
x=c(x,0.007705904282666357)
x=c(x,0.02753101600505552)
x=c(x,-0.004670012431437538)
x=c(x,-0.011420646450598912)
x=c(x,-0.00018082686168422853)
x=c(x,-0.019795458133831823)
x=c(x,0.003542150960067931)
x=c(x,0.004437019454573064)
x=c(x,-0.014473638889166467)
x=c(x,0.020463064807065653)
x=c(x,-0.025045280024994957)
x=c(x,0.004994373513694981)
x=c(x,-0.018664973363648654)
x=c(x,0.019727256954092255)
x=c(x,0.06530966633527663)
x=c(x,-0.007864682321741099)
x=c(x,0.019885810398240583)
x=c(x,-0.010393566013914562)
x=c(x,0.005241881223096777)
x=c(x,-0.01744043475098225)
x=c(x,-0.0296975827214127)
x=c(x,-0.008612071987660112)
x=c(x,-0.02456664247983902)
x=c(x,0.034231654910867104)
x=c(x,-0.01756263933013313)
x=c(x,-0.003212847251378561)
x=c(x,-0.001822605344296836)
x=c(x,0.1831934135539614)
x=c(x,-0.07237918179771989)
x=c(x,0.08109701929275054)
x=c(x,-0.061075272032223286)
x=c(x,-0.004743154238340829)
x=c(x,0.00221469135289925)
x=c(x,0.006043626478181493)
x=c(x,-0.025915218446232256)
x=c(x,-0.008054852653196505)
x=c(x,-0.012562053719770818)
x=c(x,0.03849364723631889)
x=c(x,-0.017104916446185305)
x=c(x,0.0035053324134171043)
x=c(x,0.06457438715506485)
x=c(x,-0.1145617506441586)
x=c(x,0.04978059319501036)
x=c(x,-0.017328580775965333)
x=c(x,0.03248216623900383)
x=c(x,-0.007427290571373044)
x=c(x,-0.04491313569986165)
x=c(x,0.052527739212927985)
x=c(x,-0.001806210818077458)
x=c(x,0.02963117841840254)
x=c(x,0.014893331114306976)
x=c(x,-0.03265822297943485)
x=c(x,0.04423188861772748)
x=c(x,-0.11611757503025469)
x=c(x,0.05072117190329781)
x=c(x,-0.06484917978880207)
x=c(x,0.013828950865765757)
x=c(x,0.07614972458268798)
x=c(x,-0.01856723735460674)
x=c(x,-0.005300958823602635)
x=c(x,0.01566498661896611)
x=c(x,-0.03313781280879237)
x=c(x,-0.03487209450446842)
x=c(x,0.10827600619796679)
x=c(x,0.0004658023033637313)
x=c(x,-0.07345694931860264)
x=c(x,-0.04738485926705856)
x=c(x,-0.05443030493468873)
x=c(x,0.059923444256915745)
x=c(x,-0.0025423453503894155)
x=c(x,-0.007721644098545663)
x=c(x,-0.035284206630808536)
x=c(x,0.01550084086586384)
x=c(x,0.02006632616884989)
x=c(x,0.1274277591492515)
x=c(x,0.05776834933890027)
x=c(x,-0.11361456433685443)
x=c(x,0.5978212907297835)
x=c(x,-0.5713395200764583)
x=c(x,-0.04983279209250433)
x=c(x,-0.11888009965398283)
x=c(x,-0.06805675608131848)
x=c(x,0.2578587136489194)
x=c(x,-0.09998882652791741)
x=c(x,-0.10399505436390415)
x=c(x,-0.10092745936664603)
x=c(x,0.04045515781710277)
x=c(x,-0.0927775560399292)
x=c(x,-0.00980629715728544)
x=c(x,0.04094192832156528)
x=c(x,-0.09270569835536767)
x=c(x,-0.03732078242721437)
x=c(x,-0.37089256121215636)
x=c(x,-0.06418030321956252)
x=c(x,0.16388954013627027)
x=c(x,-0.051757660568097864)
x=c(x,-0.03841294192685383)
x=c(x,0.04008600661166528)
x=c(x,-0.06033295046387856)
x=c(x,-0.02539872493217594)
x=c(x,-0.005527198702603297)
x=c(x,-0.18244238748792999)
x=c(x,0.0003212740164142808)
x=c(x,0.040950059719113543)
x=c(x,-0.10396429613937991)
x=c(x,0.05408783381937063)
x=c(x,-0.1281899867391631)
x=c(x,0.015277060107791193)
x=c(x,-0.01069792522869285)
x=c(x,0.06123953292246831)
x=c(x,-0.014998321054329826)
x=c(x,0.024594172440568485)
x=c(x,0.06660759607840565)
x=c(x,-0.023138683302007555)
x=c(x,-0.094352889626534)
x=c(x,-0.0698779405401521)
x=c(x,0.07898298654604342)
x=c(x,0.025722033655183118)
x=c(x,-0.08328008724156884)
x=c(x,0.07094364039269374)
x=c(x,0.0026120797183518253)
x=c(x,0.0024752294192872974)
x=c(x,0.016363746986520974)
x=c(x,0.025684560918910575)
x=c(x,0.0579113917655695)
x=c(x,0.019910653806290764)
x=c(x,0.0110231674194578)
x=c(x,0.011702252833202227)
x=c(x,0.0036957467982584188)
x=c(x,-0.003468769359313878)
x=c(x,0.045604346207979485)
x=c(x,0.05316967664510028)
x=c(x,0.08211044375448026)
x=c(x,0.01291063819433483)
x=c(x,0.031345016270230175)
x=c(x,-0.0008166589517557278)
x=c(x,-0.01747746399607153)
x=c(x,0.00006164418015489497)
x=c(x,-0.0002610266458582848)
x=c(x,0.00025390080707570135)
x=c(x,-0.0010297442445933102)
x=c(x,0.0010393082259372867)
x=c(x,-0.00022045400477355015)
x=c(x,-0.000058003075514927495)
x=c(x,0.002820892565400698)
x=c(x,-0.0027871367462154826)
x=c(x,-0.001567708411872882)
x=c(x,-0.0011389863991524273)
x=c(x,0.00025064020741259047)
x=c(x,0.0016132393748766933)
x=c(x,0.001959138746545551)
x=c(x,0.0034360571680687947)
x=c(x,-0.0006606038092143876)
x=c(x,0.005189372610857662)
x=c(x,0.00007454735345362642)
x=c(x,-0.0032324739078914925)
x=c(x,-0.0012155017840440013)
x=c(x,0.006816811775454207)
x=c(x,0.0034743317100202602)
x=c(x,0.005008363822408501)
x=c(x,-0.0010950860106718845)
x=c(x,-0.0002672516315808896)
x=c(x,-0.0005139966223954136)
x=c(x,0.002425987370735716)
x=c(x,-0.0001149893167145616)
x=c(x,0.0018869128022482424)
x=c(x,-0.002767089507974952)
x=c(x,0.0016871639170794866)
x=c(x,-0.0037592121992416332)
x=c(x,0.002085121310954552)
x=c(x,0.004867412692037781)
x=c(x,0.006083732259383789)
x=c(x,0.000199273985864651)
x=c(x,-0.0011871993308259392)
x=c(x,-0.007187961724277153)
x=c(x,-0.002561287319574988)
x=c(x,0.0017319867902615676)
x=c(x,0.011177657970914584)
x=c(x,-0.0025755779850144757)
x=c(x,0.0015069571628302876)
x=c(x,0.0005324720883331301)
x=c(x,-0.004257915928303456)
x=c(x,0.006588421358762985)
x=c(x,0.010417171469420962)
x=c(x,0.01563517877912444)
x=c(x,0.005599802123334313)
x=c(x,-0.009912804124046649)
x=c(x,0.004091541007532971)
x=c(x,0.007395125090195863)
x=c(x,0.0017497690750469376)
x=c(x,0.005785493613060724)
x=c(x,0.0023392984678811774)
x=c(x,-0.014575924976372015)
x=c(x,0.0047016017474856165)
x=c(x,-0.02044725926972186)
x=c(x,-0.006100520836528688)
x=c(x,-0.006979006851489038)
x=c(x,-0.0010259554500888402)
x=c(x,0.00938896329089364)
x=c(x,-0.002367884103723321)
x=c(x,-0.0029039160294853767)
x=c(x,-0.0018425180920223281)
x=c(x,0.015136449093539507)
x=c(x,0.0001897422144731934)
x=c(x,0.00092937849881097)
x=c(x,0.004310160667972764)
x=c(x,-0.0016729554810683835)
x=c(x,-0.003012722902186936)
x=c(x,-0.0011614195919309484)
x=c(x,-0.000029721057776397245)
x=c(x,0.0013051601322865245)
x=c(x,-0.009462680835968646)
x=c(x,0.0022109113074985968)
x=c(x,0.004537973777534292)
x=c(x,-0.0098330371717643)
x=c(x,0.0066693463383110056)
x=c(x,-0.001629771108488733)
x=c(x,-0.004723040758703249)
x=c(x,0.00009640862365505004)
x=c(x,-0.012294084608461167)
x=c(x,-0.001368367896562092)
x=c(x,-0.01625152059141245)
x=c(x,0.0034858655636036116)
x=c(x,0.02201892203980433)
x=c(x,-0.007125047057056518)
x=c(x,-0.0014473863187876386)
x=c(x,-0.009997434380061098)
x=c(x,0.007843762282718094)
x=c(x,-0.02177068918797177)
x=c(x,0.0037073269828408937)
x=c(x,-0.014386896317215176)
x=c(x,0.008478409331961959)
x=c(x,-0.006388033400262606)
x=c(x,0.004346404849799768)
x=c(x,0.009059249015437303)
x=c(x,0.002082262490454999)
x=c(x,-0.009484026420291974)
x=c(x,-0.004682455336350359)
x=c(x,-0.00781893718024412)
x=c(x,0.005230849374933848)
x=c(x,0.004514572339705087)
x=c(x,-0.01500763453031153)
x=c(x,0.006659739561826987)
x=c(x,-0.021209432387887667)
x=c(x,0.004067639308661018)
x=c(x,-0.014915096781575609)
x=c(x,0.02142192664918621)
x=c(x,0.02513153919757359)
x=c(x,-0.013083148689799705)
x=c(x,0.004056753592099899)
x=c(x,0.002698951094190204)
x=c(x,0.008519715058477442)
x=c(x,-0.015570976709319432)
x=c(x,-0.02628662174576752)
x=c(x,-0.010393618981640634)
x=c(x,-0.015426391088216777)
x=c(x,0.016479835145865228)
x=c(x,-0.011446467580702727)
x=c(x,-0.0016862241524506132)
x=c(x,-0.02102796000197526)
x=c(x,0.07899768564839893)
x=c(x,-0.017667123373151242)
x=c(x,0.04403955717040042)
x=c(x,-0.035541745564285514)
x=c(x,-0.003099909062105114)
x=c(x,-0.002740436627636573)
x=c(x,-0.013229162809968534)
x=c(x,-0.017491558948479653)
x=c(x,0.004075656752123309)
x=c(x,-0.015579638904252345)
x=c(x,0.016294127835334585)
x=c(x,-0.0263773246774442)
x=c(x,-0.016994817494552623)
x=c(x,0.026495552247385704)
x=c(x,-0.06578629627633303)
x=c(x,0.03537243950601311)
x=c(x,-0.00903930372379427)
x=c(x,0.020114610298839205)
x=c(x,0.01852272261925958)
x=c(x,-0.024201221369753)
x=c(x,0.0318251966292446)
x=c(x,-0.007104055960748452)
x=c(x,0.02237691106715056)
x=c(x,0.0028104991028982296)
x=c(x,-0.014915324210693694)
x=c(x,0.03846451071423653)
x=c(x,-0.05126188919441376)
x=c(x,0.007988691845115916)
x=c(x,-0.032246606021958925)
x=c(x,0.0023816899951199315)
x=c(x,0.056293501403349995)
x=c(x,-0.02307119295420291)
x=c(x,-0.00047092650607221895)
x=c(x,0.0045825621660815176)
x=c(x,-0.012462112969991638)
x=c(x,-0.016370665481478423)
x=c(x,0.05965931799338287)
x=c(x,-0.004153407327409846)
x=c(x,-0.05724015044050055)
x=c(x,-0.02614119631417116)
x=c(x,-0.052245798793661535)
x=c(x,0.029220287117753256)
x=c(x,-0.006508702164030517)
x=c(x,0.010054721623727078)
x=c(x,-0.03511522194133121)
x=c(x,0.021789793729830597)
x=c(x,-0.00003179506803238125)
x=c(x,0.03269312343791113)
x=c(x,0.014013935603086539)
x=c(x,-0.08174781807403336)
x=c(x,0.16836808603372966)
x=c(x,-0.1424035894123897)
x=c(x,0.002303235270452892)
x=c(x,-0.08693193642488974)
x=c(x,-0.03694228236643285)
x=c(x,0.08060506130891697)
x=c(x,-0.048794953637831345)
x=c(x,-0.04891726890889293)
x=c(x,-0.05125722762474467)
x=c(x,0.07256325112021117)
x=c(x,-0.052977660668804855)
x=c(x,-0.007016871684218628)
x=c(x,0.03077985488476026)
x=c(x,-0.058282928011629806)
x=c(x,-0.04083483964091709)
x=c(x,-0.18904115517759254)
x=c(x,-0.00836223655149032)
x=c(x,0.08415810815606828)
x=c(x,-0.02987242171473884)
x=c(x,-0.02255190788383576)
x=c(x,0.0005590126730967529)
x=c(x,-0.02453439278343617)
x=c(x,-0.029615083865866854)
x=c(x,-0.030811824751197616)
x=c(x,-0.10935107165470241)
x=c(x,0.009972533988197082)
x=c(x,0.013284299450676763)
x=c(x,-0.03955143144680547)
x=c(x,0.023870969529103597)
x=c(x,-0.04237124778111192)
x=c(x,0.006592624091739245)
x=c(x,-0.008061127371563405)
x=c(x,0.03617086424002495)
x=c(x,-0.004713469126317722)
x=c(x,0.035033840266198504)
x=c(x,0.03329991828929248)
x=c(x,-0.000730584933264549)
x=c(x,-0.054004290043835)
x=c(x,-0.047258159019736595)
x=c(x,0.029227628099904555)
x=c(x,0.01757377456255229)
x=c(x,-0.03208792091086918)
x=c(x,0.01899332995206989)
x=c(x,-0.002874467340582447)
x=c(x,-0.008412402568469455)
x=c(x,0.005107991523480954)
x=c(x,0.021505225037205984)
x=c(x,0.03670199529559555)
x=c(x,0.007772364221402045)
x=c(x,0.004621426911966508)
x=c(x,0.0035474294778918367)
x=c(x,-0.017021399191085758)
x=c(x,0.01033935184187451)
x=c(x,0.02249458438419655)
x=c(x,0.04086858966946556)
x=c(x,0.00835931452847211)
x=c(x,-0.010835900165828251)
x=c(x,0.02152885606735071)
x=c(x,-0.011748306520123672)
x=c(x,-0.011056018451231608)
x=c(x,0.00007793141396571724)
x=c(x,-0.00024079583036376405)
x=c(x,0.0002552877671116187)
x=c(x,-0.0010222639372257489)
x=c(x,0.00103735160670983)
x=c(x,-0.0001757416036022461)
x=c(x,-0.00008232991999806981)
x=c(x,0.00262295822148661)
x=c(x,-0.002735414438837547)
x=c(x,-0.0014893756618231204)
x=c(x,-0.0011148606690782182)
x=c(x,0.00019921457679292735)
x=c(x,0.001543163605278095)
x=c(x,0.0020041063833952963)
x=c(x,0.0035041818313239813)
x=c(x,-0.0005621735844062989)
x=c(x,0.005031257090969576)
x=c(x,0.0001489377583769975)
x=c(x,-0.0031195647411563984)
x=c(x,-0.0034652723004873444)
x=c(x,0.006857528669766533)
x=c(x,0.0035612226682074444)
x=c(x,0.004998042639345588)
x=c(x,-0.0008453683296474597)
x=c(x,0.000030637559256637716)
x=c(x,-0.0006353174483208602)
x=c(x,0.0024584848592434437)
x=c(x,0.00007911532965974147)
x=c(x,0.002195741947663463)
x=c(x,-0.0028265895224322563)
x=c(x,0.0015629720731407)
x=c(x,-0.003610049713786079)
x=c(x,0.0020856625377396907)
x=c(x,0.004920791573335973)
x=c(x,0.006310823334709328)
x=c(x,-0.00001743224028000384)
x=c(x,-0.001769978637864381)
x=c(x,-0.0057941640481280615)
x=c(x,-0.0029601657350959943)
x=c(x,0.001943415582765737)
x=c(x,0.011558090226255629)
x=c(x,-0.0027462891949269013)
x=c(x,0.002353671807888451)
x=c(x,0.0009246669085044946)
x=c(x,-0.004235949258756092)
x=c(x,0.007113431922829578)
x=c(x,0.0104171714586295)
x=c(x,0.01586755104636145)
x=c(x,0.005429151587703727)
x=c(x,-0.00997829121738921)
x=c(x,0.004082472262209013)
x=c(x,0.007630608340736106)
x=c(x,0.001308834451652613)
x=c(x,0.006009110142772833)
x=c(x,0.0033443233676073787)
x=c(x,-0.014283136316405718)
x=c(x,0.004550851910206023)
x=c(x,-0.019664341474441356)
x=c(x,-0.0062780273994879066)
x=c(x,-0.006548824660694629)
x=c(x,-0.000905668694757248)
x=c(x,0.009357294686808383)
x=c(x,-0.002928707200168719)
x=c(x,-0.0030563203256425706)
x=c(x,-0.0021932907399361255)
x=c(x,0.015777440141109194)
x=c(x,0.0015676855644217755)
x=c(x,0.0010199624139501811)
x=c(x,0.003700737502761236)
x=c(x,-0.0024506997905076357)
x=c(x,-0.0030974779640694783)
x=c(x,-0.001481496379117373)
x=c(x,0.0006919928047925541)
x=c(x,0.0011082916522607178)
x=c(x,-0.009406010488898506)
x=c(x,0.0018805742861698078)
x=c(x,0.004288029410115385)
x=c(x,-0.010203901596773719)
x=c(x,0.006544222427984968)
x=c(x,-0.0012839164356459494)
x=c(x,-0.004605001600075055)
x=c(x,0.00009640862365505004)
x=c(x,-0.01298439666531464)
x=c(x,-0.0015350976646005823)
x=c(x,-0.016865684003305927)
x=c(x,0.0019677186077898924)
x=c(x,0.02188819308330731)
x=c(x,-0.009504808330945464)
x=c(x,-0.0016049523359717226)
x=c(x,-0.005041812684973336)
x=c(x,0.008203425016819501)
x=c(x,-0.02213939669006336)
x=c(x,0.004579268717965911)
x=c(x,-0.01432153839103169)
x=c(x,0.009740731639999563)
x=c(x,-0.006633908871365651)
x=c(x,0.00452684430550046)
x=c(x,0.009322611979820409)
x=c(x,0.002939206394885248)
x=c(x,-0.009445329928614897)
x=c(x,-0.004945263526956219)
x=c(x,-0.008246912118009712)
x=c(x,0.004091921019411425)
x=c(x,0.00661586939820222)
x=c(x,-0.014938754722579835)
x=c(x,0.00907083095676413)
x=c(x,-0.021420443606978732)
x=c(x,0.003918333244305677)
x=c(x,-0.012444277928135662)
x=c(x,0.022705654586898563)
x=c(x,0.02541703755959033)
x=c(x,-0.012897084168772855)
x=c(x,0.0042696133521498356)
x=c(x,0.002629944174858094)
x=c(x,0.006856737543204742)
x=c(x,-0.01642793656150499)
x=c(x,-0.026507615503907678)
x=c(x,-0.010402844989688584)
x=c(x,-0.01666754573804687)
x=c(x,0.017975391133975508)
x=c(x,-0.012761543927045609)
x=c(x,-0.002658571036671906)
x=c(x,-0.01826901852749603)
x=c(x,0.07857621484342057)
x=c(x,-0.01766712527929669)
x=c(x,0.04601793457587362)
x=c(x,-0.036154521828206596)
x=c(x,-0.0007274710477342025)
x=c(x,-0.0010161032952952823)
x=c(x,-0.013308062881705897)
x=c(x,-0.018199831403708285)
x=c(x,0.003106922487322675)
x=c(x,-0.0156997308240567)
x=c(x,0.019593887403169523)
x=c(x,-0.023498537871594505)
x=c(x,-0.01676736528790392)
x=c(x,0.03438581761463569)
x=c(x,-0.06367603615346547)
x=c(x,0.03536907140519308)
x=c(x,-0.009232529202231912)
x=c(x,0.02011467760112456)
x=c(x,0.01737621304263739)
x=c(x,-0.02424490791666406)
x=c(x,0.031008810211280893)
x=c(x,-0.007104055960748452)
x=c(x,0.022260360016585663)
x=c(x,0.00279837957475635)
x=c(x,-0.014915324210693694)
x=c(x,0.0384540630267882)
x=c(x,-0.051480380636434314)
x=c(x,0.007995157940350725)
x=c(x,-0.032438803287157085)
x=c(x,0.004531007047553692)
x=c(x,0.05621964393593693)
x=c(x,-0.022797969748450005)
x=c(x,-0.0037106316493485786)
x=c(x,0.004210070675905494)
x=c(x,-0.01297645593608607)
x=c(x,-0.013163039615844897)
x=c(x,0.059748823864104975)
x=c(x,-0.003765878032495284)
x=c(x,-0.05677954527441858)
x=c(x,-0.02820287246584799)
x=c(x,-0.05226575429479541)
x=c(x,0.028720886829739396)
x=c(x,-0.006361815474605394)
x=c(x,0.008263541719654021)
x=c(x,-0.03716511027587307)
x=c(x,0.020979770868048035)
x=c(x,0.0016566836312306725)
x=c(x,0.03341200433151141)
x=c(x,0.011728177382924632)
x=c(x,-0.08156479016066698)
x=c(x,0.1683798804080832)
x=c(x,-0.1426564137772565)
x=c(x,0.002303235270452892)
x=c(x,-0.08682098280141703)
x=c(x,-0.036695378051641366)
x=c(x,0.07958851746927673)
x=c(x,-0.04879476981493051)
x=c(x,-0.048916338881181555)
x=c(x,-0.050849672082673776)
x=c(x,0.07254468895381685)
x=c(x,-0.054371526180924536)
x=c(x,-0.0074173059662976685)
x=c(x,0.02889244535965656)
x=c(x,-0.05835463219608113)
x=c(x,-0.0414474043769073)
x=c(x,-0.187726604354797)
x=c(x,-0.009069284861320508)
x=c(x,0.08415810939708288)
x=c(x,-0.02962150938602111)
x=c(x,-0.022560704771316886)
x=c(x,0.011871173766033888)
x=c(x,-0.025072035300784414)
x=c(x,-0.029510079584947682)
x=c(x,-0.02867158342968434)
x=c(x,-0.1094263450542187)
x=c(x,0.009874790310761168)
x=c(x,0.013414226858594978)
x=c(x,-0.04074599667373802)
x=c(x,0.024052927565157173)
x=c(x,-0.04237405617224412)
x=c(x,0.007577376848297327)
x=c(x,-0.007667412206557029)
x=c(x,0.03760518779354382)
x=c(x,-0.004724105510900515)
x=c(x,0.03510389007447402)
x=c(x,0.033844428584720296)
x=c(x,-0.004088567414834205)
x=c(x,-0.054559378172101394)
x=c(x,-0.047649764128382927)
x=c(x,0.03045049629713807)
x=c(x,0.017573769504827436)
x=c(x,-0.031499948301578144)
x=c(x,0.01894375622501602)
x=c(x,-0.0030832634001374893)
x=c(x,-0.0076199969821629816)
x=c(x,0.0057867338354504454)
x=c(x,0.022237240974306776)
x=c(x,0.03680915153349577)
x=c(x,0.008048948273150348)
x=c(x,0.00570280686196065)
x=c(x,0.0062533247058876255)
x=c(x,-0.009696333756135513)
x=c(x,0.010444265893945221)
x=c(x,0.024855878341656125)
x=c(x,0.03972606527402584)
x=c(x,0.009766657598433686)
x=c(x,-0.010471045724145912)
x=c(x,0.023029006774953533)
x=c(x,-0.009596116378428096)
x=c(x,-0.011999124410705608)
x=c(x,0.00009404394777724729)
x=c(x,-0.00023835673023193976)
x=c(x,0.00024793088510724845)
x=c(x,-0.0010128156716496851)
x=c(x,0.0010294524623608054)
x=c(x,-0.00016903015706916952)
x=c(x,-0.00001920921389715571)
x=c(x,0.002619962791314829)
x=c(x,-0.002579738513448695)
x=c(x,-0.0014467246512633784)
x=c(x,-0.0013159542477384186)
x=c(x,0.00018261192549831593)
x=c(x,0.0014917036646337181)
x=c(x,0.0020328191923279144)
x=c(x,0.0035796132859361425)
x=c(x,-0.001039255078960866)
x=c(x,0.004939716043103214)
x=c(x,0.00022823578117666835)
x=c(x,-0.0016751229010218123)
x=c(x,-0.0061104184052538976)
x=c(x,0.00702158898235728)
x=c(x,0.003643554655067419)
x=c(x,0.0049864998720886315)
x=c(x,-0.0007000641519938689)
x=c(x,0.000001732098385315261)
x=c(x,-0.0013243265617355851)
x=c(x,0.004503445380375704)
x=c(x,0.0007952049512965525)
x=c(x,0.0025336626815913085)
x=c(x,-0.002891728866445455)
x=c(x,0.00150408320433068)
x=c(x,-0.0036464265141279437)
x=c(x,0.0020742352798355777)
x=c(x,0.00455512893573227)
x=c(x,0.007082240119072092)
x=c(x,-0.0005963461993498536)
x=c(x,-0.002298998775008266)
x=c(x,-0.004212794533973437)
x=c(x,-0.003166335857646614)
x=c(x,0.0016289643830460128)
x=c(x,0.01108949440223555)
x=c(x,-0.002817074130367743)
x=c(x,0.00305692605727185)
x=c(x,0.0013680347015870662)
x=c(x,-0.0045197886971908435)
x=c(x,0.0016586920428961788)
x=c(x,0.010414345219648116)
x=c(x,0.015930969592135816)
x=c(x,0.004145743291321706)
x=c(x,-0.010118028590341032)
x=c(x,0.003458124456794377)
x=c(x,0.00796256851856686)
x=c(x,0.0006010156492232679)
x=c(x,0.007040340833480145)
x=c(x,0.003633319999185653)
x=c(x,-0.011426460291849032)
x=c(x,0.004251591042392347)
x=c(x,-0.018763523760114257)
x=c(x,-0.0063475739305040935)
x=c(x,-0.006524842208946063)
x=c(x,-0.0005026720117853694)
x=c(x,0.009417869497671186)
x=c(x,-0.003583760567794798)
x=c(x,-0.0031032435366664616)
x=c(x,-0.002084020013672541)
x=c(x,0.015009271856736952)
x=c(x,0.002619245125228178)
x=c(x,0.0011272153361144353)
x=c(x,0.004071899168848836)
x=c(x,-0.0033125275467751794)
x=c(x,-0.003140354728472371)
x=c(x,-0.0017785156443057251)
x=c(x,0.0008318993861207303)
x=c(x,0.002367415332925149)
x=c(x,-0.008972784184342634)
x=c(x,0.0026639396250937373)
x=c(x,0.00418575775291513)
x=c(x,-0.010504278375165875)
x=c(x,0.007339870652653206)
x=c(x,-0.0030136627264048216)
x=c(x,-0.004511185357526132)
x=c(x,0.00009640862365505004)
x=c(x,-0.013749609079940628)
x=c(x,-0.0024304284131262278)
x=c(x,-0.017558948468550137)
x=c(x,-0.0011066630722960508)
x=c(x,0.021727787237391927)
x=c(x,-0.01423674460977386)
x=c(x,-0.002786088412342896)
x=c(x,-0.0014714469993571803)
x=c(x,0.009055948528576859)
x=c(x,-0.020601301676763745)
x=c(x,0.00865115678656811)
x=c(x,-0.012979096703222448)
x=c(x,0.01010789481028649)
x=c(x,-0.006269064090497118)
x=c(x,0.00469536702080416)
x=c(x,0.010521621996049512)
x=c(x,0.003916776079273435)
x=c(x,-0.008942868022282247)
x=c(x,-0.0011516694210059826)
x=c(x,-0.008881395581964035)
x=c(x,0.0033800052978073163)
x=c(x,0.00907598148251797)
x=c(x,-0.014792718646397331)
x=c(x,0.011082612677329056)
x=c(x,-0.022727315059782163)
x=c(x,0.003739605510785089)
x=c(x,-0.011712563573125537)
x=c(x,0.024222787138213943)
x=c(x,0.025600135560101)
x=c(x,-0.011403114407707264)
x=c(x,0.0029970599096231267)
x=c(x,0.002507289098043367)
x=c(x,0.0055380531634686946)
x=c(x,-0.019358516161185727)
x=c(x,-0.02653611081189085)
x=c(x,-0.010149028365676924)
x=c(x,-0.019510093186046417)
x=c(x,0.018959745046914184)
x=c(x,-0.013846780118480789)
x=c(x,-0.003093731334141683)
x=c(x,-0.015764749509129487)
x=c(x,0.07838988990536858)
x=c(x,-0.01767257226350464)
x=c(x,0.04666139229810803)
x=c(x,-0.037079941495537595)
x=c(x,-0.00018343892205941828)
x=c(x,0.0004326416582656406)
x=c(x,-0.013835075803044668)
x=c(x,-0.018837490579730973)
x=c(x,-0.00024650059746513355)
x=c(x,-0.015781750610799873)
x=c(x,0.022525257503726918)
x=c(x,-0.017550705322225645)
x=c(x,0.008025375409014464)
x=c(x,0.03524712715916703)
x=c(x,-0.060125824954613945)
x=c(x,0.035329534229248366)
x=c(x,-0.015298517001305365)
x=c(x,0.020114719261516336)
x=c(x,0.013354342670649917)
x=c(x,-0.024269220384656707)
x=c(x,0.030734132588527543)
x=c(x,-0.011576055476546209)
x=c(x,0.021142391127463613)
x=c(x,0.0024442957381027933)
x=c(x,-0.015963497729629256)
x=c(x,0.038491477811578655)
x=c(x,-0.051653065688265276)
x=c(x,0.008010558571397316)
x=c(x,-0.031257398612576044)
x=c(x,0.007593367681451431)
x=c(x,0.05458262440275194)
x=c(x,-0.02270537920708087)
x=c(x,-0.0066488970049292835)
x=c(x,-0.00042996255007341297)
x=c(x,-0.013901384219914777)
x=c(x,-0.013370614026062932)
x=c(x,0.06023045725662372)
x=c(x,-0.002201861840519425)
x=c(x,-0.05632995604205591)
x=c(x,-0.029309127896359005)
x=c(x,-0.05228591398509285)
x=c(x,0.029598985847112597)
x=c(x,-0.005817352448498031)
x=c(x,0.006586236816277503)
x=c(x,-0.03979805175582564)
x=c(x,0.02020446828906376)
x=c(x,0.01024479347030742)
x=c(x,0.03425696961340055)
x=c(x,0.009237395145154367)
x=c(x,-0.08093744422059848)
x=c(x,0.16844122104820275)
x=c(x,-0.14427834688682256)
x=c(x,0.0023032352704533098)
x=c(x,-0.08723659681301457)
x=c(x,-0.036446956505424545)
x=c(x,0.07606193256625912)
x=c(x,-0.048793965529234457)
x=c(x,-0.048875085495856)
x=c(x,-0.05227158660429323)
x=c(x,0.07247462693684843)
x=c(x,-0.057223939788501925)
x=c(x,-0.007787011860470719)
x=c(x,0.029292321872637545)
x=c(x,-0.0584718136632998)
x=c(x,-0.04498191076772421)
x=c(x,-0.18077377364241654)
x=c(x,-0.009720668344922637)
x=c(x,0.08417287666375368)
x=c(x,-0.028713030957276744)
x=c(x,-0.022560651850008648)
x=c(x,0.019422888637111654)
x=c(x,-0.027535295027859664)
x=c(x,-0.0296805857108446)
x=c(x,-0.02475074643599698)
x=c(x,-0.1087298290700804)
x=c(x,0.00905686384533262)
x=c(x,0.015606647645626179)
x=c(x,-0.0446258367054666)
x=c(x,0.022906701848940305)
x=c(x,-0.0424788339423939)
x=c(x,0.008197100261419689)
x=c(x,-0.005258161762002509)
x=c(x,0.03277239596011677)
x=c(x,-0.005882782734585152)
x=c(x,0.03551321838720783)
x=c(x,0.03464429434997316)
x=c(x,-0.008779466836979994)
x=c(x,-0.055809067888755275)
x=c(x,-0.046941609662600706)
x=c(x,0.0317401749444682)
x=c(x,0.017564618583623078)
x=c(x,-0.030401300303414282)
x=c(x,0.017822881481521093)
x=c(x,-0.0026188700547844293)
x=c(x,-0.006835542859519544)
x=c(x,0.00388415348580658)
x=c(x,0.022890532389473223)
x=c(x,0.03784480429364855)
x=c(x,0.00869638575613134)
x=c(x,0.007550526133929029)
x=c(x,0.007571031205934749)
x=c(x,-0.004540810397983874)
x=c(x,0.010333631032639666)
x=c(x,0.028248136801359056)
x=c(x,0.038718900591043215)
x=c(x,0.011473810621205711)
x=c(x,-0.008864063639235226)
x=c(x,0.024711074073213553)
x=c(x,-0.0024692139543758176)
x=c(x,-0.012676574975610366)
x=c(x,0.0000651617995509758)
x=c(x,-0.0002592771748573792)
x=c(x,0.00028160280192145984)
x=c(x,-0.0012652204009088188)
x=c(x,0.0013754581939008387)
x=c(x,-0.0004458726492361079)
x=c(x,0.00001043347379179879)
x=c(x,0.004118687713962214)
x=c(x,-0.0033617043719037717)
x=c(x,-0.0017924336264920648)
x=c(x,-0.0011409864998512742)
x=c(x,0.0001688491714936185)
x=c(x,0.00176864739863416)
x=c(x,0.002139153424746842)
x=c(x,0.004404413718932875)
x=c(x,-0.0006591392781667621)
x=c(x,0.006654370373015408)
x=c(x,0.000039934627931062853)
x=c(x,-0.00342685775641468)
x=c(x,-0.0014284061114467907)
x=c(x,0.008500021108821396)
x=c(x,0.003753454630792849)
x=c(x,0.005924137299616559)
x=c(x,-0.0010974347860617031)
x=c(x,-0.00014881704489581098)
x=c(x,-0.000565547789823099)
x=c(x,0.003254985296964173)
x=c(x,-0.00014335267241094481)
x=c(x,0.002144219499138884)
x=c(x,-0.0023666946069482997)
x=c(x,0.0013980652822562975)
x=c(x,-0.00446955505256014)
x=c(x,0.0030380585032781285)
x=c(x,0.00839543416489376)
x=c(x,0.0074825463106330346)
x=c(x,-0.00013767727279333922)
x=c(x,-0.0014020834316207744)
x=c(x,-0.00822974328377992)
x=c(x,-0.0034726447480784577)
x=c(x,0.0018040381408604641)
x=c(x,0.014901262476332309)
x=c(x,-0.002751828892016246)
x=c(x,0.001847153918012664)
x=c(x,0.0006246295080216401)
x=c(x,-0.006140086512580453)
x=c(x,0.0101444340888342)
x=c(x,0.01309006683512308)
x=c(x,0.019936155213910175)
x=c(x,0.011677913417244161)
x=c(x,-0.013931858646646882)
x=c(x,0.004949495627319143)
x=c(x,0.00815293984912255)
x=c(x,-0.00008006437458723138)
x=c(x,0.006084979731919147)
x=c(x,0.0011748815038962505)
x=c(x,-0.015537342149174425)
x=c(x,0.008757316884895349)
x=c(x,-0.030993008495239546)
x=c(x,-0.006870544401281547)
x=c(x,-0.008436863943930265)
x=c(x,-0.00099160891160047)
x=c(x,0.00991047026042599)
x=c(x,-0.002770371276441136)
x=c(x,-0.0026988269031746107)
x=c(x,-0.0016092879368570516)
x=c(x,0.019175010119796308)
x=c(x,-0.0010963711826888671)
x=c(x,0.00042387437668559594)
x=c(x,0.004023488876558093)
x=c(x,-0.00002927172092986899)
x=c(x,-0.002754491634874464)
x=c(x,-0.001429734958481394)
x=c(x,-0.00047807327828485564)
x=c(x,0.0016063279012197566)
x=c(x,-0.009834075285008037)
x=c(x,0.002990438696402459)
x=c(x,0.0041996096107845575)
x=c(x,-0.010767760737543023)
x=c(x,0.005937009632084436)
x=c(x,-0.003088750306799997)
x=c(x,-0.005649038420352058)
x=c(x,0.00007828691441687687)
x=c(x,-0.010982378625001383)
x=c(x,-0.00274135462286893)
x=c(x,-0.019210643995621345)
x=c(x,0.002760945013284922)
x=c(x,0.025641202875741023)
x=c(x,-0.0072922480001194655)
x=c(x,-0.004328401812990308)
x=c(x,-0.015142000905302494)
x=c(x,0.005325056787724688)
x=c(x,-0.019233658831842096)
x=c(x,0.007501032015832446)
x=c(x,-0.015541757856625862)
x=c(x,0.009782119349453288)
x=c(x,-0.008061114158012517)
x=c(x,0.005305977279887763)
x=c(x,0.012607796999972488)
x=c(x,-0.000725707710139835)
x=c(x,-0.009852088673860851)
x=c(x,-0.004564524888822589)
x=c(x,-0.01301431558282051)
x=c(x,0.005734242077884384)
x=c(x,0.0015865132708376567)
x=c(x,-0.01604741166682203)
x=c(x,0.004967273101026435)
x=c(x,-0.022647296020585104)
x=c(x,0.004962664292460327)
x=c(x,-0.02029184234246501)
x=c(x,0.022749504940167916)
x=c(x,0.04412735731066498)
x=c(x,-0.01512901457092779)
x=c(x,0.007833449415541786)
x=c(x,-0.0016908007903007234)
x=c(x,0.0073350817322907136)
x=c(x,-0.020507614718438764)
x=c(x,-0.028344338593990426)
x=c(x,-0.010523137530032497)
x=c(x,-0.0198176895549754)
x=c(x,0.019887508777245228)
x=c(x,-0.012665823676983667)
x=c(x,-0.0038500541354828405)
x=c(x,-0.020830303846238685)
x=c(x,0.16085552496420435)
x=c(x,-0.04957002061066222)
x=c(x,0.06815745386187495)
x=c(x,-0.04995199562886783)
x=c(x,-0.005050052771696266)
x=c(x,-0.007903934534540248)
x=c(x,-0.005490967322227442)
x=c(x,-0.02091180496545832)
x=c(x,0.0038225300019139106)
x=c(x,-0.016438729832064847)
x=c(x,0.0192428059567719)
x=c(x,-0.03850790847461077)
x=c(x,-0.01383075281241383)
x=c(x,0.030992257698151934)
x=c(x,-0.0927108677908773)
x=c(x,0.07365307658697136)
x=c(x,-0.015284761545886432)
x=c(x,0.02875206050941458)
x=c(x,0.014954753744666548)
x=c(x,-0.03879445605610571)
x=c(x,0.03222372999652347)
x=c(x,-0.013717185724133277)
x=c(x,0.030591014585936382)
x=c(x,0.0007243345512951881)
x=c(x,-0.02241123790059793)
x=c(x,0.052587209025281)
x=c(x,-0.08464495470976417)
x=c(x,0.0511368800792916)
x=c(x,-0.0447890330887283)
x=c(x,-0.0038837007808454204)
x=c(x,0.07785194858835565)
x=c(x,-0.0250454514553587)
x=c(x,0.0012373133901065227)
x=c(x,0.013035151266032994)
x=c(x,-0.02521129025867632)
x=c(x,-0.022507857541840533)
x=c(x,0.08878492348474697)
x=c(x,-0.00669309980214687)
x=c(x,-0.0719192737890146)
x=c(x,-0.031102239234512476)
x=c(x,-0.05960312046583804)
x=c(x,0.06835229139439251)
x=c(x,-0.009703327513830438)
x=c(x,0.00722327255961207)
x=c(x,-0.045683138416563775)
x=c(x,0.029178528650509714)
x=c(x,0.00276769609403659)
x=c(x,0.054085175933395534)
x=c(x,0.0420821024703002)
x=c(x,-0.14265103817799213)
x=c(x,0.4172780740849175)
x=c(x,-0.401201529063321)
x=c(x,-0.05431571122214059)
x=c(x,-0.10825318703652584)
x=c(x,-0.08155181131906268)
x=c(x,0.17652841854146395)
x=c(x,-0.09760063681220832)
x=c(x,-0.10405669025044399)
x=c(x,-0.07788702869212749)
x=c(x,0.06338025115003129)
x=c(x,-0.07398488746201876)
x=c(x,-0.008382645444939238)
x=c(x,0.0357666556995091)
x=c(x,-0.07570582013469183)
x=c(x,-0.041990074089123516)
x=c(x,-0.35118352128972785)
x=c(x,-0.023003248711070193)
x=c(x,0.13721657040433644)
x=c(x,-0.058663477874621936)
x=c(x,-0.03147010558739651)
x=c(x,0.006663244812205118)
x=c(x,-0.029429951444050258)
x=c(x,0.007884636507904365)
x=c(x,-0.03300802315313671)
x=c(x,-0.1774921440140617)
x=c(x,-0.00024595806512031887)
x=c(x,0.018986367522714445)
x=c(x,-0.0700096445240347)
x=c(x,0.026541331898200977)
x=c(x,-0.1277471764425586)
x=c(x,0.0081672502500306)
x=c(x,-0.011874196547510775)
x=c(x,0.043800065120723486)
x=c(x,-0.01328846698334938)
x=c(x,0.041321686991659945)
x=c(x,0.04642097584179851)
x=c(x,-0.002849574105655835)
x=c(x,-0.07818733428229832)
x=c(x,-0.05575387939988112)
x=c(x,0.05028694982951107)
x=c(x,0.0300160958543527)
x=c(x,-0.09146550515542466)
x=c(x,0.05262168852685353)
x=c(x,-0.004978115854258128)
x=c(x,-0.00931829815645635)
x=c(x,0.008824447200074588)
x=c(x,0.02547145482480858)
x=c(x,0.04514012928288575)
x=c(x,0.013054535847141484)
x=c(x,0.005279273968533448)
x=c(x,0.0015606909980667352)
x=c(x,-0.021637664748350074)
x=c(x,0.005601792934372676)
x=c(x,0.026793251953459656)
x=c(x,0.048876525181330954)
x=c(x,0.033388097271369724)
x=c(x,-0.004835481876395059)
x=c(x,0.02230953052441087)
x=c(x,-0.01414017825993622)
x=c(x,-0.012951487425691077)
x=c(x,0.00008233603349875026)
x=c(x,-0.000246992637658589)
x=c(x,0.00026951025841719914)
x=c(x,-0.001255508670033341)
x=c(x,0.0013734186135679392)
x=c(x,-0.00039258266131095634)
x=c(x,0.000004075222670470177)
x=c(x,0.0038923409249502472)
x=c(x,-0.0033156796390896347)
x=c(x,-0.0016317230788354137)
x=c(x,-0.0010951998375460918)
x=c(x,0.00008713196409240658)
x=c(x,0.0016913375228492758)
x=c(x,0.002188916763770598)
x=c(x,0.004491869558060246)
x=c(x,-0.0005511634706360208)
x=c(x,0.006346503228811282)
x=c(x,0.0002047918328846031)
x=c(x,-0.0032485087500209666)
x=c(x,-0.003755488997273478)
x=c(x,0.008471181050770157)
x=c(x,0.0038023138540522294)
x=c(x,0.00589074037281054)
x=c(x,-0.0008526136225954901)
x=c(x,0.0001489268585727483)
x=c(x,-0.000679620918344208)
x=c(x,0.0032752286267861575)
x=c(x,0.000008524974703007481)
x=c(x,0.002447839407920692)
x=c(x,-0.0024991436243293483)
x=c(x,0.001238096931335507)
x=c(x,-0.0042302973224096685)
x=c(x,0.0030235783609861536)
x=c(x,0.008474782811012301)
x=c(x,0.007740546709522093)
x=c(x,-0.00032467076603286707)
x=c(x,-0.0019434388863482338)
x=c(x,-0.00671544948172491)
x=c(x,-0.0038135356923115686)
x=c(x,0.0019781429429638247)
x=c(x,0.015060260026166679)
x=c(x,-0.0028871563336605776)
x=c(x,0.0026800444773691684)
x=c(x,0.0010487143027389466)
x=c(x,-0.006126117932909898)
x=c(x,0.009922690894910368)
x=c(x,0.012953148227571477)
x=c(x,0.019897863901280365)
x=c(x,0.011331591569642812)
x=c(x,-0.013777220453391057)
x=c(x,0.004870994319726327)
x=c(x,0.008366317340978554)
x=c(x,-0.0005472337701259447)
x=c(x,0.006172256366474798)
x=c(x,0.002380118724316262)
x=c(x,-0.014936807415347171)
x=c(x,0.008600511591843234)
x=c(x,-0.030346760380348926)
x=c(x,-0.006699482000419072)
x=c(x,-0.007748610921744761)
x=c(x,-0.0008459503903181847)
x=c(x,0.009702093339637136)
x=c(x,-0.0032631883474302324)
x=c(x,-0.0028786104678541063)
x=c(x,-0.0020749887671777808)
x=c(x,0.0199442113399069)
x=c(x,0.00020597770403284093)
x=c(x,0.0006578944707096603)
x=c(x,0.0032600645493142577)
x=c(x,-0.0009264343543714975)
x=c(x,-0.0027076715846235254)
x=c(x,-0.0016710238750757803)
x=c(x,0.0004703422678137806)
x=c(x,0.0013501058768737991)
x=c(x,-0.00952106252882634)
x=c(x,0.002783092064705732)
x=c(x,0.0035636495474064118)
x=c(x,-0.01130578146027524)
x=c(x,0.006041394530989364)
x=c(x,-0.002727348518249456)
x=c(x,-0.005463108965509496)
x=c(x,0.00008254135824220894)
x=c(x,-0.011614556963789628)
x=c(x,-0.0028335033123586557)
x=c(x,-0.019355405347426254)
x=c(x,0.0013562079993348288)
x=c(x,0.024922062688335824)
x=c(x,-0.009998536898620557)
x=c(x,-0.00506557792557244)
x=c(x,-0.009578127102003)
x=c(x,0.0048537382971786105)
x=c(x,-0.01959393750485271)
x=c(x,0.00814620836275918)
x=c(x,-0.015860479183398227)
x=c(x,0.011104469377901594)
x=c(x,-0.008182020577799686)
x=c(x,0.005084517695795978)
x=c(x,0.013122973460022646)
x=c(x,-0.0003796564525697662)
x=c(x,-0.009641167732789004)
x=c(x,-0.004953683657752922)
x=c(x,-0.012983011729170008)
x=c(x,0.0044023697641630815)
x=c(x,0.003723196580839904)
x=c(x,-0.015357915461732936)
x=c(x,0.00827284152230621)
x=c(x,-0.022325771105714175)
x=c(x,0.004816039411784613)
x=c(x,-0.017733954552535815)
x=c(x,0.023826261397602216)
x=c(x,0.04475940765317179)
x=c(x,-0.014507724710132286)
x=c(x,0.007619600708578351)
x=c(x,-0.0019807075877607927)
x=c(x,0.006136012507490331)
x=c(x,-0.02098523980034556)
x=c(x,-0.02865186695360719)
x=c(x,-0.010403905224258608)
x=c(x,-0.02059387519570462)
x=c(x,0.021806748373524754)
x=c(x,-0.013878826176158586)
x=c(x,-0.00495572816591523)
x=c(x,-0.01729117233825068)
x=c(x,0.15937090793613146)
x=c(x,-0.04962131200830129)
x=c(x,0.070175158027303)
x=c(x,-0.04961667006712667)
x=c(x,-0.0031473762685664338)
x=c(x,-0.005717699241734764)
x=c(x,-0.00631398309086127)
x=c(x,-0.021623762645407562)
x=c(x,0.002074758541918693)
x=c(x,-0.016958384596355455)
x=c(x,0.02349081702087253)
x=c(x,-0.03494173672203437)
x=c(x,-0.013127947636410488)
x=c(x,0.04027628630808633)
x=c(x,-0.09078502231226213)
x=c(x,0.0731490051149914)
x=c(x,-0.015742544301537348)
x=c(x,0.028460366279547306)
x=c(x,0.012870851864937456)
x=c(x,-0.03895144678136768)
x=c(x,0.030037715817560415)
x=c(x,-0.013209171223548588)
x=c(x,0.030179443342583986)
x=c(x,0.0007622587517042747)
x=c(x,-0.022087785010690433)
x=c(x,0.05215760855339566)
x=c(x,-0.08625792722038894)
x=c(x,0.050742821076913365)
x=c(x,-0.045179317340199955)
x=c(x,-0.001960419822409996)
x=c(x,0.07685401149691751)
x=c(x,-0.024258840100516904)
x=c(x,-0.0028303973655920307)
x=c(x,0.012300885145027016)
x=c(x,-0.024414123018388134)
x=c(x,-0.017764926065968023)
x=c(x,0.08615610429602776)
x=c(x,-0.006328621074368001)
x=c(x,-0.07075021694258533)
x=c(x,-0.03140082823843924)
x=c(x,-0.05873753303580696)
x=c(x,0.06747212627785633)
x=c(x,-0.009640880560216294)
x=c(x,0.004617018830381611)
x=c(x,-0.04672771568789307)
x=c(x,0.028298676540239757)
x=c(x,0.0045501208108140985)
x=c(x,0.057816949917178694)
x=c(x,0.03994143813396374)
x=c(x,-0.14010777260010585)
x=c(x,0.41635496062682864)
x=c(x,-0.4028403936232907)
x=c(x,-0.054001742210382175)
x=c(x,-0.10817251325297329)
x=c(x,-0.08215622547641381)
x=c(x,0.1719862199362444)
x=c(x,-0.09734551402462333)
x=c(x,-0.10404566783968504)
x=c(x,-0.07738686904184047)
x=c(x,0.061788055572097135)
x=c(x,-0.07642211357244252)
x=c(x,-0.008582627728582726)
x=c(x,0.03250912080216759)
x=c(x,-0.07439162767739178)
x=c(x,-0.04237160572953438)
x=c(x,-0.34858475010959855)
x=c(x,-0.024320328435738836)
x=c(x,0.13551952166223963)
x=c(x,-0.05758311168258353)
x=c(x,-0.03008077358661251)
x=c(x,0.020213355438050976)
x=c(x,-0.029181591188103)
x=c(x,0.008689154386908704)
x=c(x,-0.03023817861464384)
x=c(x,-0.1749575929616864)
x=c(x,-0.0018951623852433567)
x=c(x,0.019154985022112454)
x=c(x,-0.07168401800562012)
x=c(x,0.02575211925227422)
x=c(x,-0.1265986217540426)
x=c(x,0.009760384700395483)
x=c(x,-0.011088639072887953)
x=c(x,0.04490384688220042)
x=c(x,-0.013091831329905788)
x=c(x,0.0413257036786101)
x=c(x,0.047371247557053284)
x=c(x,-0.006099189869143142)
x=c(x,-0.07766643878254861)
x=c(x,-0.05532740989286407)
x=c(x,0.052674481720099364)
x=c(x,0.029745434301009302)
x=c(x,-0.09106569525922555)
x=c(x,0.052195876864616894)
x=c(x,-0.005093471431289728)
x=c(x,-0.007927521491465615)
x=c(x,0.009205706921442656)
x=c(x,0.024896617875008527)
x=c(x,0.04410680343717233)
x=c(x,0.013228765633719398)
x=c(x,0.006303386614783933)
x=c(x,0.004882016393337279)
x=c(x,-0.012781307222318055)
x=c(x,0.006395922790076605)
x=c(x,0.029306695680919072)
x=c(x,0.045775603426147754)
x=c(x,0.034682098065495034)
x=c(x,-0.004510665917967094)
x=c(x,0.0238266463647988)
x=c(x,-0.012058205471187463)
x=c(x,-0.014086689156627585)
x=c(x,0.00009899488425469274)
x=c(x,-0.00025095597717433345)
x=c(x,0.00023879594121451852)
x=c(x,-0.0012271868913721234)
x=c(x,0.0013316148271692249)
x=c(x,-0.00038079698524120376)
x=c(x,0.00006910523135120535)
x=c(x,0.0038894045797719557)
x=c(x,-0.0032825723982080886)
x=c(x,-0.0014606444371680354)
x=c(x,-0.0012836500464548301)
x=c(x,0.0000489869479214041)
x=c(x,0.0016134828590556967)
x=c(x,0.0022140047656868784)
x=c(x,0.0045968659802465795)
x=c(x,-0.0010041890213868154)
x=c(x,0.00605509283386788)
x=c(x,0.00040455289858834184)
x=c(x,-0.0017358114829870703)
x=c(x,-0.006464275828719106)
x=c(x,0.008671836822442618)
x=c(x,0.003786948688378154)
x=c(x,0.005860680480298616)
x=c(x,-0.0007042877562236633)
x=c(x,0.00013318460200025976)
x=c(x,-0.0013482292952110761)
x=c(x,0.005313309134404824)
x=c(x,0.0006529783563037681)
x=c(x,0.002721569369240268)
x=c(x,-0.0027395179465487802)
x=c(x,0.00114367018366217)
x=c(x,-0.004045134527533774)
x=c(x,0.0029609001027754663)
x=c(x,0.008048684293528396)
x=c(x,0.00857126092255196)
x=c(x,-0.0008062265123390265)
x=c(x,-0.002419007236787276)
x=c(x,-0.005022385071935571)
x=c(x,-0.003912332988953084)
x=c(x,0.001632308543716783)
x=c(x,0.01430121889178773)
x=c(x,-0.002774345229330894)
x=c(x,0.0033333932376192164)
x=c(x,0.0014833611902220192)
x=c(x,-0.00635634050198729)
x=c(x,0.0024186308073041334)
x=c(x,0.012513747278602765)
x=c(x,0.018826722567705057)
x=c(x,0.009841298861636965)
x=c(x,-0.01344234684105498)
x=c(x,0.004266036340835768)
x=c(x,0.008641035614019042)
x=c(x,-0.0012954788152541611)
x=c(x,0.007309519874277894)
x=c(x,0.0027728232703779156)
x=c(x,-0.011754384972575267)
x=c(x,0.008359710276166717)
x=c(x,-0.02935186970353625)
x=c(x,-0.006150029281173655)
x=c(x,-0.006892743980680814)
x=c(x,-0.00044007977044337925)
x=c(x,0.009594919349779987)
x=c(x,-0.0038622675070557845)
x=c(x,-0.002985276791532079)
x=c(x,-0.002110161729164145)
x=c(x,0.019435948001822398)
x=c(x,0.0009265504843783286)
x=c(x,0.0009089438729129453)
x=c(x,0.0035531232259956697)
x=c(x,-0.002207685501803201)
x=c(x,-0.0026511433014813407)
x=c(x,-0.0018775971346639544)
x=c(x,0.000793237670772499)
x=c(x,0.0025847897597597166)
x=c(x,-0.008944075446733896)
x=c(x,0.0037203209480578432)
x=c(x,0.0032439538568982754)
x=c(x,-0.011703143928384285)
x=c(x,0.007168778359516369)
x=c(x,-0.004097065670760726)
x=c(x,-0.004965358069273426)
x=c(x,0.00009239408231949001)
x=c(x,-0.012316817644541575)
x=c(x,-0.0033843199825802158)
x=c(x,-0.019236964749891068)
x=c(x,-0.0015158798234288582)
x=c(x,0.02447456135059167)
x=c(x,-0.014945553972788204)
x=c(x,-0.006826348527611628)
x=c(x,-0.005274326615215832)
x=c(x,0.006426184987811399)
x=c(x,-0.019367030705830124)
x=c(x,0.01180124817309288)
x=c(x,-0.014306037100525243)
x=c(x,0.0109065968146651)
x=c(x,-0.007677177322562061)
x=c(x,0.004697447064214062)
x=c(x,0.014477951852741299)
x=c(x,-0.0001218602580382623)
x=c(x,-0.008799942381504184)
x=c(x,-0.001143730124193555)
x=c(x,-0.013292899095798118)
x=c(x,0.003422214408394449)
x=c(x,0.006104711885921527)
x=c(x,-0.013824114162566731)
x=c(x,0.01101191791300062)
x=c(x,-0.022664608602053313)
x=c(x,0.004498017595553375)
x=c(x,-0.016778406799627346)
x=c(x,0.025394024351283198)
x=c(x,0.044414944743261894)
x=c(x,-0.011675759606793753)
x=c(x,0.00495511808437467)
x=c(x,-0.002436088592161938)
x=c(x,0.005053029033947771)
x=c(x,-0.02389420444743646)
x=c(x,-0.028013608903126482)
x=c(x,-0.009570681726092331)
x=c(x,-0.022788119609625762)
x=c(x,0.022060071486309375)
x=c(x,-0.01426701222931512)
x=c(x,-0.005488783517037553)
x=c(x,-0.014754858167355217)
x=c(x,0.15493942030327654)
x=c(x,-0.04974862001237821)
x=c(x,0.07098166170855527)
x=c(x,-0.048676580961038246)
x=c(x,-0.003033870968609967)
x=c(x,-0.004259232585380402)
x=c(x,-0.009375707429598057)
x=c(x,-0.02207789437768271)
x=c(x,-0.0030374687772007523)
x=c(x,-0.01695620990363123)
x=c(x,0.02750867049514066)
x=c(x,-0.02760087491327348)
x=c(x,0.006614473629358125)
x=c(x,0.04178299616037431)
x=c(x,-0.08756326825327373)
x=c(x,0.07230855332024001)
x=c(x,-0.019663417087320324)
x=c(x,0.02717885449313546)
x=c(x,0.006875914671487998)
x=c(x,-0.03886824409613572)
x=c(x,0.027597802069965087)
x=c(x,-0.019786418487731917)
x=c(x,0.02807786469533636)
x=c(x,0.00006560533378988723)
x=c(x,-0.02187396951717489)
x=c(x,0.051914338406900344)
x=c(x,-0.08777982879963625)
x=c(x,0.05095975407667194)
x=c(x,-0.04410322039732121)
x=c(x,0.00024784350535595097)
x=c(x,0.07385843079541218)
x=c(x,-0.023434065615331318)
x=c(x,-0.006842138324678713)
x=c(x,0.006941829194771616)
x=c(x,-0.02295584385060581)
x=c(x,-0.01675419156022008)
x=c(x,0.08573546925901787)
x=c(x,-0.004710305116480078)
x=c(x,-0.06940846560794098)
x=c(x,-0.03324305797081721)
x=c(x,-0.05580544439466466)
x=c(x,0.06543169956443733)
x=c(x,-0.008975777662163729)
x=c(x,0.0025865790485933094)
x=c(x,-0.04789168052533578)
x=c(x,0.02717306928349416)
x=c(x,0.015034750256552298)
x=c(x,0.06180375915085342)
x=c(x,0.03769893955449494)
x=c(x,-0.13930705550678021)
x=c(x,0.4083791086291147)
x=c(x,-0.4131183343262882)
x=c(x,-0.055121450397903435)
x=c(x,-0.10720308542486025)
x=c(x,-0.08206450064131322)
x=c(x,0.15947417903995922)
x=c(x,-0.09666197248413448)
x=c(x,-0.1041290491693555)
x=c(x,-0.07897840317608226)
x=c(x,0.05667523171217634)
x=c(x,-0.08152822773748322)
x=c(x,-0.008716089784139597)
x=c(x,0.0328368436504331)
x=c(x,-0.07199019760751654)
x=c(x,-0.047232559578692275)
x=c(x,-0.33609316059963823)
x=c(x,-0.02649837117524395)
x=c(x,0.13234886990034841)
x=c(x,-0.056120191270332465)
x=c(x,-0.0276119184989601)
x=c(x,0.03069921164842428)
x=c(x,-0.029240903554705797)
x=c(x,0.013620108164973733)
x=c(x,-0.02600912403139481)
x=c(x,-0.16908359153543273)
x=c(x,-0.009043572077766009)
x=c(x,0.022583856851174765)
x=c(x,-0.07875765563598165)
x=c(x,0.023877524703264052)
x=c(x,-0.12453925127154594)
x=c(x,0.010832672855715035)
x=c(x,-0.007807141502822997)
x=c(x,0.040050641313564235)
x=c(x,-0.014297257992797824)
x=c(x,0.041324952203613936)
x=c(x,0.048728046653619544)
x=c(x,-0.010474208540331629)
x=c(x,-0.07646541762031606)
x=c(x,-0.053545303662120354)
x=c(x,0.05497363634227279)
x=c(x,0.029962710649603513)
x=c(x,-0.08857846961043517)
x=c(x,0.049706771811101697)
x=c(x,-0.0043127224395797924)
x=c(x,-0.007081135777889188)
x=c(x,0.006268011546390583)
x=c(x,0.02409738930057116)
x=c(x,0.04314366691050097)
x=c(x,0.013519366467196576)
x=c(x,0.007997192700918584)
x=c(x,0.007123595675404793)
x=c(x,-0.00628277784332977)
x=c(x,0.006183318940630902)
x=c(x,0.03270833174411425)
x=c(x,0.040632398558701724)
x=c(x,0.03582991407253748)
x=c(x,-0.003337371628283221)
x=c(x,0.02544345123181258)
x=c(x,-0.005309690382358769)
x=c(x,-0.014418943396538264)
x=c(x,0.00006746644674150987)
x=c(x,-0.000258130969718861)
x=c(x,0.00029975238475143213)
x=c(x,-0.0014194978826327631)
x=c(x,0.0015956943798079847)
x=c(x,-0.000593560726642621)
x=c(x,0.00005527121299273564)
x=c(x,0.004968967294054248)
x=c(x,-0.0037381452301133438)
x=c(x,-0.001939667387794254)
x=c(x,-0.0011422969106539649)
x=c(x,0.00011526194106390959)
x=c(x,0.0018704664486821577)
x=c(x,0.002257094075982159)
x=c(x,0.00503885421777482)
x=c(x,-0.0006581797578252408)
x=c(x,0.00761419649304981)
x=c(x,0.000017257325002503775)
x=c(x,-0.003554212691653997)
x=c(x,-0.0015678951535382684)
x=c(x,0.009602813430682668)
x=c(x,0.003936328268540397)
x=c(x,0.006524126819166708)
x=c(x,-0.0010989736389033205)
x=c(x,-0.00007122197086075011)
x=c(x,-0.0005993226926205335)
x=c(x,0.0037981218693207753)
x=c(x,-0.00016193556062588747)
x=c(x,0.0023127997488257687)
x=c(x,-0.002104366913172204)
x=c(x,0.001208655831854911)
x=c(x,-0.004934952094389456)
x=c(x,0.003662396663766013)
x=c(x,0.010706896509178738)
x=c(x,0.008399010689037749)
x=c(x,-0.00035843844225891464)
x=c(x,-0.001542869566624332)
x=c(x,-0.00891228982276456)
x=c(x,-0.004069740994339275)
x=c(x,0.001851244198149425)
x=c(x,0.017340865428157735)
x=c(x,-0.0028673036241898373)
x=c(x,0.002070041447270047)
x=c(x,0.0006850085071279052)
x=c(x,-0.007373232757451546)
x=c(x,0.012474235532673933)
x=c(x,0.014841274143686536)
x=c(x,0.02275403632635601)
x=c(x,0.015660124264978172)
x=c(x,-0.01656503229938503)
x=c(x,0.0055116038264894415)
x=c(x,0.008649439173936563)
x=c(x,-0.001278920772623405)
x=c(x,0.006281194775309164)
x=c(x,0.00041198763094061843)
x=c(x,-0.016167236158941528)
x=c(x,0.011414509561129252)
x=c(x,-0.03790229247057865)
x=c(x,-0.007375042598878288)
x=c(x,-0.009392011694150432)
x=c(x,-0.0009691060070735195)
x=c(x,0.010252147240464403)
x=c(x,-0.003034069768911364)
x=c(x,-0.0025644581652469363)
x=c(x,-0.0014564819731281511)
x=c(x,0.021820963895619817)
x=c(x,-0.0019389972015191259)
x=c(x,0.00009268202081033183)
x=c(x,0.003835669427010531)
x=c(x,0.0010476245357126178)
x=c(x,-0.002585305632152547)
x=c(x,-0.0016055277848421388)
x=c(x,-0.0007718212848249287)
x=c(x,0.001803644715348422)
x=c(x,-0.010077402682654429)
x=c(x,0.0035011635374085004)
x=c(x,0.003977922742914105)
x=c(x,-0.011380165832363608)
x=c(x,0.005457202824556624)
x=c(x,-0.004044633229831533)
x=c(x,-0.0062557265435012775)
x=c(x,0.00006641407043334831)
x=c(x,-0.010122985049631036)
x=c(x,-0.003640897650449073)
x=c(x,-0.02114938001906846)
x=c(x,0.0022859970665242077)
x=c(x,0.028014421354458318)
x=c(x,-0.0074017934455747015)
x=c(x,-0.006215963688502411)
x=c(x,-0.01851257897356421)
x=c(x,0.0036748704289358753)
x=c(x,-0.017571466529550377)
x=c(x,0.009986562899516552)
x=c(x,-0.01629839127899839)
x=c(x,0.010636274188499249)
x=c(x,-0.00915727051653827)
x=c(x,0.005934662665117844)
x=c(x,0.014932707748461078)
x=c(x,-0.002565412324322816)
x=c(x,-0.010093232908957653)
x=c(x,-0.0044872601128559935)
x=c(x,-0.01641818419140489)
x=c(x,0.0060640510901623325)
x=c(x,-0.0003318702570411742)
x=c(x,-0.016728644963156538)
x=c(x,0.0038584157646397214)
x=c(x,-0.023589344607524824)
x=c(x,0.00554905997150116)
x=c(x,-0.023814537709944354)
x=c(x,0.02361929761356963)
x=c(x,0.056572893315793724)
x=c(x,-0.016469409458563445)
x=c(x,0.010307836334348622)
x=c(x,-0.004566845128415486)
x=c(x,0.006558942656513315)
x=c(x,-0.023741963758896416)
x=c(x,-0.02969249790834324)
x=c(x,-0.010607994510013421)
x=c(x,-0.02269474717112748)
x=c(x,0.02212012253573556)
x=c(x,-0.01346471215385727)
x=c(x,-0.005267735848503641)
x=c(x,-0.020700804985583774)
x=c(x,0.21448652313662853)
x=c(x,-0.07047191880075587)
x=c(x,0.08395883445284102)
x=c(x,-0.05939319394704241)
x=c(x,-0.006327733133152452)
x=c(x,-0.011286915921821888)
x=c(x,-0.00042111510612151187)
x=c(x,-0.02315265580416827)
x=c(x,0.0036566883379834966)
x=c(x,-0.0170015825089075)
x=c(x,0.02117469851909297)
x=c(x,-0.04645553234171985)
x=c(x,-0.011757744917219278)
x=c(x,0.03393837506244674)
x=c(x,-0.11035110430040612)
x=c(x,0.09873349398484033)
x=c(x,-0.01937661322242949)
x=c(x,0.03441107961289489)
x=c(x,0.012617118964760914)
x=c(x,-0.04835554085061248)
x=c(x,0.0324848380647404)
x=c(x,-0.018049925913937143)
x=c(x,0.035972668615485794)
x=c(x,-0.0006424629135481774)
x=c(x,-0.027322353766397356)
x=c(x,0.06184001136699979)
x=c(x,-0.10651661832326981)
x=c(x,0.0794063827154755)
x=c(x,-0.05300648530488739)
x=c(x,-0.007988611978891497)
x=c(x,0.09197644846818714)
x=c(x,-0.026338931163012225)
x=c(x,0.002356505046223718)
x=c(x,0.018573054469449745)
x=c(x,-0.03356419951678024)
x=c(x,-0.026528776477939876)
x=c(x,0.10786721673770955)
x=c(x,-0.00835703625111263)
x=c(x,-0.08153663046562717)
x=c(x,-0.03435257769956348)
x=c(x,-0.06442343466484995)
x=c(x,0.09399050109288047)
x=c(x,-0.011796357915423503)
x=c(x,0.005368185241743583)
x=c(x,-0.052606945762405564)
x=c(x,0.03401942394336842)
x=c(x,0.004601845476081891)
x=c(x,0.06810065860285075)
x=c(x,0.06042969911070545)
x=c(x,-0.1825531479012755)
x=c(x,0.5803570317736269)
x=c(x,-0.5707587998691037)
x=c(x,-0.09141088306211531)
x=c(x,-0.12222228226483933)
x=c(x,-0.11077874408113036)
x=c(x,0.23937475603865016)
x=c(x,-0.12957677406438636)
x=c(x,-0.14018251802594314)
x=c(x,-0.09533413973627455)
x=c(x,0.05736380289370687)
x=c(x,-0.08774824294722808)
x=c(x,-0.009277462736446087)
x=c(x,0.03903387002641376)
x=c(x,-0.08712081842221514)
x=c(x,-0.04274695183105209)
x=c(x,-0.457414726673541)
x=c(x,-0.032595635988036074)
x=c(x,0.17197901118768455)
x=c(x,-0.07752658363454547)
x=c(x,-0.037313062703522436)
x=c(x,0.010662569317137709)
x=c(x,-0.032637386428590626)
x=c(x,0.032453418821754634)
x=c(x,-0.034446911761303135)
x=c(x,-0.22213629487019373)
x=c(x,-0.006940832169017791)
x=c(x,0.022722205225083645)
x=c(x,-0.0899650255056677)
x=c(x,0.028290879657264463)
x=c(x,-0.18368312970350625)
x=c(x,0.009198901870980485)
x=c(x,-0.01437241428347616)
x=c(x,0.048798507077043016)
x=c(x,-0.018906569027611078)
x=c(x,0.045441310708341336)
x=c(x,0.055017530789991935)
x=c(x,-0.00423787735653243)
x=c(x,-0.0940313977488781)
x=c(x,-0.06132004102825146)
x=c(x,0.06408443647994248)
x=c(x,0.038167961528290675)
x=c(x,-0.1303680603501332)
x=c(x,0.07465406138619425)
x=c(x,-0.006356368328735481)
x=c(x,-0.009911815955482033)
x=c(x,0.011259366436463566)
x=c(x,0.028070019168410447)
x=c(x,0.05066856189524789)
x=c(x,0.016515268981246237)
x=c(x,0.005710277212490976)
x=c(x,0.00025903475266422023)
x=c(x,-0.024662114596213407)
x=c(x,0.0024978750294576044)
x=c(x,0.029609620360907512)
x=c(x,0.054123103620139515)
x=c(x,0.04978626527533724)
x=c(x,-0.0009041733419391049)
x=c(x,0.022821006892829964)
x=c(x,-0.015707266641193037)
x=c(x,-0.014193346408957641)
x=c(x,0.0000852218187100452)
x=c(x,-0.0002510526148517482)
x=c(x,0.00027882844237603083)
x=c(x,-0.001408324184631409)
x=c(x,0.0015936004456473907)
x=c(x,-0.0005346509404994233)
x=c(x,0.00006068548855675862)
x=c(x,0.004724005454805735)
x=c(x,-0.0036958533909789244)
x=c(x,-0.0017249851796365854)
x=c(x,-0.0010823186030940264)
x=c(x,0.000013698528185151161)
x=c(x,0.0017884169860855467)
x=c(x,0.0023099994267751153)
x=c(x,0.005138975310059844)
x=c(x,-0.0005439499478209938)
x=c(x,0.007208216215673051)
x=c(x,0.00024138588169995363)
x=c(x,-0.0033329893075529048)
x=c(x,-0.00394563097102993)
x=c(x,0.00952840157625524)
x=c(x,0.00396027014822636)
x=c(x,0.006475611301632385)
x=c(x,-0.0008573605386649134)
x=c(x,0.0002264267443315809)
x=c(x,-0.0007086473297387975)
x=c(x,0.0038103366124176293)
x=c(x,-0.00003772387854446465)
x=c(x,0.0026130067094685297)
x=c(x,-0.002284610104882616)
x=c(x,0.0010252477004975779)
x=c(x,-0.0046366664453010254)
x=c(x,0.0036380749348372946)
x=c(x,0.010803259828800179)
x=c(x,0.00867726202405461)
x=c(x,-0.0005259649725606029)
x=c(x,-0.0020570852560445395)
x=c(x,-0.0073190502830469415)
x=c(x,-0.004372640147038995)
x=c(x,0.0020008953513694686)
x=c(x,0.017354785067487707)
x=c(x,-0.002979448596968858)
x=c(x,0.0028938748470289846)
x=c(x,0.0011299867334441883)
x=c(x,-0.007364504305631381)
x=c(x,0.011763239876618524)
x=c(x,0.014614650248602421)
x=c(x,0.022538413702779023)
x=c(x,0.015198707419878764)
x=c(x,-0.016266174090771475)
x=c(x,0.005387612219479019)
x=c(x,0.008848333582516634)
x=c(x,-0.0017632784671532016)
x=c(x,0.006279145271658843)
x=c(x,0.0017483984407808335)
x=c(x,-0.015365074687067378)
x=c(x,0.011253736900502067)
x=c(x,-0.03734558656008153)
x=c(x,-0.006975607428615462)
x=c(x,-0.008534677782432777)
x=c(x,-0.0008068246046512575)
x=c(x,0.009927995905283536)
x=c(x,-0.0034823311680498735)
x=c(x,-0.0027621798713720162)
x=c(x,-0.001997480578129262)
x=c(x,0.02267416488394671)
x=c(x,-0.0006861757217393629)
x=c(x,0.00042067754237964846)
x=c(x,0.002971347786711062)
x=c(x,0.00007222231068324889)
x=c(x,-0.0024522811980900927)
x=c(x,-0.0017951970620831606)
x=c(x,0.0003251229504829652)
x=c(x,0.001508535886103002)
x=c(x,-0.009596441451537725)
x=c(x,0.0033743968161601694)
x=c(x,0.003089055844252337)
x=c(x,-0.012027702750155536)
x=c(x,0.005711955563992214)
x=c(x,-0.0036730453999552362)
x=c(x,-0.006025317239414831)
x=c(x,0.0000734559084888572)
x=c(x,-0.010717075780031744)
x=c(x,-0.0036841828746828607)
x=c(x,-0.02098660209012576)
x=c(x,0.0009555631179331941)
x=c(x,0.026909770360595782)
x=c(x,-0.010322014236062776)
x=c(x,-0.007332884346345281)
x=c(x,-0.012550195168332712)
x=c(x,0.002659115963620665)
x=c(x,-0.017926222866266422)
x=c(x,0.010483168819692608)
x=c(x,-0.016868750737017768)
x=c(x,0.01199795272342353)
x=c(x,-0.009196300661325329)
x=c(x,0.005449889917024086)
x=c(x,0.015612865464293092)
x=c(x,-0.0025540838353852843)
x=c(x,-0.00976947525966168)
x=c(x,-0.004959200295171306)
x=c(x,-0.01608597354337843)
x=c(x,0.004605767217620875)
x=c(x,0.0018279971487748326)
x=c(x,-0.01563253801497117)
x=c(x,0.007750020858350848)
x=c(x,-0.02291891670833398)
x=c(x,0.005404191728408798)
x=c(x,-0.02119960475472909)
x=c(x,0.024560452066683943)
x=c(x,0.05743199495586309)
x=c(x,-0.015562971961367805)
x=c(x,0.009814420011065987)
x=c(x,-0.00500147943223514)
x=c(x,0.005663813346160046)
x=c(x,-0.023971059163723777)
x=c(x,-0.030056721351686244)
x=c(x,-0.010404599860701124)
x=c(x,-0.023166297943825142)
x=c(x,0.024316947944263756)
x=c(x,-0.014610838684198095)
x=c(x,-0.006460762147143632)
x=c(x,-0.016650514490124543)
x=c(x,0.2123053620313559)
x=c(x,-0.07055681365833895)
x=c(x,0.08600230442651553)
x=c(x,-0.05843669822366054)
x=c(x,-0.004732831413249492)
x=c(x,-0.008798055206643188)
x=c(x,-0.0017316549520321072)
x=c(x,-0.023867027941693212)
x=c(x,0.001398513198378371)
x=c(x,-0.017783019826482303)
x=c(x,0.026043977804884762)
x=c(x,-0.042439004934391684)
x=c(x,-0.010743501588880454)
x=c(x,0.044135558900347024)
x=c(x,-0.10854608220940473)
x=c(x,0.09790137547658341)
x=c(x,-0.020007726607978785)
x=c(x,0.03392823127575536)
x=c(x,0.009919063507134068)
x=c(x,-0.048586765347897534)
x=c(x,0.029401481559605622)
x=c(x,-0.017209074326762535)
x=c(x,0.03536780828030703)
x=c(x,-0.0005717514427092465)
x=c(x,-0.026786983465860677)
x=c(x,0.06113579355358679)
x=c(x,-0.10904321636160047)
x=c(x,0.07874991071810947)
x=c(x,-0.05352655068529691)
x=c(x,-0.0062134236337653)
x=c(x,0.0903730798989394)
x=c(x,-0.02521596205531926)
x=c(x,-0.002253692145200035)
x=c(x,0.0176017635903137)
x=c(x,-0.03190776696886196)
x=c(x,-0.020779955119496863)
x=c(x,0.10345742595832212)
x=c(x,-0.008007659619043388)
x=c(x,-0.07990341562172901)
x=c(x,-0.033496040641171496)
x=c(x,-0.06297766393509026)
x=c(x,0.09286086936455383)
x=c(x,-0.011789233547340489)
x=c(x,0.002227917627064979)
x=c(x,-0.052992870957837286)
x=c(x,0.033093821635813724)
x=c(x,0.006445821031920424)
x=c(x,0.07380639702502953)
x=c(x,0.058425988281196314)
x=c(x,-0.17846351971560043)
x=c(x,0.5788213924942827)
x=c(x,-0.5733057597293132)
x=c(x,-0.09089121021506742)
x=c(x,-0.12216144699709636)
x=c(x,-0.11194091861678147)
x=c(x,0.23252264569046477)
x=c(x,-0.12915462229993932)
x=c(x,-0.1401648833642222)
x=c(x,-0.0947733084288805)
x=c(x,0.05474060611510858)
x=c(x,-0.09086905013929907)
x=c(x,-0.009346114400424637)
x=c(x,0.0348786667817434)
x=c(x,-0.08489862471687154)
x=c(x,-0.0429771169605662)
x=c(x,-0.45397456974205475)
x=c(x,-0.03431239146725419)
x=c(x,0.1691701021118247)
x=c(x,-0.07590278215274504)
x=c(x,-0.035007715224220165)
x=c(x,0.0256789227404066)
x=c(x,-0.03187405883841509)
x=c(x,0.033716238713297056)
x=c(x,-0.03126456856341003)
x=c(x,-0.21789185883209602)
x=c(x,-0.009606510703315151)
x=c(x,0.022916171405106874)
x=c(x,-0.09195375611961175)
x=c(x,0.026865382771419838)
x=c(x,-0.181780233686945)
x=c(x,0.011190631224184067)
x=c(x,-0.013330132537035966)
x=c(x,0.0496857269747681)
x=c(x,-0.018574134452702694)
x=c(x,0.04540206431580242)
x=c(x,0.0562336461940995)
x=c(x,-0.007416494235758993)
x=c(x,-0.0928055474583588)
x=c(x,-0.060357591600627675)
x=c(x,0.06723502389376347)
x=c(x,0.03771997330540403)
x=c(x,-0.13009152947285638)
x=c(x,0.0739817490078039)
x=c(x,-0.006410504279285977)
x=c(x,-0.008129003066526051)
x=c(x,0.011445723770885614)
x=c(x,0.026638968258226963)
x=c(x,0.048888023649926206)
x=c(x,0.01662243907685086)
x=c(x,0.006696869901116903)
x=c(x,0.003983573016149242)
x=c(x,-0.014802496734644593)
x=c(x,0.003743560066852615)
x=c(x,0.03222274842043634)
x=c(x,0.04973909393960708)
x=c(x,0.05100600733701784)
x=c(x,-0.0006055894932295089)
x=c(x,0.024349237820214586)
x=c(x,-0.013671298325063998)
x=c(x,-0.015454403990162291)
x=c(x,0.00010223860125715608)
x=c(x,-0.00025921065620555464)
x=c(x,0.00023281097797446174)
x=c(x,-0.0013676370008454393)
x=c(x,0.0015295832730781941)
x=c(x,-0.0005195407692159903)
x=c(x,0.00012696641961737929)
x=c(x,0.004721107820485254)
x=c(x,-0.003743049770981477)
x=c(x,-0.0014697642968986655)
x=c(x,-0.001262485224924198)
x=c(x,-0.000038560451180703634)
x=c(x,0.0016932692278149256)
x=c(x,0.002332712555128936)
x=c(x,0.00526334188341549)
x=c(x,-0.0009812147078038095)
x=c(x,0.006785856938161987)
x=c(x,0.0005200710099959524)
x=c(x,-0.001775572967722953)
x=c(x,-0.00669611345098942)
x=c(x,0.009753033683188153)
x=c(x,0.0038808965033058987)
x=c(x,0.006433419499470695)
x=c(x,-0.0007070549452018477)
x=c(x,0.0002193086560928687)
x=c(x,-0.0013638897067984684)
x=c(x,0.005843909524975631)
x=c(x,0.0005597954147568302)
x=c(x,0.0028446806473551006)
x=c(x,-0.0026397935507544647)
x=c(x,0.0009075375149483527)
x=c(x,-0.00430635701907551)
x=c(x,0.0035418184350463995)
x=c(x,0.010337565390015561)
x=c(x,0.009546826276556073)
x=c(x,-0.000943734303607817)
x=c(x,-0.0024976334703666722)
x=c(x,-0.00555280645887627)
x=c(x,-0.004401089730153878)
x=c(x,0.001634499545535614)
x=c(x,0.01640545217804603)
x=c(x,-0.0027463504320997547)
x=c(x,0.0035145269075019274)
x=c(x,0.001558919924155238)
x=c(x,-0.007559598580991826)
x=c(x,0.0029165217219162334)
x=c(x,0.01388921759309026)
x=c(x,0.020723940034457298)
x=c(x,0.013572869752533197)
x=c(x,-0.01562034845359169)
x=c(x,0.004795357920035252)
x=c(x,0.009085548538625645)
x=c(x,-0.0025380096712910973)
x=c(x,0.007485878556179807)
x=c(x,0.002209049551503935)
x=c(x,-0.011969232177188968)
x=c(x,0.01105123667070858)
x=c(x,-0.03628906187336434)
x=c(x,-0.006020603476439878)
x=c(x,-0.007133783072506931)
x=c(x,-0.00039907106059867243)
x=c(x,0.009710917528747835)
x=c(x,-0.004044737570709567)
x=c(x,-0.0029079882343751385)
x=c(x,-0.0021272890600034272)
x=c(x,0.02233618409687852)
x=c(x,-0.00018245634928199694)
x=c(x,0.0007659384315050306)
x=c(x,0.0032132355392988487)
x=c(x,-0.001483823472338809)
x=c(x,-0.002330625470004435)
x=c(x,-0.0019425125938640458)
x=c(x,0.0007679075814064689)
x=c(x,0.002727207487685813)
x=c(x,-0.00892526627381787)
x=c(x,0.004412432849310305)
x=c(x,0.002626909925025261)
x=c(x,-0.012488607566699707)
x=c(x,0.007056683408840544)
x=c(x,-0.004806881392924834)
x=c(x,-0.005262919501107771)
x=c(x,0.00008976386558243894)
x=c(x,-0.011378092221349046)
x=c(x,-0.004009283424636354)
x=c(x,-0.020336354727321357)
x=c(x,-0.0017839873500330654)
x=c(x,0.026274171976481124)
x=c(x,-0.015409946314073523)
x=c(x,-0.009473415499684374)
x=c(x,-0.007765868432502381)
x=c(x,0.004703236461102898)
x=c(x,-0.018558370414528638)
x=c(x,0.013865101150471003)
x=c(x,-0.015175411843585703)
x=c(x,0.011429884334775214)
x=c(x,-0.008599734267708018)
x=c(x,0.004698809851275827)
x=c(x,0.01707003003471179)
x=c(x,-0.00276786337558727)
x=c(x,-0.008706301444442732)
x=c(x,-0.0011385285159371526)
x=c(x,-0.016183194501413457)
x=c(x,0.003449868653261865)
x=c(x,0.0041580180122893105)
x=c(x,-0.01318951122488457)
x=c(x,0.010965600653612934)
x=c(x,-0.022623525060782464)
x=c(x,0.004994908271780993)
x=c(x,-0.020097407534231747)
x=c(x,0.02616138666329422)
x=c(x,0.056741888690850194)
x=c(x,-0.01185438921998851)
x=c(x,0.006237983785073844)
x=c(x,-0.0056748532857446845)
x=c(x,0.0047352546042617695)
x=c(x,-0.02686586229015253)
x=c(x,-0.028981624893935902)
x=c(x,-0.009191764962226581)
x=c(x,-0.0249357920940398)
x=c(x,0.024091319843154605)
x=c(x,-0.014542336715723813)
x=c(x,-0.007057955636866101)
x=c(x,-0.014093205219296088)
x=c(x,0.2050925609088023)
x=c(x,-0.07076396164095038)
x=c(x,0.08691563132229665)
x=c(x,-0.05627437923153887)
x=c(x,-0.004901395412901614)
x=c(x,-0.0073332191588035295)
x=c(x,-0.006454052288374365)
x=c(x,-0.02420091755565117)
x=c(x,-0.004866034136337931)
x=c(x,-0.017725683233417177)
x=c(x,0.030773665213653257)
x=c(x,-0.034185468783270306)
x=c(x,0.005690089704755815)
x=c(x,0.04606511723013086)
x=c(x,-0.1055395242075679)
x=c(x,0.09653618651778627)
x=c(x,-0.022523179212640514)
x=c(x,0.03180708102419614)
x=c(x,0.0026314273616921866)
x=c(x,-0.04843312170020827)
x=c(x,0.02554296483366557)
x=c(x,-0.02516562183988809)
x=c(x,0.032621795653597935)
x=c(x,-0.0014928470000702264)
x=c(x,-0.025746347584877174)
x=c(x,0.06070862638314583)
x=c(x,-0.11144908738984464)
x=c(x,0.07909888216633441)
x=c(x,-0.05251944846318876)
x=c(x,-0.004564741299672054)
x=c(x,0.08648740739750008)
x=c(x,-0.023911480848322984)
x=c(x,-0.006968744706583634)
x=c(x,0.01177162378622198)
x=c(x,-0.02888807602243772)
x=c(x,-0.018971018220529996)
x=c(x,0.10244564953644866)
x=c(x,-0.006353767952454222)
x=c(x,-0.07797714428903797)
x=c(x,-0.03582046043339324)
x=c(x,-0.05811134362852214)
x=c(x,0.08890830510337412)
x=c(x,-0.011045090733186201)
x=c(x,-0.00003388638540646098)
x=c(x,-0.05319440282260103)
x=c(x,0.03173870441777628)
x=c(x,0.01817299780616126)
x=c(x,0.07985165574435708)
x=c(x,0.05623124258106401)
x=c(x,-0.17754921462531287)
x=c(x,0.5655797935959193)
x=c(x,-0.5892548778211105)
x=c(x,-0.09274452031855109)
x=c(x,-0.12028457796365562)
x=c(x,-0.11195185714413704)
x=c(x,0.2141235819020386)
x=c(x,-0.12802377014424146)
x=c(x,-0.14032992192095864)
x=c(x,-0.09647597265415137)
x=c(x,0.04632390380635672)
x=c(x,-0.09745172673853994)
x=c(x,-0.009324796009991695)
x=c(x,0.03515911653933338)
x=c(x,-0.08084706984683047)
x=c(x,-0.0487071225927752)
x=c(x,-0.4378541382612659)
x=c(x,-0.03749065923648904)
x=c(x,0.1639124516760486)
x=c(x,-0.07407660664785183)
x=c(x,-0.030921369062066183)
x=c(x,0.03808714741445716)
x=c(x,-0.03035837121022591)
x=c(x,0.04198952829051034)
x=c(x,-0.026833578318034935)
x=c(x,-0.20862571177135364)
x=c(x,-0.020902478372210327)
x=c(x,0.027155131847913797)
x=c(x,-0.10111988183183644)
x=c(x,0.024513581056096776)
x=c(x,-0.17830297296995593)
x=c(x,0.012559427314046363)
x=c(x,-0.009477162712326332)
x=c(x,0.044819146889960776)
x=c(x,-0.0198101900585232)
x=c(x,0.045132639876431416)
x=c(x,0.05795533264566374)
x=c(x,-0.011584556552872733)
x=c(x,-0.089998888134097)
x=c(x,-0.057871861799736406)
x=c(x,0.07019555932704138)
x=c(x,0.038085598554901456)
x=c(x,-0.12669454605296626)
x=c(x,0.07059621719944778)
x=c(x,-0.005422487795135466)
x=c(x,-0.0072420414830276295)
x=c(x,0.007829849586083733)
x=c(x,0.024888088656117916)
x=c(x,0.04661533552154273)
x=c(x,0.016679250381342887)
x=c(x,0.00828983631377387)
x=c(x,0.006830448258850439)
x=c(x,-0.007424066859245848)
x=c(x,0.0034641489493146783)
x=c(x,0.035630528430746884)
x=c(x,0.04188606964096063)
x=c(x,0.05178736116134079)
x=c(x,0.0002835645168233801)
x=c(x,0.025923284542619014)
x=c(x,-0.007170692180003154)
x=c(x,-0.015560495120594542)
x=c(x,0.00007525726660845324)
x=c(x,-0.00031158164541958687)
x=c(x,-0.00013729309243368015)
x=c(x,-0.00019263983342606577)
x=c(x,0.0007548296303642831)
x=c(x,-0.0004059173776996008)
x=c(x,-0.0000409692380556071)
x=c(x,0.002764744175205936)
x=c(x,-0.0017532268241714514)
x=c(x,-0.0009665370548822864)
x=c(x,-0.0008521830698784274)
x=c(x,-0.0010067844867899826)
x=c(x,0.0005955731366103259)
x=c(x,-0.0002834116365779354)
x=c(x,0.0005341609760798247)
x=c(x,-0.0014360274915527417)
x=c(x,0.0003957481565703281)
x=c(x,0.0009507191686953803)
x=c(x,-0.0009606098196582404)
x=c(x,-0.003589509311698595)
x=c(x,0.004632042383133208)
x=c(x,0.0011149960203313356)
x=c(x,-0.0026862639455663266)
x=c(x,-0.001196066928708527)
x=c(x,-0.002507596429419796)
x=c(x,-0.002335955363924298)
x=c(x,-0.002762044748439512)
x=c(x,0.0006050960062065449)
x=c(x,-0.0002713335603780766)
x=c(x,0.012066223268303132)
x=c(x,0.0017132498836628578)
x=c(x,-0.006042864078079642)
x=c(x,0.0037413003471264187)
x=c(x,0.0013664864042971885)
x=c(x,0.012232169479261343)
x=c(x,0.0000844578818064632)
x=c(x,-0.0007575885722582008)
x=c(x,-0.003206603610639098)
x=c(x,-0.0015962316502847764)
x=c(x,0.001732043624376735)
x=c(x,0.00557503940000339)
x=c(x,-0.002372600188924853)
x=c(x,0.0010818455669705052)
x=c(x,-0.00028739542111166005)
x=c(x,-0.0030447038482218)
x=c(x,-0.012384957865687083)
x=c(x,0.003108193006749057)
x=c(x,0.0022262845710559827)
x=c(x,-0.004544105940825436)
x=c(x,-0.002398956861602106)
x=c(x,-0.003165388352435097)
x=c(x,-0.002164784383000649)
x=c(x,0.002111550273981035)
x=c(x,0.004456455474596519)
x=c(x,0.0027044051922862408)
x=c(x,-0.008294661734803638)
x=c(x,-0.0012811065159146887)
x=c(x,0.0032396581116637753)
x=c(x,-0.0013408278343082273)
x=c(x,-0.007240900971842112)
x=c(x,-0.002084936831126984)
x=c(x,0.016096265372478463)
x=c(x,-0.00035840178774431336)
x=c(x,0.0017032273006701)
x=c(x,-0.005061925529952947)
x=c(x,0.013549556997147189)
x=c(x,0.004617598812767327)
x=c(x,0.0032798043132847713)
x=c(x,0.008758664425230918)
x=c(x,0.0004658152607105509)
x=c(x,-0.003777375029464365)
x=c(x,-0.0027502072193435283)
x=c(x,0.0018349997852439065)
x=c(x,0.007294356224639853)
x=c(x,-0.007265192327759796)
x=c(x,0.006421155478577596)
x=c(x,0.001914374509863391)
x=c(x,-0.007208236302674771)
x=c(x,0.009567921443489804)
x=c(x,-0.0022777445042708325)
x=c(x,-0.0028138590665026005)
x=c(x,-0.0005084029779866721)
x=c(x,-0.007054915277816405)
x=c(x,-0.0014619542840946498)
x=c(x,-0.015023964953259835)
x=c(x,0.0031880385238828904)
x=c(x,0.005507719745165934)
x=c(x,-0.004894533472800526)
x=c(x,-0.0020581627394616374)
x=c(x,-0.011671156200891958)
x=c(x,0)
x=c(x,-0.005191012108588626)
x=c(x,0.012715902291595046)
x=c(x,-0.01511625415268061)
x=c(x,0.00665621691544183)
x=c(x,0.0008064083828426736)
x=c(x,0.000029890530965982502)
x=c(x,-0.004507494286893061)
x=c(x,-0.0035014956281831495)
x=c(x,-0.012529631083361057)
x=c(x,-0.0054292461615809634)
x=c(x,-0.0071881546144213606)
x=c(x,0.002077026407557496)
x=c(x,-0.002663830223311752)
x=c(x,-0.002364080133465873)
x=c(x,-0.006818600327408029)
x=c(x,-0.001777997190612734)
x=c(x,0.006352799043821573)
x=c(x,-0.003014969243333816)
x=c(x,0.017768040009873778)
x=c(x,-0.0108421399919497)
x=c(x,-0.022528232342004594)
x=c(x,0.019162960859761945)
x=c(x,-0.004196407266554592)
x=c(x,0.008344702756313244)
x=c(x,-0.0030029360944173297)
x=c(x,-0.014396157140790527)
x=c(x,0.004239594302388002)
x=c(x,-0.0040903753062896744)
x=c(x,0.014774483140300894)
x=c(x,-0.0054138544409305525)
x=c(x,-0.00008540289833141924)
x=c(x,-0.012989048553109096)
x=c(x,0.046500543641106694)
x=c(x,0.0020738589361883057)
x=c(x,0.024485798069045515)
x=c(x,0.001047860315862539)
x=c(x,0.006096786078803303)
x=c(x,-0.02534942154630747)
x=c(x,0.002888151887939176)
x=c(x,-0.02806377410333104)
x=c(x,0.009184337316886086)
x=c(x,-0.006585105848018676)
x=c(x,0.009590138867588872)
x=c(x,0.0014361532047854676)
x=c(x,-0.021692725473287905)
x=c(x,0.040527406528033036)
x=c(x,-0.015211312968168652)
x=c(x,-0.010711942467785803)
x=c(x,-0.011730602259039444)
x=c(x,0.009856680573319579)
x=c(x,0.01998166830082587)
x=c(x,-0.011866600238265456)
x=c(x,0.011316775123157603)
x=c(x,-0.009433017623399622)
x=c(x,-0.017498405262741202)
x=c(x,0.002240804075651252)
x=c(x,-0.024572979705171926)
x=c(x,0.033352278552372)
x=c(x,-0.005822522125901579)
x=c(x,0.015288471139196983)
x=c(x,-0.021555205475258448)
x=c(x,-0.00884833719150304)
x=c(x,0.011465586945333893)
x=c(x,0.004730216908378377)
x=c(x,-0.016422977876451635)
x=c(x,0.011485142385567276)
x=c(x,-0.01653629534296434)
x=c(x,-0.01858482992594599)
x=c(x,0.010860280659704472)
x=c(x,-0.029816203550435818)
x=c(x,0.006395473632675476)
x=c(x,-0.024624683553728408)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.0007285695714714362)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.014420043271333933)
x=c(x,-0.05473624791417647)
x=c(x,0.09816401899162414)
x=c(x,0.00863327873975139)
x=c(x,-0.04827507357094723)
x=c(x,-0.03221393217847449)
x=c(x,-0.01372266208339924)
x=c(x,0)
x=c(x,-0.06625222182605044)
x=c(x,-0.010320217476002102)
x=c(x,-0.04947017806320082)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.04302886919119188)
x=c(x,0.020757370590566024)
x=c(x,-0.015440111937128522)
x=c(x,0.034209376618359585)
x=c(x,0.016948689627803864)
x=c(x,-0.019779945418026083)
x=c(x,-0.029262043540485522)
x=c(x,0.02252077633563603)
x=c(x,0.010034282742204099)
x=c(x,0.04998371983427629)
x=c(x,0.022457052379795915)
x=c(x,-0.02188043648204196)
x=c(x,-0.027344358841565247)
x=c(x,-0.0263360618577039)
x=c(x,0.0010348250595141391)
x=c(x,0.07148270958617807)
x=c(x,0.01313839895358949)
x=c(x,0.006447610790958357)
x=c(x,-0.016574351187704995)
x=c(x,0.007526020592575261)
x=c(x,0.028204213914337164)
x=c(x,0.014559379645936406)
x=c(x,0.009710657776885097)
x=c(x,0.026327017035262242)
x=c(x,0.006646687651675029)
x=c(x,0.01581123858249447)
x=c(x,-0.02742249350276865)
x=c(x,0.010442774584482731)
x=c(x,0.023815807539601698)
x=c(x,0.03160395511660121)
x=c(x,0.008752252155077292)
x=c(x,0.01410210640070256)
x=c(x,-0.006351453420822017)
x=c(x,0.004354953754763551)
x=c(x,-0.014255978043115958)
x=c(x,0.0000956102063560076)
x=c(x,-0.0003366882345652665)
x=c(x,-0.00018003858536281764)
x=c(x,-0.0002779273839653898)
x=c(x,0.0007017036911409093)
x=c(x,-0.0005257553354422662)
x=c(x,0.00014048645495935748)
x=c(x,0.0022798616460178154)
x=c(x,-0.001925718004634049)
x=c(x,-0.0009869686569816223)
x=c(x,-0.0007763536728584954)
x=c(x,-0.001090295713434919)
x=c(x,0.000799415186745034)
x=c(x,-0.00031596864408319327)
x=c(x,0.0004385149946553351)
x=c(x,-0.0015357158728277333)
x=c(x,0.0007036501479645614)
x=c(x,0.0006815291747596672)
x=c(x,-0.0015817018177611737)
x=c(x,-0.0037049934774020543)
x=c(x,0.004957666698937363)
x=c(x,0.00140846507037835)
x=c(x,-0.0015065630073329628)
x=c(x,-0.0010736842360681157)
x=c(x,-0.0021473213730086715)
x=c(x,-0.0017902886602500525)
x=c(x,-0.002471425809282783)
x=c(x,0.00046694487645319757)
x=c(x,-0.00043496027237892657)
x=c(x,0.008039095669554457)
x=c(x,0.001872356356881199)
x=c(x,-0.005779241899565572)
x=c(x,0.003523291036471055)
x=c(x,0.0014709779342635962)
x=c(x,0.011356398574359544)
x=c(x,0.00028022063640617263)
x=c(x,-0.0010441565036336238)
x=c(x,-0.0036933903710106505)
x=c(x,-0.002024830274115467)
x=c(x,0.0016429236564239312)
x=c(x,0.005012112519708454)
x=c(x,-0.00196968893259978)
x=c(x,0.0008693158978289283)
x=c(x,0.0003317847444584852)
x=c(x,-0.0030545943831472772)
x=c(x,-0.014959428910655659)
x=c(x,0.00429074550616445)
x=c(x,0.0029064655121355085)
x=c(x,-0.0028391981149872916)
x=c(x,-0.003512357389219546)
x=c(x,-0.0025482974225436664)
x=c(x,-0.001533076560184519)
x=c(x,0.002176904469139268)
x=c(x,0.0052336988827511415)
x=c(x,0.004204531874508335)
x=c(x,-0.008563252123860029)
x=c(x,-0.0032766456795042588)
x=c(x,0.0006010547812488035)
x=c(x,-0.0020068760267426193)
x=c(x,-0.006845732682475668)
x=c(x,-0.0025704907570155973)
x=c(x,0.01611031140516297)
x=c(x,-0.0006381852686202883)
x=c(x,0.0011019542575890836)
x=c(x,-0.0042853349806053305)
x=c(x,0.015075907270044474)
x=c(x,0.004600549132869057)
x=c(x,0.004247584728667178)
x=c(x,0.008721306110005935)
x=c(x,0.0009444787190278499)
x=c(x,-0.0031838605952093564)
x=c(x,-0.0030937027456253738)
x=c(x,0.0022993092144154084)
x=c(x,0.007464820125619241)
x=c(x,-0.0054908941997168295)
x=c(x,0.00710191298305908)
x=c(x,-0.0005299252170620076)
x=c(x,-0.004428865431438446)
x=c(x,0.010957581901725634)
x=c(x,-0.003394084684893452)
x=c(x,-0.0017706600482604968)
x=c(x,-0.0007997123104051622)
x=c(x,-0.006167340742757182)
x=c(x,-0.0018686482997459408)
x=c(x,-0.015123346354272177)
x=c(x,0.002316985743894458)
x=c(x,0.0013103862342709995)
x=c(x,-0.003926344393888777)
x=c(x,-0.0028433723871008018)
x=c(x,-0.014267087642043985)
x=c(x,0)
x=c(x,-0.0050650265704239765)
x=c(x,0.012524720084232579)
x=c(x,-0.015527266146561481)
x=c(x,0.004959166691611548)
x=c(x,0.0017522806237288435)
x=c(x,-0.0015486581683776545)
x=c(x,-0.00816346065398288)
x=c(x,-0.003233333628540419)
x=c(x,-0.010882973159458909)
x=c(x,-0.004539743877049964)
x=c(x,-0.0073999487344085955)
x=c(x,0.0019391663023349103)
x=c(x,-0.0023950144216480693)
x=c(x,-0.0022531332195537736)
x=c(x,-0.006998604974881819)
x=c(x,-0.003200851287861956)
x=c(x,0.006813152041585378)
x=c(x,-0.002961921519791575)
x=c(x,0.018158118571171177)
x=c(x,-0.014296493784050474)
x=c(x,-0.02029021004725396)
x=c(x,0.019700387279287912)
x=c(x,-0.006171149247698644)
x=c(x,0.00808313156310095)
x=c(x,-0.003112643742551302)
x=c(x,-0.014393460361272176)
x=c(x,0.0036923442231731126)
x=c(x,-0.006259637309921555)
x=c(x,0.013656830121965368)
x=c(x,-0.006149223051476638)
x=c(x,0.0015207229418064462)
x=c(x,-0.007559396570600948)
x=c(x,0.060599305126635826)
x=c(x,0.0035215558315919043)
x=c(x,0.00797833820786649)
x=c(x,-0.002904690481858344)
x=c(x,0.007137712977097416)
x=c(x,-0.023602282030503092)
x=c(x,0.004097342977741975)
x=c(x,-0.03029959276011147)
x=c(x,0.007546082165457019)
x=c(x,-0.009723407054374909)
x=c(x,0.011381890225583323)
x=c(x,0.0015477948577808556)
x=c(x,-0.0197198170578675)
x=c(x,0.04086314834458169)
x=c(x,-0.020381841726265185)
x=c(x,-0.013568327239533742)
x=c(x,-0.011287670978260821)
x=c(x,0.009483410443970055)
x=c(x,0.01981519084722937)
x=c(x,-0.012992836441182506)
x=c(x,0.017872575199948088)
x=c(x,-0.010740495515843244)
x=c(x,-0.012946462977399839)
x=c(x,0.002456594133440308)
x=c(x,-0.02447437734718216)
x=c(x,0.032869276791403106)
x=c(x,-0.011446686852623837)
x=c(x,0.015917324087043223)
x=c(x,-0.023182405272641544)
x=c(x,-0.00741106765704736)
x=c(x,0.010706667200534103)
x=c(x,0.0019286902785414595)
x=c(x,-0.016375339106867268)
x=c(x,0.009012661234031565)
x=c(x,-0.0180349377505661)
x=c(x,-0.018831982128076963)
x=c(x,0.011605166475532518)
x=c(x,-0.025290745877205954)
x=c(x,-0.0012636007393633279)
x=c(x,-0.02768847538442211)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.001236830722109967)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.016147527012848176)
x=c(x,-0.05687893295548554)
x=c(x,0.09682641596243259)
x=c(x,0.007801877648904183)
x=c(x,-0.04731500347205844)
x=c(x,-0.037811432411728636)
x=c(x,-0.009518129884582336)
x=c(x,0)
x=c(x,-0.060560721852805116)
x=c(x,-0.011812610871949132)
x=c(x,-0.050559739082615796)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.043346337552041855)
x=c(x,0.021105088782025355)
x=c(x,-0.013937869330746226)
x=c(x,0.03359072079229967)
x=c(x,0.02075479555073573)
x=c(x,-0.020623746354321737)
x=c(x,-0.02830153301367209)
x=c(x,0.023361481464620887)
x=c(x,0.010053058540098424)
x=c(x,0.048608674874090506)
x=c(x,0.024159563152065175)
x=c(x,-0.014703138781811785)
x=c(x,-0.025000854125957192)
x=c(x,-0.016660098210800188)
x=c(x,-0.007757761880476147)
x=c(x,0.07732503521493485)
x=c(x,0.011951323849015856)
x=c(x,0.005742398976932387)
x=c(x,-0.016870199103760454)
x=c(x,0.004558745478555936)
x=c(x,0.03079892203609697)
x=c(x,0.011922307344962817)
x=c(x,0.0046121582608239136)
x=c(x,0.022353887464384298)
x=c(x,0.006372903573245806)
x=c(x,0.016280859824579056)
x=c(x,-0.02563532890863312)
x=c(x,0.013665556671150193)
x=c(x,0.024732505369052242)
x=c(x,0.03133007146391462)
x=c(x,0.007716966463617554)
x=c(x,0.01647897201184051)
x=c(x,0.0010825831921443766)
x=c(x,0.005177821478153542)
x=c(x,-0.013771037334662894)
x=c(x,0.00011596477576150875)
x=c(x,-0.00036178639399799385)
x=c(x,-0.00019235099632210366)
x=c(x,-0.00034611977698155487)
x=c(x,0.0006342158251872709)
x=c(x,-0.0007039319847097116)
x=c(x,0.00030127145582728784)
x=c(x,0.002321831839045894)
x=c(x,-0.001671931069225027)
x=c(x,-0.0010070527169422313)
x=c(x,-0.0007432082570249498)
x=c(x,-0.0011676455301747176)
x=c(x,0.0010346764538818399)
x=c(x,-0.00038630721652270196)
x=c(x,0.00034258576488188744)
x=c(x,-0.0016378660256581793)
x=c(x,0.0010707767079963322)
x=c(x,0.00022863320521665642)
x=c(x,-0.0022877834159887606)
x=c(x,-0.0037200889069553583)
x=c(x,0.005290220114239811)
x=c(x,0.0017019391932864606)
x=c(x,-0.00027233289261912236)
x=c(x,-0.0010258500342994181)
x=c(x,-0.0017725102111979148)
x=c(x,-0.001377526247556409)
x=c(x,-0.0021657478985608954)
x=c(x,0.0001963256734560369)
x=c(x,-0.0006151550511780613)
x=c(x,0.0064108988494382705)
x=c(x,0.0019232827461537914)
x=c(x,-0.005492918632627866)
x=c(x,0.003242031057350246)
x=c(x,0.0016022975677097504)
x=c(x,0.010451329732881324)
x=c(x,0.0002710289839577694)
x=c(x,-0.0012482949783183684)
x=c(x,-0.003729821523218817)
x=c(x,-0.00249383754537826)
x=c(x,0.0028603217129070276)
x=c(x,0.0059742419761208585)
x=c(x,-0.000885622002650656)
x=c(x,-0.00040689684910347917)
x=c(x,0.0009536852252485395)
x=c(x,-0.0037890234108920026)
x=c(x,-0.011693998068217986)
x=c(x,0.0063034288022032385)
x=c(x,0.0025604325833923276)
x=c(x,-0.0008347061187070396)
x=c(x,-0.005008658844703954)
x=c(x,-0.0014236829247372678)
x=c(x,-0.00044208898733571854)
x=c(x,0.0022190637593835797)
x=c(x,0.005877669585953894)
x=c(x,0.004978748972724382)
x=c(x,-0.008754197436513046)
x=c(x,-0.0056194289165318245)
x=c(x,-0.0017810674570233225)
x=c(x,-0.002220445284538385)
x=c(x,-0.006515951484923547)
x=c(x,-0.004414345176583871)
x=c(x,0.015604440536990156)
x=c(x,-0.0005902550747789144)
x=c(x,0.0005356268444268958)
x=c(x,-0.004119291970976658)
x=c(x,0.016884198351012184)
x=c(x,0.0038142102838778424)
x=c(x,0.005253258457351629)
x=c(x,0.008783086573198267)
x=c(x,0.001632598404189375)
x=c(x,-0.0026125721465102684)
x=c(x,-0.0031396320533008397)
x=c(x,0.0027565657906749538)
x=c(x,0.007635280859781934)
x=c(x,-0.0036961377833023275)
x=c(x,0.007314781257977047)
x=c(x,-0.0029740797770560377)
x=c(x,-0.002740349025846138)
x=c(x,0.012347248037863197)
x=c(x,-0.004534413405957457)
x=c(x,-0.0005316351293770906)
x=c(x,-0.0012840984980502697)
x=c(x,-0.0037902433218979037)
x=c(x,-0.002859643940893278)
x=c(x,-0.015787095188574088)
x=c(x,0.0016620671057342243)
x=c(x,-0.003613269796124235)
x=c(x,-0.0036388413850869487)
x=c(x,-0.0030419626912971697)
x=c(x,-0.017554728167721703)
x=c(x,0)
x=c(x,-0.004725117138859669)
x=c(x,0.011867482869160888)
x=c(x,-0.016356993919099755)
x=c(x,0.003145464147398381)
x=c(x,0.0031122752684990935)
x=c(x,-0.002435595637800371)
x=c(x,-0.009982040370662566)
x=c(x,-0.0029285227675809183)
x=c(x,-0.009663819413622148)
x=c(x,-0.0034444828879091785)
x=c(x,-0.007514880897504357)
x=c(x,0.0019901702288972335)
x=c(x,-0.0028794232821765754)
x=c(x,-0.0024067161605613656)
x=c(x,-0.007519350033633759)
x=c(x,-0.004789880494074546)
x=c(x,0.0069459993098070615)
x=c(x,-0.002457734154531205)
x=c(x,0.018504275922519416)
x=c(x,-0.014485337249187479)
x=c(x,-0.017525743730865614)
x=c(x,0.020486400805841302)
x=c(x,-0.009571683399167932)
x=c(x,0.008226298858354464)
x=c(x,-0.0034799263856231124)
x=c(x,-0.014806479395790644)
x=c(x,0.001863019809936075)
x=c(x,-0.005706352093949181)
x=c(x,0.013579900752962962)
x=c(x,-0.0075778310923692435)
x=c(x,0.001848985234587831)
x=c(x,-0.006785902642497817)
x=c(x,0.0745042555398745)
x=c(x,0.006197158825731966)
x=c(x,-0.010332242044812917)
x=c(x,-0.002611118002030018)
x=c(x,0.009883242066121588)
x=c(x,-0.024951188688836105)
x=c(x,0.0052145804757695825)
x=c(x,-0.03216103466833883)
x=c(x,0.007111216064080389)
x=c(x,-0.008456475877932674)
x=c(x,0.010582515500476782)
x=c(x,-0.0000505476563364742)
x=c(x,-0.017753616110595873)
x=c(x,0.04078253163047462)
x=c(x,-0.027937191363058264)
x=c(x,-0.014134665826186353)
x=c(x,-0.013193591507587768)
x=c(x,0.008607863137623581)
x=c(x,0.01916156099701493)
x=c(x,-0.01445441812767304)
x=c(x,0.023788330791309906)
x=c(x,-0.007536114526697542)
x=c(x,-0.009669182048272513)
x=c(x,0.0025677667020427065)
x=c(x,-0.024893315776775688)
x=c(x,0.031188788226917133)
x=c(x,-0.01721239666645463)
x=c(x,0.017122558841263544)
x=c(x,-0.025110340838482077)
x=c(x,-0.005426343634577615)
x=c(x,0.011293076052217046)
x=c(x,0.0005409841924648509)
x=c(x,-0.015329718081409548)
x=c(x,0.006227897623254929)
x=c(x,-0.021135055729321398)
x=c(x,-0.019869998211574303)
x=c(x,0.012349613562932741)
x=c(x,-0.0192767760077437)
x=c(x,-0.007621359704596508)
x=c(x,-0.029745408324006174)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.001202745513534537)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.02122779807985764)
x=c(x,-0.05840352663983793)
x=c(x,0.10274420704763938)
x=c(x,-0.049001630931144596)
x=c(x,-0.048020447138737425)
x=c(x,-0.036634463797513825)
x=c(x,-0.012283783709641588)
x=c(x,0)
x=c(x,-0.05897971720805652)
x=c(x,-0.018890035725455105)
x=c(x,-0.05880634338467363)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.04639387912955358)
x=c(x,0.0189112481284746)
x=c(x,-0.011307250175702799)
x=c(x,0.03152244204307051)
x=c(x,0.02830634397778983)
x=c(x,-0.022681246197284677)
x=c(x,-0.028866986864061937)
x=c(x,0.023593232165504397)
x=c(x,0.010588055562064814)
x=c(x,0.0477696944714339)
x=c(x,0.025905664501750452)
x=c(x,-0.009603817146018524)
x=c(x,-0.022990777607802104)
x=c(x,-0.010998066462387423)
x=c(x,-0.014942201311463803)
x=c(x,0.08046332087981746)
x=c(x,0.010764501684559745)
x=c(x,0.005037181521211859)
x=c(x,-0.01707949498956102)
x=c(x,0.0006988369605254146)
x=c(x,0.033167100035506956)
x=c(x,0.01259394293748026)
x=c(x,0.0023128394483254463)
x=c(x,0.02583476080621232)
x=c(x,0.007263541645395949)
x=c(x,0.017779231428319782)
x=c(x,-0.02619335041614247)
x=c(x,0.012597182476268046)
x=c(x,0.02594508951205911)
x=c(x,0.03300386394810303)
x=c(x,0.009833520972227967)
x=c(x,0.016573813138153374)
x=c(x,0.006340550208369619)
x=c(x,0.0054440406010927795)
x=c(x,-0.01360889040159674)
x=c(x,0.00007063469961255082)
x=c(x,-0.0002320137397437222)
x=c(x,-0.0000780436594939233)
x=c(x,-0.0002412000660801849)
x=c(x,0.0007286793120902298)
x=c(x,-0.00033411017333392)
x=c(x,-0.000007689822360286144)
x=c(x,0.0027494869295344388)
x=c(x,-0.0016789104631720901)
x=c(x,-0.0009898514460433363)
x=c(x,-0.0007755249403730978)
x=c(x,-0.0007038121953366056)
x=c(x,0.00022566030570374547)
x=c(x,-0.000047585558759374076)
x=c(x,0.0005768457102671248)
x=c(x,-0.0011986498876677548)
x=c(x,0.00013730558953293094)
x=c(x,0.0006956370222437663)
x=c(x,-0.0012838582138278369)
x=c(x,-0.003344759026722641)
x=c(x,0.004836237622483943)
x=c(x,0.001615358843456916)
x=c(x,-0.0010753199311565723)
x=c(x,-0.0009460602127664567)
x=c(x,-0.0019439158320723369)
x=c(x,-0.001967612157672646)
x=c(x,-0.0019592612483884733)
x=c(x,0.0004177335158458305)
x=c(x,0.0003273495448175795)
x=c(x,0.007895825834937259)
x=c(x,0.0015441166177054193)
x=c(x,-0.0051682914485536606)
x=c(x,0.005441192404917695)
x=c(x,0.00028704476787824696)
x=c(x,0.014011495207484853)
x=c(x,0.00014776117224582277)
x=c(x,-0.0008652037242634576)
x=c(x,-0.0003924187453391211)
x=c(x,-0.001533940048516215)
x=c(x,0.0012220358588431218)
x=c(x,0.0044984493537875815)
x=c(x,-0.0029995840846519938)
x=c(x,0.0012609425778965407)
x=c(x,-0.00031816574339046326)
x=c(x,-0.0033520532130065545)
x=c(x,-0.008078310469214336)
x=c(x,0.0043259041226806575)
x=c(x,0.004763882029796874)
x=c(x,-0.002965467730527746)
x=c(x,-0.001607061107455388)
x=c(x,-0.0033280206437864912)
x=c(x,-0.003042022952266867)
x=c(x,0.002233492451747103)
x=c(x,0.0039304210251852175)
x=c(x,0.003013557218079835)
x=c(x,-0.009030441500734721)
x=c(x,-0.000981946646465985)
x=c(x,0.002764078587590319)
x=c(x,-0.0016375324627747026)
x=c(x,-0.006351341329608213)
x=c(x,-0.00450350465348917)
x=c(x,0.015306259216329535)
x=c(x,0.000014812602490709386)
x=c(x,0.0014435551500929299)
x=c(x,-0.004494922770455792)
x=c(x,0.01541504506811062)
x=c(x,0.004472471274636225)
x=c(x,0.0030038142540112825)
x=c(x,0.00921743372048196)
x=c(x,0.0017347294688387768)
x=c(x,-0.0038180624819561817)
x=c(x,-0.0022281640079823977)
x=c(x,0.0026351938976459837)
x=c(x,0.00948298698767811)
x=c(x,-0.006026156528827317)
x=c(x,0.007299088604355612)
x=c(x,-0.0017130519062097487)
x=c(x,-0.0046756510583399035)
x=c(x,0.010173875328443343)
x=c(x,-0.00047823969199245486)
x=c(x,-0.001680187919703693)
x=c(x,-0.00024484443834223304)
x=c(x,-0.008314232480326676)
x=c(x,-0.0017397017542659968)
x=c(x,-0.015695757527556264)
x=c(x,0.0023619147949567936)
x=c(x,0.007873216337713112)
x=c(x,-0.005895358902331496)
x=c(x,-0.001348292976757279)
x=c(x,-0.012708540266378942)
x=c(x,0.0015817406151222354)
x=c(x,-0.00910458321362485)
x=c(x,0.011085194205033)
x=c(x,-0.013844844045536589)
x=c(x,0.007813305544678678)
x=c(x,-0.00047006933034083475)
x=c(x,0.001565661957986831)
x=c(x,-0.00011783416240429414)
x=c(x,-0.0023875605858746187)
x=c(x,-0.011375654071314252)
x=c(x,-0.0054382571146934615)
x=c(x,-0.0072419263951744774)
x=c(x,0.002210307353098596)
x=c(x,-0.0012702633460422495)
x=c(x,-0.003973232344752307)
x=c(x,-0.00470961895640061)
x=c(x,-0.002190946529869965)
x=c(x,0.006168259368584602)
x=c(x,-0.0030980310869209147)
x=c(x,0.017458178745420966)
x=c(x,-0.004871821637998722)
x=c(x,-0.022401848258929668)
x=c(x,0.014178539464611312)
x=c(x,-0.0007391834211582723)
x=c(x,0.007633688441411643)
x=c(x,-0.002458954742410168)
x=c(x,-0.013681787401506924)
x=c(x,0.003240834080772349)
x=c(x,-0.006105733305425675)
x=c(x,0.011622259002934825)
x=c(x,-0.0042596509600432726)
x=c(x,0.00033391211636838277)
x=c(x,-0.010159753814001736)
x=c(x,0.045634913943151126)
x=c(x,0.0007362582377160575)
x=c(x,0.024400058570622742)
x=c(x,-0.0012023840328859194)
x=c(x,0.007113956919114915)
x=c(x,-0.0198469954639258)
x=c(x,0.003217012047311421)
x=c(x,-0.028614408249493198)
x=c(x,0.009513489577829947)
x=c(x,-0.0057277577749588575)
x=c(x,0.012296883774799218)
x=c(x,0.0011443522287603834)
x=c(x,-0.021154936610939572)
x=c(x,0.04319720860396281)
x=c(x,-0.011236507309768872)
x=c(x,-0.014067108601354633)
x=c(x,-0.009959225425465085)
x=c(x,0.008406152067791548)
x=c(x,0.020934506535824432)
x=c(x,-0.013788376312877057)
x=c(x,0.021560349620322262)
x=c(x,-0.004998734736556776)
x=c(x,-0.009564187057118034)
x=c(x,-0.0014875112938298614)
x=c(x,-0.02525645125383804)
x=c(x,0.030651288255775892)
x=c(x,-0.005084178412095095)
x=c(x,0.022262397968291724)
x=c(x,-0.025232081371342897)
x=c(x,-0.00006276676968622569)
x=c(x,0.006405472264569566)
x=c(x,0.008724963011619565)
x=c(x,-0.015120191965101587)
x=c(x,0.010266338874814438)
x=c(x,-0.022618045962097485)
x=c(x,-0.02198115131526635)
x=c(x,0.007391891938417149)
x=c(x,-0.027369084214755614)
x=c(x,0.006929371884023242)
x=c(x,-0.02365031944353997)
x=c(x,-0.03465772148367062)
x=c(x,0)
x=c(x,-0.0002136511720148549)
x=c(x,0)
x=c(x,-0.013099511601714353)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.021704828971308664)
x=c(x,-0.057027012819056845)
x=c(x,0.09311539485580916)
x=c(x,0.010874625063393751)
x=c(x,-0.04855274278169501)
x=c(x,-0.03331071646782002)
x=c(x,-0.016467584421702368)
x=c(x,0)
x=c(x,-0.06440599117225489)
x=c(x,-0.006719936656082791)
x=c(x,-0.05331522999349273)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.02078566696515859)
x=c(x,-0.02794563899205192)
x=c(x,0.022996336629905387)
x=c(x,0.010546901308250999)
x=c(x,0.04880692566467311)
x=c(x,0.0248158198967304)
x=c(x,-0.012755290025747327)
x=c(x,-0.024465533683962724)
x=c(x,-0.015419745535623435)
x=c(x,-0.006925782837984333)
x=c(x,0.07733687850430271)
x=c(x,0.013066938584156411)
x=c(x,0.00696134163129928)
x=c(x,-0.016102635799268968)
x=c(x,0.004863871391934061)
x=c(x,0.028395648168379774)
x=c(x,0.01374363332331748)
x=c(x,0.009119953779283206)
x=c(x,0.024150616999598723)
x=c(x,0.006821381057539304)
x=c(x,0.015184446658372873)
x=c(x,-0.017003890213231867)
x=c(x,0.01612594950587072)
x=c(x,0.02086315399412008)
x=c(x,0.03087111654213977)
x=c(x,0.0039281978787041915)
x=c(x,0.015488245660202031)
x=c(x,-0.0053284501051303985)
x=c(x,0.004658838875695381)
x=c(x,-0.01600571384134608)
x=c(x,0.00009157048175531437)
x=c(x,-0.0002542935565249859)
x=c(x,-0.00007821027938688842)
x=c(x,-0.0002770306982769804)
x=c(x,0.0006769937621782812)
x=c(x,-0.00037679637245230526)
x=c(x,0.00005452349564419497)
x=c(x,0.0022856589703417357)
x=c(x,-0.001713028116262422)
x=c(x,-0.0009921390724974206)
x=c(x,-0.0007307644373335096)
x=c(x,-0.0007454384874323318)
x=c(x,0.0003977632586754447)
x=c(x,-0.00020652257519438846)
x=c(x,0.0005194963192348905)
x=c(x,-0.001313240846158233)
x=c(x,0.0004003462384580219)
x=c(x,0.000575179324399045)
x=c(x,-0.0018480496947988953)
x=c(x,-0.003608010726102142)
x=c(x,0.005128242344235277)
x=c(x,0.0015246827326055499)
x=c(x,-0.0004080031873031417)
x=c(x,-0.001052014274186916)
x=c(x,-0.0018031435635119748)
x=c(x,-0.0015635001794982596)
x=c(x,-0.0019111652713443919)
x=c(x,0.0002641694593412632)
x=c(x,0.0002033071157420346)
x=c(x,0.006497141754370551)
x=c(x,0.0019226673664502244)
x=c(x,-0.005933964930230825)
x=c(x,0.0052181274098414806)
x=c(x,0.0007768896804704602)
x=c(x,0.012351484694982746)
x=c(x,0.00033244858040339)
x=c(x,-0.0010200823269321403)
x=c(x,-0.002125357409319797)
x=c(x,-0.0016471425148856605)
x=c(x,0.0020040810512072064)
x=c(x,0.005215288954465486)
x=c(x,-0.0023789032050373733)
x=c(x,0.0008204439530454972)
x=c(x,0.00003066447695073883)
x=c(x,-0.003567105628813532)
x=c(x,-0.008919597382859176)
x=c(x,0.00611702705109523)
x=c(x,0.006288622442893377)
x=c(x,-0.0012755561112780523)
x=c(x,-0.0030622888760427924)
x=c(x,-0.0023433954563202714)
x=c(x,-0.0018313990134698301)
x=c(x,0.0018601234233959966)
x=c(x,0.004357729841553787)
x=c(x,0.004424229345715274)
x=c(x,-0.009123058435630558)
x=c(x,-0.0036465375556074785)
x=c(x,-0.0009526316724336089)
x=c(x,-0.0018582982802369283)
x=c(x,-0.005858183040848531)
x=c(x,-0.00785049566615051)
x=c(x,0.014728115467811893)
x=c(x,0.00004108201507713894)
x=c(x,0.0011543664165420409)
x=c(x,-0.0042780449225737404)
x=c(x,0.016486062129806373)
x=c(x,0.004556800925350459)
x=c(x,0.00343536273768753)
x=c(x,0.009245729867614167)
x=c(x,0.0014159789026324486)
x=c(x,-0.003348423578964922)
x=c(x,-0.003130401982456751)
x=c(x,0.0024377388624177605)
x=c(x,0.00878148707644323)
x=c(x,-0.003942458749922051)
x=c(x,0.007045548602425376)
x=c(x,-0.002926842577946164)
x=c(x,-0.0034730096519682793)
x=c(x,0.011369707754338786)
x=c(x,-0.0012356340159778477)
x=c(x,-0.0010411290612225403)
x=c(x,-0.0007175953679990631)
x=c(x,-0.006894140755590912)
x=c(x,-0.0017879057603885165)
x=c(x,-0.016243911158140712)
x=c(x,0.0014601129940684761)
x=c(x,0.003728385939039125)
x=c(x,-0.005058263460206341)
x=c(x,-0.0009240118115316358)
x=c(x,-0.015385538757120322)
x=c(x,0.0018889760268146565)
x=c(x,-0.007300290742063883)
x=c(x,0.01327667692492052)
x=c(x,-0.014133102570063939)
x=c(x,0.007746836502292172)
x=c(x,0.000997590867269909)
x=c(x,0.001238777740413578)
x=c(x,0.0010034854057806367)
x=c(x,-0.0018523138326868548)
x=c(x,-0.009682756191302742)
x=c(x,-0.005262788870314477)
x=c(x,-0.007442674799536813)
x=c(x,0.0021021579129595746)
x=c(x,-0.001499564246396888)
x=c(x,-0.0034490959560318423)
x=c(x,-0.005190820952638678)
x=c(x,-0.0032591211145938485)
x=c(x,0.006674803313334844)
x=c(x,-0.0033804199516951215)
x=c(x,0.018615478997781428)
x=c(x,-0.008522568504792511)
x=c(x,-0.02071156629218988)
x=c(x,0.013535635012897496)
x=c(x,-0.0024863609707909936)
x=c(x,0.007544435637181033)
x=c(x,-0.0024288688109678582)
x=c(x,-0.014119550908593109)
x=c(x,0.0035146007030387567)
x=c(x,-0.006964925525460965)
x=c(x,0.013998970438477976)
x=c(x,-0.005106956899019976)
x=c(x,0.0020739389262074974)
x=c(x,-0.007256916681403428)
x=c(x,0.045428004350237625)
x=c(x,0.0014865460043969915)
x=c(x,0.012309209621317544)
x=c(x,-0.0056666171036376944)
x=c(x,0.004384365534136475)
x=c(x,-0.016764736045895807)
x=c(x,0.0032294237046992975)
x=c(x,-0.026166487051774538)
x=c(x,0.00790501159962873)
x=c(x,-0.00850182224893595)
x=c(x,0.013590582887743896)
x=c(x,0.0012641803774527361)
x=c(x,-0.020377059174977653)
x=c(x,0.04340180056205078)
x=c(x,-0.018369658160365482)
x=c(x,-0.014428555053317797)
x=c(x,-0.011532918923658928)
x=c(x,0.008307738782954594)
x=c(x,0.02016690809004511)
x=c(x,-0.01427452468592672)
x=c(x,0.021934246691901655)
x=c(x,0.0010382720750240764)
x=c(x,-0.006326128426535196)
x=c(x,0.00023418378199154617)
x=c(x,-0.025172628276054064)
x=c(x,0.030653904466084157)
x=c(x,-0.010727701297318256)
x=c(x,0.019818484608262254)
x=c(x,-0.026298827644963923)
x=c(x,0.0019177688820103242)
x=c(x,0.005443515369003523)
x=c(x,0.007205448998059914)
x=c(x,-0.014485427407712446)
x=c(x,0.006366038492813703)
x=c(x,-0.02170608832946752)
x=c(x,-0.02124960126010272)
x=c(x,0.010886023122548848)
x=c(x,-0.02440663010005711)
x=c(x,0.0004378619690331697)
x=c(x,-0.026841962916646915)
x=c(x,-0.03316606343522009)
x=c(x,0)
x=c(x,-0.0002831121480745479)
x=c(x,0)
x=c(x,-0.01224031589603616)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.019357293001450674)
x=c(x,-0.054008118373744626)
x=c(x,0.08918873331867942)
x=c(x,-0.00010544122615172487)
x=c(x,-0.047016080746796585)
x=c(x,-0.035153125212430233)
x=c(x,-0.013680633326140163)
x=c(x,0)
x=c(x,-0.06028279342297275)
x=c(x,-0.010185227657162342)
x=c(x,-0.053465812466292936)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.022036565390983788)
x=c(x,-0.026419191940542226)
x=c(x,0.02064766311487095)
x=c(x,0.013042079715454034)
x=c(x,0.04920658900850864)
x=c(x,0.025445259611152043)
x=c(x,-0.010491113970492618)
x=c(x,-0.02322894707109683)
x=c(x,-0.01341092499868899)
x=c(x,-0.00801332264870388)
x=c(x,0.07822166892576247)
x=c(x,0.013825988137301942)
x=c(x,0.006480273737562737)
x=c(x,-0.017563595972164014)
x=c(x,0.005403860429880357)
x=c(x,0.028578108567519623)
x=c(x,0.013807785662261596)
x=c(x,0.008400105017052068)
x=c(x,0.02355582872042445)
x=c(x,0.008901438102747858)
x=c(x,0.015042524426935768)
x=c(x,-0.01632082324192717)
x=c(x,0.019783432971502733)
x=c(x,0.02164486759427542)
x=c(x,0.03223767703885716)
x=c(x,0.001584403528365257)
x=c(x,0.016420277581022172)
x=c(x,0.0022662106784695477)
x=c(x,0.005311495326518069)
x=c(x,-0.016382645889166048)
x=c(x,0.00009754560198417902)
x=c(x,-0.0002813842763147819)
x=c(x,-0.00005250932125213176)
x=c(x,-0.0003931536113486912)
x=c(x,0.000575144560425429)
x=c(x,-0.0005265029362325542)
x=c(x,0.00008742517761686474)
x=c(x,0.0018398792440009837)
x=c(x,-0.0014115134522179585)
x=c(x,-0.001019688419394874)
x=c(x,-0.0006985431638367372)
x=c(x,-0.0008003959644620735)
x=c(x,0.0006125309386152872)
x=c(x,-0.00029484331898707507)
x=c(x,0.0004467612665100797)
x=c(x,-0.001416461851550204)
x=c(x,0.0006131080812702358)
x=c(x,0.0001546634575888922)
x=c(x,-0.0024785009545040828)
x=c(x,-0.0037189680025416453)
x=c(x,0.005294140994319907)
x=c(x,0.0010185854046323901)
x=c(x,0.00046954663891148285)
x=c(x,-0.001021556256993134)
x=c(x,-0.0015492344531961332)
x=c(x,-0.0012575306679370125)
x=c(x,-0.0016775464904077097)
x=c(x,0.00015178274022771944)
x=c(x,-0.00018501178027636485)
x=c(x,0.004986345622925446)
x=c(x,0.0021045555485560566)
x=c(x,-0.006551428191907698)
x=c(x,0.005014407412468154)
x=c(x,0.001302961406918075)
x=c(x,0.010167625980523216)
x=c(x,0.000413202721094658)
x=c(x,-0.0013698250978610752)
x=c(x,-0.003191359140698713)
x=c(x,-0.001900336705793139)
x=c(x,0.0028190732344732673)
x=c(x,0.005664457212353025)
x=c(x,-0.0013137360439737433)
x=c(x,-0.00021275904678547803)
x=c(x,0.0006622451748553789)
x=c(x,-0.0036357316923581987)
x=c(x,-0.00945915784210566)
x=c(x,0.007767729880623407)
x=c(x,0.006244009526108216)
x=c(x,0.0004761249040916275)
x=c(x,-0.004625170626637425)
x=c(x,-0.0012274836875365023)
x=c(x,-0.0002422477472317762)
x=c(x,0.0016657401256823677)
x=c(x,0.004709324696373952)
x=c(x,0.004832058372180369)
x=c(x,-0.00932045094673582)
x=c(x,-0.0060534612292072795)
x=c(x,-0.004255519170839312)
x=c(x,-0.0029955045097295034)
x=c(x,-0.006007726538232889)
x=c(x,-0.007898748869238957)
x=c(x,0.01499396727624793)
x=c(x,-0.0006931092040566365)
x=c(x,0.000771938309749896)
x=c(x,-0.003817975562575173)
x=c(x,0.018088707812344326)
x=c(x,0.004043502597783289)
x=c(x,0.0039430799977510575)
x=c(x,0.009062560377827144)
x=c(x,0.0007704092985038322)
x=c(x,-0.0030110097070677956)
x=c(x,-0.003229911601214592)
x=c(x,0.001969706493497924)
x=c(x,0.007588954531396804)
x=c(x,-0.0027087640803620436)
x=c(x,0.007051915498489017)
x=c(x,-0.0043293637407449855)
x=c(x,-0.002647978381499819)
x=c(x,0.011923748517720878)
x=c(x,-0.0020835555318847974)
x=c(x,-0.00033562532350628956)
x=c(x,-0.001448952696568028)
x=c(x,-0.0006649386185075711)
x=c(x,-0.0021146053919941146)
x=c(x,-0.01679213098803425)
x=c(x,0.0006310142471296701)
x=c(x,-0.0011125617275511688)
x=c(x,-0.005465956696514341)
x=c(x,-0.0004235455675280256)
x=c(x,-0.01818521052630621)
x=c(x,0.00027297731048454713)
x=c(x,-0.003875042745695164)
x=c(x,0.015458089523131442)
x=c(x,-0.01496748584400296)
x=c(x,0.008460610245328388)
x=c(x,0.0029350800157346723)
x=c(x,0.001034964333355267)
x=c(x,0.0006059196119439575)
x=c(x,-0.001494296088818452)
x=c(x,-0.009936239027991177)
x=c(x,-0.005175086133964689)
x=c(x,-0.007586824498799369)
x=c(x,0.0020871026367940593)
x=c(x,-0.0020375172972381932)
x=c(x,-0.0029212898311021104)
x=c(x,-0.006395156717059994)
x=c(x,-0.004868473666827002)
x=c(x,0.006875026567013482)
x=c(x,-0.002893648722262948)
x=c(x,0.017626579018752017)
x=c(x,-0.011025105852314978)
x=c(x,-0.018592022940960063)
x=c(x,0.014207358499767102)
x=c(x,-0.004522749129406148)
x=c(x,0.007970050989139674)
x=c(x,-0.002112903592194801)
x=c(x,-0.01429414178947645)
x=c(x,0.002813991084974181)
x=c(x,-0.007258909010586827)
x=c(x,0.017182389283601513)
x=c(x,-0.005940749091826929)
x=c(x,0.0031891095318988677)
x=c(x,-0.005952172419573822)
x=c(x,0.05933208733988273)
x=c(x,0.0024731603082778393)
x=c(x,-0.00002326183974314286)
x=c(x,-0.00794128242335281)
x=c(x,0.0025544131580425107)
x=c(x,-0.015942656302493644)
x=c(x,0.003040268283538162)
x=c(x,-0.025305251348621077)
x=c(x,0.0070881844028430705)
x=c(x,-0.009068470539338175)
x=c(x,0.013348443884344701)
x=c(x,0.0007235597623891431)
x=c(x,-0.020095264593703595)
x=c(x,0.04398613116471703)
x=c(x,-0.026513965582181387)
x=c(x,-0.012602333636738731)
x=c(x,-0.015341894638374114)
x=c(x,0.00886267523740625)
x=c(x,0.017307237472809368)
x=c(x,-0.013917850175619237)
x=c(x,0.021057256120458907)
x=c(x,0.005052684500987947)
x=c(x,-0.0016188493937713392)
x=c(x,0.0020955045768770953)
x=c(x,-0.024501200135611335)
x=c(x,0.030440141019976434)
x=c(x,-0.01643578487510437)
x=c(x,0.016783845472610092)
x=c(x,-0.029856305905023615)
x=c(x,0.0033790613199173214)
x=c(x,0.006174810413960191)
x=c(x,0.0038401783845197295)
x=c(x,-0.013360693827970452)
x=c(x,0.0018445948603220143)
x=c(x,-0.021476490064673684)
x=c(x,-0.02051904881880152)
x=c(x,0.01493653986039212)
x=c(x,-0.021470441023110864)
x=c(x,-0.005654698196409707)
x=c(x,-0.031803662358963744)
x=c(x,-0.033686795030072166)
x=c(x,0)
x=c(x,-0.0003235530493145426)
x=c(x,0)
x=c(x,-0.011239385522818088)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.016823291170264442)
x=c(x,-0.05590629173294574)
x=c(x,0.07675113823957369)
x=c(x,-0.060007405062526054)
x=c(x,-0.04689437120700107)
x=c(x,-0.03490618171815863)
x=c(x,-0.011154680598507188)
x=c(x,0)
x=c(x,-0.061421524392774304)
x=c(x,-0.015994532571575504)
x=c(x,-0.054815807448337014)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.023009582752435552)
x=c(x,-0.026886524991146767)
x=c(x,0.019053700410259257)
x=c(x,0.014460971152822206)
x=c(x,0.049425667098123724)
x=c(x,0.02614534681434902)
x=c(x,-0.01001469958961178)
x=c(x,-0.023395760084433535)
x=c(x,-0.011609978138588268)
x=c(x,-0.01083944745096807)
x=c(x,0.07925228861009283)
x=c(x,0.014437854103066212)
x=c(x,0.005722755458678796)
x=c(x,-0.01949669183174473)
x=c(x,0.004725046239803898)
x=c(x,0.029663809737991778)
x=c(x,0.013128012039347029)
x=c(x,0.0063893369441592775)
x=c(x,0.022107108053085352)
x=c(x,0.009019126720039797)
x=c(x,0.014122849932132246)
x=c(x,-0.019856538208706528)
x=c(x,0.023889055074732844)
x=c(x,0.022722271378546162)
x=c(x,0.03295816824172679)
x=c(x,-0.00011975978668563045)
x=c(x,0.017071371092438458)
x=c(x,0.007913195644116435)
x=c(x,0.006330138077705677)
x=c(x,-0.016515670281735284)
x=c(x,0.000028203227567318834)
x=c(x,-0.00011298023979099806)
x=c(x,-0.00008820700582460419)
x=c(x,-0.00036137043635122877)
x=c(x,0.0008413531410719566)
x=c(x,-0.00045931551957844116)
x=c(x,-0.000023509665640579722)
x=c(x,0.002811045089919885)
x=c(x,-0.0018133956436459063)
x=c(x,-0.0010158685755975855)
x=c(x,-0.0006843945655020064)
x=c(x,-0.0006700559312589621)
x=c(x,0.000189032634989083)
x=c(x,-0.00009329322447430175)
x=c(x,0.0003414236611391248)
x=c(x,-0.0009939497841535525)
x=c(x,-0.000013572849061977506)
x=c(x,0.0004904411949077545)
x=c(x,-0.0013083773545206365)
x=c(x,-0.0031039106308447836)
x=c(x,0.004890991641684185)
x=c(x,0.0017792312459827336)
x=c(x,-0.00021819859388076175)
x=c(x,-0.0007434024822025553)
x=c(x,-0.0014436469381262343)
x=c(x,-0.00179582447805384)
x=c(x,0.0001506206682619272)
x=c(x,0.00025985817733079015)
x=c(x,0.00026318960589651085)
x=c(x,0.005804760011233691)
x=c(x,0.0017305037860989346)
x=c(x,-0.005353891253061273)
x=c(x,0.006297552780130659)
x=c(x,0.00018841399581505204)
x=c(x,0.012268350369798934)
x=c(x,0.0007519596067873945)
x=c(x,-0.0016904301138046154)
x=c(x,0.0012189549292933605)
x=c(x,-0.002280428979211611)
x=c(x,0.0019490918588402077)
x=c(x,0.0038957216436198102)
x=c(x,-0.003853238050499245)
x=c(x,0.001008879813845415)
x=c(x,0.00012038802533456703)
x=c(x,-0.0036385745738485267)
x=c(x,-0.004325429808343237)
x=c(x,0.002597215208884868)
x=c(x,0.0033705397135470206)
x=c(x,-0.0033190364965000937)
x=c(x,-0.0016459706844646218)
x=c(x,-0.003423838921251352)
x=c(x,-0.004052815345204249)
x=c(x,0.0019272613034072691)
x=c(x,0.0020681078803556634)
x=c(x,0.002374219049345386)
x=c(x,-0.009440760683049422)
x=c(x,0.0016091744585757385)
x=c(x,0.0019074900791363526)
x=c(x,-0.0015236156548930455)
x=c(x,-0.005873109888056826)
x=c(x,-0.00839247205008406)
x=c(x,0.014209993297785228)
x=c(x,0.00010896173046413603)
x=c(x,0.0010570957102109064)
x=c(x,-0.004044979141315041)
x=c(x,0.017889897419836313)
x=c(x,0.004043897882041441)
x=c(x,0.0031750095405438414)
x=c(x,0.008701093924554142)
x=c(x,0.00220887917270195)
x=c(x,-0.0034644573305489383)
x=c(x,-0.002047954275744616)
x=c(x,0.0029752947138509964)
x=c(x,0.010800552762947233)
x=c(x,-0.004991188937896184)
x=c(x,0.00614606155760701)
x=c(x,-0.003130757153508249)
x=c(x,-0.005002018449359884)
x=c(x,0.009395999988288188)
x=c(x,-0.0006646468397117757)
x=c(x,-0.001048069352378511)
x=c(x,-0.000012780442144572046)
x=c(x,-0.006435392309458176)
x=c(x,-0.0019081285765754938)
x=c(x,-0.016674983190957327)
x=c(x,0.0010756086363728954)
x=c(x,0.0035433156925229027)
x=c(x,-0.009429454455910242)
x=c(x,-0.0009600505845839433)
x=c(x,-0.012111878692629868)
x=c(x,0.000978954564452631)
x=c(x,-0.0098806069220904)
x=c(x,0.011972117942970747)
x=c(x,-0.012582859646261803)
x=c(x,0.009873831792832903)
x=c(x,-0.0012262292189338699)
x=c(x,0.0029624576041046833)
x=c(x,0.003948501126246398)
x=c(x,-0.0008614406015343698)
x=c(x,-0.009973492638265228)
x=c(x,-0.004953789001610249)
x=c(x,-0.00746727144770163)
x=c(x,0.0025146328383534185)
x=c(x,-0.0008040970144371249)
x=c(x,-0.004857553816143908)
x=c(x,-0.0039384681923297395)
x=c(x,-0.005180790065116256)
x=c(x,0.006183161828963622)
x=c(x,-0.004367067122929948)
x=c(x,0.01823454961346485)
x=c(x,-0.0016595888178536097)
x=c(x,-0.02095117263503711)
x=c(x,0.00872145046855081)
x=c(x,0.00047203708127491347)
x=c(x,0.007137992403440383)
x=c(x,-0.0037532940090219988)
x=c(x,-0.013798096719497782)
x=c(x,0.0029326638070257226)
x=c(x,-0.006909400727596725)
x=c(x,0.009322136558241111)
x=c(x,-0.0034116050166315003)
x=c(x,0.000369846331375372)
x=c(x,-0.007622817003169999)
x=c(x,0.04791838845774966)
x=c(x,-0.00039302646544766407)
x=c(x,0.027278873939075864)
x=c(x,-0.0031830478721835438)
x=c(x,0.006225738865611664)
x=c(x,-0.017218578559404455)
x=c(x,0.0038917818163578493)
x=c(x,-0.029842027767529394)
x=c(x,0.010517994964168208)
x=c(x,-0.0046974016578031465)
x=c(x,0.014036231293399051)
x=c(x,0.00042712471612740713)
x=c(x,-0.022322124536935006)
x=c(x,0.044841466857711565)
x=c(x,-0.014016426192233934)
x=c(x,-0.014277872460600539)
x=c(x,-0.01154274609142643)
x=c(x,0.008030237792510225)
x=c(x,0.020810372050761906)
x=c(x,-0.011966912702104671)
x=c(x,0.016817617723453363)
x=c(x,0.003581151786854129)
x=c(x,-0.009009256367244646)
x=c(x,-0.0024741481216115206)
x=c(x,-0.025283005871950585)
x=c(x,0.027479939781634568)
x=c(x,-0.006850185427052953)
x=c(x,0.021466049040448815)
x=c(x,-0.024014072258998615)
x=c(x,0.003156334739440413)
x=c(x,0.0068866103728823305)
x=c(x,0.010325048091522128)
x=c(x,-0.01189264656694247)
x=c(x,0.0008776333496088495)
x=c(x,-0.02319357829203452)
x=c(x,-0.023324954634796728)
x=c(x,0.009815774804123687)
x=c(x,-0.028259629970884742)
x=c(x,0.0025197270253022575)
x=c(x,-0.020288595638993902)
x=c(x,-0.031841072883621035)
x=c(x,0.014524187845526415)
x=c(x,0.0017129286946217963)
x=c(x,-0.0006553362202579802)
x=c(x,-0.018632864123103502)
x=c(x,0.0029419256489804906)
x=c(x,0.0030827940240979543)
x=c(x,-0.012243972294486968)
x=c(x,0.015054491829274949)
x=c(x,-0.055715523142281585)
x=c(x,0.0836647939227489)
x=c(x,0.007364501390987213)
x=c(x,-0.04824209106304808)
x=c(x,-0.03128083337885614)
x=c(x,-0.019808116684125326)
x=c(x,0)
x=c(x,-0.06686297105444684)
x=c(x,-0.007784733330059614)
x=c(x,-0.050433790343337837)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.007295519167033424)
x=c(x,-0.02365111289552672)
x=c(x,0)
x=c(x,-0.011976236295967654)
x=c(x,0)
x=c(x,0.008382769412862189)
x=c(x,0.0068248689818733)
x=c(x,-0.014006029038262511)
x=c(x,0.005429566458958064)
x=c(x,0.026652976561243814)
x=c(x,0.013735686863096334)
x=c(x,0.010506230765032359)
x=c(x,0.02133173988975107)
x=c(x,0.008764732986854266)
x=c(x,0.014598913837697257)
x=c(x,-0.017907812005861976)
x=c(x,0.01703494939761269)
x=c(x,0.024265290601734237)
x=c(x,0.03281712659149012)
x=c(x,0.006363552367873555)
x=c(x,0.015522128569500854)
x=c(x,-0.0038818739534203727)
x=c(x,0.004933554419986136)
x=c(x,-0.015757413926238195)
x=c(x,0.0000457526112185652)
x=c(x,-0.00013272292437664225)
x=c(x,-0.00008991957922101416)
x=c(x,-0.00038185171672072937)
x=c(x,0.000735483722438334)
x=c(x,-0.0004966745898774044)
x=c(x,0.0000025572878221218734)
x=c(x,0.0024361983532774243)
x=c(x,-0.0018423338802726753)
x=c(x,-0.0009740253129853384)
x=c(x,-0.0007306966194271403)
x=c(x,-0.0008644603657856938)
x=c(x,0.00030370901774174285)
x=c(x,-0.0004170530230806386)
x=c(x,0.0005098915057289627)
x=c(x,-0.0010470889685166482)
x=c(x,0.00021784052618837652)
x=c(x,0.0003474360502964078)
x=c(x,-0.0015478118263514411)
x=c(x,-0.0037890240013274575)
x=c(x,0.004938513004425171)
x=c(x,0.001847828427592269)
x=c(x,0.0006937659163843736)
x=c(x,-0.0007263048782612487)
x=c(x,-0.0012991873712376117)
x=c(x,-0.001458420122942819)
x=c(x,0.00026513896802585787)
x=c(x,0.000016815182293142404)
x=c(x,0.0002728389526094566)
x=c(x,0.004851653130063243)
x=c(x,0.002044765942046303)
x=c(x,-0.0060584935971358354)
x=c(x,0.006427366595745407)
x=c(x,0.0006108347286781293)
x=c(x,0.010625047426809328)
x=c(x,0.0010188561579371343)
x=c(x,-0.0017412295546005562)
x=c(x,0.00042974362527891584)
x=c(x,-0.002204179558077619)
x=c(x,0.0015071226073664417)
x=c(x,0.004716914610596831)
x=c(x,-0.003637172323474281)
x=c(x,0.001667610241161357)
x=c(x,-0.00006976713421737914)
x=c(x,-0.00378840942908867)
x=c(x,-0.006103197922873636)
x=c(x,0.003872670293247429)
x=c(x,0.0060206337506843)
x=c(x,-0.001565956358377503)
x=c(x,-0.0032849534226553055)
x=c(x,-0.002232496482933987)
x=c(x,-0.0022613855342535367)
x=c(x,0.0017913615274393862)
x=c(x,0.002899559749700439)
x=c(x,0.003427920015714765)
x=c(x,-0.00972262513595965)
x=c(x,-0.0013487731337313003)
x=c(x,-0.0021429984280888453)
x=c(x,-0.0019234499283057442)
x=c(x,-0.005632902658797434)
x=c(x,-0.007323952895393905)
x=c(x,0.014220908332522608)
x=c(x,-0.00046876957084491107)
x=c(x,0.0008151132806991232)
x=c(x,-0.0036028668530970168)
x=c(x,0.01789532783819641)
x=c(x,0.003158662704668504)
x=c(x,0.003354174100604371)
x=c(x,0.008436397559228884)
x=c(x,0.0014515604838059985)
x=c(x,-0.0030593413460778315)
x=c(x,-0.002576423445761306)
x=c(x,0.002622526093426266)
x=c(x,0.010351377154853372)
x=c(x,-0.0036800007803225385)
x=c(x,0.005242091700449554)
x=c(x,-0.003518908081445931)
x=c(x,-0.004977432066896256)
x=c(x,0.010112178134245453)
x=c(x,-0.001862482508141774)
x=c(x,-0.000541528436891713)
x=c(x,0.0003011967974658422)
x=c(x,-0.00605267060920444)
x=c(x,-0.0038605760928121175)
x=c(x,-0.016773507484797723)
x=c(x,0.0018875454176241276)
x=c(x,0.003208284218088193)
x=c(x,-0.006735395183649289)
x=c(x,-0.0006521110815093783)
x=c(x,-0.0154984307856576)
x=c(x,0.0016008413990942758)
x=c(x,-0.010666120531193658)
x=c(x,0.010646886441435046)
x=c(x,-0.012086640460729388)
x=c(x,0.011989512500141507)
x=c(x,-0.0005188794715244969)
x=c(x,0.0038531764132049935)
x=c(x,0.0075609740838449725)
x=c(x,0.0000529493316368871)
x=c(x,-0.00836041657872685)
x=c(x,-0.004906904156964345)
x=c(x,-0.007579707566739867)
x=c(x,0.0024779588327078026)
x=c(x,-0.0015742875860893816)
x=c(x,-0.0038250896360790157)
x=c(x,-0.005283270018551672)
x=c(x,-0.006062388195786621)
x=c(x,0.006616880825615441)
x=c(x,-0.004027313854832928)
x=c(x,0.020052233030311888)
x=c(x,-0.006462122780364397)
x=c(x,-0.01737890729603269)
x=c(x,0.010009442036760472)
x=c(x,-0.0019160435797300572)
x=c(x,0.007364703776485499)
x=c(x,-0.002956462380149541)
x=c(x,-0.013678646447890418)
x=c(x,0.003347662180068746)
x=c(x,-0.006224769431199165)
x=c(x,0.011884215300867699)
x=c(x,-0.003914782248494467)
x=c(x,0.0016884669686070923)
x=c(x,-0.006469283578186313)
x=c(x,0.047058852802514255)
x=c(x,0.00136530440759462)
x=c(x,0.017124415956057487)
x=c(x,-0.004516817176411046)
x=c(x,0.006097680186408445)
x=c(x,-0.015729001488661066)
x=c(x,0.004239579773044634)
x=c(x,-0.026265917905186672)
x=c(x,0.009852872606472378)
x=c(x,-0.005513078677505127)
x=c(x,0.01366635086634893)
x=c(x,0.0025826791820629438)
x=c(x,-0.019557191077354506)
x=c(x,0.043706019004955986)
x=c(x,-0.019623494571745316)
x=c(x,-0.01414233557017611)
x=c(x,-0.012945505157845627)
x=c(x,0.00863017172080868)
x=c(x,0.01625235648718296)
x=c(x,-0.013301840061347077)
x=c(x,0.018899042714135072)
x=c(x,0.006835054159109187)
x=c(x,-0.004191967259117032)
x=c(x,0.000880049088037513)
x=c(x,-0.024380988426390002)
x=c(x,0.02850713549653951)
x=c(x,-0.01380453610921716)
x=c(x,0.01858602448145018)
x=c(x,-0.030897217888867675)
x=c(x,0.007466326139997391)
x=c(x,0.008028129101639985)
x=c(x,0.007802605808997014)
x=c(x,-0.010322821658164491)
x=c(x,-0.0026763180884458566)
x=c(x,-0.022992892582853346)
x=c(x,-0.023375032216077604)
x=c(x,0.014248890180632369)
x=c(x,-0.022936576639918667)
x=c(x,-0.004942414265596572)
x=c(x,-0.025421496487904788)
x=c(x,-0.03209021786066306)
x=c(x,0.013458092824571981)
x=c(x,0.000981393851808077)
x=c(x,-0.0014616170573373422)
x=c(x,-0.013387862649093975)
x=c(x,-0.00048281491929688653)
x=c(x,0.002705250528871785)
x=c(x,-0.010457428936111117)
x=c(x,0.015975517454850555)
x=c(x,-0.0539530615011249)
x=c(x,0.0855437731965127)
x=c(x,0.008587976309150355)
x=c(x,-0.047365321700256036)
x=c(x,-0.03323334615318173)
x=c(x,-0.016430306195350994)
x=c(x,0)
x=c(x,-0.062071028625863035)
x=c(x,-0.006162611770473616)
x=c(x,-0.05099599120285896)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.007135951510217883)
x=c(x,-0.023723253208450625)
x=c(x,0)
x=c(x,-0.013703563287981666)
x=c(x,0)
x=c(x,0.008103966050463731)
x=c(x,0.006494569869083318)
x=c(x,-0.012684376703328394)
x=c(x,0.0034449523792707674)
x=c(x,0.02759645948764626)
x=c(x,0.012833479354064405)
x=c(x,0.008964436874101226)
x=c(x,0.021727797233688367)
x=c(x,0.008911748869186626)
x=c(x,0.014095685802105707)
x=c(x,-0.018521135705066968)
x=c(x,0.01845909893194521)
x=c(x,0.02404217232203628)
x=c(x,0.032272048459174495)
x=c(x,0.002442863903604953)
x=c(x,0.017073534355596352)
x=c(x,-0.0034502715829373876)
x=c(x,0.004215003175560214)
x=c(x,-0.01508904402319522)
x=c(x,0.00005046375832397028)
x=c(x,-0.00014298859777832254)
x=c(x,-0.00009859135178609067)
x=c(x,-0.0003545103974309989)
x=c(x,0.0006189897216121207)
x=c(x,-0.0005940188278920236)
x=c(x,0.00007878589177840257)
x=c(x,0.0019183849549384328)
x=c(x,-0.002051425704915944)
x=c(x,-0.0010028767256617908)
x=c(x,-0.0007471288820430871)
x=c(x,-0.000999937384662966)
x=c(x,0.0004323201423358085)
x=c(x,-0.0007617188585935622)
x=c(x,0.0005220931192121392)
x=c(x,-0.0011760038014228319)
x=c(x,0.0007291979271190083)
x=c(x,0.0002889023624293873)
x=c(x,-0.002116110403850226)
x=c(x,-0.004166308463213359)
x=c(x,0.004987480282661075)
x=c(x,0.0016916300104782604)
x=c(x,0.0013049221335976727)
x=c(x,-0.0007555800014714657)
x=c(x,-0.0010931722374813572)
x=c(x,-0.000952617221613673)
x=c(x,-0.0004245821075163829)
x=c(x,-0.00014484040313668642)
x=c(x,0.0003872119496561833)
x=c(x,0.00415308473468856)
x=c(x,0.0022199013713241167)
x=c(x,-0.006706116067886146)
x=c(x,0.005867599976749339)
x=c(x,0.0008917579257191191)
x=c(x,0.009238351583398776)
x=c(x,0.001131922787558127)
x=c(x,-0.0016763571639378482)
x=c(x,-0.0005917933384021182)
x=c(x,-0.002374331694605559)
x=c(x,0.0014177843391763897)
x=c(x,0.006079307509438362)
x=c(x,-0.0031291129947758397)
x=c(x,0.0016466846918449872)
x=c(x,0.00014014352301420927)
x=c(x,-0.003860039044928681)
x=c(x,-0.007185874856334215)
x=c(x,0.0047016036148450615)
x=c(x,0.006555247582671741)
x=c(x,0.00030277708450904647)
x=c(x,-0.004946580916628571)
x=c(x,-0.0010662047947177064)
x=c(x,-0.00028954626479937585)
x=c(x,0.0015224181895961)
x=c(x,0.004085010657081836)
x=c(x,0.004164720075376273)
x=c(x,-0.009863387905121814)
x=c(x,-0.0041426272154165686)
x=c(x,-0.005667871794124275)
x=c(x,-0.002823077818813431)
x=c(x,-0.005931783501932974)
x=c(x,-0.005336971683115085)
x=c(x,0.014187460341926241)
x=c(x,-0.0009976099266428289)
x=c(x,0.000457688828748578)
x=c(x,-0.0038501500351545716)
x=c(x,0.018204616673726578)
x=c(x,0.003056450543262604)
x=c(x,0.003462169115839837)
x=c(x,0.008150626473830625)
x=c(x,0.0012444187870138347)
x=c(x,-0.0025674315169403575)
x=c(x,-0.0031268331141743023)
x=c(x,0.002857613909274114)
x=c(x,0.010222887142579181)
x=c(x,-0.0028558180982748657)
x=c(x,0.0059761850262402254)
x=c(x,-0.0045612103873391326)
x=c(x,-0.003991315049021733)
x=c(x,0.010914300401490246)
x=c(x,-0.002794646247489693)
x=c(x,-0.00039008296294864897)
x=c(x,0.00020917225828948093)
x=c(x,-0.00527967538380054)
x=c(x,-0.0054827083475682695)
x=c(x,-0.017438643261702726)
x=c(x,0.0016145019664440688)
x=c(x,0.00047372197311243484)
x=c(x,-0.007395873466503847)
x=c(x,-0.00018304771824423027)
x=c(x,-0.019357759669138958)
x=c(x,0.000927738415515574)
x=c(x,-0.009083573291924338)
x=c(x,0.010653528755674227)
x=c(x,-0.011896943922119643)
x=c(x,0.012780020107351684)
x=c(x,0.0009154905051330966)
x=c(x,0.004615340851685357)
x=c(x,0.010061141220182862)
x=c(x,0.0009524112483541268)
x=c(x,-0.00836667621944409)
x=c(x,-0.004776428557600923)
x=c(x,-0.007743396762048207)
x=c(x,0.002416478379968049)
x=c(x,-0.0022481624523008597)
x=c(x,-0.002938438614217475)
x=c(x,-0.006760245604579351)
x=c(x,-0.007177650962342001)
x=c(x,0.006975904644960432)
x=c(x,-0.003662516442081823)
x=c(x,0.019754212982441524)
x=c(x,-0.009821067192920769)
x=c(x,-0.013294743515186974)
x=c(x,0.012076963466958033)
x=c(x,-0.004489022639625626)
x=c(x,0.008260286284730703)
x=c(x,-0.0018789798790862418)
x=c(x,-0.013559441114255952)
x=c(x,0.0033752270127146264)
x=c(x,-0.0061901531555921645)
x=c(x,0.015014973535815355)
x=c(x,-0.004835579685468372)
x=c(x,0.0033814754013626945)
x=c(x,-0.004660364781576925)
x=c(x,0.04680763868329756)
x=c(x,0.003338285400031019)
x=c(x,0.007339464461059342)
x=c(x,-0.006332208118931731)
x=c(x,0.0031957455529133217)
x=c(x,-0.011773544212942126)
x=c(x,0.004648891773855078)
x=c(x,-0.020705442814983755)
x=c(x,0.008759104650049636)
x=c(x,-0.007198950198909088)
x=c(x,0.012458569014258422)
x=c(x,0.003234329605932998)
x=c(x,-0.0191358160200763)
x=c(x,0.04256990036205013)
x=c(x,-0.028814676047987847)
x=c(x,-0.01090904293388951)
x=c(x,-0.014881698682659674)
x=c(x,0.009445132787051393)
x=c(x,0.01062160842020262)
x=c(x,-0.014132138675839645)
x=c(x,0.024656520766291788)
x=c(x,0.010341036082243397)
x=c(x,0.002728413930884194)
x=c(x,0.004241568067367822)
x=c(x,-0.0246043275520232)
x=c(x,0.029816636697060916)
x=c(x,-0.018258754787504407)
x=c(x,0.015954987253431373)
x=c(x,-0.03297780831789017)
x=c(x,0.01231377756906969)
x=c(x,0.009792368955361017)
x=c(x,0.004777951917924673)
x=c(x,-0.007775759213340405)
x=c(x,-0.0059271706054205816)
x=c(x,-0.0226570863411787)
x=c(x,-0.02306364677610455)
x=c(x,0.016950725595406765)
x=c(x,-0.01869477228165265)
x=c(x,-0.011165150684394186)
x=c(x,-0.0307137180913205)
x=c(x,-0.03321021088114812)
x=c(x,0.01209738940126695)
x=c(x,-0.00045862230805450937)
x=c(x,-0.0016249134273040766)
x=c(x,-0.007096782624687852)
x=c(x,-0.004131403192525759)
x=c(x,0.0027262021076772734)
x=c(x,-0.003781809403772421)
x=c(x,0.010431361741766596)
x=c(x,-0.051948786003998305)
x=c(x,0.09008480132397656)
x=c(x,-0.026869633455999853)
x=c(x,-0.04662856178055784)
x=c(x,-0.03348619431355179)
x=c(x,-0.013087263783871471)
x=c(x,0)
x=c(x,-0.06184197637357776)
x=c(x,-0.01196986488619174)
x=c(x,-0.05336226078254488)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,-0.007606753362533438)
x=c(x,-0.024126658129273348)
x=c(x,0)
x=c(x,-0.01482070302437484)
x=c(x,0)
x=c(x,0.007703863123953637)
x=c(x,0.006143019007529755)
x=c(x,-0.012029003300713477)
x=c(x,0.0015970849019820276)
x=c(x,0.028721205237488934)
x=c(x,0.011980703015199282)
x=c(x,0.007210765953225483)
x=c(x,0.0219002945583087)
x=c(x,0.008714319692312072)
x=c(x,0.013780381128271785)
x=c(x,-0.02005975490972587)
x=c(x,0.01826868017014573)
x=c(x,0.023700585143496426)
x=c(x,0.031999899147337356)
x=c(x,0.001989944647960919)
x=c(x,0.01717122294371989)
x=c(x,-0.0018170219923244618)
x=c(x,0.004291775226904699)
x=c(x,-0.014943284382015865)
x=c(x,0.000017774404749467608)
x=c(x,-0.00008801866621639876)
x=c(x,-0.00005157332407939547)
x=c(x,-0.00030256708643922086)
x=c(x,0.0008448903320650987)
x=c(x,-0.0004572578221221128)
x=c(x,0.000034897750632493454)
x=c(x,0.002952569535431053)
x=c(x,-0.0021367643726772465)
x=c(x,-0.0011203135668455652)
x=c(x,-0.0005052747082477259)
x=c(x,-0.00048290955996042173)
x=c(x,0.00010329055380763324)
x=c(x,-0.000065485516942231)
x=c(x,0.00015735808040398563)
x=c(x,-0.00040790484057689233)
x=c(x,0.00016027382391763285)
x=c(x,0.0004596067565868946)
x=c(x,-0.0015252825582983114)
x=c(x,-0.0020947449035983294)
x=c(x,0.005132876518290482)
x=c(x,0.0017728446746713043)
x=c(x,0.00033691433375049166)
x=c(x,-0.0008584624643246773)
x=c(x,-0.0014096094268021113)
x=c(x,-0.0015767557650955104)
x=c(x,-0.0008526001403362038)
x=c(x,0.00034466852297032537)
x=c(x,-0.00012608581705361436)
x=c(x,0.005025178165562655)
x=c(x,0.0014480339263273538)
x=c(x,-0.005460641088289823)
x=c(x,0.006490276115181755)
x=c(x,0.0005350814830635385)
x=c(x,0.010279906363719515)
x=c(x,0.0005993207155292682)
x=c(x,-0.0013246210533245093)
x=c(x,0.0009088402597117171)
x=c(x,-0.0024132117155978927)
x=c(x,0.0022907781824115098)
x=c(x,0.0035316876048138595)
x=c(x,-0.004267313289821984)
x=c(x,0.0008912748754202335)
x=c(x,0.00010391096773975743)
x=c(x,-0.003673660844550796)
x=c(x,-0.0007762382871883828)
x=c(x,0.0012184558637762608)
x=c(x,0.002089652332589297)
x=c(x,-0.004284666004949598)
x=c(x,-0.002834892376214875)
x=c(x,-0.003423993206865308)
x=c(x,-0.004095950846299883)
x=c(x,0.0019846040570714422)
x=c(x,0.001166757757290262)
x=c(x,0.0024595855385549405)
x=c(x,-0.008757775877113313)
x=c(x,0.004076286111400446)
x=c(x,0.002879144349821452)
x=c(x,-0.0020705753847606806)
x=c(x,-0.005388752212849638)
x=c(x,-0.012885738972326139)
x=c(x,0.013063223059446799)
x=c(x,-0.00009668165017366865)
x=c(x,0.00108180011261301)
x=c(x,-0.003534872667713352)
x=c(x,0.016137696844110306)
x=c(x,0.0042080537642134016)
x=c(x,0.0029389651435877133)
x=c(x,0.008552757179665521)
x=c(x,0.0024006255077609075)
x=c(x,-0.0035890537029355132)
x=c(x,-0.0018657361381023859)
x=c(x,0.003110717188081184)
x=c(x,0.010888888985895096)
x=c(x,-0.004732083564704845)
x=c(x,0.00581083293785181)
x=c(x,-0.003997657654839424)
x=c(x,-0.005140294494751729)
x=c(x,0.008868194146250294)
x=c(x,-0.0009361441278166285)
x=c(x,-0.0006389905410560401)
x=c(x,0.0006634386080261765)
x=c(x,-0.004211545362534019)
x=c(x,-0.00278735828330828)
x=c(x,-0.016220473897903945)
x=c(x,0.0024092149553318286)
x=c(x,0.002812540216418104)
x=c(x,-0.008445368087621448)
x=c(x,-0.0007879160090542816)
x=c(x,-0.013054002413808573)
x=c(x,0.0016377551039314234)
x=c(x,-0.009460406577321674)
x=c(x,0.011005319462068525)
x=c(x,-0.012109516515126366)
x=c(x,0.010251414662604985)
x=c(x,-0.0012153848207140652)
x=c(x,0.003986882142274071)
x=c(x,0.008157485042043128)
x=c(x,-0.00022299284539123784)
x=c(x,-0.008927647119273779)
x=c(x,-0.005451349739488633)
x=c(x,-0.007915946576499995)
x=c(x,0.00344744500816254)
x=c(x,-0.001277285567609803)
x=c(x,-0.00497949687039593)
x=c(x,-0.0028461574548454688)
x=c(x,-0.006944143477924645)
x=c(x,0.006090272589310512)
x=c(x,-0.004943897970910735)
x=c(x,0.019581856112870877)
x=c(x,-0.0036204775208314487)
x=c(x,-0.018502121394133163)
x=c(x,0.009663705378967595)
x=c(x,-0.000926723532415777)
x=c(x,0.008303222256292563)
x=c(x,-0.004984167008619796)
x=c(x,-0.015235526386651002)
x=c(x,0.0018876418680923927)
x=c(x,-0.008237412762655867)
x=c(x,0.01232072185015367)
x=c(x,-0.003698235085085212)
x=c(x,0.0011261675594956817)
x=c(x,-0.009893323347710925)
x=c(x,0.05767425710234777)
x=c(x,0.0010244345362358537)
x=c(x,0.019428259868995375)
x=c(x,-0.004317636266919173)
x=c(x,0.006511968818783991)
x=c(x,-0.01584761705581341)
x=c(x,0.004784625807041758)
x=c(x,-0.029152335118948946)
x=c(x,0.011400875784598419)
x=c(x,-0.0030771104060499464)
x=c(x,0.015421172961273598)
x=c(x,0.001024640655861121)
x=c(x,-0.02104945232698305)
x=c(x,0.04230836837384252)
x=c(x,-0.0192614167475007)
x=c(x,-0.013356386914964474)
x=c(x,-0.012835977537357992)
x=c(x,0.00399574274334167)
x=c(x,0.01747359655795501)
x=c(x,-0.01007008509668365)
x=c(x,0.013663821248898887)
x=c(x,0.0025931673177174244)
x=c(x,-0.011078512770109138)
x=c(x,-0.0034488106630960243)
x=c(x,-0.02249740001790038)
x=c(x,0.02637406585687705)
x=c(x,-0.00832257601692656)
x=c(x,0.0184765949568033)
x=c(x,-0.021874907599451918)
x=c(x,0.0020055472790415883)
x=c(x,0.008655396620590332)
x=c(x,0.009132423074605397)
x=c(x,-0.011456664300771507)
x=c(x,0.00041421809829381243)
x=c(x,-0.022612937750566713)
x=c(x,-0.02378970344425492)
x=c(x,0.011166376079435983)
x=c(x,-0.028269173708642587)
x=c(x,0.00170261311971612)
x=c(x,-0.01973555851364532)
x=c(x,-0.03077797029571054)
x=c(x,0.012454464956035192)
x=c(x,0.0031408211828745703)
x=c(x,-0.0008651165333647499)
x=c(x,-0.022431697185598547)
x=c(x,0.0048755778780458225)
x=c(x,0.0006187052424373526)
x=c(x,-0.00686392189688537)
x=c(x,0.008295010399491822)
x=c(x,-0.058776617632251164)
x=c(x,0.07400426979721554)
x=c(x,0.000663607622803867)
x=c(x,-0.04816589140989961)
x=c(x,-0.029168368157871185)
x=c(x,-0.019716652604077407)
x=c(x,0.00664341884581506)
x=c(x,-0.07105491458514548)
x=c(x,-0.01187420911140908)
x=c(x,-0.057547580301034566)
x=c(x,0.017606854066904768)
x=c(x,-0.011379575615282996)
x=c(x,-0.0022703025338242197)
x=c(x,0)
x=c(x,-0.013730548092907364)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.011685545157977968)
x=c(x,0.00665008083511775)
x=c(x,0.021808724137485785)
x=c(x,0.009584731229137668)
x=c(x,0.012680329776399352)
x=c(x,-0.019060043682337456)
x=c(x,0.020099071225110968)
x=c(x,0.024381153982066462)
x=c(x,0.03308623623147984)
x=c(x,-0.0015466288462144336)
x=c(x,0.01907934374924034)
x=c(x,-0.0005637899137646887)
x=c(x,0.003291642524928835)
x=c(x,-0.014411321624626217)
x=c(x,0.000029493176864785154)
x=c(x,-0.00011105897877426475)
x=c(x,-0.00007282227247441215)
x=c(x,-0.000331810941155653)
x=c(x,0.0007186866732025527)
x=c(x,-0.00044806043385624923)
x=c(x,-0.000016024621752905577)
x=c(x,0.002712085695977461)
x=c(x,-0.002013502133394056)
x=c(x,-0.0011411526320890995)
x=c(x,-0.0004915976327449636)
x=c(x,-0.00045688010069561613)
x=c(x,-0.0000573830949014971)
x=c(x,-0.00030053492327413003)
x=c(x,0.00033083677333552527)
x=c(x,-0.0004066992476677842)
x=c(x,0.00025188047689847986)
x=c(x,0.0007182641933634768)
x=c(x,-0.001559874952892421)
x=c(x,-0.0021942207681116873)
x=c(x,0.005182854316820656)
x=c(x,0.0017625670980643893)
x=c(x,0.0005870715162963794)
x=c(x,-0.0009690647088548517)
x=c(x,-0.0013500488110648008)
x=c(x,-0.0017088523607816472)
x=c(x,-0.0010399636628758144)
x=c(x,0.0002359903119684614)
x=c(x,-0.00009529696061224512)
x=c(x,0.0035462459815150445)
x=c(x,0.0013977118336798817)
x=c(x,-0.005489288615282658)
x=c(x,0.005840635602457182)
x=c(x,0.0006452542889720941)
x=c(x,0.010141428131387995)
x=c(x,0.0006071043909275588)
x=c(x,-0.0013859485346654852)
x=c(x,0.00016641272922278055)
x=c(x,-0.0027306356174941248)
x=c(x,0.002349093222418085)
x=c(x,0.004235567716838022)
x=c(x,-0.004168187869543291)
x=c(x,0.0009918104065940957)
x=c(x,0.00008390354287538165)
x=c(x,-0.003844216658875053)
x=c(x,-0.0021669141506656876)
x=c(x,0.0015969272619188004)
x=c(x,0.004645413112977192)
x=c(x,-0.00372894249887646)
x=c(x,-0.004258963039564346)
x=c(x,-0.0026428798631003953)
x=c(x,-0.002556852305558869)
x=c(x,0.001719241957763272)
x=c(x,0.0022428020466509486)
x=c(x,0.0032503599933325447)
x=c(x,-0.009450283119644177)
x=c(x,0.001990986147935605)
x=c(x,-0.00033250757690960126)
x=c(x,-0.002645574686963793)
x=c(x,-0.005501830780600358)
x=c(x,-0.010582914329094036)
x=c(x,0.013372258213578223)
x=c(x,-0.0006440903768438794)
x=c(x,0.0008762812822129024)
x=c(x,-0.003563693435811135)
x=c(x,0.01758097424471133)
x=c(x,0.003477549307940963)
x=c(x,0.0032982342159488813)
x=c(x,0.00848373729284567)
x=c(x,0.0019755584434833695)
x=c(x,-0.003189994539253029)
x=c(x,-0.002303977232836328)
x=c(x,0.0027486115203573403)
x=c(x,0.010371472915085424)
x=c(x,-0.004139361308915098)
x=c(x,0.005093716383356333)
x=c(x,-0.0037916707248017456)
x=c(x,-0.005143905316649162)
x=c(x,0.009423182390550518)
x=c(x,-0.0023256716092739703)
x=c(x,-0.0005582755635904589)
x=c(x,0.0008519604559696157)
x=c(x,-0.0034646619567708504)
x=c(x,-0.004420332310073323)
x=c(x,-0.015736568055175395)
x=c(x,0.0028357072793536043)
x=c(x,0.003972557197733993)
x=c(x,-0.006732770279420393)
x=c(x,-0.0007313263579861347)
x=c(x,-0.0149033308736116)
x=c(x,0.0022720862463213327)
x=c(x,-0.010038641517243437)
x=c(x,0.00993892223177968)
x=c(x,-0.012315981164998055)
x=c(x,0.011784391439497305)
x=c(x,-0.00001710769906079754)
x=c(x,0.0044492490079683766)
x=c(x,0.00938972955289303)
x=c(x,0.0013718461758995425)
x=c(x,-0.008880611407661419)
x=c(x,-0.005345615124336434)
x=c(x,-0.008293562846714897)
x=c(x,0.003478308040035708)
x=c(x,-0.0009092912278961292)
x=c(x,-0.0053811179803927925)
x=c(x,-0.0018321849444177486)
x=c(x,-0.009021490548067992)
x=c(x,0.00621517853920341)
x=c(x,-0.004637207677662532)
x=c(x,0.020319176794048086)
x=c(x,-0.003677582744170492)
x=c(x,-0.014487391104802733)
x=c(x,0.00931368411439456)
x=c(x,-0.0027448286979419104)
x=c(x,0.00785679247619787)
x=c(x,-0.004672471631511092)
x=c(x,-0.014953927955094327)
x=c(x,0.002075528934265949)
x=c(x,-0.007235876995442529)
x=c(x,0.015276344639919311)
x=c(x,-0.004654369222122573)
x=c(x,0.002184138326949389)
x=c(x,-0.007534964584026528)
x=c(x,0.05613711746357089)
x=c(x,0.0015024033056311164)
x=c(x,0.013589647585160876)
x=c(x,-0.005661512568818616)
x=c(x,0.0060740099302276146)
x=c(x,-0.014967657402910228)
x=c(x,0.005375411393249566)
x=c(x,-0.02605766526396603)
x=c(x,0.010989207649980601)
x=c(x,-0.0034433462814044205)
x=c(x,0.013678393867408363)
x=c(x,0.0010260504770943)
x=c(x,-0.02093945661286894)
x=c(x,0.04301391946405933)
x=c(x,-0.02295326292454939)
x=c(x,-0.01429554761361439)
x=c(x,-0.013291524606884085)
x=c(x,0.004246257554223771)
x=c(x,0.01603023261212183)
x=c(x,-0.010218377527125693)
x=c(x,0.014743744894496164)
x=c(x,0.005654572255304396)
x=c(x,-0.008546294965196646)
x=c(x,-0.0006176785934495726)
x=c(x,-0.023337298569198583)
x=c(x,0.02781643130687333)
x=c(x,-0.012173603682253125)
x=c(x,0.016993338574790354)
x=c(x,-0.0248953747497441)
x=c(x,0.00604414306876484)
x=c(x,0.008270252567600687)
x=c(x,0.008373334675687247)
x=c(x,-0.010284639075352672)
x=c(x,-0.0014128312895865308)
x=c(x,-0.023320900799913686)
x=c(x,-0.02386949176710754)
x=c(x,0.012892967462528791)
x=c(x,-0.02441274536870702)
x=c(x,-0.004678956082522215)
x=c(x,-0.02387346796803275)
x=c(x,-0.031028629397598793)
x=c(x,0.015625318658109538)
x=c(x,0.003266911308985882)
x=c(x,-0.0022096456120505163)
x=c(x,-0.019603478088962588)
x=c(x,-0.0019524477511785065)
x=c(x,0.0045037762689407864)
x=c(x,-0.002042538042370609)
x=c(x,0.0061586947136004445)
x=c(x,-0.05715658081964229)
x=c(x,0.07905528113881306)
x=c(x,-0.005132712274544261)
x=c(x,-0.04599350253069828)
x=c(x,-0.03243721372408618)
x=c(x,-0.01500854536834547)
x=c(x,0.006743606619131735)
x=c(x,-0.06588465371257408)
x=c(x,-0.00483013323182021)
x=c(x,-0.053198582128594164)
x=c(x,0.012187091957505785)
x=c(x,-0.014426934866706279)
x=c(x,-0.0025757160040483854)
x=c(x,0)
x=c(x,-0.017338629895992646)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.011439043983467914)
x=c(x,0.006008054793865526)
x=c(x,0.0216376366812649)
x=c(x,0.009851793734920164)
x=c(x,0.012245739757988624)
x=c(x,-0.01919582904351527)
x=c(x,0.020772204283549933)
x=c(x,0.024647600203281345)
x=c(x,0.03364590537955246)
x=c(x,-0.00294058685607384)
x=c(x,0.01979818761652039)
x=c(x,0.0009624797708780693)
x=c(x,0.0029914540421168254)
x=c(x,-0.014191326319886954)
x=c(x,0.000046194547892774395)
x=c(x,-0.0001309519620143204)
x=c(x,-0.00011269412083144357)
x=c(x,-0.00035980451172666725)
x=c(x,0.0006144985852975565)
x=c(x,-0.0004798069044010067)
x=c(x,-0.000028643686940055285)
x=c(x,0.0023296973428263605)
x=c(x,-0.0018225982176501116)
x=c(x,-0.0011754286613377407)
x=c(x,-0.000458777364682269)
x=c(x,-0.0005014047091445103)
x=c(x,-0.000013928132935336248)
x=c(x,-0.0005224445363583184)
x=c(x,0.000379443111752336)
x=c(x,-0.00038844725918632)
x=c(x,0.00042916184346567475)
x=c(x,0.0007982242174485034)
x=c(x,-0.001630449777652583)
x=c(x,-0.002288757987359623)
x=c(x,0.005287756178348573)
x=c(x,0.0018161162919926826)
x=c(x,0.0008531069005737418)
x=c(x,-0.001060670054437598)
x=c(x,-0.0013120064338816952)
x=c(x,-0.0017415203860310603)
x=c(x,-0.0013558248689109634)
x=c(x,0.00024997000590722015)
x=c(x,-0.0001471950532357011)
x=c(x,0.002302174065619221)
x=c(x,0.0014900796370497782)
x=c(x,-0.005902738076355302)
x=c(x,0.004519189076555879)
x=c(x,0.0013431779065792445)
x=c(x,0.009706367893452092)
x=c(x,0.0010012962869151924)
x=c(x,-0.0014116307733516218)
x=c(x,-0.00044833674579150995)
x=c(x,-0.002623058561664446)
x=c(x,0.0016765182324402507)
x=c(x,0.005553947687136214)
x=c(x,-0.004492071707348969)
x=c(x,0.0023582403951468343)
x=c(x,0.00033900613216106506)
x=c(x,-0.004221116896833062)
x=c(x,-0.004102193361991402)
x=c(x,0.0021065657301949955)
x=c(x,0.007670568650382032)
x=c(x,-0.0027406023188085954)
x=c(x,-0.005987671009820532)
x=c(x,-0.0013809116638151052)
x=c(x,-0.0005035631240790159)
x=c(x,0.0017490966571896756)
x=c(x,0.004116706430807234)
x=c(x,0.003874502023108573)
x=c(x,-0.009609154301743767)
x=c(x,-0.0007614146207614202)
x=c(x,-0.004193556539211418)
x=c(x,-0.003769090543639489)
x=c(x,-0.005893273465358164)
x=c(x,-0.007046047145503182)
x=c(x,0.013232057240842953)
x=c(x,-0.0010203777989739255)
x=c(x,0.0005644960598351593)
x=c(x,-0.0038206790547412376)
x=c(x,0.01785020935645561)
x=c(x,0.0031436657852772464)
x=c(x,0.0035882946836713727)
x=c(x,0.008171327993894853)
x=c(x,0.001428095393918363)
x=c(x,-0.002870207151045826)
x=c(x,-0.002581403202441781)
x=c(x,0.003018023699868454)
x=c(x,0.00994253188601384)
x=c(x,-0.0036413606385403067)
x=c(x,0.005028836600657699)
x=c(x,-0.0032616563322765833)
x=c(x,-0.004560199026079466)
x=c(x,0.010091972602413285)
x=c(x,-0.00323774830247006)
x=c(x,-0.0004929750482686239)
x=c(x,0.0010037871535403399)
x=c(x,-0.0035069647875945586)
x=c(x,-0.006052443728975082)
x=c(x,-0.0163376769670959)
x=c(x,0.0014430835763147847)
x=c(x,0.00402456247938137)
x=c(x,-0.007760289103295251)
x=c(x,-0.00028050474640223494)
x=c(x,-0.018612006070659413)
x=c(x,0.0030933594834739783)
x=c(x,-0.01185522003483089)
x=c(x,0.009914167587070722)
x=c(x,-0.012380844312086173)
x=c(x,0.01311268785749921)
x=c(x,0.000553836433222334)
x=c(x,0.00550036062595348)
x=c(x,0.011812214153064606)
x=c(x,0.002845741899185894)
x=c(x,-0.009037056109653087)
x=c(x,-0.005465617138869292)
x=c(x,-0.00887559266646719)
x=c(x,0.004323421571299724)
x=c(x,-0.0015554574271297588)
x=c(x,-0.004273752921224967)
x=c(x,-0.0016289215492357406)
x=c(x,-0.009512142525506515)
x=c(x,0.006465377620393122)
x=c(x,-0.002925333139865562)
x=c(x,0.020089056857725378)
x=c(x,-0.004882324302504212)
x=c(x,-0.01156106751942878)
x=c(x,0.010831868391589589)
x=c(x,-0.004622190449802769)
x=c(x,0.007590495500334252)
x=c(x,-0.004188099262492425)
x=c(x,-0.014728908582877048)
x=c(x,0.0020617568771762124)
x=c(x,-0.0053953589092688966)
x=c(x,0.017921626184789933)
x=c(x,-0.005421803086096987)
x=c(x,0.0035479601822336754)
x=c(x,-0.005594236009121082)
x=c(x,0.05598947665901832)
x=c(x,0.004043774986229317)
x=c(x,0.004772753220429882)
x=c(x,-0.007170287372103209)
x=c(x,0.0037586946076424645)
x=c(x,-0.01172613745405037)
x=c(x,0.005691095426374522)
x=c(x,-0.022366676229581123)
x=c(x,0.009936875030944854)
x=c(x,-0.004937188631715444)
x=c(x,0.009811923740884508)
x=c(x,0.00012275128806677903)
x=c(x,-0.02039290215099016)
x=c(x,0.04204577316873911)
x=c(x,-0.029673342568004617)
x=c(x,-0.015063147115985826)
x=c(x,-0.014891997577637055)
x=c(x,0.0060641635154175776)
x=c(x,0.012724315416527122)
x=c(x,-0.012179334045205024)
x=c(x,0.021362161585127933)
x=c(x,0.01112744827829215)
x=c(x,-0.0020035673794479886)
x=c(x,0.004024109274704554)
x=c(x,-0.02409497929304545)
x=c(x,0.030290393185106373)
x=c(x,-0.01800659807415988)
x=c(x,0.014496938864261979)
x=c(x,-0.031178577861972055)
x=c(x,0.013017730538544176)
x=c(x,0.008254175890448513)
x=c(x,0.006233580654886045)
x=c(x,-0.0071319554005611525)
x=c(x,-0.004189403022185012)
x=c(x,-0.02392098656047041)
x=c(x,-0.024502259236047222)
x=c(x,0.01655748402214261)
x=c(x,-0.018838515176656752)
x=c(x,-0.01331418409775775)
x=c(x,-0.02821451592695214)
x=c(x,-0.030966182736590346)
x=c(x,0.017883954025190076)
x=c(x,0.003112763376370142)
x=c(x,-0.0029898256550570344)
x=c(x,-0.01665572518299051)
x=c(x,-0.007980329634690997)
x=c(x,0.004858811205736408)
x=c(x,0.003373192540662444)
x=c(x,0.003968849375252792)
x=c(x,-0.05527599181646438)
x=c(x,0.08398622513743083)
x=c(x,-0.025631357944891985)
x=c(x,-0.043735972932036696)
x=c(x,-0.03371280242561175)
x=c(x,-0.010626970896618895)
x=c(x,0.006915429780093033)
x=c(x,-0.06345020925053153)
x=c(x,-0.013011264269304714)
x=c(x,-0.05624388189057232)
x=c(x,0.010887454872059974)
x=c(x,-0.019937147998540412)
x=c(x,-0.0023965353093441137)
x=c(x,0)
x=c(x,-0.020435335203075004)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.011180241664032075)
x=c(x,0.005017850554077181)
x=c(x,0.021389989216203217)
x=c(x,0.009797700046133596)
x=c(x,0.012177358338014532)
x=c(x,-0.02027240823608135)
x=c(x,0.020629862436099225)
x=c(x,0.024913078609137263)
x=c(x,0.034107577541707186)
x=c(x,-0.0031862683227753654)
x=c(x,0.020073290289352036)
x=c(x,0.002914097353594184)
x=c(x,0.0029801577378181362)
x=c(x,-0.01398759591126808)
x=c(x,0.00004780083745549349)
x=c(x,-0.00015999948442225716)
x=c(x,-0.000056825896046199654)
x=c(x,-0.0003236717394093677)
x=c(x,0.0007190791197899212)
x=c(x,-0.0004392005395928804)
x=c(x,-0.000049217948583954746)
x=c(x,0.002508726858594617)
x=c(x,-0.00203472938741132)
x=c(x,-0.0010601983506032878)
x=c(x,-0.0007192149682653422)
x=c(x,-0.0005035729160299884)
x=c(x,0.0003911308172165489)
x=c(x,-0.00015382322069260794)
x=c(x,0.00042747170917356223)
x=c(x,-0.0005613679147261488)
x=c(x,0.0003341592563229676)
x=c(x,0.0004507034468244393)
x=c(x,-0.0016299481558779737)
x=c(x,-0.0018653889931649617)
x=c(x,0.005422422081365857)
x=c(x,0.0018284918161141782)
x=c(x,0.0010083139754846343)
x=c(x,-0.0007414102971669976)
x=c(x,-0.0010638400407038903)
x=c(x,-0.0014462804500185345)
x=c(x,-0.0010507956161706668)
x=c(x,0.0001058024540953072)
x=c(x,-0.0004796229051823719)
x=c(x,0.004550214356964735)
x=c(x,0.0014589297497044319)
x=c(x,-0.005599765759451557)
x=c(x,0.006390832468216305)
x=c(x,0.000723195498673789)
x=c(x,0.008439000605506819)
x=c(x,0.00046451578473458133)
x=c(x,-0.0009882569016417464)
x=c(x,0.00034364630311043364)
x=c(x,-0.0021092445026400517)
x=c(x,0.002346910900809144)
x=c(x,0.0032304175293650364)
x=c(x,-0.0039031912010825676)
x=c(x,0.0005734928846502314)
x=c(x,-0.00023406579722096946)
x=c(x,-0.0035686778199585556)
x=c(x,0.00025975250261120014)
x=c(x,0.0015225274522442437)
x=c(x,0.00274474693988836)
x=c(x,-0.0038227787077614083)
x=c(x,-0.002585160042420515)
x=c(x,-0.003197942514515876)
x=c(x,-0.003760965214172014)
x=c(x,0.0017240557201216383)
x=c(x,0.00107198852750509)
x=c(x,0.0018557542034633504)
x=c(x,-0.009061251640128673)
x=c(x,0.004650064204616696)
x=c(x,0.0027153742169325028)
x=c(x,-0.0025561429798531686)
x=c(x,-0.005348711671893672)
x=c(x,-0.013865875518038945)
x=c(x,0.013094539619637822)
x=c(x,0.0003199883230524374)
x=c(x,0.00136721925774186)
x=c(x,-0.003425217946711898)
x=c(x,0.01673049550610258)
x=c(x,0.0035633832331885672)
x=c(x,0.002526977115045451)
x=c(x,0.008010737636886606)
x=c(x,0.00250213297942284)
x=c(x,-0.003737372929641911)
x=c(x,-0.0011268824497602209)
x=c(x,0.00322212267475192)
x=c(x,0.01098950021416165)
x=c(x,-0.004432119615232034)
x=c(x,0.0055439320964193895)
x=c(x,-0.005005646585346802)
x=c(x,-0.005607313629877113)
x=c(x,0.008236052474989247)
x=c(x,-0.0005117895760491448)
x=c(x,-0.0003201605842452902)
x=c(x,0.0011902142069665316)
x=c(x,-0.004085652475229569)
x=c(x,-0.003023471442605385)
x=c(x,-0.016228132082342944)
x=c(x,0.0031874824885605845)
x=c(x,0.0014895479518199368)
x=c(x,-0.008818648630847034)
x=c(x,-0.0006869665915734249)
x=c(x,-0.010429169511316434)
x=c(x,0.0023054032143454742)
x=c(x,-0.00841128805055504)
x=c(x,0.0124403356277899)
x=c(x,-0.01330933926344818)
x=c(x,0.010310933518485896)
x=c(x,0.0003964950500294953)
x=c(x,0.0034677424450235616)
x=c(x,0.006784865564665201)
x=c(x,-0.0005581682068089821)
x=c(x,-0.009836160151693765)
x=c(x,-0.005675395808398935)
x=c(x,-0.00824287024727474)
x=c(x,0.0036104703300639455)
x=c(x,-0.0014221103363337313)
x=c(x,-0.005005121220354147)
x=c(x,-0.00140988958360709)
x=c(x,-0.007228767855670891)
x=c(x,0.00575954913623078)
x=c(x,-0.005187760435050369)
x=c(x,0.019770740131531454)
x=c(x,-0.0029830313542680313)
x=c(x,-0.015421944522228424)
x=c(x,0.009593408547498633)
x=c(x,-0.0013201725384451553)
x=c(x,0.008008327174544552)
x=c(x,-0.0046646210158459486)
x=c(x,-0.01532914275225574)
x=c(x,0.0015330109036299183)
x=c(x,-0.008097708302441012)
x=c(x,0.013925553203036104)
x=c(x,-0.00426407608516071)
x=c(x,0.001904449616778811)
x=c(x,-0.00918030412436242)
x=c(x,0.06294478358960583)
x=c(x,0.003173866200585359)
x=c(x,0.013409995824393227)
x=c(x,-0.007022719737908168)
x=c(x,0.005873378829937449)
x=c(x,-0.012231297100025197)
x=c(x,0.006598784053189977)
x=c(x,-0.02416404168799213)
x=c(x,0.011171044267309558)
x=c(x,-0.0030127906980403434)
x=c(x,0.01457502721795567)
x=c(x,0.001453778400120129)
x=c(x,-0.019106671803470265)
x=c(x,0.03991935336493534)
x=c(x,-0.026915579302886607)
x=c(x,-0.013236788449629193)
x=c(x,-0.012310820746701793)
x=c(x,0.002506569468902709)
x=c(x,0.013742138597114394)
x=c(x,-0.008661003009681808)
x=c(x,0.01468032642480333)
x=c(x,0.003831232288191643)
x=c(x,-0.010574731560051414)
x=c(x,-0.0010759121568739499)
x=c(x,-0.02146461727781939)
x=c(x,0.02727814935466924)
x=c(x,-0.012336240197073392)
x=c(x,0.015256235434491755)
x=c(x,-0.0205767560212923)
x=c(x,0.0024007695622874576)
x=c(x,0.010149079138279291)
x=c(x,0.006678897542720157)
x=c(x,-0.01118633136312831)
x=c(x,0.0023585966083784246)
x=c(x,-0.021712196476526616)
x=c(x,-0.023846544147067657)
x=c(x,0.011782562855089388)
x=c(x,-0.02623593003895197)
x=c(x,0.001301674100957214)
x=c(x,-0.02080923524881654)
x=c(x,-0.031076774962741138)
x=c(x,0.011525987574242448)
x=c(x,0.0019089664072499321)
x=c(x,-0.0006537168456002295)
x=c(x,-0.020380152615737862)
x=c(x,0.004240619796687789)
x=c(x,0.000885773090472849)
x=c(x,-0.00658947379701129)
x=c(x,0.009538137851691598)
x=c(x,-0.05651519256652299)
x=c(x,0.07603587469894742)
x=c(x,-0.0019494291033866598)
x=c(x,-0.04663828890029528)
x=c(x,-0.0316978454468111)
x=c(x,-0.01991308236503955)
x=c(x,0.0076857467508921066)
x=c(x,-0.07103058876463514)
x=c(x,-0.015028191596116347)
x=c(x,-0.05955730137316259)
x=c(x,0.020233956474325982)
x=c(x,-0.013206830152390549)
x=c(x,-0.0017000470400036732)
x=c(x,0.022531485998729693)
x=c(x,-0.013989190532449512)
x=c(x,-0.005196987742617861)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.010293023625509837)
x=c(x,0.011005118405064906)
x=c(x,-0.018978322957014696)
x=c(x,0.021934374300670686)
x=c(x,0.024755550886503275)
x=c(x,0.034206103035244254)
x=c(x,-0.004984772964752906)
x=c(x,0.020903887086474653)
x=c(x,0.002864033722906521)
x=c(x,0.002473306671213968)
x=c(x,-0.013879870636412939)
x=c(x,0.00005088396918374719)
x=c(x,-0.0001289286137926219)
x=c(x,-0.0001283189849174447)
x=c(x,-0.00028411602880210285)
x=c(x,0.0006584349504372893)
x=c(x,-0.0006066460180818676)
x=c(x,-0.000011323351996443574)
x=c(x,0.002055711214914066)
x=c(x,-0.0020811638003045622)
x=c(x,-0.0010499890111366238)
x=c(x,-0.0006742372562666692)
x=c(x,-0.0006668089854435944)
x=c(x,0.000174386339787661)
x=c(x,-0.0005121545991703555)
x=c(x,0.00024216022674843594)
x=c(x,-0.0004699747798034825)
x=c(x,0.000240957940234468)
x=c(x,0.0007178790885326563)
x=c(x,-0.0016312002109681468)
x=c(x,-0.00179166717597438)
x=c(x,0.005519009399409479)
x=c(x,0.0017377624032320696)
x=c(x,0.0010488100957837703)
x=c(x,-0.0007850407120771873)
x=c(x,-0.0010724122131553666)
x=c(x,-0.0014929974959777144)
x=c(x,-0.001172502719995399)
x=c(x,0.00011320448922897933)
x=c(x,-0.0005285190612200366)
x=c(x,0.004297080800457937)
x=c(x,0.0014187861183040328)
x=c(x,-0.005719022741901647)
x=c(x,0.006581273754747609)
x=c(x,0.0006540455046896332)
x=c(x,0.008437756216311942)
x=c(x,0.0005192070549538332)
x=c(x,-0.001036781767806701)
x=c(x,0.00009388371066930622)
x=c(x,-0.002368290436344804)
x=c(x,0.0028612553990121957)
x=c(x,0.0033232457648075782)
x=c(x,-0.003797244550399532)
x=c(x,0.00017632342438526685)
x=c(x,-0.0002952224617830053)
x=c(x,-0.0034087165984024474)
x=c(x,0.0009384315643522643)
x=c(x,0.0013103313677602778)
x=c(x,0.0027285201486295825)
x=c(x,-0.003940485558949505)
x=c(x,-0.0031159823396132566)
x=c(x,-0.002970255276546556)
x=c(x,-0.0034989990597590536)
x=c(x,0.0021240735450937477)
x=c(x,0.0018937990181891844)
x=c(x,0.0018040498774169011)
x=c(x,-0.009138923866027403)
x=c(x,0.0038710906309331336)
x=c(x,0.0013616192543982786)
x=c(x,-0.0024950914826893495)
x=c(x,-0.00565504387564218)
x=c(x,-0.013545063055999774)
x=c(x,0.012080125720090455)
x=c(x,0.0002279296777644412)
x=c(x,0.0010838522617706587)
x=c(x,-0.003414170288507643)
x=c(x,0.017812268747535318)
x=c(x,0.0037922882704521385)
x=c(x,0.002912120715431955)
x=c(x,0.008140033259623976)
x=c(x,0.0015081630817584033)
x=c(x,-0.0035915240913273194)
x=c(x,-0.0014768401542601104)
x=c(x,0.0027581854134235365)
x=c(x,0.010617168470030889)
x=c(x,-0.0037439583310916163)
x=c(x,0.005401079076634871)
x=c(x,-0.004988785099557641)
x=c(x,-0.0055281265218377245)
x=c(x,0.008474001788427481)
x=c(x,-0.0010927832173944065)
x=c(x,-0.00012108989791742129)
x=c(x,0.0012902385019647772)
x=c(x,-0.0052162926630050154)
x=c(x,-0.004593277365636733)
x=c(x,-0.016597532592676496)
x=c(x,0.0035202645812939092)
x=c(x,0.0020997826787559288)
x=c(x,-0.008247252136860185)
x=c(x,-0.0007752835958621886)
x=c(x,-0.012740981484463404)
x=c(x,0.0022508225813558445)
x=c(x,-0.008103840881258014)
x=c(x,0.010409042957272057)
x=c(x,-0.012779986795816337)
x=c(x,0.011350353757356279)
x=c(x,0.0009481355333439402)
x=c(x,0.003990826746243667)
x=c(x,0.008118588227951423)
x=c(x,0.0005508918353270847)
x=c(x,-0.010157604467118787)
x=c(x,-0.0056225717592646605)
x=c(x,-0.008375277135037534)
x=c(x,0.0036527286424587885)
x=c(x,-0.0010385317374015687)
x=c(x,-0.0054937036617602126)
x=c(x,-0.0007326982218087183)
x=c(x,-0.008134926557191611)
x=c(x,0.005811253914603378)
x=c(x,-0.004824395114665498)
x=c(x,0.020191942013958016)
x=c(x,-0.00207553029839866)
x=c(x,-0.013963766766346095)
x=c(x,0.009195395784477114)
x=c(x,-0.002414812802339851)
x=c(x,0.0071139795119227215)
x=c(x,-0.005296351462938428)
x=c(x,-0.015620339509287642)
x=c(x,0.0009471521897231318)
x=c(x,-0.006381583924839544)
x=c(x,0.016081482505633158)
x=c(x,-0.005336980781801447)
x=c(x,0.0023643023670504976)
x=c(x,-0.00801948272106257)
x=c(x,0.06389163614496944)
x=c(x,0.003910275999624732)
x=c(x,0.009253947230123375)
x=c(x,-0.0073305090393575145)
x=c(x,0.006125235781575947)
x=c(x,-0.011716891191804862)
x=c(x,0.006761812103908256)
x=c(x,-0.021806379092364964)
x=c(x,0.010924643051897066)
x=c(x,-0.003151351577851519)
x=c(x,0.013883703544720936)
x=c(x,0.0010333846790504767)
x=c(x,-0.01922722907349517)
x=c(x,0.03876334705490371)
x=c(x,-0.029510370188708914)
x=c(x,-0.01424668045433291)
x=c(x,-0.011189459210481992)
x=c(x,0.0035624525412993723)
x=c(x,0.013168915116835822)
x=c(x,-0.008934901124711736)
x=c(x,0.016520837557789485)
x=c(x,0.007459244540897395)
x=c(x,-0.008489754900106445)
x=c(x,0.0016735866449494234)
x=c(x,-0.02250742655978835)
x=c(x,0.02872281010775656)
x=c(x,-0.014427464538666225)
x=c(x,0.013711945598434255)
x=c(x,-0.02250788421837239)
x=c(x,0.005922727084156984)
x=c(x,0.008161799512990241)
x=c(x,0.006882260070748187)
x=c(x,-0.010845255854933622)
x=c(x,0.0012131555686304613)
x=c(x,-0.02190552979483803)
x=c(x,-0.023667472429560417)
x=c(x,0.011487946972239208)
x=c(x,-0.02432193674415857)
x=c(x,-0.0031906505635965286)
x=c(x,-0.022582198183476752)
x=c(x,-0.03068599858953775)
x=c(x,0.015721332263774628)
x=c(x,0.002645351282031886)
x=c(x,-0.0017549822345021935)
x=c(x,-0.01937082012319539)
x=c(x,-0.0004033908406817757)
x=c(x,0.003769011370286201)
x=c(x,-0.004273417780296653)
x=c(x,0.006614729834800622)
x=c(x,-0.057095832400140226)
x=c(x,0.06975735106443029)
x=c(x,-0.0128368880534715)
x=c(x,-0.044112721985195835)
x=c(x,-0.03338832682012511)
x=c(x,-0.015605652054429976)
x=c(x,0.008114150369336003)
x=c(x,-0.06751954147302323)
x=c(x,-0.008453680851563346)
x=c(x,-0.055881828283663296)
x=c(x,0.01707786997348891)
x=c(x,-0.01350016401156571)
x=c(x,-0.0029292164655198554)
x=c(x,0.01989056885560908)
x=c(x,-0.01644308416652851)
x=c(x,-0.005381847844801163)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.01013220314865978)
x=c(x,0.01113876070465236)
x=c(x,-0.01911110724754219)
x=c(x,0.021576617952118207)
x=c(x,0.024581068433607835)
x=c(x,0.03397465971432488)
x=c(x,-0.004312707705864513)
x=c(x,0.020500329462748913)
x=c(x,0.0021459002556966714)
x=c(x,0.002580736833003276)
x=c(x,-0.013974353484697666)
x=c(x,0.0000668292603395844)
x=c(x,-0.00010808625237543446)
x=c(x,-0.0001923960054940834)
x=c(x,-0.0002639449592259789)
x=c(x,0.000542267213774208)
x=c(x,-0.0007938956321912733)
x=c(x,0.000042690682232420615)
x=c(x,0.0014348032715041504)
x=c(x,-0.0021569009126097584)
x=c(x,-0.0009727318291510465)
x=c(x,-0.0006377515619807824)
x=c(x,-0.0008665572085076472)
x=c(x,0.0003563253373006659)
x=c(x,-0.001290770754787398)
x=c(x,-0.0003826047800471069)
x=c(x,-0.0005124521068773241)
x=c(x,-0.00016675163260428312)
x=c(x,0.0009208065455850771)
x=c(x,-0.0016828853013558037)
x=c(x,-0.0016786471863636863)
x=c(x,0.005540716604840035)
x=c(x,0.0017319036163540675)
x=c(x,0.0012496168438383176)
x=c(x,-0.0009150211599652116)
x=c(x,-0.0010360598991288994)
x=c(x,-0.0016081254566038183)
x=c(x,-0.0013012187604087623)
x=c(x,0.00009892990536686336)
x=c(x,-0.0005141629751620945)
x=c(x,0.0038679956546524633)
x=c(x,0.0013392157688267502)
x=c(x,-0.005636314640365592)
x=c(x,0.006580736299288268)
x=c(x,0.0005745170767384813)
x=c(x,0.008455055070205813)
x=c(x,0.0006624444084645201)
x=c(x,-0.0011604883082129707)
x=c(x,-0.00032844897204884903)
x=c(x,-0.0026195365949254726)
x=c(x,0.0034087397557109617)
x=c(x,0.0028535676361629565)
x=c(x,-0.004086686152008542)
x=c(x,-0.00006046032954597857)
x=c(x,-0.00015588685586274284)
x=c(x,-0.0033065400733185905)
x=c(x,0.0019555978872979277)
x=c(x,0.0015682458067663278)
x=c(x,0.0038589453302925263)
x=c(x,-0.0028185272746612117)
x=c(x,-0.005423306042955021)
x=c(x,-0.0016407118680938394)
x=c(x,-0.0015198020372235036)
x=c(x,0.002182953458841651)
x=c(x,0.0030099271877918037)
x=c(x,0.002029611823341202)
x=c(x,-0.009666351826345834)
x=c(x,0.003587902826236929)
x=c(x,-0.0028999732875684635)
x=c(x,-0.0035015741218964473)
x=c(x,-0.006438998852918845)
x=c(x,-0.01074420355070572)
x=c(x,0.011544473389353898)
x=c(x,-0.00016133335867129524)
x=c(x,0.00037925836746198304)
x=c(x,-0.0034098485243864163)
x=c(x,0.0183922990110968)
x=c(x,0.003540867141844472)
x=c(x,0.0033754135497596244)
x=c(x,0.008164247608134171)
x=c(x,0.00044303958388902046)
x=c(x,-0.0032286661129924924)
x=c(x,-0.0023560540670117002)
x=c(x,0.002081806236274805)
x=c(x,0.009673260207448348)
x=c(x,-0.003243663051234673)
x=c(x,0.004843287995108761)
x=c(x,-0.004363896771301297)
x=c(x,-0.004626876707333744)
x=c(x,0.009148864843139988)
x=c(x,-0.0012968442627159056)
x=c(x,0.00008431823747742237)
x=c(x,0.0014947197538951616)
x=c(x,-0.0065969905051951935)
x=c(x,-0.006248571875652652)
x=c(x,-0.017336455577615508)
x=c(x,0.003278366625180671)
x=c(x,0.002133915263302528)
x=c(x,-0.009125042654984454)
x=c(x,-0.000720092707024972)
x=c(x,-0.013467587105192148)
x=c(x,0.002728423034976916)
x=c(x,-0.00927809074262911)
x=c(x,0.009741349863772784)
x=c(x,-0.013422610353981198)
x=c(x,0.01266260670614504)
x=c(x,0.0010897274151731957)
x=c(x,0.0051199409552453775)
x=c(x,0.01122037007359504)
x=c(x,0.0022386377959972567)
x=c(x,-0.009847591148735832)
x=c(x,-0.005905161206548033)
x=c(x,-0.00913806786008759)
x=c(x,0.0046477692276479625)
x=c(x,-0.0006933372444386301)
x=c(x,-0.004856207818668353)
x=c(x,0.0005786892787334061)
x=c(x,-0.009301447211427885)
x=c(x,0.005984507965054688)
x=c(x,-0.003323924500747144)
x=c(x,0.02018289027800322)
x=c(x,-0.0020776670711900626)
x=c(x,-0.011331547856716438)
x=c(x,0.009989951096950427)
x=c(x,-0.004118124034596148)
x=c(x,0.007247552537394132)
x=c(x,-0.005376165858548499)
x=c(x,-0.015836455077130676)
x=c(x,0.0005849032317532123)
x=c(x,-0.005612601326659887)
x=c(x,0.019746740223508343)
x=c(x,-0.006740498049756299)
x=c(x,0.0038195177492715824)
x=c(x,-0.005940131374893663)
x=c(x,0.06136862458478754)
x=c(x,0.005109214528448952)
x=c(x,0.001478507695201461)
x=c(x,-0.008821827830523177)
x=c(x,0.0038735225608072642)
x=c(x,-0.009866087916708765)
x=c(x,0.0065658239478963215)
x=c(x,-0.018441949917467833)
x=c(x,0.01020406314079678)
x=c(x,-0.0042216887968747575)
x=c(x,0.012280743468889618)
x=c(x,-0.0002592413796153475)
x=c(x,-0.019628625455636244)
x=c(x,0.03838613881837217)
x=c(x,-0.03405714738168497)
x=c(x,-0.014146263656789858)
x=c(x,-0.0099977221186215)
x=c(x,0.005389929939674868)
x=c(x,0.013441215806582174)
x=c(x,-0.009630244215298078)
x=c(x,0.01953940578231502)
x=c(x,0.012300462791528043)
x=c(x,-0.004322716396283521)
x=c(x,0.005215204103486902)
x=c(x,-0.023577976077412226)
x=c(x,0.03113034940677753)
x=c(x,-0.017498222572472893)
x=c(x,0.01192767437419119)
x=c(x,-0.02552477313687246)
x=c(x,0.010165580055085228)
x=c(x,0.006713511716689734)
x=c(x,0.005974017702948244)
x=c(x,-0.009784355151123782)
x=c(x,-0.00040899617506177206)
x=c(x,-0.022339236712423598)
x=c(x,-0.023577238448878133)
x=c(x,0.012742338339352708)
x=c(x,-0.02030533266738026)
x=c(x,-0.011335286748363411)
x=c(x,-0.02411685862364942)
x=c(x,-0.03124439156527137)
x=c(x,0.021750118476037743)
x=c(x,0.003462255989739559)
x=c(x,-0.00253337019287457)
x=c(x,-0.019429928747835362)
x=c(x,-0.00550665660833148)
x=c(x,0.0055656168532701505)
x=c(x,-0.00008459080962334275)
x=c(x,0.004933566510831137)
x=c(x,-0.05659965147199434)
x=c(x,0.06491906106602723)
x=c(x,-0.037398493769576796)
x=c(x,-0.039146677309549356)
x=c(x,-0.03468498120480328)
x=c(x,-0.009640422916879603)
x=c(x,0.009909571420974313)
x=c(x,-0.0654187280803353)
x=c(x,-0.009752772493670387)
x=c(x,-0.05728323372901053)
x=c(x,0.017028759745159435)
x=c(x,-0.021256404270098932)
x=c(x,-0.004160187257967655)
x=c(x,0.021743850276770376)
x=c(x,-0.02687454409020796)
x=c(x,-0.007872069061951852)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.0098703902404176)
x=c(x,0.011200712466725582)
x=c(x,-0.019878265878016523)
x=c(x,0.020654806161316524)
x=c(x,0.02439355532842973)
x=c(x,0.03380619106398031)
x=c(x,-0.003236788748747856)
x=c(x,0.019944157363498638)
x=c(x,0.0017196841760188863)
x=c(x,0.0026765609050126375)
x=c(x,-0.013996321943382073)
x=c(x,0.000038954632744957795)
x=c(x,-0.00013883297532202386)
x=c(x,-0.00006545046799175645)
x=c(x,-0.00036335120664437206)
x=c(x,0.0007708154771962977)
x=c(x,-0.0004362314836689484)
x=c(x,-0.000029716349431820174)
x=c(x,0.002662193061625643)
x=c(x,-0.0018164506844307623)
x=c(x,-0.0010335933201871938)
x=c(x,-0.0007322280757673136)
x=c(x,-0.0006296928002854212)
x=c(x,0.0002802386283941514)
x=c(x,-0.000053948370971592135)
x=c(x,0.0006104156030363511)
x=c(x,-0.000990458648907465)
x=c(x,0.0003652200972862916)
x=c(x,0.0005346228549683639)
x=c(x,-0.0015358686350430307)
x=c(x,-0.0032695894987394432)
x=c(x,0.004969100383849371)
x=c(x,0.0016690114338190393)
x=c(x,-0.000006958746360405042)
x=c(x,-0.0006637380234558919)
x=c(x,-0.0014246714360816213)
x=c(x,-0.001736432452095426)
x=c(x,0.00021874369744043375)
x=c(x,0.00025750566280205103)
x=c(x,0.00027307465555535555)
x=c(x,0.005047185345585207)
x=c(x,0.0016771586127387534)
x=c(x,-0.00551480208565579)
x=c(x,0.006147502817250523)
x=c(x,0.00041629842100226306)
x=c(x,0.01199568689959015)
x=c(x,0.0009526637050007587)
x=c(x,-0.001615058492424587)
x=c(x,-0.00006956356942130099)
x=c(x,-0.002507922650294296)
x=c(x,0.0021535459311819217)
x=c(x,0.004609081193831188)
x=c(x,-0.003966371609075796)
x=c(x,0.0008708691899585972)
x=c(x,-0.00004318786946560376)
x=c(x,-0.0036426515036336224)
x=c(x,-0.001036298624364902)
x=c(x,0.0028339744316778926)
x=c(x,0.003941481675210394)
x=c(x,-0.002944379170986385)
x=c(x,-0.0036087011610511015)
x=c(x,-0.002384499215533991)
x=c(x,-0.002889879259334081)
x=c(x,0.0019412118371835538)
x=c(x,0.0021970469179169085)
x=c(x,0.0018360952386438896)
x=c(x,-0.00950074383761187)
x=c(x,0.0019158225971121683)
x=c(x,-0.00000593914872636055)
x=c(x,-0.0022125774646062717)
x=c(x,-0.006236396929623949)
x=c(x,-0.010327600086709654)
x=c(x,0.013080936507550954)
x=c(x,0.00011048562931056167)
x=c(x,0.0013728660532346354)
x=c(x,-0.0038161834847947602)
x=c(x,0.017610844230382623)
x=c(x,0.0042957556441829345)
x=c(x,0.0025005027529616595)
x=c(x,0.00847639642633821)
x=c(x,0.001754935391475696)
x=c(x,-0.0036775031933033854)
x=c(x,-0.0019290048424788768)
x=c(x,0.0028933785015576325)
x=c(x,0.011529121786900964)
x=c(x,-0.0037665987829312063)
x=c(x,0.006079127311560719)
x=c(x,-0.00510985466877272)
x=c(x,-0.0053496681128639935)
x=c(x,0.008988723339481185)
x=c(x,-0.0004457493155941499)
x=c(x,-0.0002834808855409442)
x=c(x,0.0010553460068410982)
x=c(x,-0.006550982667001088)
x=c(x,-0.0039006008646807026)
x=c(x,-0.017405902082341308)
x=c(x,0.0038335990770332097)
x=c(x,-0.0002537643443045306)
x=c(x,-0.008940120783403569)
x=c(x,-0.0006050231613339328)
x=c(x,-0.014266908548364848)
x=c(x,0.0013132309313598242)
x=c(x,-0.005543132864348091)
x=c(x,0.01218562144320643)
x=c(x,-0.012327135340338266)
x=c(x,0.011593763931400729)
x=c(x,0.0019708356423166987)
x=c(x,0.0033993885863098754)
x=c(x,0.006782216339529896)
x=c(x,-0.0010094890012256595)
x=c(x,-0.011171279224641305)
x=c(x,-0.00506843282083366)
x=c(x,-0.008765093764031298)
x=c(x,0.003910787375221352)
x=c(x,-0.0021599829482352464)
x=c(x,-0.00492866168824358)
x=c(x,-0.001430965653960438)
x=c(x,-0.006294862839359288)
x=c(x,0.005427055517138699)
x=c(x,-0.005929583783300979)
x=c(x,0.018744161229779874)
x=c(x,-0.0022386777970762003)
x=c(x,-0.015212889079120497)
x=c(x,0.009210373379108482)
x=c(x,-0.0008912559429159894)
x=c(x,0.0066577411052460116)
x=c(x,-0.004224624870693016)
x=c(x,-0.014863972308869756)
x=c(x,0.0010429744033930732)
x=c(x,-0.0063144371752632865)
x=c(x,0.01363856322982727)
x=c(x,-0.004709413085169409)
x=c(x,0.0020541451029715547)
x=c(x,-0.008196660701644579)
x=c(x,0.06321635432050232)
x=c(x,0.0041152159887757975)
x=c(x,0.011124558705406271)
x=c(x,-0.009213906734166258)
x=c(x,0.004895376783252963)
x=c(x,-0.00984123448826007)
x=c(x,0.007531923880116708)
x=c(x,-0.021655410660972756)
x=c(x,0.011300080050772824)
x=c(x,-0.00258481416594474)
x=c(x,0.01441555618550775)
x=c(x,0.00047882424479662544)
x=c(x,-0.01853348486265685)
x=c(x,0.037805458325018464)
x=c(x,-0.030414550997726636)
x=c(x,-0.012117898815891225)
x=c(x,-0.011430291680213884)
x=c(x,0.001933522174349003)
x=c(x,0.011015638865025037)
x=c(x,-0.007842460144209992)
x=c(x,0.01615501186543084)
x=c(x,0.005789226165062739)
x=c(x,-0.009493460130824158)
x=c(x,0.0013864501040666993)
x=c(x,-0.02114257915139623)
x=c(x,0.02849032246173041)
x=c(x,-0.016113884194533183)
x=c(x,0.012270698667224996)
x=c(x,-0.019944236154258124)
x=c(x,0.004097205598991223)
x=c(x,0.010581763106045033)
x=c(x,0.004402844066930974)
x=c(x,-0.010925558763571843)
x=c(x,0.0037724679421376928)
x=c(x,-0.020743000148314913)
x=c(x,-0.023524464773150733)
x=c(x,0.011758130552859299)
x=c(x,-0.023228336466412584)
x=c(x,-0.0007915737135635972)
x=c(x,-0.02164245555539255)
x=c(x,-0.031345138879685756)
x=c(x,0.012729961838601218)
x=c(x,0.0007246854029331354)
x=c(x,-0.0007496910879284076)
x=c(x,-0.017625405480881803)
x=c(x,0.0021883158142390153)
x=c(x,0.004203046040898218)
x=c(x,-0.006618916923298467)
x=c(x,0.011692418970603798)
x=c(x,-0.0536192733358166)
x=c(x,0.075912914301485)
x=c(x,-0.0033077024492314962)
x=c(x,-0.04457958520804947)
x=c(x,-0.03410886224174764)
x=c(x,-0.018715111737728447)
x=c(x,0.00924395294093886)
x=c(x,-0.06907059959447163)
x=c(x,-0.017144929158561757)
x=c(x,-0.06068819333662477)
x=c(x,0.020700950190514947)
x=c(x,-0.015344557184131186)
x=c(x,-0.0011157521248316084)
x=c(x,0.025880032092436916)
x=c(x,-0.017867377741706138)
x=c(x,-0.006393919782848294)
x=c(x,-0.03741731902591527)
x=c(x,0)
x=c(x,0)
x=c(x,-0.006014238910273431)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.004197253528201235)
x=c(x,-0.0066761457231740515)
x=c(x,0.00035079681468366076)
x=c(x,0)
x=c(x,0.008099280536807592)
x=c(x,0.003706944216854793)
x=c(x,0.0142742613711102)
x=c(x,0.010213368029859627)
x=c(x,0.01010470394972418)
x=c(x,-0.018251354256296957)
x=c(x,0.02240452056538391)
x=c(x,0.023992214349353395)
x=c(x,0.03331558937299509)
x=c(x,-0.0051518775075703235)
x=c(x,0.020877381484390067)
x=c(x,0.0016383978282639578)
x=c(x,0.0023408555895844756)
x=c(x,-0.013806237470232352)
x=c(x,0.00003312442164800844)
x=c(x,-0.00009361832274366892)
x=c(x,-0.00014199414804300268)
x=c(x,-0.00021768807426559558)
x=c(x,0.0007638687309817207)
x=c(x,-0.0006136539172292583)
x=c(x,-0.000007261662288759705)
x=c(x,0.002302280504961209)
x=c(x,-0.002020926109061162)
x=c(x,-0.0009360923910241706)
x=c(x,-0.0007969973476858898)
x=c(x,-0.0007450226106118041)
x=c(x,0.0003394332913941299)
x=c(x,-0.00039342326028001147)
x=c(x,0.00009211801369981314)
x=c(x,-0.0009972284280678099)
x=c(x,-0.00018859493129971884)
x=c(x,0.0004461424745258605)
x=c(x,-0.0010958740410978605)
x=c(x,-0.00293829684661401)
x=c(x,0.004896174021676927)
x=c(x,0.0012332270920062645)
x=c(x,-0.0009571732838220332)
x=c(x,-0.0006508407642783271)
x=c(x,-0.0015250127950715644)
x=c(x,-0.0022043137265430764)
x=c(x,-0.00030245992335642017)
x=c(x,0.00027614939262784766)
x=c(x,0.00020032480412693544)
x=c(x,0.006583745040002863)
x=c(x,0.0014545641784939579)
x=c(x,-0.004852760893111976)
x=c(x,0.0059281641450237565)
x=c(x,-0.0007050896759937484)
x=c(x,0.013940086941325203)
x=c(x,0.0005093727247129777)
x=c(x,-0.0014642239601159257)
x=c(x,0.002704453297810587)
x=c(x,-0.0026061125282070777)
x=c(x,0.002188777136490737)
x=c(x,0.003241811155401302)
x=c(x,-0.004042952737147015)
x=c(x,0.00006919433067785618)
x=c(x,0.0004014107323731207)
x=c(x,-0.004055550856599039)
x=c(x,-0.0017668291676926186)
x=c(x,0.002737087140682481)
x=c(x,0.002023231697869906)
x=c(x,-0.0029205702933745785)
x=c(x,-0.003030403028281977)
x=c(x,-0.003156420418697405)
x=c(x,-0.005114623694813974)
x=c(x,0.0017500348222902835)
x=c(x,0.0003002002383447479)
x=c(x,0.0010206958762929807)
x=c(x,-0.009414633917132813)
x=c(x,0.0019244597516595617)
x=c(x,0.0009606228859500069)
x=c(x,-0.0015839948408844578)
x=c(x,-0.006400041019988942)
x=c(x,-0.011223415484454942)
x=c(x,0.014236742709428502)
x=c(x,0.0003555215379770863)
x=c(x,0.0023595108158870315)
x=c(x,-0.004279432264477016)
x=c(x,0.017822441455569396)
x=c(x,0.0043027504000236645)
x=c(x,0.0025889863858028325)
x=c(x,0.009220939466911186)
x=c(x,0.0021631842437789153)
x=c(x,-0.003535854845593686)
x=c(x,-0.0026582185658912804)
x=c(x,0.0027359895277851427)
x=c(x,0.013374379090538006)
x=c(x,-0.004112111755493601)
x=c(x,0.00565370691700233)
x=c(x,-0.003961988397609554)
x=c(x,-0.004877433962002927)
x=c(x,0.009219376797062787)
x=c(x,-0.0010350758689800076)
x=c(x,-0.0003584798301868529)
x=c(x,0.001878029100016673)
x=c(x,-0.0068914773725130204)
x=c(x,-0.006109897611375386)
x=c(x,-0.01681208640672048)
x=c(x,0.0035805148576826206)
x=c(x,0.002386871950534433)
x=c(x,-0.00912350542077404)
x=c(x,-0.0008669896496743307)
x=c(x,-0.016507930169840007)
x=c(x,0.00198250122680042)
x=c(x,-0.006113430134696283)
x=c(x,0.011583980736284442)
x=c(x,-0.013307142522136921)
x=c(x,0.011249989388102306)
x=c(x,0.0027162809212903693)
x=c(x,0.003352717848309118)
x=c(x,0.006098631507069532)
x=c(x,-0.0000957609628829709)
x=c(x,-0.012360024854996073)
x=c(x,-0.006087748444838195)
x=c(x,-0.009615958692147954)
x=c(x,0.00519767625508639)
x=c(x,-0.002783496368987825)
x=c(x,-0.004001831125891736)
x=c(x,-0.0006891047476843906)
x=c(x,-0.006851503973781079)
x=c(x,0.005493896911443696)
x=c(x,-0.004485832087337213)
x=c(x,0.01915158666831237)
x=c(x,-0.003935587487475364)
x=c(x,-0.013229651363568788)
x=c(x,0.01009809654552885)
x=c(x,-0.0020171516988993737)
x=c(x,0.006711356114030887)
x=c(x,-0.004167081966859985)
x=c(x,-0.014641618476617753)
x=c(x,0.001426877711687072)
x=c(x,-0.005310988068629814)
x=c(x,0.015772986785196924)
x=c(x,-0.005132192822251514)
x=c(x,0.002947229854325076)
x=c(x,-0.006346249128242532)
x=c(x,0.0628706667160939)
x=c(x,0.005417601554079515)
x=c(x,0.004300487665976503)
x=c(x,-0.008083129527552009)
x=c(x,0.004440582537026988)
x=c(x,-0.00807549404220267)
x=c(x,0.007713898889570521)
x=c(x,-0.01993093081148212)
x=c(x,0.010359123706698331)
x=c(x,-0.00339385425277461)
x=c(x,0.012907000228685767)
x=c(x,0.0002417052819468652)
x=c(x,-0.0195011117479147)
x=c(x,0.03826935575047081)
x=c(x,-0.03290001172276896)
x=c(x,-0.011823241520037431)
x=c(x,-0.009985883208441087)
x=c(x,0.002725609225956752)
x=c(x,0.0107944844942067)
x=c(x,-0.008451017169288816)
x=c(x,0.01927029642403175)
x=c(x,0.010269329299239162)
x=c(x,-0.006507893399655119)
x=c(x,0.005155359939353764)
x=c(x,-0.02178365910840127)
x=c(x,0.02977394132809029)
x=c(x,-0.019779929820968392)
x=c(x,0.010560427542864327)
x=c(x,-0.023359490725600212)
x=c(x,0.008357258287911187)
x=c(x,0.008561339463710254)
x=c(x,0.004295513712896194)
x=c(x,-0.00971679200134775)
x=c(x,0.0025948216341953353)
x=c(x,-0.020909369703777266)
x=c(x,-0.023827443411027042)
x=c(x,0.011803153528570635)
x=c(x,-0.02085311782408963)
x=c(x,-0.006295590416774965)
x=c(x,-0.023713207047955428)
x=c(x,-0.030708901001807436)
x=c(x,0.017509212578649756)
x=c(x,0.0013742284720966007)
x=c(x,-0.001625953089489414)
x=c(x,-0.017829280349540663)
x=c(x,-0.002161081441090012)
x=c(x,0.004891303635048493)
x=c(x,-0.0038695298524979004)
x=c(x,0.009190250657889053)
x=c(x,-0.05430921799483444)
x=c(x,0.06799769100299875)
x=c(x,-0.015742153357856132)
x=c(x,-0.04050526297147047)
x=c(x,-0.035915779811533446)
x=c(x,-0.013795702004692476)
x=c(x,0.011785266331536324)
x=c(x,-0.0669153878663105)
x=c(x,-0.01170887083569898)
x=c(x,-0.05837954568823664)
x=c(x,0.019302721229430726)
x=c(x,-0.01684183385992575)
x=c(x,-0.002760181925726045)
x=c(x,0.023107150778203685)
x=c(x,-0.020081204059663314)
x=c(x,-0.00591854004787244)
x=c(x,-0.03701050810903533)
x=c(x,0)
x=c(x,0)
x=c(x,-0.0066882450319331365)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0)
x=c(x,0.0038635805583123067)
x=c(x,-0.006337600412638584)
x=c(x,-0.00010794906939084041)
x=c(x,0)
x=c(x,0.0065138115119236254)
x=c(x,0.0037932737848506595)
x=c(x,0.01569975184625221)
x=c(x,0.009997087968576707)
x=c(x,0.010097310655251346)
x=c(x,-0.01856623186992499)
x=c(x,0.02197316678912091)
x=c(x,0.023680997505071247)
x=c(x,0.03291499015855693)
x=c(x,-0.004655481423584756)
x=c(x,0.02063382433484286)
x=c(x,0.0012116883689120193)
x=c(x,0.0023901472917808417)
x=c(x,-0.01379872221402878)
m = matrix( x, ncol=73 ) # nrow=233
c = cov( m )
if( ! is.positive.definite( c )) c = make.positive.definite( c )
means = colMeans( m )
spec = parmaspec( S=c, risk='EV', riskType='minrisk', target=min(means), targetType='equality', forecast=means, asset.names=colnames(m,do.NULL=FALSE) )
f = parmafrontier( spec, solver='SOCP' )

From alexios at 4dscape.com  Tue Aug  5 13:03:50 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Tue, 05 Aug 2014 12:03:50 +0100
Subject: [R-SIG-Finance] parma - parmafrontier - Why do I get an error
 in seq.default ?
In-Reply-To: <53E0B281.3030908@wolke7.net>
References: <53E0B281.3030908@wolke7.net>
Message-ID: <53E0BA16.6060400@4dscape.com>

Looking at your dataset it is clearly very highly correlated (cor>0.99
in some cases). When I suggested you use the function
'make.positive.definite', I expected that you would read the
documentation on that. It takes one more argument ('tol') which does
make a difference.

This works for me:
if( ! is.positive.definite( C )) C = make.positive.definite( C, tol=1e-2)
spec = parmaspec( S=C, risk='EV', riskType='minrisk',
targetType='equality', forecast=means,
asset.names=colnames(m,do.NULL=FALSE) )
f = parmafrontier( spec, solver='QP', miny=0, maxy=max(means))

Comments:
-miny and maxy define the range over which the frontier is calculated
and it is usually helpful to provide these.
- For simple EV problems, use QP not SOCP (the current SOCP solver is
still far from state of the art and might require tweaking of some
control parameters in some cases).
- Don't use base R function names like 'c' to define your own variables.

-Alexios

On 05/08/2014 11:31, u0055 at wolke7.net wrote:
> Dear R-SIGs,
> 
> I'm using the parma package and
> it works well for me with small input data.
> For big input data I get this error message:
> 
> Fehler in seq.default(minb, maxb, length.out = n.points) :
>    'from' cannot be NA, NaN or infinite
> 
> I'm using this R code (here without the input data):
> 
> require( corpcor )
> require( parma )
> m = matrix( ... )
> c = cov( m )
> if( ! is.positive.definite( c )) c = make.positive.definite( c )
> means = colMeans( m )
> spec = parmaspec( S=c, risk='EV', riskType='minrisk', target=min(means),
> targetType='equality', forecast=means,
> asset.names=colnames(m,do.NULL=FALSE) )
> parmafrontier( spec, solver='SOCP' )
> 
> Please find the attached whole R program including the input data.
> How to get rid of the error ?
> 
> Thanks in advance,
> Uwe
> 
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From stergenator at gmail.com  Tue Aug  5 23:56:10 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Tue, 5 Aug 2014 14:56:10 -0700
Subject: [R-SIG-Finance] TrailingStop chain events in macd.R
In-Reply-To: <CAM8YH=Yb299xHh8=A-vZm5nY5MnTQ3N8PTp3f7n7Ph7b3w=N=w@mail.gmail.com>
References: <CAM8YH=Yb299xHh8=A-vZm5nY5MnTQ3N8PTp3f7n7Ph7b3w=N=w@mail.gmail.com>
Message-ID: <CAM8YH=YtVT0zOaHQ=MMHJeD5VasAQ=qJG1unQGOfMXG3qkS7Mg@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140805/7ddef50d/attachment.pl>

From ilya.kipnis at gmail.com  Tue Aug  5 23:58:58 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Tue, 5 Aug 2014 17:58:58 -0400
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit orders
	to work with indicators
Message-ID: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140805/ce6bf71e/attachment.pl>

From markknecht at gmail.com  Wed Aug  6 00:40:31 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Tue, 5 Aug 2014 15:40:31 -0700
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
Message-ID: <CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>

On Tue, Aug 5, 2014 at 2:58 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> Okay, so my issue is that I'm trying to debunk a trading system I found
> online, and it involves using an indicator for a stop-loss and a
> take-profit type of order. I based my syntax on the luxor demo, aside from
> using an order.price argument, but I'm not sure of how to make the exact
> syntax work.
>
> Here's a minimum reproducible example.

The email was apparently sent as HTML, got wrapped and the commented
out sections are causing problems.

There also seems to be a missing comma in the add.rule(strategy.st,
name="ruleSignal" are at the end of the order.price line.

I suggest you try cleaning those code issue up  - shorten the lines so
they don't wrap, and sending the clean code in text mode.

Good luck,
Mark


From ilya.kipnis at gmail.com  Wed Aug  6 00:47:58 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Tue, 5 Aug 2014 18:47:58 -0400
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
Message-ID: <CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>

Mark,

Thanks for getting back to me. Since I'm using gmail, I didn't have any
line wraps. However, I'm attaching my demo as an R file. Fixed the little
typo.

Thanks so much.

-Ilya


On Tue, Aug 5, 2014 at 6:40 PM, Mark Knecht <markknecht at gmail.com> wrote:

> On Tue, Aug 5, 2014 at 2:58 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> > Okay, so my issue is that I'm trying to debunk a trading system I found
> > online, and it involves using an indicator for a stop-loss and a
> > take-profit type of order. I based my syntax on the luxor demo, aside
> from
> > using an order.price argument, but I'm not sure of how to make the exact
> > syntax work.
> >
> > Here's a minimum reproducible example.
>
> The email was apparently sent as HTML, got wrapped and the commented
> out sections are causing problems.
>
> There also seems to be a missing comma in the add.rule(strategy.st,
> name="ruleSignal" are at the end of the order.price line.
>
> I suggest you try cleaning those code issue up  - shorten the lines so
> they don't wrap, and sending the clean code in text mode.
>
> Good luck,
> Mark
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140805/7337dfd4/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: hammerDemo.R
Type: application/octet-stream
Size: 8138 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140805/7337dfd4/attachment.obj>

From hspivey at scu.edu  Wed Aug  6 01:59:38 2014
From: hspivey at scu.edu (Henry Spivey)
Date: Tue, 5 Aug 2014 16:59:38 -0700
Subject: [R-SIG-Finance] Web Application for Option traders
Message-ID: <CAEWd1ehQ2nooujfX-EHrSsFwGsdMfnEv6-7dzLkqfL6aaWAEAw@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140805/54453cc9/attachment.pl>

From hkahra at gmail.com  Wed Aug  6 09:56:46 2014
From: hkahra at gmail.com (Hannu Kahra)
Date: Wed, 6 Aug 2014 10:56:46 +0300
Subject: [R-SIG-Finance] chartSerieries (quantmod) : data range
Message-ID: <CALuJ=+oM6mFUkNNThsFuFmvXXP-NGi0D0Q2O09=3E6-WnaqYHg@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140806/b8969d1f/attachment.pl>

From rbali at ufmg.br  Wed Aug  6 15:00:48 2014
From: rbali at ufmg.br (Robert Iquiapaza)
Date: Wed, 6 Aug 2014 10:00:48 -0300
Subject: [R-SIG-Finance] chartSerieries (quantmod) : data range
Message-ID: <CAKW5Cfrn7EJdd-i9m2y4Xrf-mSrWx3z=a9sg7tDvnwCxmd2VzQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140806/82c65017/attachment.pl>

From markknecht at gmail.com  Wed Aug  6 16:10:56 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Wed, 6 Aug 2014 07:10:56 -0700
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
Message-ID: <CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>

On Tue, Aug 5, 2014 at 3:47 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> Mark,
>
> Thanks for getting back to me. Since I'm using gmail, I didn't have any line
> wraps. However, I'm attaching my demo as an R file. Fixed the little typo.
>
> Thanks so much.
>
> -Ilya
>

When using gmail ensure you have 'plain text' selected. (bottom right usually)

When I run this code I see this as the first failure:

[1] "Hammer_4TP"
>
> #apply strategy
> t1 <- Sys.time()
> out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
Error in `colnames<-`(`*tmp*`, value = c("XLB.Close.SMA.30",
"XLB.Close.SMA.10.sma1.SMA.30" :
  length of 'dimnames' [2] not equal to array extent
> t2 <- Sys.time()
> print(t2-t1)
Time difference of 0.06236649 secs
>

Is that the problem you are trying to solve?

Generally it's good to be really clear about what you're asking for.
Show the code run, copy error messages, etc.

- Mark


From ilya.kipnis at gmail.com  Wed Aug  6 18:32:35 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Wed, 6 Aug 2014 12:32:35 -0400
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
Message-ID: <CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>

Mark,

Are you using an outdated version of TTR? Josh had the same problem
when he tried my demo.

My error isn't a "stop, program won't run" error, but a runtime error
of my exit rules not working--that is, I only get a few entry orders
filled, and then no exits ever.

-Ilya

On Wed, Aug 6, 2014 at 10:10 AM, Mark Knecht <markknecht at gmail.com> wrote:
> On Tue, Aug 5, 2014 at 3:47 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>> Mark,
>>
>> Thanks for getting back to me. Since I'm using gmail, I didn't have any line
>> wraps. However, I'm attaching my demo as an R file. Fixed the little typo.
>>
>> Thanks so much.
>>
>> -Ilya
>>
>
> When using gmail ensure you have 'plain text' selected. (bottom right usually)
>
> When I run this code I see this as the first failure:
>
> [1] "Hammer_4TP"
>>
>> #apply strategy
>> t1 <- Sys.time()
>> out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
> Error in `colnames<-`(`*tmp*`, value = c("XLB.Close.SMA.30",
> "XLB.Close.SMA.10.sma1.SMA.30" :
>   length of 'dimnames' [2] not equal to array extent
>> t2 <- Sys.time()
>> print(t2-t1)
> Time difference of 0.06236649 secs
>>
>
> Is that the problem you are trying to solve?
>
> Generally it's good to be really clear about what you're asking for.
> Show the code run, copy error messages, etc.
>
> - Mark


From josh.m.ulrich at gmail.com  Wed Aug  6 18:37:59 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Wed, 6 Aug 2014 11:37:59 -0500
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
	<CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
Message-ID: <CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>

On Wed, Aug 6, 2014 at 11:32 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> Mark,
>
> Are you using an outdated version of TTR? Josh had the same problem
> when he tried my demo.
>
It's not "outdated", it's just not the development version on R-Forge.
Please choose your words more carefully.  Also, since you knew this
was a requirement to replicate the error, you should have included
that information in your initial email.

> My error isn't a "stop, program won't run" error, but a runtime error
> of my exit rules not working--that is, I only get a few entry orders
> filled, and then no exits ever.
>
> -Ilya
>
> On Wed, Aug 6, 2014 at 10:10 AM, Mark Knecht <markknecht at gmail.com> wrote:
>> On Tue, Aug 5, 2014 at 3:47 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>>> Mark,
>>>
>>> Thanks for getting back to me. Since I'm using gmail, I didn't have any line
>>> wraps. However, I'm attaching my demo as an R file. Fixed the little typo.
>>>
>>> Thanks so much.
>>>
>>> -Ilya
>>>
>>
>> When using gmail ensure you have 'plain text' selected. (bottom right usually)
>>
>> When I run this code I see this as the first failure:
>>
>> [1] "Hammer_4TP"
>>>
>>> #apply strategy
>>> t1 <- Sys.time()
>>> out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
>> Error in `colnames<-`(`*tmp*`, value = c("XLB.Close.SMA.30",
>> "XLB.Close.SMA.10.sma1.SMA.30" :
>>   length of 'dimnames' [2] not equal to array extent
>>> t2 <- Sys.time()
>>> print(t2-t1)
>> Time difference of 0.06236649 secs
>>>
>>
>> Is that the problem you are trying to solve?
>>
>> Generally it's good to be really clear about what you're asking for.
>> Show the code run, copy error messages, etc.
>>
>> - Mark
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From markknecht at gmail.com  Wed Aug  6 18:41:35 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Wed, 6 Aug 2014 09:41:35 -0700
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
	<CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
	<CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>
Message-ID: <CAK2H+eeTA=2muTNi8-a4Dh9oMnMkd-gCH2N93c=iFmhscEAQ4A@mail.gmail.com>

On Wed, Aug 6, 2014 at 9:37 AM, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
> On Wed, Aug 6, 2014 at 11:32 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>> Mark,
>>
>> Are you using an outdated version of TTR? Josh had the same problem
>> when he tried my demo.
>>
> It's not "outdated", it's just not the development version on R-Forge.
> Please choose your words more carefully.  Also, since you knew this
> was a requirement to replicate the error, you should have included
> that information in your initial email.
>
>> My error isn't a "stop, program won't run" error, but a runtime error
>> of my exit rules not working--that is, I only get a few entry orders
>> filled, and then no exits ever.

Ah, then that answers it. I'm not using the version Joshua is talking
about. I'm using 0.22-0 which is what's offered as the latest in RStudio.

- Mark


From rbali at ufmg.br  Wed Aug  6 19:30:43 2014
From: rbali at ufmg.br (Robert Iquiapaza)
Date: Wed, 6 Aug 2014 14:30:43 -0300
Subject: [R-SIG-Finance] chartSerieries (quantmod) : data range
In-Reply-To: <OF947E8C4E.11EFDDCB-ON83257D2C.0047A626@grude.ufmg.br>
References: <OF947E8C4E.11EFDDCB-ON83257D2C.0047A626@grude.ufmg.br>
Message-ID: <DF14D294E122475B9DF59A4CAC6DC1F0@DXPSPC>

Hannu,

your data is a little bit different from yahoo, as you have only one series 
this should work

sdf <- read.table("sdf.txt", header=T,as.is=T)
str(sdf)
SDF2 = timeSeries(round(sdf[,2],3), sdf[,1])
chartSeries(SDF2,theme=chartTheme('white'),TA=NULL)


> str(sdf)
'data.frame':    235 obs. of  3 variables:
$ time: chr  "6/30/1994" "7/29/1994" "8/31/1994" "9/30/1994" ...
$ m   : num  1.006 0.948 0.944 1.005 0.982 ...
$ fit : num  0.995 0.996 0.988 0.985 0.992 ...

-----Mensagem Original----- 
From: Robert Iquiapaza
Sent: Wednesday, August 06, 2014 10:00 AM
To: Hannu Kahra
Cc: r-sig-finance at r-project.org
Subject: Re: [R-SIG-Finance] chartSerieries (quantmod) : data range

This works :

Ibov=getSymbols('^BVSP', src='yahoo',from='2000-01-01',auto.assign=FALSE)
IBOV <- to.monthly(Ibov,indexAt='lastof')["2000-08-31/2014-07-31"]
chartSeries(IBOV,theme=chartTheme('white'),TA=NULL)
names = index(IBOV)
IBOV = timeSeries(IBOV, names)
chartSeries(IBOV,theme=chartTheme('white'),TA=NULL)

Robert


2014-08-06 4:56 GMT-03:00 Hannu Kahra <hkahra at gmail.com>:

> Hi,
>
> I apply the chartSeries (quantmod) function to plot a time series. The
> function provides the data range on top of the graph:
>
> [1994-06-01 03:00:00/2013-12-01 02:00:00].
>
> The data are monthly from 1994-06-01 through 2013-12-01.
>
> Is it possible to get rid of the range in the graph, or have it
> [1994-06-01/2013-12-01]?
>
> -Hannu
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>
>

[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions 
should go.


From ilya.kipnis at gmail.com  Wed Aug  6 20:50:34 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Wed, 6 Aug 2014 14:50:34 -0400
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CAK2H+efXV2=O9CXops2Gzw9-Htip8eKYmUERNM7mdTM-BS26mg@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
	<CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
	<CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>
	<CAK2H+eeTA=2muTNi8-a4Dh9oMnMkd-gCH2N93c=iFmhscEAQ4A@mail.gmail.com>
	<CA+oJuEFh3Z-ftq6G6V2bC9rn585oa752x-gzTxj80V0MKoYayA@mail.gmail.com>
	<CAK2H+efXV2=O9CXops2Gzw9-Htip8eKYmUERNM7mdTM-BS26mg@mail.gmail.com>
Message-ID: <CA+oJuEH_D9TyuQpU_L=QHYmY7zDtzBYuFZyCpGqAb10uB0=M3w@mail.gmail.com>

Alright, here's a code that contains the absolute bare minimum. It's a
simple SMA5/SMA10 crossover strategy, with an entry a stoplimit on
seeing the signal, and an exit of the price immediately crossing below
the SMA10, mid-bar. I'm trying to set a stop loss on the second SMA. I
removed all of my additional functions. It's probably user error on my
part, but I'm simply asking how I achieve what I'm trying to do.

Thanks.

-Ilya

On Wed, Aug 6, 2014 at 12:50 PM, Mark Knecht <markknecht at gmail.com> wrote:
> On Wed, Aug 6, 2014 at 9:43 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>> Ah. Yeah, I'm using the latest R-forge version. But the issue I have
>> exists beyond that.
>>
>
> You replied to me only, which is fine.
>
> I would _strongly_ suggest that if your just learning quantstrat
> (which I don't use but I responded to you as I've meant for a long
> time to start learning) then try to minimize the example code down to
> the bare minimum to create the error you want to ask about. A lot of
> folks post complete examples to this list like you did and don't get
> much of a response.
>
> Just my input, and as I say, I'm interested in the subject but not
> such that I want to install lots of development packages as they might
> have bugs that mess up other things I'm doing.
>
> HTH,
> Mark
-------------- next part --------------
A non-text attachment was scrubbed...
Name: issueDemo.R
Type: application/octet-stream
Size: 2602 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140806/083ff3f2/attachment.obj>

From ilya.kipnis at gmail.com  Wed Aug  6 21:12:15 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Wed, 6 Aug 2014 15:12:15 -0400
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CA+oJuEH_D9TyuQpU_L=QHYmY7zDtzBYuFZyCpGqAb10uB0=M3w@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
	<CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
	<CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>
	<CAK2H+eeTA=2muTNi8-a4Dh9oMnMkd-gCH2N93c=iFmhscEAQ4A@mail.gmail.com>
	<CA+oJuEFh3Z-ftq6G6V2bC9rn585oa752x-gzTxj80V0MKoYayA@mail.gmail.com>
	<CAK2H+efXV2=O9CXops2Gzw9-Htip8eKYmUERNM7mdTM-BS26mg@mail.gmail.com>
	<CA+oJuEH_D9TyuQpU_L=QHYmY7zDtzBYuFZyCpGqAb10uB0=M3w@mail.gmail.com>
Message-ID: <CA+oJuEEiF1LXgOzTThv-qoXpXuEOLN9-cEk=eJadkdRt98Wryw@mail.gmail.com>

Fixed! I wasn't specifying my parent on the entry. But the
exit-on-indicator works now. Got it, all clear.

On Wed, Aug 6, 2014 at 2:50 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> Alright, here's a code that contains the absolute bare minimum. It's a
> simple SMA5/SMA10 crossover strategy, with an entry a stoplimit on
> seeing the signal, and an exit of the price immediately crossing below
> the SMA10, mid-bar. I'm trying to set a stop loss on the second SMA. I
> removed all of my additional functions. It's probably user error on my
> part, but I'm simply asking how I achieve what I'm trying to do.
>
> Thanks.
>
> -Ilya
>
> On Wed, Aug 6, 2014 at 12:50 PM, Mark Knecht <markknecht at gmail.com> wrote:
>> On Wed, Aug 6, 2014 at 9:43 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>>> Ah. Yeah, I'm using the latest R-forge version. But the issue I have
>>> exists beyond that.
>>>
>>
>> You replied to me only, which is fine.
>>
>> I would _strongly_ suggest that if your just learning quantstrat
>> (which I don't use but I responded to you as I've meant for a long
>> time to start learning) then try to minimize the example code down to
>> the bare minimum to create the error you want to ask about. A lot of
>> folks post complete examples to this list like you did and don't get
>> much of a response.
>>
>> Just my input, and as I say, I'm interested in the subject but not
>> such that I want to install lots of development packages as they might
>> have bugs that mess up other things I'm doing.
>>
>> HTH,
>> Mark


From markknecht at gmail.com  Wed Aug  6 21:14:03 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Wed, 6 Aug 2014 12:14:03 -0700
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CA+oJuEEiF1LXgOzTThv-qoXpXuEOLN9-cEk=eJadkdRt98Wryw@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
	<CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
	<CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>
	<CAK2H+eeTA=2muTNi8-a4Dh9oMnMkd-gCH2N93c=iFmhscEAQ4A@mail.gmail.com>
	<CA+oJuEFh3Z-ftq6G6V2bC9rn585oa752x-gzTxj80V0MKoYayA@mail.gmail.com>
	<CAK2H+efXV2=O9CXops2Gzw9-Htip8eKYmUERNM7mdTM-BS26mg@mail.gmail.com>
	<CA+oJuEH_D9TyuQpU_L=QHYmY7zDtzBYuFZyCpGqAb10uB0=M3w@mail.gmail.com>
	<CA+oJuEEiF1LXgOzTThv-qoXpXuEOLN9-cEk=eJadkdRt98Wryw@mail.gmail.com>
Message-ID: <CAK2H+eeQzqUB5=wK_6pbaEvhDKQg26123h2pLEsNR+3b3gBO+g@mail.gmail.com>

Please share the changes to the code for others that come later!

Cheers,
Mark

On Wed, Aug 6, 2014 at 12:12 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> Fixed! I wasn't specifying my parent on the entry. But the
> exit-on-indicator works now. Got it, all clear.
>
> On Wed, Aug 6, 2014 at 2:50 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>> Alright, here's a code that contains the absolute bare minimum. It's a
>> simple SMA5/SMA10 crossover strategy, with an entry a stoplimit on
>> seeing the signal, and an exit of the price immediately crossing below
>> the SMA10, mid-bar. I'm trying to set a stop loss on the second SMA. I
>> removed all of my additional functions. It's probably user error on my
>> part, but I'm simply asking how I achieve what I'm trying to do.
>>
>> Thanks.
>>
>> -Ilya
>>
>> On Wed, Aug 6, 2014 at 12:50 PM, Mark Knecht <markknecht at gmail.com> wrote:
>>> On Wed, Aug 6, 2014 at 9:43 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>>>> Ah. Yeah, I'm using the latest R-forge version. But the issue I have
>>>> exists beyond that.
>>>>
>>>
>>> You replied to me only, which is fine.
>>>
>>> I would _strongly_ suggest that if your just learning quantstrat
>>> (which I don't use but I responded to you as I've meant for a long
>>> time to start learning) then try to minimize the example code down to
>>> the bare minimum to create the error you want to ask about. A lot of
>>> folks post complete examples to this list like you did and don't get
>>> much of a response.
>>>
>>> Just my input, and as I say, I'm interested in the subject but not
>>> such that I want to install lots of development packages as they might
>>> have bugs that mess up other things I'm doing.
>>>
>>> HTH,
>>> Mark


From ilya.kipnis at gmail.com  Wed Aug  6 21:20:41 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Wed, 6 Aug 2014 15:20:41 -0400
Subject: [R-SIG-Finance] Need help getting stop-loss and take-profit
 orders to work with indicators
In-Reply-To: <CAK2H+eeQzqUB5=wK_6pbaEvhDKQg26123h2pLEsNR+3b3gBO+g@mail.gmail.com>
References: <CA+oJuEEU2EPGJWO0hGHQxRPqnHg1dJonT6EuxrfWgv9suF8v6Q@mail.gmail.com>
	<CAK2H+efjkVQf=6acO61YiONjd6+QNy9O1RsjhStOWojMkeYbaQ@mail.gmail.com>
	<CA+oJuEEvF+Fdx4F2eC3ApgRM=N3D5RbruURPpFMH71EfPoPnzw@mail.gmail.com>
	<CAK2H+ecip9bq5zXDJ43iMm6Gio7NntbOtQ19Xn9xfDNtPm_58g@mail.gmail.com>
	<CA+oJuEHYHEjMh0SRz8aw_ewzcaf9Q0-AUEMMctcFG4UBY6Bq5Q@mail.gmail.com>
	<CAPPM_gSmS+5WPpujqaJdOkyv1r_6+=UUf-EPn2wx2zSWM=UVhQ@mail.gmail.com>
	<CAK2H+eeTA=2muTNi8-a4Dh9oMnMkd-gCH2N93c=iFmhscEAQ4A@mail.gmail.com>
	<CA+oJuEFh3Z-ftq6G6V2bC9rn585oa752x-gzTxj80V0MKoYayA@mail.gmail.com>
	<CAK2H+efXV2=O9CXops2Gzw9-Htip8eKYmUERNM7mdTM-BS26mg@mail.gmail.com>
	<CA+oJuEH_D9TyuQpU_L=QHYmY7zDtzBYuFZyCpGqAb10uB0=M3w@mail.gmail.com>
	<CA+oJuEEiF1LXgOzTThv-qoXpXuEOLN9-cEk=eJadkdRt98Wryw@mail.gmail.com>
	<CAK2H+eeQzqUB5=wK_6pbaEvhDKQg26123h2pLEsNR+3b3gBO+g@mail.gmail.com>
Message-ID: <CA+oJuEE0XWNYL3Ln7zJd0ZHZhT6HrJB58TyRQw7Lud6_s6KMvQ@mail.gmail.com>

Mark,

The corrected version is attached. I had my link incorrect. But I got
the correct syntax now. I've never actually seen this nuance until
now, so this is pretty cool to me.

-Ilya

On Wed, Aug 6, 2014 at 3:14 PM, Mark Knecht <markknecht at gmail.com> wrote:
> Please share the changes to the code for others that come later!
>
> Cheers,
> Mark
>
> On Wed, Aug 6, 2014 at 12:12 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>> Fixed! I wasn't specifying my parent on the entry. But the
>> exit-on-indicator works now. Got it, all clear.
>>
>> On Wed, Aug 6, 2014 at 2:50 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>>> Alright, here's a code that contains the absolute bare minimum. It's a
>>> simple SMA5/SMA10 crossover strategy, with an entry a stoplimit on
>>> seeing the signal, and an exit of the price immediately crossing below
>>> the SMA10, mid-bar. I'm trying to set a stop loss on the second SMA. I
>>> removed all of my additional functions. It's probably user error on my
>>> part, but I'm simply asking how I achieve what I'm trying to do.
>>>
>>> Thanks.
>>>
>>> -Ilya
>>>
>>> On Wed, Aug 6, 2014 at 12:50 PM, Mark Knecht <markknecht at gmail.com> wrote:
>>>> On Wed, Aug 6, 2014 at 9:43 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>>>>> Ah. Yeah, I'm using the latest R-forge version. But the issue I have
>>>>> exists beyond that.
>>>>>
>>>>
>>>> You replied to me only, which is fine.
>>>>
>>>> I would _strongly_ suggest that if your just learning quantstrat
>>>> (which I don't use but I responded to you as I've meant for a long
>>>> time to start learning) then try to minimize the example code down to
>>>> the bare minimum to create the error you want to ask about. A lot of
>>>> folks post complete examples to this list like you did and don't get
>>>> much of a response.
>>>>
>>>> Just my input, and as I say, I'm interested in the subject but not
>>>> such that I want to install lots of development packages as they might
>>>> have bugs that mess up other things I'm doing.
>>>>
>>>> HTH,
>>>> Mark
-------------- next part --------------
A non-text attachment was scrubbed...
Name: issueDemo.R
Type: application/octet-stream
Size: 2671 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140806/748e08da/attachment.obj>

From keiyanliew at hotmail.com  Fri Aug  8 01:24:27 2014
From: keiyanliew at hotmail.com (kyan)
Date: Thu, 7 Aug 2014 16:24:27 -0700 (PDT)
Subject: [R-SIG-Finance] EWMA and MA to calculate Value at Risk
Message-ID: <1407453867708-4695217.post@n4.nabble.com>

Hi guys,

I am currently new to R and am trying to forecast Value at Risk (VaR) using
the simple moving average (MA) and EWMA. Can anyone provide me with a code
to do this? I have already acquired my data and calculated the returns. It
is a portfolio consisting of 4 assets (stock markets) with weight 0.25 each.

Also, i am trying to forecast VaR on previous dates, specifically, from
1/1/07 to 31/12/07 and compare it to the actual results. I would appreciate
it if you guys can help me out with the coding as i am confused with using
either the rolling apply/sapply function for this. 

Thanks alot in advance! 



--
View this message in context: http://r.789695.n4.nabble.com/EWMA-and-MA-to-calculate-Value-at-Risk-tp4695217.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From jkaprich at gmail.com  Fri Aug  8 02:34:02 2014
From: jkaprich at gmail.com (John Kaprich)
Date: Thu, 7 Aug 2014 19:34:02 -0500
Subject: [R-SIG-Finance] plot.forecast showing numbers instead of dates on
 x-axis of a weekly time series
Message-ID: <CADEYtz5e0B5Y+9APCwJcPjp0RPk+OUwHeeuGwOBrQCGPnikdhQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140807/2711694a/attachment.pl>

From n-e-w at qtradr.net  Fri Aug  8 04:51:23 2014
From: n-e-w at qtradr.net (Nick White)
Date: Fri, 8 Aug 2014 12:51:23 +1000
Subject: [R-SIG-Finance] EWMA and MA to calculate Value at Risk
In-Reply-To: <1407453867708-4695217.post@n4.nabble.com>
References: <1407453867708-4695217.post@n4.nabble.com>
Message-ID: <CAH+4RFseygBDsD26056bqJgJh2nGMFTjy2F0nyuQ2W+RZKYxAg@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140808/5ef42165/attachment.pl>

From a.chandhial at btinternet.com  Fri Aug  8 08:49:25 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Fri, 8 Aug 2014 07:49:25 +0100 (BST)
Subject: [R-SIG-Finance] Fwd: [R] dynamic runSum
In-Reply-To: <26444746.28619.1407418376914.JavaMail.defaultUser@defaultHost>
References: <26444746.28619.1407418376914.JavaMail.defaultUser@defaultHost>
Message-ID: <6157158.1851.1407480565133.JavaMail.defaultUser@defaultHost>


Hello,


I am cross-posting to R-finance as this is finance-orientated.



Amarjit



----Original message----
>From : a.chandhial at btinternet.com
Date : 07/08/2014 - 14:32 (GMTST)
To : r-help at r-project.org
Subject : [R] dynamic runSum

Hello,
runSum calculates a running sum looking back a fixed distance n, e.g. 20.  
How do I calculate a dynamic runSum function for an xts object?
In 
otherwords, I want to calculate a running sum at each point in time 
looking back a variable distance. In this example, values governed by 
the vector VL.  
Here's a minimum reproducible example:
 
 library(quantstrat)
symbols = c('^GSPC') 
 
 start.date <- as.Date("2010-01-01")
 end.date <- as.Date("2013-12-31")
 
 getSymbols(symbols, from=as.character(start.date), to=as.character(end.date),adjust=T) 
 
 "acF1" <- function(x, n1=5, n2=10, n3=20, nacF1=25, n0=20, ...) {
    var1 <- x - lag(x,1,na.pad=T)
    var2 <- runSD(x, n=n1, sample=TRUE, cumulative=FALSE) 
    var3 <- runMean(var2, n=n2, cumulative=FALSE) 
    VL <- ifelse( trunc(n3/(var2/var3))>nacF1, nacF1, trunc(n3/(var2/var3)))
    p_pos <- ifelse(var1>=0, var1, 0)
    out1 <- runSum(p_pos,  n=n0, cumulative=FALSE)
 
    res <- cbind(var1, var2, var3, VL, p_pos, out1)
    colnames(res) <- c("var1","var2","var3","VL", "p_pos", "out1")
 
    reclass(res)
 }
 
 
 acf1 <- acF1( GSPC[,c("GSPC.Close")], n1=5, n2=10, n3=20, nacF1=25, n0=20)
 acf1
 
 
So on 
2010-02-02, I want runSum to be looking back 23 points as governed by VL , not 20 points
2010-02-03, I want runSum to be looking back 24 points as governed by VL,  not 20 points
 etc etc 
 2013-12-31, I want runSum to be looking back 25 points as governed by VL, not 20 points 
 
 
Amarjit
 
 
 ______________________________________________
R-help at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From ilya.kipnis at gmail.com  Fri Aug  8 14:08:46 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Fri, 8 Aug 2014 08:08:46 -0400
Subject: [R-SIG-Finance] Fwd: [R] dynamic runSum
In-Reply-To: <6157158.1851.1407480565133.JavaMail.defaultUser@defaultHost>
References: <26444746.28619.1407418376914.JavaMail.defaultUser@defaultHost>
	<6157158.1851.1407480565133.JavaMail.defaultUser@defaultHost>
Message-ID: <CA+oJuEH27-YJZhLpAkCtJtSsixjuMM0=6mq4hvZcR6CCsi3Mug@mail.gmail.com>

I am echoing this question. The only thing I can think of is to do
however many separate runSums, and then just loop across columns. It's
relevant to me due to John Ehlers's algorithms having a dynamic
lookback period. Thanks.

On Fri, Aug 8, 2014 at 2:49 AM, amarjit chandhial
<a.chandhial at btinternet.com> wrote:
>
> Hello,
>
>
> I am cross-posting to R-finance as this is finance-orientated.
>
>
>
> Amarjit
>
>
>
> ----Original message----
> >From : a.chandhial at btinternet.com
> Date : 07/08/2014 - 14:32 (GMTST)
> To : r-help at r-project.org
> Subject : [R] dynamic runSum
>
> Hello,
> runSum calculates a running sum looking back a fixed distance n, e.g. 20.
> How do I calculate a dynamic runSum function for an xts object?
> In
> otherwords, I want to calculate a running sum at each point in time
> looking back a variable distance. In this example, values governed by
> the vector VL.
> Here's a minimum reproducible example:
>
>  library(quantstrat)
> symbols = c('^GSPC')
>
>  start.date <- as.Date("2010-01-01")
>  end.date <- as.Date("2013-12-31")
>
>  getSymbols(symbols, from=as.character(start.date), to=as.character(end.date),adjust=T)
>
>  "acF1" <- function(x, n1=5, n2=10, n3=20, nacF1=25, n0=20, ...) {
>     var1 <- x - lag(x,1,na.pad=T)
>     var2 <- runSD(x, n=n1, sample=TRUE, cumulative=FALSE)
>     var3 <- runMean(var2, n=n2, cumulative=FALSE)
>     VL <- ifelse( trunc(n3/(var2/var3))>nacF1, nacF1, trunc(n3/(var2/var3)))
>     p_pos <- ifelse(var1>=0, var1, 0)
>     out1 <- runSum(p_pos,  n=n0, cumulative=FALSE)
>
>     res <- cbind(var1, var2, var3, VL, p_pos, out1)
>     colnames(res) <- c("var1","var2","var3","VL", "p_pos", "out1")
>
>     reclass(res)
>  }
>
>
>  acf1 <- acF1( GSPC[,c("GSPC.Close")], n1=5, n2=10, n3=20, nacF1=25, n0=20)
>  acf1
>
>
> So on
> 2010-02-02, I want runSum to be looking back 23 points as governed by VL , not 20 points
> 2010-02-03, I want runSum to be looking back 24 points as governed by VL,  not 20 points
>  etc etc
>  2013-12-31, I want runSum to be looking back 25 points as governed by VL, not 20 points
>
>
> Amarjit
>
>
>  ______________________________________________
> R-help at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From brian at braverock.com  Fri Aug  8 14:51:26 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Fri, 08 Aug 2014 07:51:26 -0500
Subject: [R-SIG-Finance] Fwd: [R] dynamic runSum
In-Reply-To: <CA+oJuEH27-YJZhLpAkCtJtSsixjuMM0=6mq4hvZcR6CCsi3Mug@mail.gmail.com>
References: <26444746.28619.1407418376914.JavaMail.defaultUser@defaultHost>	<6157158.1851.1407480565133.JavaMail.defaultUser@defaultHost>
	<CA+oJuEH27-YJZhLpAkCtJtSsixjuMM0=6mq4hvZcR6CCsi3Mug@mail.gmail.com>
Message-ID: <53E4C7CE.3000207@braverock.com>

It doesn't sound like you want the 'running' sum.  It sounds like you 
want the sum with a different lookback.

set.seed(987654)
require(foreach)
x<-xts(cumsum(1+rnorm(100,.5,.1)),order.by=as.Date(1:100))
colnames(x)<-'Prices'
x$Lookback<-round(abs(rnorm(100,5,3)))
x$Lookback[1:15] <- 1:15
x$variable_sum <- foreach(i=1:nrow(x), .combine=c) %do%
                   {z <- sum(x$Prices[(i-x$Lookback[i]):i])}

Regards,

Brian

On 08/08/2014 07:08 AM, Ilya Kipnis wrote:
> I am echoing this question. The only thing I can think of is to do
> however many separate runSums, and then just loop across columns. It's
> relevant to me due to John Ehlers's algorithms having a dynamic
> lookback period. Thanks.
>
> On Fri, Aug 8, 2014 at 2:49 AM, amarjit chandhial
> <a.chandhial at btinternet.com> wrote:
>>
>> Hello,
>>
>>
>> I am cross-posting to R-finance as this is finance-orientated.
>>
>>
>>
>> Amarjit
>>
>>
>>
>> ----Original message----
>> >From : a.chandhial at btinternet.com
>> Date : 07/08/2014 - 14:32 (GMTST)
>> To : r-help at r-project.org
>> Subject : [R] dynamic runSum
>>
>> Hello,
>> runSum calculates a running sum looking back a fixed distance n, e.g. 20.
>> How do I calculate a dynamic runSum function for an xts object?
>> In
>> otherwords, I want to calculate a running sum at each point in time
>> looking back a variable distance. In this example, values governed by
>> the vector VL.
>> Here's a minimum reproducible example:
>>
>>   library(quantstrat)
>> symbols = c('^GSPC')
>>
>>   start.date <- as.Date("2010-01-01")
>>   end.date <- as.Date("2013-12-31")
>>
>   getSymbols(symbols, from=as.character(start.date), to=as.character(end.date),adjust=T)
>>
>>   "acF1" <- function(x, n1=5, n2=10, n3=20, nacF1=25, n0=20, ...) {
>>      var1 <- x - lag(x,1,na.pad=T)
>>      var2 <- runSD(x, n=n1, sample=TRUE, cumulative=FALSE)
>>      var3 <- runMean(var2, n=n2, cumulative=FALSE)
>>      VL <- ifelse( trunc(n3/(var2/var3))>nacF1, nacF1, trunc(n3/(var2/var3)))
>>      p_pos <- ifelse(var1>=0, var1, 0)
>>      out1 <- runSum(p_pos,  n=n0, cumulative=FALSE)
>>
>>      res <- cbind(var1, var2, var3, VL, p_pos, out1)
>>      colnames(res) <- c("var1","var2","var3","VL", "p_pos", "out1")
>>
>>      reclass(res)
>>   }
>>
>>
>>   acf1 <- acF1( GSPC[,c("GSPC.Close")], n1=5, n2=10, n3=20, nacF1=25, n0=20)
>>   acf1
>>
>>
>> So on
>> 2010-02-02, I want runSum to be looking back 23 points as governed by VL , not 20 points
>> 2010-02-03, I want runSum to be looking back 24 points as governed by VL,  not 20 points
>>   etc etc
>>   2013-12-31, I want runSum to be looking back 25 points as governed by VL, not 20 points
>>
>>
>> Amarjit
>>
>>
>>   ______________________________________________
>> R-help at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From lera90 at mail.ru  Fri Aug  8 16:47:54 2014
From: lera90 at mail.ru (valeri)
Date: Fri, 8 Aug 2014 07:47:54 -0700 (PDT)
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <53C6416D.3050401@4dscape.com>
References: <1392738243146-4685490.post@n4.nabble.com>
	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>
	<1401211931020-4691313.post@n4.nabble.com>
	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>
	<1401217345854-4691323.post@n4.nabble.com>
	<5384EF68.9060201@4dscape.com>
	<1405497634951-4694076.post@n4.nabble.com>
	<53C63656.2070407@4dscape.com>
	<1405500765427-4694078.post@n4.nabble.com>
	<53C6416D.3050401@4dscape.com>
Message-ID: <1407509274112-4695252.post@n4.nabble.com>

Hello!

I came up with the same problem conserning convergence. Due to information
in this topic I should update some packages. I updated Rsolnp, but I can't
update rugarch. I run R as administrator. Please explain what I do wrong.

sessionInfo() is below:

R version 3.1.1 (2014-07-10)
Platform: x86_64-w64-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=Russian_Russia.1251  LC_CTYPE=Russian_Russia.1251   
LC_MONETARY=Russian_Russia.1251
[4] LC_NUMERIC=C                    LC_TIME=Russian_Russia.1251    

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods  
base     

other attached packages:
[1] Rsolnp_1.15     truncnorm_1.0-7 Rcpp_0.11.2     devtools_1.5   
rugarch_1.3-3  

loaded via a namespace (and not attached):
 [1] digest_0.6.4                DistributionUtils_0.5-1     evaluate_0.5.5             
expm_0.99-1.1              
 [5] GeneralizedHyperbolic_0.8-1 grid_3.1.1                  httr_0.4                   
KernSmooth_2.23-12         
 [9] ks_1.9.2                    lattice_0.20-29             Matrix_1.1-4               
memoise_0.2.1              
[13] misc3d_0.8-4                mvtnorm_1.0-0               nloptr_1.0.4               
numDeriv_2012.9-1          
[17] RCurl_1.95-4.3              rgl_0.93.1098              
SkewHyperbolic_0.3-2        spd_2.0-0                  
[21] stringr_0.6.2               tools_3.1.1                 whisker_0.3-2              
xts_0.9-7                  
[25] zoo_1.7-11                 

install_bitbucket("rugarch","alexiosg") command generate error:


Installing bitbucket repo(s) rugarch/master from alexiosg
Downloading master.zip from
https://bitbucket.org/alexiosg/rugarch/get/master.zip
Installing package from
C:\Users\VVLAK_~1\AppData\Local\Temp\RtmpKWvLpy/master.zip
Installing rugarch
"C:/PROGRA~1/R/R-31~1.1/bin/x64/R" --vanilla CMD build  \
 
"C:\Users\vvlak_000\AppData\Local\Temp\RtmpKWvLpy\devtools21604ee26525\alexiosg-rugarch-20ea6b2e8312"
--no-manual  \
  --no-resave-data 

* checking for file
'C:\Users\vvlak_000\AppData\Local\Temp\RtmpKWvLpy\devtools21604ee26525\alexiosg-rugarch-20ea6b2e8312/DESCRIPTION'
... OK
* preparing 'rugarch':
* checking DESCRIPTION meta-information ... OK
* cleaning src
Warning in cleanup_pkg(pkgdir, Log) :
  unable to run 'make clean' in 'src'
* installing the package to build vignettes
Warning: running command '"C:/PROGRA~1/R/R-31~1.1/bin/x64/Rcmd.exe" INSTALL
-l "C:\Users\VVLAK_~1\AppData\Local\Temp\RtmpoZKoQu\Rinst17e85aa936aa"
--no-multiarch
"C:/Users/vvlak_000/AppData/Local/Temp/RtmpoZKoQu/Rbuild17e8e1f5b5a/rugarch"'
had status 1
      -----------------------------------
* installing *source* package 'rugarch' ...
** libs
Warning: running command 'make -f "Makevars.win" -f
"C:/PROGRA~1/R/R-31~1.1/etc/x64/Makeconf" -f
"C:/PROGRA~1/R/R-31~1.1/share/make/winshlib.mk"
SHLIB_LDFLAGS='$(SHLIB_CXXLDFLAGS)' SHLIB_LD='$(SHLIB_CXXLD)'
SHLIB="rugarch.dll" SHLIB_LIBADD='$(FLIBS)' WIN=64 TCLBIN=64
OBJECTS="distributions.o filters.o fracdiff.o fracimport.o garchmodels.o
garchsim.o gig.o nig.o"' had status 127
ERROR: compilation failed for package 'rugarch'
* removing
'C:/Users/VVLAK_~1/AppData/Local/Temp/RtmpoZKoQu/Rinst17e85aa936aa/rugarch'
      -----------------------------------
ERROR: package installation failed
Error: Command failed (1)



--
View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4695252.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From a.chandhial at btinternet.com  Fri Aug  8 18:02:51 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Fri, 8 Aug 2014 17:02:51 +0100 (BST)
Subject: [R-SIG-Finance] Fwd: [R] dynamic runSum
In-Reply-To: <53E4C7CE.3000207@braverock.com>
References: <26444746.28619.1407418376914.JavaMail.defaultUser@defaultHost>	<6157158.1851.1407480565133.JavaMail.defaultUser@defaultHost>
	<CA+oJuEH27-YJZhLpAkCtJtSsixjuMM0=6mq4hvZcR6CCsi3Mug@mail.gmail.com>
	<53E4C7CE.3000207@braverock.com>
Message-ID: <6168716.37824.1407513771536.JavaMail.defaultUser@defaultHost>



Brian,


With respect there's an error in your code. Given that the following may do the trick:


#calculate dynamic runSums:
# for 0 lookback: 0
# for 1 lookback: the price
# for n lookback: sum of n prices
 x$variable_sum <- ifelse( x$Lookback == 0, 
                           0,
                           foreach(i=1:nrow(x), .combine=c) %do% {z <- sum(x$Prices[(i-x$Lookback[i]+1):i])}
                          )

 head(x$variable_sum,25)




Anyways, here's a solution in Rcpp



R FILE
--------


 library(quantstrat)

 symbols = c('^GSPC') 
 
 start.date <- as.Date("2010-01-01")
 end.date <- as.Date("2013-12-31")
 
 getSymbols(symbols, from=as.character(start.date), to=as.character(end.date),adjust=T) 


 library(quantstrat)
 library(Rcpp)

 Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
 Sys.setenv("PKG_LIBS"="-fopenmp")


 setwd( " directory of Rcpp file ")
 sourceCpp("00_acF1_RcppFuns.cpp")
 
 
 "acF1" <- function(x, n1=5, n2=10, n3=20, nacF1=25, n0=20, ...) {

    var1 <- x - lag(x,1,na.pad=T)
    var2 <- runSD(x, n=n1, sample=TRUE, cumulative=FALSE) 
    var3 <- runMean(var2, n=n2, cumulative=FALSE) 

    VL <- ifelse( trunc(n3/(var2/var3))>nacF1, nacF1, trunc(n3/(var2/var3)))

    p_pos <- ifelse(var1>=0, var1, 0)


   #POS
    filt1 <- rep(0, length(x))
    out1 <- ac_computeacF1(nacF1, VL, p_pos, filt1, x)
    out1 <- xts(out1, order.by = index(x))

 
    res <- cbind(var1, var2, var3, VL, p_pos, out1)
    colnames(res) <- c("var1","var2","var3","VL", "p_pos", "out1")
 
    reclass(res)
 }
 
 

 acf1 <- acF1( GSPC[,c("GSPC.Close")], n1=5, n2=10, n3=14, nacF1=30, n0=20)
 acf1



RCPP FILE: 00_acF1_RcppFuns.cpp
----------------------------------------


#include <Rcpp.h>
using namespace Rcpp;


// [[Rcpp::export]]
NumericVector ac_computeacF1(const int nn, NumericVector VL, NumericVector p_pos, NumericVector filt1, NumericVector price) {

  int i; 
  int j;
  int n = price.size();
  int beg = nn;
  filt1[beg] = 0;
  
  
  /* Find first non-NA input value */
    for(i = 0; i <= beg; i++) {	
	
	
        /* Account for leading NAs in input */
        if(ISNA(price[i])) {
            filt1[i] = NA_REAL;
            beg++;
            filt1[beg] = 0;
            continue;
        }
		
		
		/* Set leading NAs in output */
        for(i=0; i<beg; i++) {
            filt1[i] = NA_REAL;
         }
		 
			
		/* get 1st one right */		
        for(i=beg-VL[nn]+1; i<=beg; i++) {
		     filt1[beg] += p_pos[i] ;
			}
		
			
		/* get ALL right */	
		for(j=1; j<=n; j++) {	
			for(i=beg-VL[nn+j]+1+j; i<=beg+j; i++) {
			     filt1[beg+j] += p_pos[i] ;
			}
		}		
 						
			
	}	
			 

    return filt1;  
    }
	
	



Amarjit



----Original message----
>From : brian at braverock.com
Date : 08/08/2014 - 13:51 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] Fwd: [R] dynamic runSum

It doesn't sound like you want the 'running' sum.  It sounds like you 
want the sum with a different lookback.

set.seed(987654)
require(foreach)
x<-xts(cumsum(1+rnorm(100,.5,.1)),order.by=as.Date(1:100))
colnames(x)<-'Prices'
x$Lookback<-round(abs(rnorm(100,5,3)))
x$Lookback[1:15] <- 1:15
x$variable_sum <- foreach(i=1:nrow(x), .combine=c) %do%
                   {z <- sum(x$Prices[(i-x$Lookback[i]):i])}

Regards,

Brian

On 08/08/2014 07:08 AM, Ilya Kipnis wrote:
> I am echoing this question. The only thing I can think of is to do
> however many separate runSums, and then just loop across columns. It's
> relevant to me due to John Ehlers's algorithms having a dynamic
> lookback period. Thanks.
>
> On Fri, Aug 8, 2014 at 2:49 AM, amarjit chandhial
> <a.chandhial at btinternet.com> wrote:
>>
>> Hello,
>>
>>
>> I am cross-posting to R-finance as this is finance-orientated.
>>
>>
>>
>> Amarjit
>>
>>
>>
>> ----Original message----
>> >From : a.chandhial at btinternet.com
>> Date : 07/08/2014 - 14:32 (GMTST)
>> To : r-help at r-project.org
>> Subject : [R] dynamic runSum
>>
>> Hello,
>> runSum calculates a running sum looking back a fixed distance n, e.g. 20.
>> How do I calculate a dynamic runSum function for an xts object?
>> In
>> otherwords, I want to calculate a running sum at each point in time
>> looking back a variable distance. In this example, values governed by
>> the vector VL.
>> Here's a minimum reproducible example:
>>
>>   library(quantstrat)
>> symbols = c('^GSPC')
>>
>>   start.date <- as.Date("2010-01-01")
>>   end.date <- as.Date("2013-12-31")
>>
>   getSymbols(symbols, from=as.character(start.date), to=as.character(end.date),adjust=T)
>>
>>   "acF1" <- function(x, n1=5, n2=10, n3=20, nacF1=25, n0=20, ...) {
>>      var1 <- x - lag(x,1,na.pad=T)
>>      var2 <- runSD(x, n=n1, sample=TRUE, cumulative=FALSE)
>>      var3 <- runMean(var2, n=n2, cumulative=FALSE)
>>      VL <- ifelse( trunc(n3/(var2/var3))>nacF1, nacF1, trunc(n3/(var2/var3)))
>>      p_pos <- ifelse(var1>=0, var1, 0)
>>      out1 <- runSum(p_pos,  n=n0, cumulative=FALSE)
>>
>>      res <- cbind(var1, var2, var3, VL, p_pos, out1)
>>      colnames(res) <- c("var1","var2","var3","VL", "p_pos", "out1")
>>
>>      reclass(res)
>>   }
>>
>>
>>   acf1 <- acF1( GSPC[,c("GSPC.Close")], n1=5, n2=10, n3=20, nacF1=25, n0=20)
>>   acf1
>>
>>
>> So on
>> 2010-02-02, I want runSum to be looking back 23 points as governed by VL , not 20 points
>> 2010-02-03, I want runSum to be looking back 24 points as governed by VL,  not 20 points
>>   etc etc
>>   2013-12-31, I want runSum to be looking back 25 points as governed by VL, not 20 points
>>
>>
>> Amarjit
>>
>>
>>   ______________________________________________
>> R-help at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From alexios at 4dscape.com  Fri Aug  8 19:36:40 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Fri, 08 Aug 2014 18:36:40 +0100
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <1407509274112-4695252.post@n4.nabble.com>
References: <1392738243146-4685490.post@n4.nabble.com>	<93E95D04-B6D4-49AD-B60C-E51EDF32D96A@4dscape.com>	<1401211931020-4691313.post@n4.nabble.com>	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>	<1401217345854-4691323.post@n4.nabble.com>	<5384EF68.9060201@4dscape.com>	<1405497634951-4694076.post@n4.nabble.com>	<53C63656.2070407@4dscape.com>	<1405500765427-4694078.post@n4.nabble.com>	<53C6416D.3050401@4dscape.com>
	<1407509274112-4695252.post@n4.nabble.com>
Message-ID: <53E50AA8.5040608@4dscape.com>

Read the instructions here:
http://unstarched.net/r-downloads/
particularly the note on the requirements for
building the source under windows.

-Alexios


On 08/08/2014 15:47, valeri wrote:
> Hello!
> 
> I came up with the same problem conserning convergence. Due to information
> in this topic I should update some packages. I updated Rsolnp, but I can't
> update rugarch. I run R as administrator. Please explain what I do wrong.
> 
> sessionInfo() is below:
> 
> R version 3.1.1 (2014-07-10)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> 
> locale:
> [1] LC_COLLATE=Russian_Russia.1251  LC_CTYPE=Russian_Russia.1251   
> LC_MONETARY=Russian_Russia.1251
> [4] LC_NUMERIC=C                    LC_TIME=Russian_Russia.1251    
> 
> attached base packages:
> [1] parallel  stats     graphics  grDevices utils     datasets  methods  
> base     
> 
> other attached packages:
> [1] Rsolnp_1.15     truncnorm_1.0-7 Rcpp_0.11.2     devtools_1.5   
> rugarch_1.3-3  
> 
> loaded via a namespace (and not attached):
>  [1] digest_0.6.4                DistributionUtils_0.5-1     evaluate_0.5.5             
> expm_0.99-1.1              
>  [5] GeneralizedHyperbolic_0.8-1 grid_3.1.1                  httr_0.4                   
> KernSmooth_2.23-12         
>  [9] ks_1.9.2                    lattice_0.20-29             Matrix_1.1-4               
> memoise_0.2.1              
> [13] misc3d_0.8-4                mvtnorm_1.0-0               nloptr_1.0.4               
> numDeriv_2012.9-1          
> [17] RCurl_1.95-4.3              rgl_0.93.1098              
> SkewHyperbolic_0.3-2        spd_2.0-0                  
> [21] stringr_0.6.2               tools_3.1.1                 whisker_0.3-2              
> xts_0.9-7                  
> [25] zoo_1.7-11                 
> 
> install_bitbucket("rugarch","alexiosg") command generate error:
> 
> 
> Installing bitbucket repo(s) rugarch/master from alexiosg
> Downloading master.zip from
> https://bitbucket.org/alexiosg/rugarch/get/master.zip
> Installing package from
> C:\Users\VVLAK_~1\AppData\Local\Temp\RtmpKWvLpy/master.zip
> Installing rugarch
> "C:/PROGRA~1/R/R-31~1.1/bin/x64/R" --vanilla CMD build  \
>  
> "C:\Users\vvlak_000\AppData\Local\Temp\RtmpKWvLpy\devtools21604ee26525\alexiosg-rugarch-20ea6b2e8312"
> --no-manual  \
>   --no-resave-data 
> 
> * checking for file
> 'C:\Users\vvlak_000\AppData\Local\Temp\RtmpKWvLpy\devtools21604ee26525\alexiosg-rugarch-20ea6b2e8312/DESCRIPTION'
> ... OK
> * preparing 'rugarch':
> * checking DESCRIPTION meta-information ... OK
> * cleaning src
> Warning in cleanup_pkg(pkgdir, Log) :
>   unable to run 'make clean' in 'src'
> * installing the package to build vignettes
> Warning: running command '"C:/PROGRA~1/R/R-31~1.1/bin/x64/Rcmd.exe" INSTALL
> -l "C:\Users\VVLAK_~1\AppData\Local\Temp\RtmpoZKoQu\Rinst17e85aa936aa"
> --no-multiarch
> "C:/Users/vvlak_000/AppData/Local/Temp/RtmpoZKoQu/Rbuild17e8e1f5b5a/rugarch"'
> had status 1
>       -----------------------------------
> * installing *source* package 'rugarch' ...
> ** libs
> Warning: running command 'make -f "Makevars.win" -f
> "C:/PROGRA~1/R/R-31~1.1/etc/x64/Makeconf" -f
> "C:/PROGRA~1/R/R-31~1.1/share/make/winshlib.mk"
> SHLIB_LDFLAGS='$(SHLIB_CXXLDFLAGS)' SHLIB_LD='$(SHLIB_CXXLD)'
> SHLIB="rugarch.dll" SHLIB_LIBADD='$(FLIBS)' WIN=64 TCLBIN=64
> OBJECTS="distributions.o filters.o fracdiff.o fracimport.o garchmodels.o
> garchsim.o gig.o nig.o"' had status 127
> ERROR: compilation failed for package 'rugarch'
> * removing
> 'C:/Users/VVLAK_~1/AppData/Local/Temp/RtmpoZKoQu/Rinst17e85aa936aa/rugarch'
>       -----------------------------------
> ERROR: package installation failed
> Error: Command failed (1)
> 
> 
> 
> --
> View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4695252.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From lera90 at mail.ru  Sun Aug 10 15:35:06 2014
From: lera90 at mail.ru (valeri)
Date: Sun, 10 Aug 2014 06:35:06 -0700 (PDT)
Subject: [R-SIG-Finance] understanding an error from ugarchfit
In-Reply-To: <53E50AA8.5040608@4dscape.com>
References: <1401211931020-4691313.post@n4.nabble.com>
	<0B94CACC-699B-4CC3-901D-84B9128B3132@4dscape.com>
	<1401217345854-4691323.post@n4.nabble.com>
	<5384EF68.9060201@4dscape.com>
	<1405497634951-4694076.post@n4.nabble.com>
	<53C63656.2070407@4dscape.com>
	<1405500765427-4694078.post@n4.nabble.com>
	<53C6416D.3050401@4dscape.com>
	<1407509274112-4695252.post@n4.nabble.com>
	<53E50AA8.5040608@4dscape.com>
Message-ID: <1407677706639-4695309.post@n4.nabble.com>

Ok, I needed to install Rtools 3.1. Thanks a lot, Alexios!



--
View this message in context: http://r.789695.n4.nabble.com/understanding-an-error-from-ugarchfit-tp4684836p4695309.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From u0055 at wolke7.net  Sun Aug 10 17:56:34 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Sun, 10 Aug 2014 17:56:34 +0200
Subject: [R-SIG-Finance] parma - How to add a constraint for the weights
Message-ID: <53E79632.1060804@wolke7.net>

Dear R-SIGs,

I would like to optimize a long/short portfolio and
apply the constraint: sum(abs(weights)) = 1.
How can I do this with parma package ?

In the moment I'm using QP solver.
Is the solution for my question dependent on the used solver ?

Alexios wrote on Jul. 14:
> As to the budget constraint, the SOCP solver now allows to include a
> sum(abs(weights)) constraint for long-short optimization (when using a
> covariance matrix) without having to do any special tricks (as for
> instance discussed here:
> https://stat.ethz.ch/pipermail/r-sig-finance/2013q4/011972.html).
> This is documented in Section 4.4 of the vignette.

Sorry I don't find "Section 4.4 of the vignette".
Is there a good example or documentation available ?

Thanks in advance,
Uwe


From alexios at 4dscape.com  Sun Aug 10 18:14:17 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Sun, 10 Aug 2014 17:14:17 +0100
Subject: [R-SIG-Finance] parma - How to add a constraint for the weights
In-Reply-To: <53E79632.1060804@wolke7.net>
References: <53E79632.1060804@wolke7.net>
Message-ID: <53E79A59.5020808@4dscape.com>

The vignette, if you were unable to build it from the source, is
available here:

http://cran.r-project.org/web/packages/parma/vignettes/Portfolio_Optimization_in_parma.pdf

Section 4.4 is clearly marked with heading "SOCP".

As to the question on whether a specific problem can be solved by a
specific type of solver, the answer is yes. The QP solver will not allow
you to formulate and solve a problem using the 'leverage' constraint,
but the SOCP solver will.

-Alexios

On 10/08/2014 16:56, u0055 at wolke7.net wrote:
> Dear R-SIGs,
> 
> I would like to optimize a long/short portfolio and
> apply the constraint: sum(abs(weights)) = 1.
> How can I do this with parma package ?
> 
> In the moment I'm using QP solver.
> Is the solution for my question dependent on the used solver ?
> 
> Alexios wrote on Jul. 14:
>> As to the budget constraint, the SOCP solver now allows to include a
>> sum(abs(weights)) constraint for long-short optimization (when using a
>> covariance matrix) without having to do any special tricks (as for
>> instance discussed here:
>> https://stat.ethz.ch/pipermail/r-sig-finance/2013q4/011972.html).
>> This is documented in Section 4.4 of the vignette.
> 
> Sorry I don't find "Section 4.4 of the vignette".
> Is there a good example or documentation available ?
> 
> Thanks in advance,
> Uwe
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>


From mcewan.gareth at gmail.com  Mon Aug 11 14:11:08 2014
From: mcewan.gareth at gmail.com (Gareth McEwan)
Date: Mon, 11 Aug 2014 14:11:08 +0200
Subject: [R-SIG-Finance] "ugarchspec" question on GJR-GARCH model
	specification
Message-ID: <CALGfFMYPgeVPVVpqfoKeFPsZfzJ9_BQsk-pOBAnBO5SK+2T4zQ@mail.gmail.com>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140811/fd5dcbb9/attachment.pl>

From alexios at 4dscape.com  Mon Aug 11 16:05:14 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Mon, 11 Aug 2014 15:05:14 +0100
Subject: [R-SIG-Finance] "ugarchspec" question on GJR-GARCH model
	specification
In-Reply-To: <CALGfFMYPgeVPVVpqfoKeFPsZfzJ9_BQsk-pOBAnBO5SK+2T4zQ@mail.gmail.com>
References: <CALGfFMYPgeVPVVpqfoKeFPsZfzJ9_BQsk-pOBAnBO5SK+2T4zQ@mail.gmail.com>
Message-ID: <53E8CD9A.9080801@4dscape.com>

The specifications you use are correct and the models are already
detailed in the rugarch vignette. However, you need to read the original
paper by Ding, Granger and Engle (particularly Appendix A) which shows
the parameter 'transformations' required for equivalence.
The paper ("A long memory property of stock market returns and a new
model") can be found by a search of the title in google scholar.

For convenience, and to put this to issue to rest, the APARCH model's
coefficients for the normal and negative shocks (call them alpha[aparch]
and gamma[aparch]) can be transformed to those of the GJR model (call
them alpha[gjr] and gamma[gjr]) as follows:

alpha[gjr] = alpha[aparch]*(1-gamma[aparch])^2
gamma[gjr] = 4*alpha[aparch]*gamma[aparch]

>From your examples:
alpha[aparch] = 0.104681
gamma[aparch] = 0.223600

alpha[gjr] = 0.063089
gamma[gjr] = 0.093631

alpha[gjr] = 0.104681*(1-0.223640)^2 = 0.06309489
gamma[gjr] = 4*0.104681*0.223640 = 0.09364344

I would say close enough.

-Alexios


On 11/08/2014 13:11, Gareth McEwan wrote:
> Hi there
> 
> I'd like to ask for help regarding the correct way to write an
> ARMA(0,0)-GJR-GARCH(1,1) model from "ugarchspec/ugarchfit" output.
> 
> To make the question reproduceable, I am using Tsay's lecture:
> http://faculty.chicagobooth.edu/ruey.tsay/teaching/bs41202/sp2011/lec5-11.pdf
> and accompanying data:
> http://faculty.chicagobooth.edu/ruey.tsay/teaching/bs41202/sp2011/m-ibm2609.txt
> 
> Reading in and transforming the data:
> 
> library(fGarch)
> library(rugarch)
> 
> da=read.table("C:/Users/Gareth/Desktop/Masters/Code/RCode/Tsay
> workings/m-ibm2609.txt",header=T,sep="",row.names=1)
> ibmlog=log(da$ibm+1)
> 
> 1. The initial (and logical) attempt is as follows:
> 
> gjrgarch.spec5<-ugarchspec(variance.model=list(model="gjrGARCH",garchOrder=c(1,1)),
>                            mean.model=list(armaOrder=c(0,0),include.mean=T,
>                            archm=F,arfima=F),distribution.model="std")
> mod.fit.gjrgarch5<-ugarchfit(spec=gjrgarch.spec5,data=ibmlog)
> show(mod.fit.gjrgarch5)
> 
> Output:
>                Estimate  Std. Error  t value Pr(>|t|)
> mu         0.012048    0.001872   6.4374 0.000000
> omega    0.000399    0.000146   2.7386 0.006170
> alpha1    0.063089    0.027832   2.2668 0.023406
> beta1      0.807147    0.048368  16.6875 0.000000
> gamma1  0.093631    0.049654   1.8857 0.059338
> shape      6.672720    1.327638   5.0260 0.000001
> 
> Is this the output to use in writing up a GJR-GARCH(1,1) model, with
> Student t-distr. residuals?
> 
> 2. The second attempt follows (per information in the"ugarchspec" vignette):
> 
> gjrgch.spec5<-ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),
> 
> submodel="GJRGARCH"),mean.model=list(armaOrder=c(0,0),include.mean=T,
>                 archm=F,arfima=F),distribution.model="std")
> mod.fit.gjrgch5<-ugarchfit(spec=gjrgch.spec5,data=ibmlog)
> show(mod.fit.gjrgch5)
> 
> This 2nd attempt output, below, matches Tsay's notes (p.9), but specifies
> an APARCH model format (per Tsay's notes, p.5):
>              Estimate  Std. Error  t value Pr(>|t|)
> mu        0.012048    0.001872   6.4377 0.000000
> omega   0.000399    0.000146   2.7384 0.006173
> alpha1   0.104681    0.027973   3.7422 0.000182
> beta1    0.807113    0.048381  16.6824 0.000000
> eta11    0.223600    0.115947   1.9285 0.053796
> shape   6.672451    1.327378   5.0268 0.000000
> 
> So, according to Tsay, the output here allows me to write up an APARCH
> model, although I specify the submodel="GJRGARCH".
> My goal is to use estimates in GJR-GARCH model format.
> 
> 3. Tsay's actual code that gets almost the identical output as (2) above is:
> 
> m5=garchFit(~aparch(1,1),data=ibmlog,trace=F,delta=2,leverage=T,include.delta=F,cond.dist="std")
> summary(m5)
> 
>         mu       omega         alpha1         gamma1       beta1
> shape
> 0.01204765  0.00039898  0.10467694  0.22366008  0.80711061  6.67328733
> 
> 
> Does the output from (1) correctly specify the GJR-GARCH model estimates
> (p.5 in Tsay's notes), in the context of this example?
> i.e. can I put the estimates from (1) into the GJR-GARCH model format?
> 
> Many thanks
> Gareth McEwan
> 
> 
> NOTE: the APARCH model specifies the GJR-GARCH when "delta=2" (and, I
> assume, when "leverage=T"). I am just not sure how to use these estimates
> when writing out the GJR-GARCH model.
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From u0055 at wolke7.net  Tue Aug 12 06:24:34 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Tue, 12 Aug 2014 06:24:34 +0200
Subject: [R-SIG-Finance] parma - How to add a constraint to the SOCP solver
Message-ID: <53E99702.2030703@wolke7.net>

Dear R-SIGs,

I would like to optimize a long/short portfolio and
apply the constraint: sum( abs( weights )) = 1.
I'm using the parma package and it's SOCP solver.
I have heard via attached mail,
that it's possible to add my above constraint
to the SOCP solver by "the 'leverage' constraint".

Does anybody know the syntax for that,
or is there any R snippet available ?

Thanks in advance,
Uwe


> The vignette, if you were unable to build it from the source, is
> available here:
>
> http://cran.r-project.org/web/packages/parma/vignettes/Portfolio_Optimization_in_parma.pdf
>
> Section 4.4 is clearly marked with heading "SOCP".
>
> As to the question on whether a specific problem can be solved by a
> specific type of solver, the answer is yes. The QP solver will not allow
> you to formulate and solve a problem using the 'leverage' constraint,
> but the SOCP solver will.
>
> -Alexios
>
> On 10/08/2014 16:56, u0055 at wolke7.net wrote:
>> Dear R-SIGs,
>>
>> I would like to optimize a long/short portfolio and
>> apply the constraint: sum(abs(weights)) = 1.
>> How can I do this with parma package ?
>>
>> In the moment I'm using QP solver.
>> Is the solution for my question dependent on the used solver ?
>>
>> Alexios wrote on Jul. 14:
>>> As to the budget constraint, the SOCP solver now allows to include a
>>> sum(abs(weights)) constraint for long-short optimization (when using a
>>> covariance matrix) without having to do any special tricks (as for
>>> instance discussed here:
>>> https://stat.ethz.ch/pipermail/r-sig-finance/2013q4/011972.html).
>>> This is documented in Section 4.4 of the vignette.
>>
>> Sorry I don't find "Section 4.4 of the vignette".
>> Is there a good example or documentation available ?
>>
>> Thanks in advance,
>> Uwe


From alexios at 4dscape.com  Tue Aug 12 07:33:20 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Tue, 12 Aug 2014 06:33:20 +0100
Subject: [R-SIG-Finance] parma - How to add a constraint to the SOCP
	solver
In-Reply-To: <53E99702.2030703@wolke7.net>
References: <53E99702.2030703@wolke7.net>
Message-ID: <53E9A720.5020206@4dscape.com>

In the inst folder of the source distribution there is subfolder called
'parma.tests' with a single R file containing numerous examples (see
parma.test11 for the SOCP type problems).
For the specific problem asked, just set "leverage=1" in paramspec (and
"budget=NULL"). Also take care to provide a 'feasible' set of upper (UB)
and lower (LB) weight bounds.

-Alexios

On 12/08/2014 05:24, u0055 at wolke7.net wrote:
> Dear R-SIGs,
> 
> I would like to optimize a long/short portfolio and
> apply the constraint: sum( abs( weights )) = 1.
> I'm using the parma package and it's SOCP solver.
> I have heard via attached mail,
> that it's possible to add my above constraint
> to the SOCP solver by "the 'leverage' constraint".
> 
> Does anybody know the syntax for that,
> or is there any R snippet available ?
> 
> Thanks in advance,
> Uwe
> 
> 
>> The vignette, if you were unable to build it from the source, is
>> available here:
>>
>> http://cran.r-project.org/web/packages/parma/vignettes/Portfolio_Optimization_in_parma.pdf
>>
>>
>> Section 4.4 is clearly marked with heading "SOCP".
>>
>> As to the question on whether a specific problem can be solved by a
>> specific type of solver, the answer is yes. The QP solver will not allow
>> you to formulate and solve a problem using the 'leverage' constraint,
>> but the SOCP solver will.
>>
>> -Alexios
>>
>> On 10/08/2014 16:56, u0055 at wolke7.net wrote:
>>> Dear R-SIGs,
>>>
>>> I would like to optimize a long/short portfolio and
>>> apply the constraint: sum(abs(weights)) = 1.
>>> How can I do this with parma package ?
>>>
>>> In the moment I'm using QP solver.
>>> Is the solution for my question dependent on the used solver ?
>>>
>>> Alexios wrote on Jul. 14:
>>>> As to the budget constraint, the SOCP solver now allows to include a
>>>> sum(abs(weights)) constraint for long-short optimization (when using a
>>>> covariance matrix) without having to do any special tricks (as for
>>>> instance discussed here:
>>>> https://stat.ethz.ch/pipermail/r-sig-finance/2013q4/011972.html).
>>>> This is documented in Section 4.4 of the vignette.
>>>
>>> Sorry I don't find "Section 4.4 of the vignette".
>>> Is there a good example or documentation available ?
>>>
>>> Thanks in advance,
>>> Uwe
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
> 
>


From mail at urs-groepl.de  Tue Aug 12 12:00:08 2014
From: mail at urs-groepl.de (=?iso-8859-1?Q?Urs_Gr=F6pl?=)
Date: Tue, 12 Aug 2014 12:00:08 +0200
Subject: [R-SIG-Finance] GJR-GARCH
Message-ID: <10542BA8-8A62-482D-8892-8DDC87E69960@urs-groepl.de>

An embedded and charset-unspecified text was scrubbed...
Name: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140812/f34b59bc/attachment.pl>

From alexios at 4dscape.com  Tue Aug 12 12:56:58 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Tue, 12 Aug 2014 11:56:58 +0100
Subject: [R-SIG-Finance] GJR-GARCH
In-Reply-To: <10542BA8-8A62-482D-8892-8DDC87E69960@urs-groepl.de>
References: <10542BA8-8A62-482D-8892-8DDC87E69960@urs-groepl.de>
Message-ID: <53E9F2FA.2050309@4dscape.com>

Change the bounds for alpha (which default to positive and based on the
[1,1] model):

>setbounds(STOXX50.tgarch21.spec)<-list(alpha1=c(-1,1), alpha2=c(-1,1))

-Alexios

PS TGARCH is for the standard deviation (and hence does not nest the
vanilla GARCH) whilst GJR is for the variance (subtle little difference
which appears to escape many).

On 12/08/2014 11:00, Urs Gr?pl wrote:
> 
> Dear all,
> 
> I really enjoy working with the rugarch package and now my first question came up.
> I have a problem regarding the GJR-GARCH model implementation in the rugarch package in R.
> 
> I want to fit it to the EURO STOXX 50 index return series, but after fitting it, there is still significant autocorrelation at lag 1 and the Sign Bias tests show still evidence for asymmetric effects.
> There is no such problem with the GARCH(2,1) and EGARCH(2,1), only with the GJR-GARCH(2,1). I checked several other orders of the model, but it didn?t help.
> There is no error message, the GJR model just fails to incorporate the asymmetric effects and the alpha estimates are zero.
> I tried all solvers, changed the starting value, and increased the iteration numbers. The GJR-GARCH nested in the APARCH or fGARCH function yield the same problem.
> 
> I was asking myself, whether the failure is just due to the model itself or if there could be numerical problems, even there is no error message.
> 
> 
> Here is my code for the model specification and fitting:
> STOXX50.tgarch21.spec=ugarchspec(variance.model=list(model="gjrGARCH",garchOrder=c(2,1)),mean.model=list(armaOrder=c(5,0)),fixed.pars=list(ar1=0,ar2=0,ar4=0),distribution.model="sstd")
> STOXX50.tgarch21.st.fit=ugarchfit(spec=STOXX50.tgarch21.spec,rtnSTOXX50,solver="hybrid")
> STOXX50.tgarch21.st.fit
> 
> 
> I retrieved the data from the yahoo finance website:
> symbol.vec = c("^STOXX50E")
> getSymbols(symbol.vec,from="2000-01-03",to="2013-12-31")
> STOXX50=STOXX50E[,"STOXX50E.Adjusted",drop=F]
> length(STOXX50)
> rtnSTOXX50=CalculateReturns(STOXX50, method="log")
> rtnSTOXX50=rtnSTOXX50 [-1,]
> colnames(rtnSTOXX50)="STOXX50"
> 
> 
> I would be deeply grateful for any advice.
> Thank you very much in advance for your answer.
> 
> Regards,
> Urs
>  
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> 
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From hatton.mn at gmail.com  Tue Aug 12 18:35:40 2014
From: hatton.mn at gmail.com (Marc Hatton)
Date: Tue, 12 Aug 2014 18:35:40 +0200
Subject: [R-SIG-Finance] Rugarch: Analysing the performance of my forecast
Message-ID: <CANuHtycOrFpwXfWr=xq1+oLe-JRpL+dHyp-irM0QzccSkhGmWg@mail.gmail.com>

Hello

What I would like to do is analyse how accurate the predictions were by
calculating the sigmas of the new data, and comparing the compared sigmas
against the actual sigmas.

I have read over the vignette, and numerous blog posts, but couldn't find a
solution (I'm sure it's out there somewhere, but I couldn't find it).

It's easy to pull the sigma values from rugarch's ugarchforecast function:
spec <- ugarchspec()
fit <- ugarchfit(ugarchspec, data_original, out.sample=10)
fore <- ugarchforecast(fit, n.ahead = 10, n.roll=9)
sigma(fore)

Now I have new data (let's call it data_new), which contains 10 new
realised values.

So, what would be the appropriate way of calculating the sigmas at the 10
new time intervals? Obviously, the standard formula for standard deviation
is:
sigma = sqrt(sum((x-xbar)^2) / (n-1)).

But how many time intervals (n) should be used?

I would like a way to calculate the sigmas exactly the same as the rugarch
methods do.

MN Hatton

	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Tue Aug 12 19:57:17 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Tue, 12 Aug 2014 18:57:17 +0100
Subject: [R-SIG-Finance] Rugarch: Analysing the performance of my
	forecast
In-Reply-To: <CANuHtycOrFpwXfWr=xq1+oLe-JRpL+dHyp-irM0QzccSkhGmWg@mail.gmail.com>
References: <CANuHtycOrFpwXfWr=xq1+oLe-JRpL+dHyp-irM0QzccSkhGmWg@mail.gmail.com>
Message-ID: <53EA557D.3040201@4dscape.com>

I'm not sure I understand your question. If it is related to how to
update the forecasts as new data comes in then the answer is below. If
on the other hand you are asking about comparing a GARCH variance
forecast with a realized measure, then you need higher frequency data
from which you can extract and compare the forecast. Have a look at the
highfrequency package and related literature on such comparison.


The ugarchforecast method accepts on object of either uGARCHfit (which
you've used) or uGARCHspec with fixed parameters:

>args(ugarchforecast)
ugarchforecast(fitORspec, data = NULL, n.ahead = 10, n.roll = 0,
out.sample = 0, external.forecasts = list(mregfor = NULL, vregfor =
NULL), ...)

Therefore, you can iterate as new data comes in, calling ugarchforecast
with the expanded dataset. The example below illustrates, but you should
consult the rugarch.tests subfolder in the inst folder of the source file.
########################
>library(rugarch)
>library(xts)
>data(sp500ret)
>spx = as.xts(sp500ret)
>spec = ugarchspec()
>fit = ugarchfit(spec, spx[1:1000])
>f1 = ugarchforecast(fit, n.ahead=10)
# create spec with fixed parameters based on estimated model
>specf = spec
>setfixed(specf)<-as.list(coef(fit))
# equivalent to f1
>f11 = ugarchforecast(specf, spx[1:1000], n.ahead=10)
# append new data
>f2 = ugarchforecast(specf, spx[1:1001], n.ahead=10)
>f3 = ugarchforecast(specf, spx[1:1002], n.ahead=10)
# ...etc
# or if you have a lot of new data
>fn = ugarchforecast(specf, spx[1:1010], n.ahead=10, out.sample=10,
n.roll=9)

# check the matrix returned by fn and compare with what you get
# via the iteration f2, f3 etc:
>fitted(fn)
>sigma(fn)
########################

Keep in mind that you should append new data to old (see vignette or
blog for more details on start up conditions).

-Alexios



On 12/08/2014 17:35, Marc Hatton wrote:
> Hello
> 
> What I would like to do is analyse how accurate the predictions were by
> calculating the sigmas of the new data, and comparing the compared sigmas
> against the actual sigmas.
> 
> I have read over the vignette, and numerous blog posts, but couldn't find a
> solution (I'm sure it's out there somewhere, but I couldn't find it).
> 
> It's easy to pull the sigma values from rugarch's ugarchforecast function:
> spec <- ugarchspec()
> fit <- ugarchfit(ugarchspec, data_original, out.sample=10)
> fore <- ugarchforecast(fit, n.ahead = 10, n.roll=9)
> sigma(fore)
> 
> Now I have new data (let's call it data_new), which contains 10 new
> realised values.
> 
> So, what would be the appropriate way of calculating the sigmas at the 10
> new time intervals? Obviously, the standard formula for standard deviation
> is:
> sigma = sqrt(sum((x-xbar)^2) / (n-1)).
> 
> But how many time intervals (n) should be used?
> 
> I would like a way to calculate the sigmas exactly the same as the rugarch
> methods do.
> 
> MN Hatton
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From gps at asu.edu  Mon Aug 18 16:42:58 2014
From: gps at asu.edu (Geoffrey Smith)
Date: Mon, 18 Aug 2014 07:42:58 -0700
Subject: [R-SIG-Finance] rugarch parameter analysis
Message-ID: <CAGRravbyh4ofSoj8_zxhJdWA8S3CZ_r30xiyGoc4=D6MwV=k+g@mail.gmail.com>

Could someone please tell me whether the "leverage effect" parameter in the
EGARCH model represents the difference between the effect of a positive and
negative shock on future volatility?  In other words, does the estimate of
"alpha1" that is output by the code below represent the difference between
the effect of a positive and negative shock on future volatility?  And
because "alpha1" is -0.0385, this means that the effect of a negative shock
is greater than the effect of a positive shock?  Thank you.

library(rugarch)

data(dmbp)

spec <- ugarchspec(mean.model=list(armaOrder=c(0,0), include.mean=TRUE),
variance.model=list(model='eGARCH', garchOrder=c(1,1)))

fit <- ugarchfit(data = dmbp[,1], spec = spec)

coef(fit)

	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Mon Aug 18 17:48:15 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Mon, 18 Aug 2014 16:48:15 +0100
Subject: [R-SIG-Finance] rugarch parameter analysis
In-Reply-To: <CAGRravbyh4ofSoj8_zxhJdWA8S3CZ_r30xiyGoc4=D6MwV=k+g@mail.gmail.com>
References: <CAGRravbyh4ofSoj8_zxhJdWA8S3CZ_r30xiyGoc4=D6MwV=k+g@mail.gmail.com>
Message-ID: <53F2203F.4000809@4dscape.com>

Geoff,

The model is detailed on page 7 of the vignette (Section 2.2.3) and I
think it is clear what the output gives in terms of the sign (alpha) and
size/leverage (gamma) effects. The example you provided is also part of
the rugarch benchmark suite based on published results:

>ugarchbench("published")

This example is from the Brooks et al review: "Benchmarks and the
accuracy of GARCH model estimation", in 'International Journal of
Forecasting' 17 (2001) 45?56. In their paper, equation 8 is similar to
what I give for the specification with the difference that they switch
alpha for gamma and gamma for alpha. In my opinion this is wrong since
gamma has always been reserved for the asymmetric shocks.
In any case, once you've done the switching the results are the same and
also available here:
http://web.stanford.edu/~clint/bench/

Regards,

Alexios



On 18/08/2014 15:42, Geoffrey Smith wrote:
> Could someone please tell me whether the "leverage effect" parameter in the
> EGARCH model represents the difference between the effect of a positive and
> negative shock on future volatility?  In other words, does the estimate of
> "alpha1" that is output by the code below represent the difference between
> the effect of a positive and negative shock on future volatility?  And
> because "alpha1" is -0.0385, this means that the effect of a negative shock
> is greater than the effect of a positive shock?  Thank you.
> 
> library(rugarch)
> 
> data(dmbp)
> 
> spec <- ugarchspec(mean.model=list(armaOrder=c(0,0), include.mean=TRUE),
> variance.model=list(model='eGARCH', garchOrder=c(1,1)))
> 
> fit <- ugarchfit(data = dmbp[,1], spec = spec)
> 
> coef(fit)
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From u0055 at wolke7.net  Tue Aug 19 11:36:14 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Tue, 19 Aug 2014 11:36:14 +0200
Subject: [R-SIG-Finance] parma - How to optimize a long/short portfolio with
 sum( abs( weights )) = 1
Message-ID: <53F31A8E.9000406@wolke7.net>

Dear R-SIGs,

I would like to optimize a long/short portfolio and
apply the constraint: sum( abs( weights )) = 1.
The parma package is very close to that,
but I still didn't find a general way,
which works for every input matrix of return values.

Thanks Alexios,
I found the 'parma.tests' with lots of great examples.
I think "parma.test11" "Example 6" "riskType='optimal'"
is the best choice for what I'm looking for.
I'm using that and very often I get warnings:
"In Socp(f, A1, b1, NULL, NULL, N1, x, z1, NULL, control) :
Dual is not in the feasible hyperplane, solution may be wrong.".

1) Why do I get the warnings ?
Is there a work around ?

2) Does anybody have a general solution (R snippet),
which works for every input matrix of return values ?

Thanks in advance,
Uwe


### R snippet begin ###

require( corpcor )
require( parma )

# returns
x=c()
x=c(x,0)#0-0
x=c(x,0.00029801026024799343)#1
x=c(x,0.01923480801352125)#2
x=c(x,0.0046403921153714825)#3
x=c(x,0.03869859235256766)#4
x=c(x,-0.019476139659286133)#5
x=c(x,-0.009050645351487118)#6
x=c(x,0.02984309624005349)#7
x=c(x,0)#0-1
x=c(x,-0.012975945313424369)#1
x=c(x,-0.02407901001552061)#2
x=c(x,0.021245616535913895)#3
x=c(x,0.056956457439674014)#4
x=c(x,-0.06073619413646872)#5
x=c(x,0.0348564722762156)#6
x=c(x,-0.07581515130311306)#7
x=c(x,0)#0-2
x=c(x,0.00029801026024799343)#1
x=c(x,0.01923480801352125)#2
x=c(x,0.0046403921153714825)#3
x=c(x,0.0386985923399131)#4
x=c(x,-0.019476139659286133)#5
x=c(x,-0.009050645351487118)#6
x=c(x,0.029831537955057316)#7
x=c(x,0)#0-3
x=c(x,-0.012975945313424369)#1
x=c(x,-0.02407901001552061)#2
x=c(x,0.021245616535913895)#3
x=c(x,0.05695645745232857)#4
x=c(x,-0.06073619413646872)#5
x=c(x,0.0348564722762156)#6
x=c(x,-0.07580359301811687)#7
x=c(x,0)#0-4
x=c(x,0.00029801026024799343)#1
x=c(x,0.019234808013345154)#2
x=c(x,0.0046403921153714825)#3
x=c(x,0.038698591002771045)#4
x=c(x,-0.019476139659286133)#5
x=c(x,-0.009050645351487118)#6
x=c(x,0.029814537533275967)#7
x=c(x,0)#0-5
x=c(x,-0.012975945313424369)#1
x=c(x,-0.024079010015344522)#2
x=c(x,0.021245616535913895)#3
x=c(x,0.056956458789470615)#4
x=c(x,-0.06073619413646872)#5
x=c(x,0.0348564722762156)#6
x=c(x,-0.07578659259633552)#7
x=c(x,0)#0-6
x=c(x,0.00029801026024799343)#1
x=c(x,0.019234806760933323)#2
x=c(x,0.0046403921153714825)#3
x=c(x,0.03869855234509703)#4
x=c(x,-0.019476139659287156)#5
x=c(x,-0.009050645351487125)#6
x=c(x,0.029790636978526824)#7
x=c(x,0)#0-7
x=c(x,-0.012975945313424369)#1
x=c(x,-0.024079008762932695)#2
x=c(x,0.021245616535913895)#3
x=c(x,0.05695649744714464)#4
x=c(x,-0.0607361941364677)#5
x=c(x,0.0348564722762156)#6
x=c(x,-0.07576269204158638)#7
x=c(x,0)#0-8
x=c(x,0.00029801026025892376)#1
x=c(x,0.01923453220069893)#2
x=c(x,0.004640392115430811)#3
x=c(x,0.03869828542503245)#4
x=c(x,-0.019476139815127035)#5
x=c(x,-0.009050645351487118)#6
x=c(x,0.029768353535081143)#7
x=c(x,0)#0-9
x=c(x,-0.0129759453134353)#1
x=c(x,-0.024078734202698304)#2
x=c(x,0.021245616535854574)#3
x=c(x,0.05695676436720922)#4
x=c(x,-0.060736193980627816)#5
x=c(x,0.0348564722762156)#6
x=c(x,-0.07574040859814071)#7
x=c(x,0)#0-10
x=c(x,0.0002980103179347729)#1
x=c(x,0.01923043617762049)#2
x=c(x,0.004640392486997125)#3
x=c(x,0.03869776965250973)#4
x=c(x,-0.01947619048004869)#5
x=c(x,-0.009050645351487118)#6
x=c(x,0.02975459006868922)#7
x=c(x,0)#0-11
x=c(x,-0.012975945371111148)#1
x=c(x,-0.024074638179619856)#2
x=c(x,0.021245616164288255)#3
x=c(x,0.056957280139731954)#4
x=c(x,-0.06073614331570616)#5
x=c(x,0.0348564722762156)#6
x=c(x,-0.07572664513174876)#7
x=c(x,0)#0-12
x=c(x,0.00029803649043954857)#1
x=c(x,0.019192162723869248)#2
x=c(x,0.004640656340453675)#3
x=c(x,0.0386968409321401)#4
x=c(x,-0.019480064142972733)#5
x=c(x,-0.009050645351488088)#6
x=c(x,0.029743057109602365)#7
x=c(x,0)#0-13
x=c(x,-0.012975971543615924)#1
x=c(x,-0.024036364725868627)#2
x=c(x,0.0212453523108317)#3
x=c(x,0.05695820886010157)#4
x=c(x,-0.06073226965278212)#5
x=c(x,0.03485647227621657)#6
x=c(x,-0.07571511217266193)#7
x=c(x,0)#0-14
x=c(x,0.0002984370859375864)#1
x=c(x,0.019062660408625483)#2
x=c(x,0.00465122630987321)#3
x=c(x,0.038693166438592115)#4
x=c(x,-0.019521858395814863)#5
x=c(x,-0.009050645366251428)#6
x=c(x,0.029737617239541797)#7
x=c(x,0)#0-15
x=c(x,-0.012976372139113963)#1
x=c(x,-0.023906862410624858)#2
x=c(x,0.021234782341412173)#3
x=c(x,0.056961883353649566)#4
x=c(x,-0.06069047539993999)#5
x=c(x,0.03485647229097991)#6
x=c(x,-0.07570967230260134)#7
x=c(x,0)#0-16
x=c(x,0.0002971799298054011)#1
x=c(x,0.018802174294039967)#2
x=c(x,0.0047563932799025285)#3
x=c(x,0.038646702644233005)#4
x=c(x,-0.01969350191625727)#5
x=c(x,-0.00905064913872669)#6
x=c(x,0.02972290172590976)#7
x=c(x,0)#0-17
x=c(x,-0.012975114982981777)#1
x=c(x,-0.023646376296039332)#2
x=c(x,0.021129615371382856)#3
x=c(x,0.057008347148008676)#4
x=c(x,-0.06051883187949758)#5
x=c(x,0.034856476063455176)#6
x=c(x,-0.07569495678896931)#7
x=c(x,0)#0-18
x=c(x,0.0002696431479482309)#1
x=c(x,0.01844955210532226)#2
x=c(x,0.005163748103738864)#3
x=c(x,0.038392434478673985)#4
x=c(x,-0.02006062694298151)#5
x=c(x,-0.009050600101314333)#6
x=c(x,0.02961349117308415)#7
x=c(x,0)#0-19
x=c(x,-0.012947578201124608)#1
x=c(x,-0.023293754107321638)#2
x=c(x,0.02072226054754651)#3
x=c(x,0.057262615313567675)#4
x=c(x,-0.060151706852773344)#5
x=c(x,0.034856427026042816)#6
x=c(x,-0.0755855462361437)#7
x=c(x,0)#0-20
x=c(x,0.00015235255196601426)#1
x=c(x,0.018090134670099473)#2
x=c(x,0.005826010999584576)#3
x=c(x,0.03781096377417702)#4
x=c(x,-0.02051387732871736)#5
x=c(x,-0.009041385295032383)#6
x=c(x,0.029326041084552244)#7
x=c(x,0)#0-21
x=c(x,-0.01283028760514239)#1
x=c(x,-0.02293433667209884)#2
x=c(x,0.02005999765170081)#3
x=c(x,0.057844086018064664)#4
x=c(x,-0.059698456467037496)#5
x=c(x,0.03484721221976086)#6
x=c(x,-0.07529809614761179)#7
x=c(x,0)#0-22
x=c(x,-0.00010016815499999405)#1
x=c(x,0.017581183485064163)#2
x=c(x,0.006409181081122117)#3
x=c(x,0.03703441151715984)#4
x=c(x,-0.020933288820437643)#5
x=c(x,-0.008896102672098314)#6
x=c(x,0.0289138560987212)#7
x=c(x,0)#0-23
x=c(x,-0.012577766898176383)#1
x=c(x,-0.022425385487063534)#2
x=c(x,0.01947682757016327)#3
x=c(x,0.058620638275081835)#4
x=c(x,-0.05927904497531721)#5
x=c(x,0.034701929596826796)#6
x=c(x,-0.07488591116178075)#7
x=c(x,0)#0-24
x=c(x,-0.00045768754116740166)#1
x=c(x,0.016933958174540985)#2
x=c(x,0.006845027226092256)#3
x=c(x,0.036293597180222126)#4
x=c(x,-0.021260198083024463)#5
x=c(x,-0.008159185047229593)#6
x=c(x,0.028743274667077524)#7
x=c(x,0)#0-25
x=c(x,-0.012220247512008975)#1
x=c(x,-0.021778160176540357)#2
x=c(x,0.019040981425193122)#3
x=c(x,0.05936145261201955)#4
x=c(x,-0.05895213571273039)#5
x=c(x,0.033965011971958066)#6
x=c(x,-0.07471532973013709)#7
x=c(x,0)#0-26
x=c(x,-0.0008873151489962878)#1
x=c(x,0.016085311475881815)#2
x=c(x,0.007162773178278581)#3
x=c(x,0.03563186295203474)#4
x=c(x,-0.02153358198952339)#5
x=c(x,-0.006465431369639936)#6
x=c(x,0.028971621313637043)#7
x=c(x,0)#0-27
x=c(x,-0.011790619904180089)#1
x=c(x,-0.02092951347788118)#2
x=c(x,0.0187232354730068)#3
x=c(x,0.06002318684020693)#4
x=c(x,-0.058678751806231465)#5
x=c(x,0.03227125829436841)#6
x=c(x,-0.07494367637669659)#7
x=c(x,0)#0-28
x=c(x,-0.001352039495111673)#1
x=c(x,0.015580897283599052)#2
x=c(x,0.007338821832786869)#3
x=c(x,0.034689872867353914)#4
x=c(x,-0.021986525503168198)#5
x=c(x,-0.004304639325606844)#6
x=c(x,0.02942721457973837)#7
x=c(x,0)#0-29
x=c(x,-0.011325895558064705)#1
x=c(x,-0.020425099285598422)#2
x=c(x,0.018547186818498516)#3
x=c(x,0.06096517692488776)#4
x=c(x,-0.05822580829258665)#5
x=c(x,0.030110466250335324)#6
x=c(x,-0.07539926964279792)#7
x=c(x,0)#0-30
x=c(x,-0.0018626750989563113)#1
x=c(x,0.015036699574173586)#2
x=c(x,0.007650233219604404)#3
x=c(x,0.03305445135619395)#4
x=c(x,-0.022873781833506156)#5
x=c(x,-0.00222238149546775)#6
x=c(x,0.029919947705238273)#7
x=c(x,0)#0-31
x=c(x,-0.010815259954220066)#1
x=c(x,-0.019880901576172963)#2
x=c(x,0.018235775431680975)#3
x=c(x,0.06260059843604772)#4
x=c(x,-0.05733855196224869)#5
x=c(x,0.02802820842019623)#6
x=c(x,-0.07589200276829783)#7
returns = matrix( x, ncol=32 ) # nrow=8

# performs
performs = colMeans( returns )

# C
C = cov( returns )
if( ! is.positive.definite( C ))
	C = make.positive.definite( C, tol=1e-6 ) ## Alexios: tol=1e-2

# spec
spec = parmaspec(
	S = C,
	risk = 'EV', # EV LPM MiniMax
	riskType = 'optimal', # minrisk optimal maxreward
	targetType = 'equality', # equality inequality
	LB = rep( -1, length( performs )),
	UB = rep( +1, length( performs )),
	leverage = 1,
	budget = NULL,
	forecast = performs,
	asset.names = colnames( returns, do.NULL = FALSE ) )

# control
control = list(
	abs.tol = 1e-12,
	rel.tol = 1e-12,
	Nu = 4,
	max.iter = 1250,
	BigM.K = 4,
	BigM.iter = 15 )

# portfolio
portfolio = parmasolve(
	spec,
	solver.control = control,
	type = 'SOCP' )

### R snippet end ###


From kw1958 at gmail.com  Wed Aug 20 01:09:03 2014
From: kw1958 at gmail.com (Keith S Weintraub)
Date: Tue, 19 Aug 2014 19:09:03 -0400
Subject: [R-SIG-Finance] Easiest way to create a schedule of quarterly LIBOR
	dates in RQuantLib
Message-ID: <4AB574D6-E301-4FC0-BA65-7C9EA6C29D05@gmail.com>

Folks,

I want to create a schedule for quarterly (or other frequency) LIBOR dates. I assume it can be done in RQuantLib.

Note that I have read the "calendar" entry in the docs but I didn't see an EASY way to do what I want.

The functionality seems to be there but I would like to know the best practice for doing so.

A pointer to an example would be wonderful.

Thanks so much for your time,
Best,
KW


--


From ilya.kipnis at gmail.com  Wed Aug 20 01:14:51 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Tue, 19 Aug 2014 19:14:51 -0400
Subject: [R-SIG-Finance] Easiest way to create a schedule of quarterly
 LIBOR dates in RQuantLib
In-Reply-To: <4AB574D6-E301-4FC0-BA65-7C9EA6C29D05@gmail.com>
References: <4AB574D6-E301-4FC0-BA65-7C9EA6C29D05@gmail.com>
Message-ID: <CA+oJuEHsGCHGVWipURuwM4T=hj9MCKJd8F7rpOj=0hLpJtrV0w@mail.gmail.com>

Keith,

I'm not particularly familiar with Libor schedules. Do they follow a
particular pattern/schedule/etc.?

-Ilya

On Tue, Aug 19, 2014 at 7:09 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
> Folks,
>
> I want to create a schedule for quarterly (or other frequency) LIBOR dates. I assume it can be done in RQuantLib.
>
> Note that I have read the "calendar" entry in the docs but I didn't see an EASY way to do what I want.
>
> The functionality seems to be there but I would like to know the best practice for doing so.
>
> A pointer to an example would be wonderful.
>
> Thanks so much for your time,
> Best,
> KW
>
>
> --
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From kw1958 at gmail.com  Wed Aug 20 14:39:23 2014
From: kw1958 at gmail.com (Keith S Weintraub)
Date: Wed, 20 Aug 2014 08:39:23 -0400
Subject: [R-SIG-Finance] Easiest way to create a schedule of quarterly
	LIBOR dates in RQuantLib
In-Reply-To: <CA+oJuEHsGCHGVWipURuwM4T=hj9MCKJd8F7rpOj=0hLpJtrV0w@mail.gmail.com>
References: <4AB574D6-E301-4FC0-BA65-7C9EA6C29D05@gmail.com>
	<CA+oJuEHsGCHGVWipURuwM4T=hj9MCKJd8F7rpOj=0hLpJtrV0w@mail.gmail.com>
Message-ID: <A638F768-A7AA-4848-9D6D-1BCBA36FF7F7@gmail.com>

It's a convention for date schedules for interest rate swaps.

I don't remember all the details but it takes into account holidays and weekends. I think it uses a "modified following" business convention.

Payments are made using Actual/360 day counts.

My preference would be to have a function that takes a start-date/end-date and just generate the schedule.

I am not sure if the definitions are in the ISDA docs or http://www.bba.org.uk/ or somewhere else.

Thanks,
KW


--

On Aug 19, 2014, at 7:14 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:

> Keith,
> 
> I'm not particularly familiar with Libor schedules. Do they follow a
> particular pattern/schedule/etc.?
> 
> -Ilya
> 
> On Tue, Aug 19, 2014 at 7:09 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
>> Folks,
>> 
>> I want to create a schedule for quarterly (or other frequency) LIBOR dates. I assume it can be done in RQuantLib.
>> 
>> Note that I have read the "calendar" entry in the docs but I didn't see an EASY way to do what I want.
>> 
>> The functionality seems to be there but I would like to know the best practice for doing so.
>> 
>> A pointer to an example would be wonderful.
>> 
>> Thanks so much for your time,
>> Best,
>> KW
>> 
>> 
>> --
>> 
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.


From brian at braverock.com  Wed Aug 20 15:32:35 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Wed, 20 Aug 2014 08:32:35 -0500
Subject: [R-SIG-Finance] Easiest way to create a schedule of quarterly
 LIBOR dates in RQuantLib
In-Reply-To: <A638F768-A7AA-4848-9D6D-1BCBA36FF7F7@gmail.com>
References: <4AB574D6-E301-4FC0-BA65-7C9EA6C29D05@gmail.com>	<CA+oJuEHsGCHGVWipURuwM4T=hj9MCKJd8F7rpOj=0hLpJtrV0w@mail.gmail.com>
	<A638F768-A7AA-4848-9D6D-1BCBA36FF7F7@gmail.com>
Message-ID: <53F4A373.4030808@braverock.com>

You didn't say you were looking for LIBOR *swaps*.  You also didn't say 
what tenor you were looking for.

LIBOR is quoted daily in overnight, 3-month, 6 month, and 1-year tenors 
(at least, there may be more).

There are many, many derivative and loan contracts and OTC products 
marked to LIBOR or valued from it, so you need to be much more specific.

If you want cash flow payable dates for an ISDA standard 3-month LIBOR 
interest rate swap, you need to say that, specifically (and what you're 
swapping against, of course).  If you want something else, then perhaps 
you need to sort out your terminology so that you can be specific.

Regards,

Brian

On 08/20/2014 07:39 AM, Keith S Weintraub wrote:
> It's a convention for date schedules for interest rate swaps.
>
> I don't remember all the details but it takes into account holidays and weekends. I think it uses a "modified following" business convention.
>
> Payments are made using Actual/360 day counts.
>
> My preference would be to have a function that takes a start-date/end-date and just generate the schedule.
>
> I am not sure if the definitions are in the ISDA docs or http://www.bba.org.uk/ or somewhere else.
>
> Thanks,
> KW
>
>
> --
>
> On Aug 19, 2014, at 7:14 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>
>> Keith,
>>
>> I'm not particularly familiar with Libor schedules. Do they follow a
>> particular pattern/schedule/etc.?
>>
>> -Ilya
>>
>> On Tue, Aug 19, 2014 at 7:09 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
>>> Folks,
>>>
>>> I want to create a schedule for quarterly (or other frequency) LIBOR dates. I assume it can be done in RQuantLib.
>>>
>>> Note that I have read the "calendar" entry in the docs but I didn't see an EASY way to do what I want.
>>>
>>> The functionality seems to be there but I would like to know the best practice for doing so.
>>>
>>> A pointer to an example would be wonderful.
>>>
>>> Thanks so much for your time,
>>> Best,
>>> KW


From kw1958 at gmail.com  Wed Aug 20 16:35:47 2014
From: kw1958 at gmail.com (Keith S Weintraub)
Date: Wed, 20 Aug 2014 10:35:47 -0400
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
Message-ID: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>

Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?

Any links etc would be appreciated.

Thanks,
KW

--


From edd at debian.org  Wed Aug 20 16:51:37 2014
From: edd at debian.org (Dirk Eddelbuettel)
Date: Wed, 20 Aug 2014 09:51:37 -0500
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
Message-ID: <21492.46585.813329.825268@max.nulle.part>


On 20 August 2014 at 10:35, Keith S Weintraub wrote:
| Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
| 
| Any links etc would be appreciated.

i)  Build QuantLib

ii) Adjust src/Makevars for RQuantLib as needed.

Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From kw1958 at gmail.com  Thu Aug 21 00:02:36 2014
From: kw1958 at gmail.com (Keith Weintraub)
Date: Wed, 20 Aug 2014 18:02:36 -0400
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <21492.46585.813329.825268@max.nulle.part>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
	<21492.46585.813329.825268@max.nulle.part>
Message-ID: <ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>

Dirk,

Thanks for the clues. Unfortunately your info is a bit too sketchy for me to be able to proceed. 

Thanks again,
Best,
KW

> On Aug 20, 2014, at 10:51 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
> 
> 
> On 20 August 2014 at 10:35, Keith S Weintraub wrote:
> | Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
> | 
> | Any links etc would be appreciated.
> 
> i)  Build QuantLib
> 
> ii) Adjust src/Makevars for RQuantLib as needed.
> 
> Dirk
> 
> -- 
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From zach.mayer at gmail.com  Thu Aug 21 00:14:34 2014
From: zach.mayer at gmail.com (Zachary Mayer)
Date: Wed, 20 Aug 2014 18:14:34 -0400
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
	<21492.46585.813329.825268@max.nulle.part>
	<ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>
Message-ID: <CAEr64e-zNM6=OqNL62HOSZCqiROG-Fx1vW_RxxCZxceWn2ivHQ@mail.gmail.com>

Install brew <http://brew.sh/>
Run this command: brew install quantlib

Then run:
install.packages('RQuantLib', dep=TRUE, type='source')

You may have to tell install.packages() how to find your c++ compiler.



On Wed, Aug 20, 2014 at 6:02 PM, Keith Weintraub <kw1958 at gmail.com> wrote:

> Dirk,
>
> Thanks for the clues. Unfortunately your info is a bit too sketchy for me
> to be able to proceed.
>
> Thanks again,
> Best,
> KW
>
> > On Aug 20, 2014, at 10:51 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
> >
> >
> > On 20 August 2014 at 10:35, Keith S Weintraub wrote:
> > | Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
> > |
> > | Any links etc would be appreciated.
> >
> > i)  Build QuantLib
> >
> > ii) Adjust src/Makevars for RQuantLib as needed.
> >
> > Dirk
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From kw1958 at gmail.com  Thu Aug 21 02:14:37 2014
From: kw1958 at gmail.com (Keith S Weintraub)
Date: Wed, 20 Aug 2014 20:14:37 -0400
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <CAEr64e-zNM6=OqNL62HOSZCqiROG-Fx1vW_RxxCZxceWn2ivHQ@mail.gmail.com>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
	<21492.46585.813329.825268@max.nulle.part>
	<ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>
	<CAEr64e-zNM6=OqNL62HOSZCqiROG-Fx1vW_RxxCZxceWn2ivHQ@mail.gmail.com>
Message-ID: <A25FBF95-1B87-4E16-A083-F2AC12785FE8@gmail.com>

Zach. I hope I am not dragging you down a never ending installation pit. Here are the error messages:

Here are the results from the terminal commands:

========================================================
/Users/kw $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
It appears Homebrew is already installed. If your intent is to reinstall you
should do the following before running this installer again:
    rm -rf /usr/local/Cellar /usr/local/.git && brew cleanup

/Users/kw $ brew install quantlib                                                                        
Warning: quantlib-1.4 already installed

========================================================


Here are the install.packages results. It looks like it was able to find the C++ compiler but there were other errors.

========================================================

> install.packages('RQuantLib', dep=TRUE, type='source')
also installing the dependency ?RUnit?

trying URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
Error in download.file(url, destfile, method, mode = "wb", ...) : 
  cannot open URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
In addition: Warning message:
In download.file(url, destfile, method, mode = "wb", ...) :
  cannot open: HTTP status was '0 (null)'
Warning in download.packages(pkgs, destdir = tmpd, available = available,  :
  download of package ?RUnit? failed
trying URL 'http://cran.stat.ucla.edu/src/contrib/RQuantLib_0.3.12.tar.gz'
Content type 'application/x-tar' length 117619 bytes (114 Kb)
opened URL
==================================================
downloaded 114 Kb

* installing *source* package ?RQuantLib? ...
** package ?RQuantLib? successfully unpacked and MD5 sums checked
checking for g++... g++
checking whether the C++ compiler works... yes
checking for C++ compiler default output file name... a.out
checking for suffix of executables... checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking how to run the C++ preprocessor... g++ -E
checking whether we are using the GNU C++ compiler... (cached) yes
checking whether g++ accepts -g... (cached) yes
checking for R... yes
checking for quantlib-config... no
configure: error: Please install QuantLib before trying to build RQuantLib.
ERROR: configuration failed for package ?RQuantLib?
* removing ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
* restoring previous ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?

The downloaded source packages are in
	?/private/var/folders/fc/lqx2wvqx5756sn7kv__1cnmm0000gn/T/RtmpOSZS7f/downloaded_packages?
Warning message:
In install.packages("RQuantLib", dep = TRUE, type = "source") :
  installation of package ?RQuantLib? had non-zero exit status
> 

--

On Aug 20, 2014, at 6:14 PM, Zachary Mayer <zach.mayer at gmail.com> wrote:

> Install brew
> Run this command: brew install quantlib
> 
> Then run:
> install.packages('RQuantLib', dep=TRUE, type='source')
> 
> You may have to tell install.packages() how to find your c++ compiler.
> 
> 
> 
> On Wed, Aug 20, 2014 at 6:02 PM, Keith Weintraub <kw1958 at gmail.com> wrote:
> Dirk,
> 
> Thanks for the clues. Unfortunately your info is a bit too sketchy for me to be able to proceed.
> 
> Thanks again,
> Best,
> KW
> 
> > On Aug 20, 2014, at 10:51 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
> >
> >
> > On 20 August 2014 at 10:35, Keith S Weintraub wrote:
> > | Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
> > |
> > | Any links etc would be appreciated.
> >
> > i)  Build QuantLib
> >
> > ii) Adjust src/Makevars for RQuantLib as needed.
> >
> > Dirk
> >
> > --
> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From josh.m.ulrich at gmail.com  Thu Aug 21 02:28:21 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Wed, 20 Aug 2014 19:28:21 -0500
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <A25FBF95-1B87-4E16-A083-F2AC12785FE8@gmail.com>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
	<21492.46585.813329.825268@max.nulle.part>
	<ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>
	<CAEr64e-zNM6=OqNL62HOSZCqiROG-Fx1vW_RxxCZxceWn2ivHQ@mail.gmail.com>
	<A25FBF95-1B87-4E16-A083-F2AC12785FE8@gmail.com>
Message-ID: <CAPPM_gQn25=ApvoNfoWLGe01cSuu8tMziuvPS=rY7FJrVv9Czg@mail.gmail.com>

That clearly says:
"configure: error: Please install QuantLib before trying to build RQuantLib."

So you either, 1) haven't built QuantLib (as Dirk said you needed to),
or 2) haven't put the built binaries in your include path.
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Wed, Aug 20, 2014 at 7:14 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
> Zach. I hope I am not dragging you down a never ending installation pit. Here are the error messages:
>
> Here are the results from the terminal commands:
>
> ========================================================
> /Users/kw $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
> It appears Homebrew is already installed. If your intent is to reinstall you
> should do the following before running this installer again:
>     rm -rf /usr/local/Cellar /usr/local/.git && brew cleanup
>
> /Users/kw $ brew install quantlib
> Warning: quantlib-1.4 already installed
>
> ========================================================
>
>
> Here are the install.packages results. It looks like it was able to find the C++ compiler but there were other errors.
>
> ========================================================
>
>> install.packages('RQuantLib', dep=TRUE, type='source')
> also installing the dependency ?RUnit?
>
> trying URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
> Error in download.file(url, destfile, method, mode = "wb", ...) :
>   cannot open URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
> In addition: Warning message:
> In download.file(url, destfile, method, mode = "wb", ...) :
>   cannot open: HTTP status was '0 (null)'
> Warning in download.packages(pkgs, destdir = tmpd, available = available,  :
>   download of package ?RUnit? failed
> trying URL 'http://cran.stat.ucla.edu/src/contrib/RQuantLib_0.3.12.tar.gz'
> Content type 'application/x-tar' length 117619 bytes (114 Kb)
> opened URL
> ==================================================
> downloaded 114 Kb
>
> * installing *source* package ?RQuantLib? ...
> ** package ?RQuantLib? successfully unpacked and MD5 sums checked
> checking for g++... g++
> checking whether the C++ compiler works... yes
> checking for C++ compiler default output file name... a.out
> checking for suffix of executables... checking whether we are cross compiling... no
> checking for suffix of object files... o
> checking whether we are using the GNU C++ compiler... yes
> checking whether g++ accepts -g... yes
> checking how to run the C++ preprocessor... g++ -E
> checking whether we are using the GNU C++ compiler... (cached) yes
> checking whether g++ accepts -g... (cached) yes
> checking for R... yes
> checking for quantlib-config... no
> configure: error: Please install QuantLib before trying to build RQuantLib.
> ERROR: configuration failed for package ?RQuantLib?
> * removing ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
> * restoring previous ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
>
> The downloaded source packages are in
>         ?/private/var/folders/fc/lqx2wvqx5756sn7kv__1cnmm0000gn/T/RtmpOSZS7f/downloaded_packages?
> Warning message:
> In install.packages("RQuantLib", dep = TRUE, type = "source") :
>   installation of package ?RQuantLib? had non-zero exit status
>>
>
> --
>
> On Aug 20, 2014, at 6:14 PM, Zachary Mayer <zach.mayer at gmail.com> wrote:
>
>> Install brew
>> Run this command: brew install quantlib
>>
>> Then run:
>> install.packages('RQuantLib', dep=TRUE, type='source')
>>
>> You may have to tell install.packages() how to find your c++ compiler.
>>
>>
>>
>> On Wed, Aug 20, 2014 at 6:02 PM, Keith Weintraub <kw1958 at gmail.com> wrote:
>> Dirk,
>>
>> Thanks for the clues. Unfortunately your info is a bit too sketchy for me to be able to proceed.
>>
>> Thanks again,
>> Best,
>> KW
>>
>> > On Aug 20, 2014, at 10:51 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
>> >
>> >
>> > On 20 August 2014 at 10:35, Keith S Weintraub wrote:
>> > | Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
>> > |
>> > | Any links etc would be appreciated.
>> >
>> > i)  Build QuantLib
>> >
>> > ii) Adjust src/Makevars for RQuantLib as needed.
>> >
>> > Dirk
>> >
>> > --
>> > http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From kw1958 at gmail.com  Thu Aug 21 02:41:56 2014
From: kw1958 at gmail.com (Keith S Weintraub)
Date: Wed, 20 Aug 2014 20:41:56 -0400
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <CAPPM_gQn25=ApvoNfoWLGe01cSuu8tMziuvPS=rY7FJrVv9Czg@mail.gmail.com>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
	<21492.46585.813329.825268@max.nulle.part>
	<ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>
	<CAEr64e-zNM6=OqNL62HOSZCqiROG-Fx1vW_RxxCZxceWn2ivHQ@mail.gmail.com>
	<A25FBF95-1B87-4E16-A083-F2AC12785FE8@gmail.com>
	<CAPPM_gQn25=ApvoNfoWLGe01cSuu8tMziuvPS=rY7FJrVv9Czg@mail.gmail.com>
Message-ID: <C1BA38F3-2B7E-4C23-8978-799960A1E02C@gmail.com>

Joshua,
Thanks for the help.

As you can see below (clearly?) I did have QuantLib built. Maybe it's an older version?

I will look into putting the built binaries in my include path as that wasn't something that I knew was necessary.

Also I will try to put the binaries in my include path.

Thanks again,
Best,
KW

--

On Aug 20, 2014, at 8:28 PM, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:

> That clearly says:
> "configure: error: Please install QuantLib before trying to build RQuantLib."
> 
> So you either, 1) haven't built QuantLib (as Dirk said you needed to),
> or 2) haven't put the built binaries in your include path.
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
> 
> 
> On Wed, Aug 20, 2014 at 7:14 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
>> Zach. I hope I am not dragging you down a never ending installation pit. Here are the error messages:
>> 
>> Here are the results from the terminal commands:
>> 
>> ========================================================
>> /Users/kw $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
>> It appears Homebrew is already installed. If your intent is to reinstall you
>> should do the following before running this installer again:
>>    rm -rf /usr/local/Cellar /usr/local/.git && brew cleanup
>> 
>> /Users/kw $ brew install quantlib
>> Warning: quantlib-1.4 already installed
>> 
>> ========================================================
>> 
>> 
>> Here are the install.packages results. It looks like it was able to find the C++ compiler but there were other errors.
>> 
>> ========================================================
>> 
>>> install.packages('RQuantLib', dep=TRUE, type='source')
>> also installing the dependency ?RUnit?
>> 
>> trying URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
>> Error in download.file(url, destfile, method, mode = "wb", ...) :
>>  cannot open URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
>> In addition: Warning message:
>> In download.file(url, destfile, method, mode = "wb", ...) :
>>  cannot open: HTTP status was '0 (null)'
>> Warning in download.packages(pkgs, destdir = tmpd, available = available,  :
>>  download of package ?RUnit? failed
>> trying URL 'http://cran.stat.ucla.edu/src/contrib/RQuantLib_0.3.12.tar.gz'
>> Content type 'application/x-tar' length 117619 bytes (114 Kb)
>> opened URL
>> ==================================================
>> downloaded 114 Kb
>> 
>> * installing *source* package ?RQuantLib? ...
>> ** package ?RQuantLib? successfully unpacked and MD5 sums checked
>> checking for g++... g++
>> checking whether the C++ compiler works... yes
>> checking for C++ compiler default output file name... a.out
>> checking for suffix of executables... checking whether we are cross compiling... no
>> checking for suffix of object files... o
>> checking whether we are using the GNU C++ compiler... yes
>> checking whether g++ accepts -g... yes
>> checking how to run the C++ preprocessor... g++ -E
>> checking whether we are using the GNU C++ compiler... (cached) yes
>> checking whether g++ accepts -g... (cached) yes
>> checking for R... yes
>> checking for quantlib-config... no
>> configure: error: Please install QuantLib before trying to build RQuantLib.
>> ERROR: configuration failed for package ?RQuantLib?
>> * removing ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
>> * restoring previous ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
>> 
>> The downloaded source packages are in
>>        ?/private/var/folders/fc/lqx2wvqx5756sn7kv__1cnmm0000gn/T/RtmpOSZS7f/downloaded_packages?
>> Warning message:
>> In install.packages("RQuantLib", dep = TRUE, type = "source") :
>>  installation of package ?RQuantLib? had non-zero exit status
>>> 
>> 
>> --
>> 
>> On Aug 20, 2014, at 6:14 PM, Zachary Mayer <zach.mayer at gmail.com> wrote:
>> 
>>> Install brew
>>> Run this command: brew install quantlib
>>> 
>>> Then run:
>>> install.packages('RQuantLib', dep=TRUE, type='source')
>>> 
>>> You may have to tell install.packages() how to find your c++ compiler.
>>> 
>>> 
>>> 
>>> On Wed, Aug 20, 2014 at 6:02 PM, Keith Weintraub <kw1958 at gmail.com> wrote:
>>> Dirk,
>>> 
>>> Thanks for the clues. Unfortunately your info is a bit too sketchy for me to be able to proceed.
>>> 
>>> Thanks again,
>>> Best,
>>> KW
>>> 
>>>> On Aug 20, 2014, at 10:51 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
>>>> 
>>>> 
>>>> On 20 August 2014 at 10:35, Keith S Weintraub wrote:
>>>> | Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
>>>> |
>>>> | Any links etc would be appreciated.
>>>> 
>>>> i)  Build QuantLib
>>>> 
>>>> ii) Adjust src/Makevars for RQuantLib as needed.
>>>> 
>>>> Dirk
>>>> 
>>>> --
>>>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>> 
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R questions should go.
>>> 
>> 
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.


From josh.m.ulrich at gmail.com  Thu Aug 21 02:55:14 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Wed, 20 Aug 2014 19:55:14 -0500
Subject: [R-SIG-Finance] RQuantLib on OS X Mavericks?
In-Reply-To: <C1BA38F3-2B7E-4C23-8978-799960A1E02C@gmail.com>
References: <13D21831-9389-42B1-ABAB-D64DAA17B8EB@gmail.com>
	<21492.46585.813329.825268@max.nulle.part>
	<ED9F6E06-9E6B-4A57-991F-A6EF30B0E2A7@gmail.com>
	<CAEr64e-zNM6=OqNL62HOSZCqiROG-Fx1vW_RxxCZxceWn2ivHQ@mail.gmail.com>
	<A25FBF95-1B87-4E16-A083-F2AC12785FE8@gmail.com>
	<CAPPM_gQn25=ApvoNfoWLGe01cSuu8tMziuvPS=rY7FJrVv9Czg@mail.gmail.com>
	<C1BA38F3-2B7E-4C23-8978-799960A1E02C@gmail.com>
Message-ID: <CAPPM_gTT2h7nONEsBHPHe5S+unQgtvWAKA7NFYBaaaoZ6NgLwg@mail.gmail.com>

Bah, sorry.  I don't know how brew works, but you need the
"development" files too.  On Windows, that meant you needed the
QuantLib source *and* to build it.  On Ubuntu, you need
"libquantlib0-dev".
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Wed, Aug 20, 2014 at 7:41 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
> Joshua,
> Thanks for the help.
>
> As you can see below (clearly?) I did have QuantLib built. Maybe it's an older version?
>
> I will look into putting the built binaries in my include path as that wasn't something that I knew was necessary.
>
> Also I will try to put the binaries in my include path.
>
> Thanks again,
> Best,
> KW
>
> --
>
> On Aug 20, 2014, at 8:28 PM, Joshua Ulrich <josh.m.ulrich at gmail.com> wrote:
>
>> That clearly says:
>> "configure: error: Please install QuantLib before trying to build RQuantLib."
>>
>> So you either, 1) haven't built QuantLib (as Dirk said you needed to),
>> or 2) haven't put the built binaries in your include path.
>> --
>> Joshua Ulrich  |  about.me/joshuaulrich
>> FOSS Trading  |  www.fosstrading.com
>>
>>
>> On Wed, Aug 20, 2014 at 7:14 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
>>> Zach. I hope I am not dragging you down a never ending installation pit. Here are the error messages:
>>>
>>> Here are the results from the terminal commands:
>>>
>>> ========================================================
>>> /Users/kw $ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
>>> It appears Homebrew is already installed. If your intent is to reinstall you
>>> should do the following before running this installer again:
>>>    rm -rf /usr/local/Cellar /usr/local/.git && brew cleanup
>>>
>>> /Users/kw $ brew install quantlib
>>> Warning: quantlib-1.4 already installed
>>>
>>> ========================================================
>>>
>>>
>>> Here are the install.packages results. It looks like it was able to find the C++ compiler but there were other errors.
>>>
>>> ========================================================
>>>
>>>> install.packages('RQuantLib', dep=TRUE, type='source')
>>> also installing the dependency ?RUnit?
>>>
>>> trying URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
>>> Error in download.file(url, destfile, method, mode = "wb", ...) :
>>>  cannot open URL 'http://cran.stat.ucla.edu/src/contrib/RUnit_0.4.26.tar.gz'
>>> In addition: Warning message:
>>> In download.file(url, destfile, method, mode = "wb", ...) :
>>>  cannot open: HTTP status was '0 (null)'
>>> Warning in download.packages(pkgs, destdir = tmpd, available = available,  :
>>>  download of package ?RUnit? failed
>>> trying URL 'http://cran.stat.ucla.edu/src/contrib/RQuantLib_0.3.12.tar.gz'
>>> Content type 'application/x-tar' length 117619 bytes (114 Kb)
>>> opened URL
>>> ==================================================
>>> downloaded 114 Kb
>>>
>>> * installing *source* package ?RQuantLib? ...
>>> ** package ?RQuantLib? successfully unpacked and MD5 sums checked
>>> checking for g++... g++
>>> checking whether the C++ compiler works... yes
>>> checking for C++ compiler default output file name... a.out
>>> checking for suffix of executables... checking whether we are cross compiling... no
>>> checking for suffix of object files... o
>>> checking whether we are using the GNU C++ compiler... yes
>>> checking whether g++ accepts -g... yes
>>> checking how to run the C++ preprocessor... g++ -E
>>> checking whether we are using the GNU C++ compiler... (cached) yes
>>> checking whether g++ accepts -g... (cached) yes
>>> checking for R... yes
>>> checking for quantlib-config... no
>>> configure: error: Please install QuantLib before trying to build RQuantLib.
>>> ERROR: configuration failed for package ?RQuantLib?
>>> * removing ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
>>> * restoring previous ?/Library/Frameworks/R.framework/Versions/3.1/Resources/library/RQuantLib?
>>>
>>> The downloaded source packages are in
>>>        ?/private/var/folders/fc/lqx2wvqx5756sn7kv__1cnmm0000gn/T/RtmpOSZS7f/downloaded_packages?
>>> Warning message:
>>> In install.packages("RQuantLib", dep = TRUE, type = "source") :
>>>  installation of package ?RQuantLib? had non-zero exit status
>>>>
>>>
>>> --
>>>
>>> On Aug 20, 2014, at 6:14 PM, Zachary Mayer <zach.mayer at gmail.com> wrote:
>>>
>>>> Install brew
>>>> Run this command: brew install quantlib
>>>>
>>>> Then run:
>>>> install.packages('RQuantLib', dep=TRUE, type='source')
>>>>
>>>> You may have to tell install.packages() how to find your c++ compiler.
>>>>
>>>>
>>>>
>>>> On Wed, Aug 20, 2014 at 6:02 PM, Keith Weintraub <kw1958 at gmail.com> wrote:
>>>> Dirk,
>>>>
>>>> Thanks for the clues. Unfortunately your info is a bit too sketchy for me to be able to proceed.
>>>>
>>>> Thanks again,
>>>> Best,
>>>> KW
>>>>
>>>>> On Aug 20, 2014, at 10:51 AM, Dirk Eddelbuettel <edd at debian.org> wrote:
>>>>>
>>>>>
>>>>> On 20 August 2014 at 10:35, Keith S Weintraub wrote:
>>>>> | Is there a (foolproof) recipe for building RQuantLib on OS X Mavericks?
>>>>> |
>>>>> | Any links etc would be appreciated.
>>>>>
>>>>> i)  Build QuantLib
>>>>>
>>>>> ii) Adjust src/Makevars for RQuantLib as needed.
>>>>>
>>>>> Dirk
>>>>>
>>>>> --
>>>>> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>>>>
>>>> _______________________________________________
>>>> R-SIG-Finance at r-project.org mailing list
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>>> -- Also note that this is not the r-help list where general R questions should go.
>>>>
>>>
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R questions should go.
>


From kauders at gmail.com  Thu Aug 21 17:20:53 2014
From: kauders at gmail.com (Paul Kauders)
Date: Thu, 21 Aug 2014 10:20:53 -0500
Subject: [R-SIG-Finance] Quantitative Analyst Job
Message-ID: <CAAK9CSXEXVuX5Tnh-QPgodNu-rFWfx+LBKZf-pk1QAxj4CFSzQ@mail.gmail.com>

Hello,

I wanted to let the group know that SWIB is looking for a quantitative
analyst.

We'd like someone who is a great programmer (R preferred) and has
experience in quantitative finance. We need help building and running
portfolio optimizations and risk models. We're interested in all levels of
experience as long as you're passionate about this type of work.

http://newton.newtonsoftware.com/career/JobIntroduction.action?clientId=8a699b9842ea121b0142fcdbda8d3b28&id=8acf1691478a87960147a21f0f340613&source=

Feel free to email me at kauders at gmail.com with questions.

Thank you,
Paul Kauders

	[[alternative HTML version deleted]]


From ole.bueker at outlook.com  Thu Aug 21 18:50:29 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Thu, 21 Aug 2014 18:50:29 +0200
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
Message-ID: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>

Hello,
I am trying to use the R packages rugarch and VineCopula for simulating returns of 112 companies for a time period of 25 days with daily re-estimations. After the simulation, I wish to calculate the 99% and 95% value-at-risk and compare them to the actual returns.I use a moving window of 250 days and 1000 simulations per iteration.
(This estimation is quite time-intensive as 112 companies might be too many for VineCopula..)
The overall loop takes around 8 hours on my home computer, so I wouldn?t recommend to actually run the code. My problem is that some of my calculated value at risk forecasts seem to be positive ? this is not a ?just invert the VaR? kind of problem (at least I don?t think so). 
To summarize the code:
1.  Fit GARCH models to each series.2.  Extract standardized returns (and shape parameters)3. Transform standardized returns to uniform marginals using parametric method (IFM by Joe, 1987).4. Fit vine copulas5. Generate a 1000 x 112  matrix (1000 1-day ahead forecasts for all 112 companies)6. Reverse transform the simulated values.7. Use these transformed forecasts in ugarchsim
8. Extract forecasted values & sigmas.9. Calculate Value-at-Risk. 
Anyway, here?s my code so far:# Load Data and define variables
returns <-  read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)                    # The vine copulas to be testedsim <- array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000, 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <- array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = c(25,1000,112))

#Main calculation
for(i in 1:25){  print(i)  windows <- window(returns_crisis, start=times[376-250-24+i,1], end=times[376-25+i,1])            #Define the moving window  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")                                                                #Fit the garch models  print("rugarch fitting done")  residuals <- sapply(fit, residuals, standardize=TRUE)                                                                                     #Extract residuals & shape parameters  shape <- sapply(fit, coef)  shape <- shape[5,]  UniformResiduals <- pged(residuals, nu = shape)                                                                                           #Transform residuals into uniform marginals  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] = .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)             #Fit the Vine copulas  print(paste(i,"RVine fitting done"))  for(j in 1:1000)                                                                                                                                                                 #Simulate 1000 1-day ahead using VineCopula  {  sim[j,] <- RVineSim(1, rvine)                                                                                                                                     # 1000 x 112 matrix of forecasts  }print(paste(i,"RVine simulation done"))                 for(k in 1:112)                                                                                                                                                    #Next: ugarchsimulation for all 112 companies                {                residuals2[,] <- qged(sim[,], nu = shape[k])                                                                                         # 1000 x 112 matrix of standardized residuals                residuals_temp <- residuals2[,k]                                                                                                               # 1000 x 1 vector of standardized residuals for individual company                rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=1000, custom.dist = list(name=NA, distfit=residuals_temp))  #1000 simulations using the standardized residuals from Vine copula models for ugarchfit                rvine_fitted[i,,k] <- fitted(rvine_sim)                                                                                                     #Extract forecasted values - 25 x 1000 x 112               rvine_sigma[i,,k] <- sigma(rvine_sim)                                                                                                     #Extract forecasted sigmas - 25 x 1000 x 112               for(j in 1:1000)                                                                                                                                                                   #Next: Value at risk              {                VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k]) #Value at risk for 99% quantile                VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k]) #Value at risk for 95% quantile               }                 }}remove(i, j, k)                                                                                                                                                                   #Cleanupremove(windows, fit, residuals, shape, residuals2, residuals_temp, rvine, sim, rvine_sim)            #Cleanup   Hope I didn?t make any mistakes in my approach, but it seems like this is the ?standard? copula + rugarch approach ? if anyone is familiar with this, I am open to suggestions on how to speed up the simulations.
So far, so good ? the problem I am facing now:
Some (only a few) of my value at risk values are positive..I have manually checked and it seems like the fitted value is much larger than the sigma, so Value at Risk is positive ? which doesn?t really make any economic sense to me.
Here?s a dropbox link to the returns.csv, in case anyone is interested in running my code: https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv

Best Regards,
Ole 		 	   		  
	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Thu Aug 21 19:21:49 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Thu, 21 Aug 2014 18:21:49 +0100
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
In-Reply-To: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>
References: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>
Message-ID: <53F62AAD.4040604@4dscape.com>

Ole,

The email you've sent is really badly formatted and all over the place.

1. Try to send a well structured text-only email (with no special
characters).
2. Make an effort to send a minimally reproducible example.
Telling us that your problem took 8 hours to run is not the way to go.
Take a small subsample of your data which generates the behavior you
want to highlight (try to find one that does), and use that so that we
can investigate with minimal fuss.

-Alexios

On 21/08/2014 17:50, Ole Bueker wrote:
> Hello,
> I am trying to use the R packages rugarch and VineCopula for simulating returns of 112 companies for a time period of 25 days with daily re-estimations. After the simulation, I wish to calculate the 99% and 95% value-at-risk and compare them to the actual returns.I use a moving window of 250 days and 1000 simulations per iteration.
> (This estimation is quite time-intensive as 112 companies might be too many for VineCopula..)
> The overall loop takes around 8 hours on my home computer, so I wouldn?t recommend to actually run the code. My problem is that some of my calculated value at risk forecasts seem to be positive ? this is not a ?just invert the VaR? kind of problem (at least I don?t think so). 
> To summarize the code:
> 1.  Fit GARCH models to each series.2.  Extract standardized returns (and shape parameters)3. Transform standardized returns to uniform marginals using parametric method (IFM by Joe, 1987).4. Fit vine copulas5. Generate a 1000 x 112  matrix (1000 1-day ahead forecasts for all 112 companies)6. Reverse transform the simulated values.7. Use these transformed forecasts in ugarchsim
> 8. Extract forecasted values & sigmas.9. Calculate Value-at-Risk. 
> Anyway, here?s my code so far:# Load Data and define variables
> returns <-  read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)                    # The vine copulas to be testedsim <- array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000, 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <- array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = c(25,1000,112))
> 
> #Main calculation
> for(i in 1:25){  print(i)  windows <- window(returns_crisis, start=times[376-250-24+i,1], end=times[376-25+i,1])            #Define the moving window  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")                                                                #Fit the garch models  print("rugarch fitting done")  residuals <- sapply(fit, residuals, standardize=TRUE)                                                                                     #Extract residuals & shape parameters  shape <- sapply(fit, coef)  shape <- shape[5,]  UniformResiduals <- pged(residuals, nu = shape)                                                                                           #Transform residuals into uniform marginals  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] =
 .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)             #Fit the Vine copulas  print(paste(i,"RVine fitting done"))  for(j in 1:1000)                                                                                                                                                                 #Simulate 1000 1-day ahead using VineCopula  {  sim[j,] <- RVineSim(1, rvine)                                                                                                                                     # 1000 x 112 matrix of forecasts  }print(paste(i,"RVine simulation done"))                 for(k in 1:112)                                                                                                                                                    #Next: ugarchsimulation for all 112 companies                {                residuals2[,] <- qged(sim[,], nu = shape[k])                                                    
                                     # 1000 x 112 matrix of standardized residuals                residuals_temp <- residuals2[,k]                                                                                                               # 1000 x 1 vector of standardized residuals for individual company                rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=1000, custom.dist = list(name=NA, distfit=residuals_temp))  #1000 simulations using the standardized residuals from Vine copula models for ugarchfit                rvine_fitted[i,,k] <- fitted(rvine_sim)                                                                                                     #Extract forecasted values - 25 x 1000 x 112               rvine_sigma[i,,k] <- sigma(rvine_sim)                                                                                                     #Extract forecasted sigmas - 25 x 1000 x 112               for(j in 1:1000)                                                   
                                                                                                                #Next: Value at risk              {                VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k]) #Value at risk for 99% quantile                VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k]) #Value at risk for 95% quantile               }                 }}remove(i, j, k)                                                                                                                                                                   #Cleanupremove(windows, fit, residuals, shape, residuals2, residuals_temp, rvine, sim, rvine_sim)            #Cleanup   Hope I didn?t make any mistakes in my approach, but it seems like this is the ?standard? copula + rugarch approach ? if anyone is familiar with this, I am open to suggestions on how to speed up the si
mulations.
> So far, so good ? the problem I am facing now:
> Some (only a few) of my value at risk values are positive..I have manually checked and it seems like the fitted value is much larger than the sigma, so Value at Risk is positive ? which doesn?t really make any economic sense to me.
> Here?s a dropbox link to the returns.csv, in case anyone is interested in running my code: https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv
> 
> Best Regards,
> Ole 		 	   		  
> 	[[alternative HTML version deleted]]
> 
> 
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From aschmid1 at stevens.edu  Thu Aug 21 22:08:33 2014
From: aschmid1 at stevens.edu (aschmid1)
Date: Thu, 21 Aug 2014 16:08:33 -0400
Subject: [R-SIG-Finance] portfolio theory in terms of partial covariance
Message-ID: <d593bf745071be1f3964a6609673a3d5@stevens.edu>

Hopefully the new framework may be of interest to this community:
http://ssrn.com/abstract=2436478

Here is the abstract:

It is found that partial correlations between the major US equity ETFs 
conditioned on the state of economy (mimicked by S&P 500) differ 
dramatically from their Pearson?s correlations. The mean-variance 
portfolio theory is reformulated in terms of partial covariance. 
Performance of various two-asset portfolios formed by the US equity ETFs 
is analyzed. It is found that on average, the best long-only mean 
partial covariance portfolios outperformed the best long-only mean 
covariance portfolios in 2007-2013.

Comments will be greatly appreciated. Also I wonder if there is an 
R-based software package for portfolio management that allows for easy 
replacement of Pearson covariances/correlations with their partial 
values.

Thanks! Alec


From u0055 at wolke7.net  Thu Aug 21 23:49:01 2014
From: u0055 at wolke7.net (u0055 at wolke7.net)
Date: Thu, 21 Aug 2014 23:49:01 +0200
Subject: [R-SIG-Finance] parma - How to optimize a long/short portfolio with
 sum( abs( weights )) = 1
Message-ID: <53F6694D.2010303@wolke7.net>

Dear R-SIGs,

I'm very happy of finding the package
http://cran.r-project.org/web/packages/DEoptim
for portfolio optimization.
A very cool document is this:
http://cran.r-project.org/web/packages/DEoptim/vignettes/DEoptimPortfolioOptimization.pdf

For all my difficult input matrices of return values
I got solutions with "DEoptim":
- long/short portfolios
- easy adding constraints, e.g:
   sum( abs( weights )) = 1 and/or
   sum( weights ) = 0
- no problems with "positive definite"

The only disadvantage is maybe,
that the solutions are only approximations.
This is because of the different approach,
as pointed out in the vignette documents ...

Best,
Uwe


> Hi Uwe,
>
> Can you let me know if you find an answer? I tried the same thing not
> too long ago and failed? It does not seem that there is a stable
> convergence here? I even tried using continuous approximation for
> abs() function, lima??a2+x2????????=|x| with different methods for
> solving this?
>
>
>> Dear R-SIGs,
>>
>> I would like to optimize a long/short portfolio and apply the
>> constraint: sum( abs( weights )) = 1. The parma package is very
>> close to that, but I still didn't find a general way, which works
>> for every input matrix of return values.
>>
>> Thanks Alexios, I found the 'parma.tests' with lots of great
>> examples. I think "parma.test11" "Example 6" "riskType='optimal'"
>> is the best choice for what I'm looking for. I'm using that and
>> very often I get warnings: "In Socp(f, A1, b1, NULL, NULL, N1, x,
>> z1, NULL, control) : Dual is not in the feasible hyperplane,
>> solution may be wrong.".
>>
>> 1) Why do I get the warnings ? Is there a work around ?
>>
>> 2) Does anybody have a general solution (R snippet), which works
>> for every input matrix of return values ?
>>
>> Thanks in advance, Uwe
>>
>>
>> ### R snippet begin ###
>>
>> require( corpcor ) require( parma )
>>
>> # returns x=c() x=c(x,0)#0-0 x=c(x,0.00029801026024799343)#1
>> x=c(x,0.01923480801352125)#2 x=c(x,0.0046403921153714825)#3
>> x=c(x,0.03869859235256766)#4 x=c(x,-0.019476139659286133)#5
>> x=c(x,-0.009050645351487118)#6 x=c(x,0.02984309624005349)#7
>> x=c(x,0)#0-1 x=c(x,-0.012975945313424369)#1
>> x=c(x,-0.02407901001552061)#2 x=c(x,0.021245616535913895)#3
>> x=c(x,0.056956457439674014)#4 x=c(x,-0.06073619413646872)#5
>> x=c(x,0.0348564722762156)#6 x=c(x,-0.07581515130311306)#7
>> x=c(x,0)#0-2 x=c(x,0.00029801026024799343)#1
>> x=c(x,0.01923480801352125)#2 x=c(x,0.0046403921153714825)#3
>> x=c(x,0.0386985923399131)#4 x=c(x,-0.019476139659286133)#5
>> x=c(x,-0.009050645351487118)#6 x=c(x,0.029831537955057316)#7
>> x=c(x,0)#0-3 x=c(x,-0.012975945313424369)#1
>> x=c(x,-0.02407901001552061)#2 x=c(x,0.021245616535913895)#3
>> x=c(x,0.05695645745232857)#4 x=c(x,-0.06073619413646872)#5
>> x=c(x,0.0348564722762156)#6 x=c(x,-0.07580359301811687)#7
>> x=c(x,0)#0-4 x=c(x,0.00029801026024799343)#1
>> x=c(x,0.019234808013345154)#2 x=c(x,0.0046403921153714825)#3
>> x=c(x,0.038698591002771045)#4 x=c(x,-0.019476139659286133)#5
>> x=c(x,-0.009050645351487118)#6 x=c(x,0.029814537533275967)#7
>> x=c(x,0)#0-5 x=c(x,-0.012975945313424369)#1
>> x=c(x,-0.024079010015344522)#2 x=c(x,0.021245616535913895)#3
>> x=c(x,0.056956458789470615)#4 x=c(x,-0.06073619413646872)#5
>> x=c(x,0.0348564722762156)#6 x=c(x,-0.07578659259633552)#7
>> x=c(x,0)#0-6 x=c(x,0.00029801026024799343)#1
>> x=c(x,0.019234806760933323)#2 x=c(x,0.0046403921153714825)#3
>> x=c(x,0.03869855234509703)#4 x=c(x,-0.019476139659287156)#5
>> x=c(x,-0.009050645351487125)#6 x=c(x,0.029790636978526824)#7
>> x=c(x,0)#0-7 x=c(x,-0.012975945313424369)#1
>> x=c(x,-0.024079008762932695)#2 x=c(x,0.021245616535913895)#3
>> x=c(x,0.05695649744714464)#4 x=c(x,-0.0607361941364677)#5
>> x=c(x,0.0348564722762156)#6 x=c(x,-0.07576269204158638)#7
>> x=c(x,0)#0-8 x=c(x,0.00029801026025892376)#1
>> x=c(x,0.01923453220069893)#2 x=c(x,0.004640392115430811)#3
>> x=c(x,0.03869828542503245)#4 x=c(x,-0.019476139815127035)#5
>> x=c(x,-0.009050645351487118)#6 x=c(x,0.029768353535081143)#7
>> x=c(x,0)#0-9 x=c(x,-0.0129759453134353)#1
>> x=c(x,-0.024078734202698304)#2 x=c(x,0.021245616535854574)#3
>> x=c(x,0.05695676436720922)#4 x=c(x,-0.060736193980627816)#5
>> x=c(x,0.0348564722762156)#6 x=c(x,-0.07574040859814071)#7
>> x=c(x,0)#0-10 x=c(x,0.0002980103179347729)#1
>> x=c(x,0.01923043617762049)#2 x=c(x,0.004640392486997125)#3
>> x=c(x,0.03869776965250973)#4 x=c(x,-0.01947619048004869)#5
>> x=c(x,-0.009050645351487118)#6 x=c(x,0.02975459006868922)#7
>> x=c(x,0)#0-11 x=c(x,-0.012975945371111148)#1
>> x=c(x,-0.024074638179619856)#2 x=c(x,0.021245616164288255)#3
>> x=c(x,0.056957280139731954)#4 x=c(x,-0.06073614331570616)#5
>> x=c(x,0.0348564722762156)#6 x=c(x,-0.07572664513174876)#7
>> x=c(x,0)#0-12 x=c(x,0.00029803649043954857)#1
>> x=c(x,0.019192162723869248)#2 x=c(x,0.004640656340453675)#3
>> x=c(x,0.0386968409321401)#4 x=c(x,-0.019480064142972733)#5
>> x=c(x,-0.009050645351488088)#6 x=c(x,0.029743057109602365)#7
>> x=c(x,0)#0-13 x=c(x,-0.012975971543615924)#1
>> x=c(x,-0.024036364725868627)#2 x=c(x,0.0212453523108317)#3
>> x=c(x,0.05695820886010157)#4 x=c(x,-0.06073226965278212)#5
>> x=c(x,0.03485647227621657)#6 x=c(x,-0.07571511217266193)#7
>> x=c(x,0)#0-14 x=c(x,0.0002984370859375864)#1
>> x=c(x,0.019062660408625483)#2 x=c(x,0.00465122630987321)#3
>> x=c(x,0.038693166438592115)#4 x=c(x,-0.019521858395814863)#5
>> x=c(x,-0.009050645366251428)#6 x=c(x,0.029737617239541797)#7
>> x=c(x,0)#0-15 x=c(x,-0.012976372139113963)#1
>> x=c(x,-0.023906862410624858)#2 x=c(x,0.021234782341412173)#3
>> x=c(x,0.056961883353649566)#4 x=c(x,-0.06069047539993999)#5
>> x=c(x,0.03485647229097991)#6 x=c(x,-0.07570967230260134)#7
>> x=c(x,0)#0-16 x=c(x,0.0002971799298054011)#1
>> x=c(x,0.018802174294039967)#2 x=c(x,0.0047563932799025285)#3
>> x=c(x,0.038646702644233005)#4 x=c(x,-0.01969350191625727)#5
>> x=c(x,-0.00905064913872669)#6 x=c(x,0.02972290172590976)#7
>> x=c(x,0)#0-17 x=c(x,-0.012975114982981777)#1
>> x=c(x,-0.023646376296039332)#2 x=c(x,0.021129615371382856)#3
>> x=c(x,0.057008347148008676)#4 x=c(x,-0.06051883187949758)#5
>> x=c(x,0.034856476063455176)#6 x=c(x,-0.07569495678896931)#7
>> x=c(x,0)#0-18 x=c(x,0.0002696431479482309)#1
>> x=c(x,0.01844955210532226)#2 x=c(x,0.005163748103738864)#3
>> x=c(x,0.038392434478673985)#4 x=c(x,-0.02006062694298151)#5
>> x=c(x,-0.009050600101314333)#6 x=c(x,0.02961349117308415)#7
>> x=c(x,0)#0-19 x=c(x,-0.012947578201124608)#1
>> x=c(x,-0.023293754107321638)#2 x=c(x,0.02072226054754651)#3
>> x=c(x,0.057262615313567675)#4 x=c(x,-0.060151706852773344)#5
>> x=c(x,0.034856427026042816)#6 x=c(x,-0.0755855462361437)#7
>> x=c(x,0)#0-20 x=c(x,0.00015235255196601426)#1
>> x=c(x,0.018090134670099473)#2 x=c(x,0.005826010999584576)#3
>> x=c(x,0.03781096377417702)#4 x=c(x,-0.02051387732871736)#5
>> x=c(x,-0.009041385295032383)#6 x=c(x,0.029326041084552244)#7
>> x=c(x,0)#0-21 x=c(x,-0.01283028760514239)#1
>> x=c(x,-0.02293433667209884)#2 x=c(x,0.02005999765170081)#3
>> x=c(x,0.057844086018064664)#4 x=c(x,-0.059698456467037496)#5
>> x=c(x,0.03484721221976086)#6 x=c(x,-0.07529809614761179)#7
>> x=c(x,0)#0-22 x=c(x,-0.00010016815499999405)#1
>> x=c(x,0.017581183485064163)#2 x=c(x,0.006409181081122117)#3
>> x=c(x,0.03703441151715984)#4 x=c(x,-0.020933288820437643)#5
>> x=c(x,-0.008896102672098314)#6 x=c(x,0.0289138560987212)#7
>> x=c(x,0)#0-23 x=c(x,-0.012577766898176383)#1
>> x=c(x,-0.022425385487063534)#2 x=c(x,0.01947682757016327)#3
>> x=c(x,0.058620638275081835)#4 x=c(x,-0.05927904497531721)#5
>> x=c(x,0.034701929596826796)#6 x=c(x,-0.07488591116178075)#7
>> x=c(x,0)#0-24 x=c(x,-0.00045768754116740166)#1
>> x=c(x,0.016933958174540985)#2 x=c(x,0.006845027226092256)#3
>> x=c(x,0.036293597180222126)#4 x=c(x,-0.021260198083024463)#5
>> x=c(x,-0.008159185047229593)#6 x=c(x,0.028743274667077524)#7
>> x=c(x,0)#0-25 x=c(x,-0.012220247512008975)#1
>> x=c(x,-0.021778160176540357)#2 x=c(x,0.019040981425193122)#3
>> x=c(x,0.05936145261201955)#4 x=c(x,-0.05895213571273039)#5
>> x=c(x,0.033965011971958066)#6 x=c(x,-0.07471532973013709)#7
>> x=c(x,0)#0-26 x=c(x,-0.0008873151489962878)#1
>> x=c(x,0.016085311475881815)#2 x=c(x,0.007162773178278581)#3
>> x=c(x,0.03563186295203474)#4 x=c(x,-0.02153358198952339)#5
>> x=c(x,-0.006465431369639936)#6 x=c(x,0.028971621313637043)#7
>> x=c(x,0)#0-27 x=c(x,-0.011790619904180089)#1
>> x=c(x,-0.02092951347788118)#2 x=c(x,0.0187232354730068)#3
>> x=c(x,0.06002318684020693)#4 x=c(x,-0.058678751806231465)#5
>> x=c(x,0.03227125829436841)#6 x=c(x,-0.07494367637669659)#7
>> x=c(x,0)#0-28 x=c(x,-0.001352039495111673)#1
>> x=c(x,0.015580897283599052)#2 x=c(x,0.007338821832786869)#3
>> x=c(x,0.034689872867353914)#4 x=c(x,-0.021986525503168198)#5
>> x=c(x,-0.004304639325606844)#6 x=c(x,0.02942721457973837)#7
>> x=c(x,0)#0-29 x=c(x,-0.011325895558064705)#1
>> x=c(x,-0.020425099285598422)#2 x=c(x,0.018547186818498516)#3
>> x=c(x,0.06096517692488776)#4 x=c(x,-0.05822580829258665)#5
>> x=c(x,0.030110466250335324)#6 x=c(x,-0.07539926964279792)#7
>> x=c(x,0)#0-30 x=c(x,-0.0018626750989563113)#1
>> x=c(x,0.015036699574173586)#2 x=c(x,0.007650233219604404)#3
>> x=c(x,0.03305445135619395)#4 x=c(x,-0.022873781833506156)#5
>> x=c(x,-0.00222238149546775)#6 x=c(x,0.029919947705238273)#7
>> x=c(x,0)#0-31 x=c(x,-0.010815259954220066)#1
>> x=c(x,-0.019880901576172963)#2 x=c(x,0.018235775431680975)#3
>> x=c(x,0.06260059843604772)#4 x=c(x,-0.05733855196224869)#5
>> x=c(x,0.02802820842019623)#6 x=c(x,-0.07589200276829783)#7 returns
>> = matrix( x, ncol=32 ) # nrow=8
>>
>> # performs performs = colMeans( returns )
>>
>> # C C = cov( returns ) if( ! is.positive.definite( C )) C =
>> make.positive.definite( C, tol=1e-6 ) ## Alexios: tol=1e-2
>>
>> # spec spec = parmaspec( S = C, risk = 'EV', # EV LPM MiniMax
>> riskType = 'optimal', # minrisk optimal maxreward targetType =
>> 'equality', # equality inequality LB = rep( -1, length( performs
>> )), UB = rep( +1, length( performs )), leverage = 1, budget =
>> NULL, forecast = performs, asset.names = colnames( returns, do.NULL
>> = FALSE ) )
>>
>> # control control = list( abs.tol = 1e-12, rel.tol = 1e-12, Nu =
>> 4, max.iter = 1250, BigM.K = 4, BigM.iter = 15 )
>>
>> # portfolio portfolio = parmasolve( spec, solver.control =
>> control, type = 'SOCP' )
>>
>> ### R snippet end ###


From ole.bueker at outlook.com  Fri Aug 22 01:10:55 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Fri, 22 Aug 2014 01:10:55 +0200
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
In-Reply-To: <53F62AAD.4040604@4dscape.com>
References: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>,
	<53F62AAD.4040604@4dscape.com>
Message-ID: <DUB130-W87BD8F5C39DD05A65714229AD30@phx.gbl>




I have no idea what happened to the formatting, looked fine to me when I typed it in Outlook.
Here's the revised version, with amended code so that it is minimally reproducible (for this purpose, I will only use the first 25 companies, 100 simulations for 10 trading days).
The revised code should take around 5 minutes,


Again, heres the code summary:
1. Fit GARCH models to each series.
2. Extract standardized returns.
3. Transform standardized returns to uniform marginals using the parametric IFM method by Joe.
4. Fit vine copulas.
5. Generate 100 1-day ahead forecasts from the vine copulas.
6. Reverse transform the simulated values.
7. Use these transformed forecasts in ugarchsim (using custom.dist)
8. Extract forecasted mu and sigma.
9. Calculate 95% and 99% VaR.

The full code:
#Load data and define variablesreturns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")
model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns_crisis))windows <- matrix(0, 20, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)sim <- array(0, dim = c(100, 20))residuals2 <- array(0, dim = c(100, 20))rvine_fitted <- array(0, dim = c(10,100,20))rvine_sigma <- array(0, dim = c(10,100,20))VaR01 = VaR05 = array(0, dim = c(10,100,20))
#Main calculation
for(i in 1:10){  print(i)  windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1], end=times[376-25+i,1])     # Step 1  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")  print("rugarch fitting done")
  residuals <- sapply(fit, residuals, standardize=TRUE)  # Step 2       shape <- sapply(fit, coef)  shape <- shape[5,]
  UniformResiduals <- pged(residuals, nu = shape)     # Step 3  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] = .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)   # Step 4  print(paste(i,"RVine fitting done"))  for(j in 1:100)  {  sim[j,] <- RVineSim(1, rvine)      # Step 5  }  print(paste(i,"RVine simulation done"))  for(k in 1:20)  {  residuals2[,] <- qged(sim[,], nu = shape[k])         # Step 6
  residuals_temp <- residuals2[,k]  rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = list(name=NA, distfit=residuals_temp))  # Step 7
  rvine_fitted[i,,k] <- fitted(rvine_sim)  # Step 8  rvine_sigma[i,,k] <- sigma(rvine_sim)    if (i==10)    {    for(j in 1:100)    {    VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k])  # Step 9    VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])    }    }else {}  }  print(paste(i, "rugarch forecast done"))}

#Cleanupremove(i, j, k, ix, familyset, model, sim, rvine_sim, residuals, residuals_temp)

Hope this time everything is formatted correctly!
After running the code, I export VaR01 and VaR05 to Excel, and notice that there's usually quite a few positive values.
This seems to happen because sometimes the sigma is too low compare to the (positive) forecast, and therefore the VaR stays in the positive.
My guess is that either there's a mistake in my code at step 3 (maybe the wrong shape is used?).Or more likely there's a mistake at step 6/7 (wrong transformation or transformed values are not inserted correctly into ugarchsim).
> Date: Thu, 21 Aug 2014 18:21:49 +0100
> From: alexios at 4dscape.com
> To: ole.bueker at outlook.com; r-sig-finance at r-project.org
> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> 
> Ole,
> 
> The email you've sent is really badly formatted and all over the place.
> 
> 1. Try to send a well structured text-only email (with no special
> characters).
> 2. Make an effort to send a minimally reproducible example.
> Telling us that your problem took 8 hours to run is not the way to go.
> Take a small subsample of your data which generates the behavior you
> want to highlight (try to find one that does), and use that so that we
> can investigate with minimal fuss.
> 
> -Alexios
> 
> On 21/08/2014 17:50, Ole Bueker wrote:
> > Anyway, here?s my code so far:# Load Data and define variables
> > returns <-  read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)                    # The vine copulas to be testedsim <- array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000, 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <- array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = c(25,1000,112))
> > 
> > #Main calculation
> > for(i in 1:25){  print(i)  windows <- window(returns_crisis, start=times[376-250-24+i,1], end=times[376-25+i,1])            #Define the moving window  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")                                                                #Fit the garch models  print("rugarch fitting done")  residuals <- sapply(fit, residuals, standardize=TRUE)                                                                                     #Extract residuals & shape parameters  shape <- sapply(fit, coef)  shape <- shape[5,]  UniformResiduals <- pged(residuals, nu = shape)                                                                                           #Transform residuals into uniform marginals  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] =
>  .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)             #Fit the Vine copulas  print(paste(i,"RVine fitting done"))  for(j in 1:1000)                                                                                                                                                                 #Simulate 1000 1-day ahead using VineCopula  {  sim[j,] <- RVineSim(1, rvine)                                                                                                                                     # 1000 x 112 matrix of forecasts  }print(paste(i,"RVine simulation done"))                 for(k in 1:112)                                                                                                                                                    #Next: ugarchsimulation for all 112 companies                {                residuals2[,] <- qged(sim[,], nu = shape[k])                                                    
>                                      # 1000 x 112 matrix of standardized residuals                residuals_temp <- residuals2[,k]                                                                                                               # 1000 x 1 vector of standardized residuals for individual company                rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=1000, custom.dist = list(name=NA, distfit=residuals_temp))  #1000 simulations using the standardized residuals from Vine copula models for ugarchfit                rvine_fitted[i,,k] <- fitted(rvine_sim)                                                                                                     #Extract forecasted values - 25 x 1000 x 112               rvine_sigma[i,,k] <- sigma(rvine_sim)                                                                                                     #Extract forecasted sigmas - 25 x 1000 x 112               for(j in 1:1000)                                                   
>                                                                                                                 #Next: Value at risk              {                VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k]) #Value at risk for 99% quantile                VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k]) #Value at risk for 95% quantile               }                 }}remove(i, j, k)                                                                                                                                                                   #Cleanupremove(windows, fit, residuals, shape, residuals2, residuals_temp, rvine, sim, rvine_sim)            #Cleanup   Hope I didn?t make any mistakes in my approach, but it seems like this is the ?standard? copula + rugarch approach ? if anyone is familiar with this, I am open to suggestions on how to speed up the si
> mulations.
> > So far, so good ? the problem I am facing now:
> > Some (only a few) of my value at risk values are positive..I have manually checked and it seems like the fitted value is much larger than the sigma, so Value at Risk is positive ? which doesn?t really make any economic sense to me.
> > Here?s a dropbox link to the returns.csv, in case anyone is interested in running my code: https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv
> > 
> > Best Regards,
> > Ole 		 	   		  
> > 	[[alternative HTML version deleted]]

 		 	   		  
	[[alternative HTML version deleted]]


From ole.bueker at outlook.com  Fri Aug 22 01:44:51 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Fri, 22 Aug 2014 01:44:51 +0200
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
In-Reply-To: <DUB130-W11EE90224BE95200C37C629AD30@phx.gbl>
References: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>, ,
	<53F62AAD.4040604@4dscape.com>,
	<DUB130-W87BD8F5C39DD05A65714229AD30@phx.gbl>,
	<DUB130-W11EE90224BE95200C37C629AD30@phx.gbl>
Message-ID: <DUB130-W701FACF50C3B45D9E529219AD30@phx.gbl>

Sorry for sending another message, but it seems like there is still an error in the formatting of the code..
I'll share the R code using dropbox, in case the code is still not readable in this email: https://www.dropbox.com/s/rc9kpanule52zu8/minimum_working.R

#Load data and define variablesreturns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns_crisis))windows <- matrix(0, 20, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)sim <- array(0, dim = c(100, 20))residuals2 <- array(0, dim = c(100, 20))rvine_fitted <- array(0, dim = c(10,100,20))rvine_sigma <- array(0, dim = c(10,100,20))VaR01 = VaR05 = array(0, dim = c(10,100,20))
#Main calculationfor(i in 1:10){  print(i)  windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1], end=times[376-25+i,1])     # Step 1  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")  print("rugarch fitting done")
  residuals <- sapply(fit, residuals, standardize=TRUE)  # Step 2       shape <- sapply(fit, coef)  shape <- shape[5,]
  UniformResiduals <- pged(residuals, nu = shape)     # Step 3  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] = .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)   # Step 4  print(paste(i,"RVine fitting done"))  for(j in 1:100)  {  sim[j,] <- RVineSim(1, rvine)      # Step 5  }  print(paste(i,"RVine simulation done"))  for(k in 1:20)  {  residuals2[,] <- qged(sim[,], nu = shape[k])         # Step 6
  residuals_temp <- residuals2[,k]  rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = list(name=NA, distfit=residuals_temp))  # Step 7
  rvine_fitted[i,,k] <- fitted(rvine_sim)  # Step 8  rvine_sigma[i,,k] <- sigma(rvine_sim)    if (i==10)    {    for(j in 1:100)    {    VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k])  # Step 9    VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])    }    }else {}  }  print(paste(i, "rugarch forecast done"))}

#Cleanupremove(i, j, k, ix, familyset, model, sim, rvine_sim, residuals, residuals_temp)


> From: ole.bueker at outlook.com
> To: alexios at 4dscape.com; r-sig-finance at r-project.org
> Date: Fri, 22 Aug 2014 01:10:55 +0200
> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> 
> 
> 
> 
> I have no idea what happened to the formatting, looked fine to me when I typed it in Outlook.
> Here's the revised version, with amended code so that it is minimally reproducible (for this purpose, I will only use the first 25 companies, 100 simulations for 10 trading days).
> The revised code should take around 5 minutes,
> 
> 
> Again, heres the code summary:
> 1. Fit GARCH models to each series.
> 2. Extract standardized returns.
> 3. Transform standardized returns to uniform marginals using the parametric IFM method by Joe.
> 4. Fit vine copulas.
> 5. Generate 100 1-day ahead forecasts from the vine copulas.
> 6. Reverse transform the simulated values.
> 7. Use these transformed forecasts in ugarchsim (using custom.dist)
> 8. Extract forecasted mu and sigma.
> 9. Calculate 95% and 99% VaR.
> 
> The full code:
> #Load data and define variablesreturns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")
> model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns_crisis))windows <- matrix(0, 20, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)sim <- array(0, dim = c(100, 20))residuals2 <- array(0, dim = c(100, 20))rvine_fitted <- array(0, dim = c(10,100,20))rvine_sigma <- array(0, dim = c(10,100,20))VaR01 = VaR05 = array(0, dim = c(10,100,20))
> #Main calculation
> for(i in 1:10){  print(i)  windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1], end=times[376-25+i,1])     # Step 1  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")  print("rugarch fitting done")
>   residuals <- sapply(fit, residuals, standardize=TRUE)  # Step 2       shape <- sapply(fit, coef)  shape <- shape[5,]
>   UniformResiduals <- pged(residuals, nu = shape)     # Step 3  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] = .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)   # Step 4  print(paste(i,"RVine fitting done"))  for(j in 1:100)  {  sim[j,] <- RVineSim(1, rvine)      # Step 5  }  print(paste(i,"RVine simulation done"))  for(k in 1:20)  {  residuals2[,] <- qged(sim[,], nu = shape[k])         # Step 6
>   residuals_temp <- residuals2[,k]  rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = list(name=NA, distfit=residuals_temp))  # Step 7
>   rvine_fitted[i,,k] <- fitted(rvine_sim)  # Step 8  rvine_sigma[i,,k] <- sigma(rvine_sim)    if (i==10)    {    for(j in 1:100)    {    VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k])  # Step 9    VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])    }    }else {}  }  print(paste(i, "rugarch forecast done"))}
> 
> #Cleanupremove(i, j, k, ix, familyset, model, sim, rvine_sim, residuals, residuals_temp)
> 
> Hope this time everything is formatted correctly!
> After running the code, I export VaR01 and VaR05 to Excel, and notice that there's usually quite a few positive values.
> This seems to happen because sometimes the sigma is too low compare to the (positive) forecast, and therefore the VaR stays in the positive.
> My guess is that either there's a mistake in my code at step 3 (maybe the wrong shape is used?).Or more likely there's a mistake at step 6/7 (wrong transformation or transformed values are not inserted correctly into ugarchsim).
> > Date: Thu, 21 Aug 2014 18:21:49 +0100
> > From: alexios at 4dscape.com
> > To: ole.bueker at outlook.com; r-sig-finance at r-project.org
> > Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> > 
> > Ole,
> > 
> > The email you've sent is really badly formatted and all over the place.
> > 
> > 1. Try to send a well structured text-only email (with no special
> > characters).
> > 2. Make an effort to send a minimally reproducible example.
> > Telling us that your problem took 8 hours to run is not the way to go.
> > Take a small subsample of your data which generates the behavior you
> > want to highlight (try to find one that does), and use that so that we
> > can investigate with minimal fuss.
> > 
> > -Alexios
> > 
> > On 21/08/2014 17:50, Ole Bueker wrote:
> > > Anyway, here?s my code so far:# Load Data and define variables
> > > returns <-  read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)                    # The vine copulas to be testedsim <- array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000, 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <- array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = c(25,1000,112))
> > > 
> > > #Main calculation
> > > for(i in 1:25){  print(i)  windows <- window(returns_crisis, start=times[376-250-24+i,1], end=times[376-25+i,1])            #Define the moving window  fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")                                                                #Fit the garch models  print("rugarch fitting done")  residuals <- sapply(fit, residuals, standardize=TRUE)                                                                                     #Extract residuals & shape parameters  shape <- sapply(fit, coef)  shape <- shape[5,]  UniformResiduals <- pged(residuals, nu = shape)                                                                                           #Transform residuals into uniform marginals  if(any(UniformResiduals > 0.99999))  {    ix = which(UniformResiduals > 0.99999)   UniformResiduals [ix] = 0.99999  }  if(any(UniformResiduals < .Machine$double.eps))  {    ix = which(UniformResiduals < (1.5*.Machine$double.eps))    UniformResiduals [ix] =
> >  .Machine$double.eps  }  rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE, familyset=familyset)             #Fit the Vine copulas  print(paste(i,"RVine fitting done"))  for(j in 1:1000)                                                                                                                                                                 #Simulate 1000 1-day ahead using VineCopula  {  sim[j,] <- RVineSim(1, rvine)                                                                                                                                     # 1000 x 112 matrix of forecasts  }print(paste(i,"RVine simulation done"))                 for(k in 1:112)                                                                                                                                                    #Next: ugarchsimulation for all 112 companies                {                residuals2[,] <- qged(sim[,], nu = shape[k])                                                    
> >                                      # 1000 x 112 matrix of standardized residuals                residuals_temp <- residuals2[,k]                                                                                                               # 1000 x 1 vector of standardized residuals for individual company                rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=1000, custom.dist = list(name=NA, distfit=residuals_temp))  #1000 simulations using the standardized residuals from Vine copula models for ugarchfit                rvine_fitted[i,,k] <- fitted(rvine_sim)                                                                                                     #Extract forecasted values - 25 x 1000 x 112               rvine_sigma[i,,k] <- sigma(rvine_sim)                                                                                                     #Extract forecasted sigmas - 25 x 1000 x 112               for(j in 1:1000)                                                   
> >                                                                                                                 #Next: Value at risk              {                VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k]) #Value at risk for 99% quantile                VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k]) #Value at risk for 95% quantile               }                 }}remove(i, j, k)                                                                                                                                                                   #Cleanupremove(windows, fit, residuals, shape, residuals2, residuals_temp, rvine, sim, rvine_sim)            #Cleanup   Hope I didn?t make any mistakes in my approach, but it seems like this is the ?standard? copula + rugarch approach ? if anyone is familiar with this, I am open to suggestions on how to speed up the si
> > mulations.
> > > So far, so good ? the problem I am facing now:
> > > Some (only a few) of my value at risk values are positive..I have manually checked and it seems like the fitted value is much larger than the sigma, so Value at Risk is positive ? which doesn?t really make any economic sense to me.
> > > Here?s a dropbox link to the returns.csv, in case anyone is interested in running my code: https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv
> > > 
> > > Best Regards,
> > > Ole 		 	   		  
> > > 	[[alternative HTML version deleted]]
> 
>  		 	   		  
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
 		 	   		   		 	   		  
	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Fri Aug 22 02:36:53 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Fri, 22 Aug 2014 01:36:53 +0100
Subject: [R-SIG-Finance] parma - How to optimize a long/short portfolio
 with sum( abs( weights )) = 1
In-Reply-To: <53F6694D.2010303@wolke7.net>
References: <53F6694D.2010303@wolke7.net>
Message-ID: <53F690A5.10504@4dscape.com>

Dear Uwe,

1. DEoptim is a nonlinear global optimization solver. Global
optimization is usually reserved for hard to solve non-convex
problems with many local minima. There is no guarantee of
optimality not even for convex problems, nor any idea of
whether the answer you are getting is anything other than a local optimum.

2. The parma package was designed to solve linear and convex
optimization problems confidently (which is why all NLP problems use
analytic derivatives for the functions and contraints), and for problems
with non-smooth functionals or constraints, smooth equivalents with very
high accuracy were developed.

3. The fact that your covariance matrix is not positive definite (and we
already saw how highly correlated some of the data were previously)
points to a fundamental problem in your approach to solving the problem
and I very much fear that finding a way to force a solution this way
will only give you trouble going forward...but who knows? For some of
the time, in some of the cases you might get Garbage In->Magic Out.

Best,

Alexios

On 21/08/2014 22:49, u0055 at wolke7.net wrote:
> Dear R-SIGs,
> 
> I'm very happy of finding the package
> http://cran.r-project.org/web/packages/DEoptim
> for portfolio optimization.
> A very cool document is this:
> http://cran.r-project.org/web/packages/DEoptim/vignettes/DEoptimPortfolioOptimization.pdf
> 
> 
> For all my difficult input matrices of return values
> I got solutions with "DEoptim":
> - long/short portfolios
> - easy adding constraints, e.g:
>   sum( abs( weights )) = 1 and/or
>   sum( weights ) = 0
> - no problems with "positive definite"
> 
> The only disadvantage is maybe,
> that the solutions are only approximations.
> This is because of the different approach,
> as pointed out in the vignette documents ...
> 
> Best,
> Uwe
> 
>


From alexios at 4dscape.com  Fri Aug 22 04:39:42 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Fri, 22 Aug 2014 03:39:42 +0100
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
In-Reply-To: <DUB130-W701FACF50C3B45D9E529219AD30@phx.gbl>
References: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>, ,
	<53F62AAD.4040604@4dscape.com>,
	<DUB130-W87BD8F5C39DD05A65714229AD30@phx.gbl>,
	<DUB130-W11EE90224BE95200C37C629AD30@phx.gbl>
	<DUB130-W701FACF50C3B45D9E529219AD30@phx.gbl>
Message-ID: <53F6AD6E.9040809@4dscape.com>

Ole,

See a 'corrected' extract of the relevant code section below. You did
not define 'returns_crisis' but I assume this is the same as 'returns'.
You also did not tell us the required packages (please do so in future).

There is absolutely nothing wrong (at least that I can see with the
approach and results).
1. You are filtering the returns by an AR-GARCH model.
2. You estimate the vine copula on the uniform margins based on the
standardized residuals transformed by the conditional distribution from (1).
3. You simulate from this unconditional distribution 100x20 uniform
variates which you transform back to standardized values using the shape
parameter from (1).
3. You then simulate the T+1 conditional distribution (with 100 samples
for each asset) using the GARCH model from (1).
4. You obtain the T+1 distribution of the quantiles for each asset.

Are you very surprised that a particular point in time distribution of
the 5% quantile of certain assets is not entirely in the negative
domain? Think about what it is you are doing, the assumptions, high
degree of uncertainty (you are using 250 points to estimate a GARCH
model) etc The surprise would be if the MEAN of those value was positive.

Am not too familiar with Vine Copulas and the particular package (or if
there is something particular about the way the simulation is done) so I
may have missed something...

-Alexios

Note also the following:
a. For T+1 there is not uncertainty about sigma (see
http://unstarched.net/r-examples/rugarch/a-note-on-simulation-in-the-rugarch-package/
if you are confused about this point).
b. All distributions in rugarch (and their functions qdist, rdist,
pdist, ddist) are based on the standardized (0,1) representation (all
have the location-scale invariance property).


################################################################################
for(i in 1:10)
{
print(i)
windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1],
end=times[376-25+i,1])
fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")
print("rugarch fitting done")
residuals <- sapply(fit, residuals, standardize=TRUE)
shape <- sapply(fit, coef)
shape <- shape[5,]
# # I don't know where you found pged, but the correct version is
# pdist("ged",....)
UniformResiduals <- sapply(1:ncol(residuals), function(i){pdist("ged",
residuals[,i], mu=0, sigma=1, shape = shape[i])})
rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
familyset=familyset)
print(paste(i,"RVine fitting done"))
set.seed(100)
sim <- RVineSim(100, rvine)
print(paste(i,"RVine simulation done"))
for(k in 1:20)
{
# I don't know where you found qged, but the correct version is
# qdist("ged",....)
residuals2 <- qdist("ged", mu=0, sigma=1, sim[,k], shape = shape[k])
# Comment: custom.dist$name must be a character (anything but not NA or
# NULL).
# Also use startMethod="sample" to use the last values of the estimated
# object for the simulation rather than the unconditional values.
rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist =
list(name="sample", distfit=matrix(residuals2, ncol=100)),
startMethod="sample")
# cleaner to calculate at each step
rvine_fitted[i,,k] <- as.numeric(fitted(rvine_sim))
rvine_sigma[i,,k] <- as.numeric(sigma(rvine_sim))
VaR01[i,,k] <- rvine_fitted[i,,k] + rvine_sigma[i,,k] * qdist('ged',
0.01, mu=0, sigma=1, shape = shape[k])
VaR05[i,,k] <- rvine_fitted[i,,k] + rvine_sigma[i,,k] * qdist('ged',
0.05, mu=0, sigma=1, shape = shape[k])
}
print(paste(i, "rugarch forecast done"))
}
################################################################################

On 22/08/2014 00:44, Ole Bueker wrote:
> Sorry for sending another message, but it seems like there is still an
> error in the formatting of the code..
> I'll share the R code using dropbox, in case the code is still not
> readable in this
> email: https://www.dropbox.com/s/rc9kpanule52zu8/minimum_working.R
> 
> #Load data and define variables
> returns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv",
> header=TRUE, sep=",", format="%d-%m-%y")
> model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")
> times <- as.data.frame(time(returns_crisis))
> windows <- matrix(0, 20, 250)
> familyset <- c(1:5, 7, 10, 13, 14, 17, 20)
> sim <- array(0, dim = c(100, 20))
> residuals2 <- array(0, dim = c(100, 20))
> rvine_fitted <- array(0, dim = c(10,100,20))
> rvine_sigma <- array(0, dim = c(10,100,20))
> VaR01 = VaR05 = array(0, dim = c(10,100,20))
> 
> #Main calculation
> for(i in 1:10)
> {
>   print(i)
>   windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1],
> end=times[376-25+i,1])     # Step 1
>   fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")
>   print("rugarch fitting done")
> 
>   residuals <- sapply(fit, residuals, standardize=TRUE)  # Step 2     
>   shape <- sapply(fit, coef)
>   shape <- shape[5,]
> 
>   UniformResiduals <- pged(residuals, nu = shape)     # Step 3
>   if(any(UniformResiduals > 0.99999))
>   {
>     ix = which(UniformResiduals > 0.99999)
>    UniformResiduals [ix] = 0.99999
>   }
>   if(any(UniformResiduals < .Machine$double.eps))
>   {
>     ix = which(UniformResiduals < (1.5*.Machine$double.eps))
>     UniformResiduals [ix] = .Machine$double.eps
>   }
>   rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> familyset=familyset)   # Step 4
>   print(paste(i,"RVine fitting done"))
>   for(j in 1:100)
>   {
>   sim[j,] <- RVineSim(1, rvine)      # Step 5
>   }
>   print(paste(i,"RVine simulation done"))
>   for(k in 1:20)
>   {
>   residuals2[,] <- qged(sim[,], nu = shape[k])         # Step 6
> 
>   residuals_temp <- residuals2[,k]
>   rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist =
> list(name=NA, distfit=residuals_temp))  # Step 7
> 
>   rvine_fitted[i,,k] <- fitted(rvine_sim)  # Step 8
>   rvine_sigma[i,,k] <- sigma(rvine_sim)  
>   if (i==10)
>     {
>     for(j in 1:100)
>     {
>     VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged',
> 0.01, mu=0, sigma=1, shape = shape[k])  # Step 9
>     VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged',
> 0.05, mu=0, sigma=1, shape = shape[k])
>     }
>     }else {}
>   }
>   print(paste(i, "rugarch forecast done"))
> }
> 
> 
> #Cleanup
> remove(i, j, k, ix, familyset, model, sim, rvine_sim, residuals,
> residuals_temp)
> 
> 
> ------------------------------------------------------------------------
> 
>> From: ole.bueker at outlook.com
>> To: alexios at 4dscape.com; r-sig-finance at r-project.org
>> Date: Fri, 22 Aug 2014 01:10:55 +0200
>> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
>>
>>
>>
>>
>> I have no idea what happened to the formatting, looked fine to me when
> I typed it in Outlook.
>> Here's the revised version, with amended code so that it is minimally
> reproducible (for this purpose, I will only use the first 25 companies,
> 100 simulations for 10 trading days).
>> The revised code should take around 5 minutes,
>>
>>
>> Again, heres the code summary:
>> 1. Fit GARCH models to each series.
>> 2. Extract standardized returns.
>> 3. Transform standardized returns to uniform marginals using the
> parametric IFM method by Joe.
>> 4. Fit vine copulas.
>> 5. Generate 100 1-day ahead forecasts from the vine copulas.
>> 6. Reverse transform the simulated values.
>> 7. Use these transformed forecasts in ugarchsim (using custom.dist)
>> 8. Extract forecasted mu and sigma.
>> 9. Calculate 95% and 99% VaR.
>>
>> The full code:
>> #Load data and define variablesreturns <- read.zoo("E:/Dropbox/my
> own/Programming/R/returns.csv", header=TRUE, sep=",", format="%d-%m-%y")
>>
> model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times
> <- as.data.frame(time(returns_crisis))windows <- matrix(0, 20,
> 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)sim <- array(0, dim =
> c(100, 20))residuals2 <- array(0, dim = c(100, 20))rvine_fitted <-
> array(0, dim = c(10,100,20))rvine_sigma <- array(0, dim =
> c(10,100,20))VaR01 = VaR05 = array(0, dim = c(10,100,20))
>> #Main calculation
>> for(i in 1:10){ print(i) windows <- window(returns_crisis[,1:20],
> start=times[376-250-24+i,1], end=times[376-25+i,1]) # Step 1 fit <-
> lapply(windows, ugarchfit, spec=model, solver="hybrid") print("rugarch
> fitting done")
>> residuals <- sapply(fit, residuals, standardize=TRUE) # Step 2 shape
> <- sapply(fit, coef) shape <- shape[5,]
>> UniformResiduals <- pged(residuals, nu = shape) # Step 3
> if(any(UniformResiduals > 0.99999)) { ix = which(UniformResiduals >
> 0.99999) UniformResiduals [ix] = 0.99999 } if(any(UniformResiduals <
> .Machine$double.eps)) { ix = which(UniformResiduals <
> (1.5*.Machine$double.eps)) UniformResiduals [ix] = .Machine$double.eps }
> rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> familyset=familyset) # Step 4 print(paste(i,"RVine fitting done")) for(j
> in 1:100) { sim[j,] <- RVineSim(1, rvine) # Step 5 }
> print(paste(i,"RVine simulation done")) for(k in 1:20) { residuals2[,]
> <- qged(sim[,], nu = shape[k]) # Step 6
>> residuals_temp <- residuals2[,k] rvine_sim <- ugarchsim(fit[[k]],
> n.sim=1, m.sim=100, custom.dist = list(name=NA, distfit=residuals_temp))
> # Step 7
>> rvine_fitted[i,,k] <- fitted(rvine_sim) # Step 8 rvine_sigma[i,,k] <-
> sigma(rvine_sim) if (i==10) { for(j in 1:100) { VaR01[,j,k] <-
> rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0,
> sigma=1, shape = shape[k]) # Step 9 VaR05[,j,k] <- rvine_fitted[,j,k] +
> rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])
> } }else {} } print(paste(i, "rugarch forecast done"))}
>>
>> #Cleanupremove(i, j, k, ix, familyset, model, sim, rvine_sim,
> residuals, residuals_temp)
>>
>> Hope this time everything is formatted correctly!
>> After running the code, I export VaR01 and VaR05 to Excel, and notice
> that there's usually quite a few positive values.
>> This seems to happen because sometimes the sigma is too low compare to
> the (positive) forecast, and therefore the VaR stays in the positive.
>> My guess is that either there's a mistake in my code at step 3 (maybe
> the wrong shape is used?).Or more likely there's a mistake at step 6/7
> (wrong transformation or transformed values are not inserted correctly
> into ugarchsim).
>> > Date: Thu, 21 Aug 2014 18:21:49 +0100
>> > From: alexios at 4dscape.com
>> > To: ole.bueker at outlook.com; r-sig-finance at r-project.org
>> > Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
>> >
>> > Ole,
>> >
>> > The email you've sent is really badly formatted and all over the place.
>> >
>> > 1. Try to send a well structured text-only email (with no special
>> > characters).
>> > 2. Make an effort to send a minimally reproducible example.
>> > Telling us that your problem took 8 hours to run is not the way to go.
>> > Take a small subsample of your data which generates the behavior you
>> > want to highlight (try to find one that does), and use that so that we
>> > can investigate with minimal fuss.
>> >
>> > -Alexios
>> >
>> > On 21/08/2014 17:50, Ole Bueker wrote:
>> > > Anyway, here?s my code so far:# Load Data and define variables
>> > > returns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv",
> header=TRUE, sep=",",
> format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.model="ged")times
> <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset
> <- c(1:5, 7, 10, 13, 14, 17, 20) # The vine copulas to be testedsim <-
> array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000,
> 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <-
> array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = c(25,1000,112))
>> > >
>> > > #Main calculation
>> > > for(i in 1:25){ print(i) windows <- window(returns_crisis,
> start=times[376-250-24+i,1], end=times[376-25+i,1]) #Define the moving
> window fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")
> #Fit the garch models print("rugarch fitting done") residuals <-
> sapply(fit, residuals, standardize=TRUE) #Extract residuals & shape
> parameters shape <- sapply(fit, coef) shape <- shape[5,]
> UniformResiduals <- pged(residuals, nu = shape) #Transform residuals
> into uniform marginals if(any(UniformResiduals > 0.99999)) { ix =
> which(UniformResiduals > 0.99999) UniformResiduals [ix] = 0.99999 }
> if(any(UniformResiduals < .Machine$double.eps)) { ix =
> which(UniformResiduals < (1.5*.Machine$double.eps)) UniformResiduals [ix] =
>> > .Machine$double.eps } rvine <-
> RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> familyset=familyset) #Fit the Vine copulas print(paste(i,"RVine fitting
> done")) for(j in 1:1000) #Simulate 1000 1-day ahead using VineCopula {
> sim[j,] <- RVineSim(1, rvine) # 1000 x 112 matrix of forecasts
> }print(paste(i,"RVine simulation done")) for(k in 1:112) #Next:
> ugarchsimulation for all 112 companies { residuals2[,] <- qged(sim[,],
> nu = shape[k])
>> > # 1000 x 112 matrix of standardized residuals residuals_temp <-
> residuals2[,k] # 1000 x 1 vector of standardized residuals for
> individual company rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=1000,
> custom.dist = list(name=NA, distfit=residuals_temp)) #1000 simulations
> using the standardized residuals from Vine copula models for ugarchfit
> rvine_fitted[i,,k] <- fitted(rvine_sim) #Extract forecasted values - 25
> x 1000 x 112 rvine_sigma[i,,k] <- sigma(rvine_sim) #Extract forecasted
> sigmas - 25 x 1000 x 112 for(j in 1:1000)
>> > #Next: Value at risk { VaR01[,j,k] <- rvine_fitted[,j,k] +
> rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k])
> #Value at risk for 99% quantile VaR05[,j,k] <- rvine_fitted[,j,k] +
> rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])
> #Value at risk for 95% quantile } }}remove(i, j, k)
> #Cleanupremove(windows, fit, residuals, shape, residuals2,
> residuals_temp, rvine, sim, rvine_sim) #Cleanup Hope I didn?t make any
> mistakes in my approach, but it seems like this is the ?standard? copula
> + rugarch approach ? if anyone is familiar with this, I am open to
> suggestions on how to speed up the si
>> > mulations.
>> > > So far, so good ? the problem I am facing now:
>> > > Some (only a few) of my value at risk values are positive..I have
> manually checked and it seems like the fitted value is much larger than
> the sigma, so Value at Risk is positive ? which doesn?t really make any
> economic sense to me.
>> > > Here?s a dropbox link to the returns.csv, in case anyone is
> interested in running my code:
> https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv
>> > >
>> > > Best Regards,
>> > > Ole
>> > > [[alternative HTML version deleted]]
>>
>>
>> [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R
> questions should go.


From ole.bueker at outlook.com  Fri Aug 22 06:34:10 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Fri, 22 Aug 2014 06:34:10 +0200
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
In-Reply-To: <DUB130-W9AF517AA6210528066EB7B8D00@phx.gbl>
References: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>, ,
	<53F62AAD.4040604@4dscape.com>,
	<DUB130-W87BD8F5C39DD05A65714229AD30@phx.gbl>,
	<DUB130-W11EE90224BE95200C37C629AD30@phx.gbl>,
	<DUB130-W701FACF50C3B45D9E529219AD30@phx.gbl>,
	<53F6AD6E.9040809@4dscape.com>,
	<DUB405-EAS2799C3E7555B3482BE00E96B8D00@phx.gbl>,
	<DUB130-W9AF517AA6210528066EB7B8D00@phx.gbl>
Message-ID: <DUB130-W87A851B0E9C488F21351F09AD00@phx.gbl>

Hey Alexios,thanks a lot for the corrected version, seems to be working faster than before!'returns_crisis' are indeed the same as 'returns', forgot to replace the name in that line - should be fixed now in the dropbox file.I'll remember to post the required packages next time! The qged and pged functions are from the fGarch package I believe.Good to see that my approach seems to be correct - although in practice I would increase the moving window to 500 days (which isn't an option for me unfortunately). I don't think there is anything special with the VineCopula simulation method, not sure if the authors/maintainers of the package follow this list. Guess I can't fix that some of the values are positive, however the mean VaR should be negative - therefore I will increase the number of simulations and then just take the average for all the simulations to obtain 25 1-day ahead VaR forecasts for all 112 companies. (so VaR01 is a 25 x 112 matrix of the mean VaR forecasts). Thanks again for the help!Best Regards,Ole
From: ole.bueker at cbs-edu.de
To: alexios at 4dscape.com; r-sig-finance at r-project.org
Subject: RE: [R-SIG-Finance] rugarch + VineCopula for value at risk
Date: Fri, 22 Aug 2014 06:23:29 +0200




Hey Alexios,

thanks a lot for the corrected version, seems to be
working faster than before!

'returns_crisis' are indeed the same as 'returns', forgot
to replace the name in that line - should be fixed now in the dropbox file.

I'll remember to post the required packages next time!
The qged and pged functions are from the fGarch package I believe.

Good to see that my approach seems to be correct -
although in practice I would increase the moving window to 500 days (which
isn't an option for me unfortunately).

 

I don't think there is anything special with the
VineCopula simulation method, not sure if the authors/maintainers of the
package follow this list.

 

Guess I can't fix that some of the values are positive,
however the mean VaR should be negative - therefore I will increase the number
of simulations and then just take the average for all the simulations to obtain
25 1-day ahead VaR forecasts for all 112 companies. (so VaR01 is a 25 x 112
matrix of the mean VaR forecasts).

 

Thanks again for the help!

Best Regards,

Ole
> -----Original Message-----
> From: alexios ghalanos [mailto:alexios at 4dscape.com] 
> Sent: Friday, August 22, 2014 11:40 AM
> To: Ole Bueker; r-sig-finance at r-project.org
> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> 
> Ole,
> 
> See a 'corrected' extract of the relevant code section below. You did not define 'returns_crisis' but I assume this is the same as 'returns'.
> You also did not tell us the required packages (please do so in future).
> 
> There is absolutely nothing wrong (at least that I can see with the approach and results).
> 1. You are filtering the returns by an AR-GARCH model.
> 2. You estimate the vine copula on the uniform margins based on the standardized residuals transformed by the conditional distribution from (1).
> 3. You simulate from this unconditional distribution 100x20 uniform variates which you transform back to standardized values using the shape parameter from (1).
> 3. You then simulate the T+1 conditional distribution (with 100 samples for each asset) using the GARCH model from (1).
> 4. You obtain the T+1 distribution of the quantiles for each asset.
> 
> Are you very surprised that a particular point in time distribution of the 5% quantile of certain assets is not entirely in the negative domain? Think about what it is you are doing, the assumptions, high degree of uncertainty (you are using 250 points to estimate a GARCH
> model) etc The surprise would be if the MEAN of those value was positive.
> 
> Am not too familiar with Vine Copulas and the particular package (or if there is something particular about the way the simulation is done) so I may have missed something...
> 
> -Alexios
> 
> Note also the following:
> a. For T+1 there is not uncertainty about sigma (see http://unstarched.net/r-examples/rugarch/a-note-on-simulation-in-the-rugarch-package/
> if you are confused about this point).
> b. All distributions in rugarch (and their functions qdist, rdist, pdist, ddist) are based on the standardized (0,1) representation (all have the location-scale invariance property).
> 
> 
> ################################################################################
> for(i in 1:10)
> {
> print(i)
> windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1],
> end=times[376-25+i,1])
> fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid") print("rugarch fitting done") residuals <- sapply(fit, residuals, standardize=TRUE) shape <- sapply(fit, coef) shape <- shape[5,] # # I don't know where you found pged, but the correct version is # pdist("ged",....) UniformResiduals <- sapply(1:ncol(residuals), function(i){pdist("ged", residuals[,i], mu=0, sigma=1, shape = shape[i])}) rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> familyset=familyset)
> print(paste(i,"RVine fitting done"))
> set.seed(100)
> sim <- RVineSim(100, rvine)
> print(paste(i,"RVine simulation done"))
> for(k in 1:20)
> {
> # I don't know where you found qged, but the correct version is # qdist("ged",....)
> residuals2 <- qdist("ged", mu=0, sigma=1, sim[,k], shape = shape[k]) # Comment: custom.dist$name must be a character (anything but not NA or # NULL).
> # Also use startMethod="sample" to use the last values of the estimated # object for the simulation rather than the unconditional values.
> rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = list(name="sample", distfit=matrix(residuals2, ncol=100)),
> startMethod="sample")
> # cleaner to calculate at each step
> rvine_fitted[i,,k] <- as.numeric(fitted(rvine_sim)) rvine_sigma[i,,k] <- as.numeric(sigma(rvine_sim)) VaR01[i,,k] <- rvine_fitted[i,,k] + rvine_sigma[i,,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k]) VaR05[i,,k] <- rvine_fitted[i,,k] + rvine_sigma[i,,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k]) } print(paste(i, "rugarch forecast done")) } ################################################################################
> 
> On 22/08/2014 00:44, Ole Bueker wrote:
> > Sorry for sending another message, but it seems like there is still an 
> > error in the formatting of the code..
> > I'll share the R code using dropbox, in case the code is still not 
> > readable in this
> > email: https://www.dropbox.com/s/rc9kpanule52zu8/minimum_working.R
> > 
> > #Load data and define variables
> > returns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", 
> > header=TRUE, sep=",", format="%d-%m-%y")
> > model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)
> > ),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.mo
> > del="ged") times <- as.data.frame(time(returns_crisis))
> > windows <- matrix(0, 20, 250)
> > familyset <- c(1:5, 7, 10, 13, 14, 17, 20) sim <- array(0, dim = 
> > c(100, 20))
> > residuals2 <- array(0, dim = c(100, 20)) rvine_fitted <- array(0, dim 
> > = c(10,100,20)) rvine_sigma <- array(0, dim = c(10,100,20))
> > VaR01 = VaR05 = array(0, dim = c(10,100,20))
> > 
> > #Main calculation
> > for(i in 1:10)
> > {
> >   print(i)
> >   windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1],
> > end=times[376-25+i,1])     # Step 1
> >   fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")
> >   print("rugarch fitting done")
> > 
> >   residuals <- sapply(fit, residuals, standardize=TRUE)  # Step 2     
> >   shape <- sapply(fit, coef)
> >   shape <- shape[5,]
> > 
> >   UniformResiduals <- pged(residuals, nu = shape)     # Step 3
> >   if(any(UniformResiduals > 0.99999))
> >   {
> >     ix = which(UniformResiduals > 0.99999)
> >    UniformResiduals [ix] = 0.99999
> >   }
> >   if(any(UniformResiduals < .Machine$double.eps))
> >   {
> >     ix = which(UniformResiduals < (1.5*.Machine$double.eps))
> >     UniformResiduals [ix] = .Machine$double.eps
> >   }
> >   rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > familyset=familyset)   # Step 4
> >   print(paste(i,"RVine fitting done"))
> >   for(j in 1:100)
> >   {
> >   sim[j,] <- RVineSim(1, rvine)      # Step 5
> >   }
> >   print(paste(i,"RVine simulation done"))
> >   for(k in 1:20)
> >   {
> >   residuals2[,] <- qged(sim[,], nu = shape[k])         # Step 6
> > 
> >   residuals_temp <- residuals2[,k]
> >   rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = 
> > list(name=NA, distfit=residuals_temp))  # Step 7
> > 
> >   rvine_fitted[i,,k] <- fitted(rvine_sim)  # Step 8
> >   rvine_sigma[i,,k] <- sigma(rvine_sim)  
> >   if (i==10)
> >     {
> >     for(j in 1:100)
> >     {
> >     VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * 
> > qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k])  # Step 9
> >     VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * 
> > qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])
> >     }
> >     }else {}
> >   }
> >   print(paste(i, "rugarch forecast done")) }
> > 
> > 
> > #Cleanup
> > remove(i, j, k, ix, familyset, model, sim, rvine_sim, residuals,
> > residuals_temp)
> > 
> > 
> > ----------------------------------------------------------------------
> > --
> > 
> >> From: ole.bueker at outlook.com
> >> To: alexios at 4dscape.com; r-sig-finance at r-project.org
> >> Date: Fri, 22 Aug 2014 01:10:55 +0200
> >> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> >>
> >>
> >>
> >>
> >> I have no idea what happened to the formatting, looked fine to me 
> >> when
> > I typed it in Outlook.
> >> Here's the revised version, with amended code so that it is minimally
> > reproducible (for this purpose, I will only use the first 25 
> > companies,
> > 100 simulations for 10 trading days).
> >> The revised code should take around 5 minutes,
> >>
> >>
> >> Again, heres the code summary:
> >> 1. Fit GARCH models to each series.
> >> 2. Extract standardized returns.
> >> 3. Transform standardized returns to uniform marginals using the
> > parametric IFM method by Joe.
> >> 4. Fit vine copulas.
> >> 5. Generate 100 1-day ahead forecasts from the vine copulas.
> >> 6. Reverse transform the simulated values.
> >> 7. Use these transformed forecasts in ugarchsim (using custom.dist) 
> >> 8. Extract forecasted mu and sigma.
> >> 9. Calculate 95% and 99% VaR.
> >>
> >> The full code:
> >> #Load data and define variablesreturns <- read.zoo("E:/Dropbox/my
> > own/Programming/R/returns.csv", header=TRUE, sep=",", 
> > format="%d-%m-%y")
> >>
> > model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)
> > ),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.mo
> > del="ged")times
> > <- as.data.frame(time(returns_crisis))windows <- matrix(0, 20, 
> > 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)sim <- array(0, dim = 
> > c(100, 20))residuals2 <- array(0, dim = c(100, 20))rvine_fitted <- 
> > array(0, dim = c(10,100,20))rvine_sigma <- array(0, dim =
> > c(10,100,20))VaR01 = VaR05 = array(0, dim = c(10,100,20))
> >> #Main calculation
> >> for(i in 1:10){ print(i) windows <- window(returns_crisis[,1:20],
> > start=times[376-250-24+i,1], end=times[376-25+i,1]) # Step 1 fit <- 
> > lapply(windows, ugarchfit, spec=model, solver="hybrid") print("rugarch 
> > fitting done")
> >> residuals <- sapply(fit, residuals, standardize=TRUE) # Step 2 shape
> > <- sapply(fit, coef) shape <- shape[5,]
> >> UniformResiduals <- pged(residuals, nu = shape) # Step 3
> > if(any(UniformResiduals > 0.99999)) { ix = which(UniformResiduals >
> > 0.99999) UniformResiduals [ix] = 0.99999 } if(any(UniformResiduals <
> > .Machine$double.eps)) { ix = which(UniformResiduals <
> > (1.5*.Machine$double.eps)) UniformResiduals [ix] = .Machine$double.eps 
> > } rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > familyset=familyset) # Step 4 print(paste(i,"RVine fitting done")) 
> > for(j in 1:100) { sim[j,] <- RVineSim(1, rvine) # Step 5 } 
> > print(paste(i,"RVine simulation done")) for(k in 1:20) { residuals2[,]
> > <- qged(sim[,], nu = shape[k]) # Step 6
> >> residuals_temp <- residuals2[,k] rvine_sim <- ugarchsim(fit[[k]],
> > n.sim=1, m.sim=100, custom.dist = list(name=NA, 
> > distfit=residuals_temp)) # Step 7
> >> rvine_fitted[i,,k] <- fitted(rvine_sim) # Step 8 rvine_sigma[i,,k] <-
> > sigma(rvine_sim) if (i==10) { for(j in 1:100) { VaR01[,j,k] <- 
> > rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, 
> > sigma=1, shape = shape[k]) # Step 9 VaR05[,j,k] <- rvine_fitted[,j,k] 
> > + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = 
> > shape[k]) } }else {} } print(paste(i, "rugarch forecast done"))}
> >>
> >> #Cleanupremove(i, j, k, ix, familyset, model, sim, rvine_sim,
> > residuals, residuals_temp)
> >>
> >> Hope this time everything is formatted correctly!
> >> After running the code, I export VaR01 and VaR05 to Excel, and notice
> > that there's usually quite a few positive values.
> >> This seems to happen because sometimes the sigma is too low compare 
> >> to
> > the (positive) forecast, and therefore the VaR stays in the positive.
> >> My guess is that either there's a mistake in my code at step 3 (maybe
> > the wrong shape is used?).Or more likely there's a mistake at step 6/7 
> > (wrong transformation or transformed values are not inserted correctly 
> > into ugarchsim).
> >> > Date: Thu, 21 Aug 2014 18:21:49 +0100
> >> > From: alexios at 4dscape.com
> >> > To: ole.bueker at outlook.com; r-sig-finance at r-project.org
> >> > Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> >> >
> >> > Ole,
> >> >
> >> > The email you've sent is really badly formatted and all over the place.
> >> >
> >> > 1. Try to send a well structured text-only email (with no special 
> >> > characters).
> >> > 2. Make an effort to send a minimally reproducible example.
> >> > Telling us that your problem took 8 hours to run is not the way to go.
> >> > Take a small subsample of your data which generates the behavior 
> >> > you want to highlight (try to find one that does), and use that so 
> >> > that we can investigate with minimal fuss.
> >> >
> >> > -Alexios
> >> >
> >> > On 21/08/2014 17:50, Ole Bueker wrote:
> >> > > Anyway, here s my code so far:# Load Data and define variables 
> >> > > returns <- read.zoo("E:/Dropbox/my 
> >> > > own/Programming/R/returns.csv",
> > header=TRUE, sep=",",
> > format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH"
> > ,garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALS
> > E),distribution.model="ged")times
> > <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset
> > <- c(1:5, 7, 10, 13, 14, 17, 20) # The vine copulas to be testedsim <- 
> > array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000, 
> > 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <- 
> > array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = 
> > c(25,1000,112))
> >> > >
> >> > > #Main calculation
> >> > > for(i in 1:25){ print(i) windows <- window(returns_crisis,
> > start=times[376-250-24+i,1], end=times[376-25+i,1]) #Define the moving 
> > window fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid") 
> > #Fit the garch models print("rugarch fitting done") residuals <- 
> > sapply(fit, residuals, standardize=TRUE) #Extract residuals & shape 
> > parameters shape <- sapply(fit, coef) shape <- shape[5,] 
> > UniformResiduals <- pged(residuals, nu = shape) #Transform residuals 
> > into uniform marginals if(any(UniformResiduals > 0.99999)) { ix = 
> > which(UniformResiduals > 0.99999) UniformResiduals [ix] = 0.99999 } 
> > if(any(UniformResiduals < .Machine$double.eps)) { ix = 
> > which(UniformResiduals < (1.5*.Machine$double.eps)) UniformResiduals 
> > [ix] =
> >> > .Machine$double.eps } rvine <-
> > RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > familyset=familyset) #Fit the Vine copulas print(paste(i,"RVine 
> > fitting
> > done")) for(j in 1:1000) #Simulate 1000 1-day ahead using VineCopula { 
> > sim[j,] <- RVineSim(1, rvine) # 1000 x 112 matrix of forecasts 
> > }print(paste(i,"RVine simulation done")) for(k in 1:112) #Next:
> > ugarchsimulation for all 112 companies { residuals2[,] <- qged(sim[,], 
> > nu = shape[k])
> >> > # 1000 x 112 matrix of standardized residuals residuals_temp <-
> > residuals2[,k] # 1000 x 1 vector of standardized residuals for 
> > individual company rvine_sim <- ugarchsim(fit[[k]], n.sim=1, 
> > m.sim=1000, custom.dist = list(name=NA, distfit=residuals_temp)) #1000 
> > simulations using the standardized residuals from Vine copula models 
> > for ugarchfit rvine_fitted[i,,k] <- fitted(rvine_sim) #Extract 
> > forecasted values - 25 x 1000 x 112 rvine_sigma[i,,k] <- 
> > sigma(rvine_sim) #Extract forecasted sigmas - 25 x 1000 x 112 for(j in 
> > 1:1000)
> >> > #Next: Value at risk { VaR01[,j,k] <- rvine_fitted[,j,k] +
> > rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = 
> > shape[k]) #Value at risk for 99% quantile VaR05[,j,k] <- 
> > rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, 
> > sigma=1, shape = shape[k]) #Value at risk for 95% quantile } 
> > }}remove(i, j, k) #Cleanupremove(windows, fit, residuals, shape, 
> > residuals2, residuals_temp, rvine, sim, rvine_sim) #Cleanup Hope I 
> > didn t make any mistakes in my approach, but it seems like this is the 
> >  standard  copula
> > + rugarch approach   if anyone is familiar with this, I am open to
> > suggestions on how to speed up the si
> >> > mulations.
> >> > > So far, so good   the problem I am facing now:
> >> > > Some (only a few) of my value at risk values are positive..I have
> > manually checked and it seems like the fitted value is much larger 
> > than the sigma, so Value at Risk is positive   which doesn t really 
> > make any economic sense to me.
> >> > > Here s a dropbox link to the returns.csv, in case anyone is
> > interested in running my code:
> > https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv
> >> > >
> >> > > Best Regards,
> >> > > Ole
> >> > > [[alternative HTML version deleted]]
> >>
> >>
> >> [[alternative HTML version deleted]]
> >>
> >> _______________________________________________
> >> R-SIG-Finance at r-project.org mailing list 
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> >> -- Subscriber-posting only. If you want to post, subscribe first.
> >> -- Also note that this is not the r-help list where general R
> > questions should go.
> 
 		 	   		   		 	   		  
	[[alternative HTML version deleted]]


From kw1958 at gmail.com  Fri Aug 22 16:38:23 2014
From: kw1958 at gmail.com (Keith S Weintraub)
Date: Fri, 22 Aug 2014 10:38:23 -0400
Subject: [R-SIG-Finance] Easiest way to create a schedule of quarterly
	LIBOR dates in RQuantLib
Message-ID: <BC7283E8-FAC5-4415-9B3C-0F07FD967747@gmail.com>

Brian,
I must have missed your reply to my question.

Sorry I wasn't more specific. I am very familiar with LIBOR swaps and other derivative contracts. Despite the fact that I wasn't very informative in the description of my question. I have built this type of code in C, and C++ in the past. I would like to avoid doing so again.

What I would like to know is what is the best way to generate a date schedule, as you have mentioned in your reply to my original post,  for a standard 3-month LIBOR interest rate swap.

A nice turnkey function where I can change the length of the swap (with a potential stub) and also switch between 1-month, 3-month, 6-month and 1-year LIBOR would be great. I assume holiday calendars would be part of the solution.

Additional functionality for settlement dates would be a bonus.

If it's doable in RQuantLib great. If there is another package with that functionality that's fine.

I have looked at the RQuantLib docs and probably have mis-understood the functionality therein.

Pointers, code, etc are welcome. 

Thanks so much for your help and time,
All the best,
KW



-----------------------

You didn't say you were looking for LIBOR *swaps*.  You also didn't say 
what tenor you were looking for.

LIBOR is quoted daily in overnight, 3-month, 6 month, and 1-year tenors 
(at least, there may be more).

There are many, many derivative and loan contracts and OTC products 
marked to LIBOR or valued from it, so you need to be much more specific.

If you want cash flow payable dates for an ISDA standard 3-month LIBOR 
interest rate swap, you need to say that, specifically (and what you're 
swapping against, of course).  If you want something else, then perhaps 
you need to sort out your terminology so that you can be specific.

Regards,

Brian

On 08/20/2014 07:39 AM, Keith S Weintraub wrote:
> It's a convention for date schedules for interest rate swaps.
> 
> I don't remember all the details but it takes into account holidays and weekends. I think it uses a "modified following" business convention.
> 
> Payments are made using Actual/360 day counts.
> 
> My preference would be to have a function that takes a start-date/end-date and just generate the schedule.
> 
> I am not sure if the definitions are in the ISDA docs or http://www.bba.org.uk/ or somewhere else.
> 
> Thanks,
> KW
> 
> 
> --
> 
> On Aug 19, 2014, at 7:14 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> 
>> Keith,
>> 
>> I'm not particularly familiar with Libor schedules. Do they follow a
>> particular pattern/schedule/etc.?
>> 
>> -Ilya
>> 
>> On Tue, Aug 19, 2014 at 7:09 PM, Keith S Weintraub <kw1958 at gmail.com> wrote:
>>> Folks,
>>> 
>>> I want to create a schedule for quarterly (or other frequency) LIBOR dates. I assume it can be done in RQuantLib.
>>> 
>>> Note that I have read the "calendar" entry in the docs but I didn't see an EASY way to do what I want.
>>> 
>>> The functionality seems to be there but I would like to know the best practice for doing so.
>>> 
>>> A pointer to an example would be wonderful.
>>> 
>>> Thanks so much for your time,
>>> Best,
>>> KW



------------------------------



--


--


From stergenator at gmail.com  Fri Aug 22 22:08:04 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Fri, 22 Aug 2014 13:08:04 -0700
Subject: [R-SIG-Finance] quantstrat chain rule type
Message-ID: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>

Hi, I am having trouble getting a simple profit taking order to work via a
chaining rule.  In the contrived example below, I force a long entry of 2
shares.  Then I expect 1 share to be sold after a 1 point move (i.e. the
"profit taker"), and then I expect the final share to be sold when price
falls below the SMA50.

While I do not see the profit taker order get executed, the price falling
below the SMA50 works as expected for all remaining shares.

I would appreciate it if someone could point out what I am doing wrong with
the chaining rule.

Thank you,
--
sm
Stergios Marinopoulos


library(quantstrat)

# Boiler Plate
tickerSymbol   = "GE"
strategyStr  = 'TwoUnits'
GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
auto.assign = FALSE)
GE$SMA50  = SMA(Cl(GE), n = 50)
GE$CrossBack  = Cl(GE) - GE$SMA50
GE = GE["2012-07-15/"]
magicGoLongDay = "2012-07-23"

currency("USD")
stock(tickerSymbol, currency="USD", multiplier=1)
rm.strat(strategyStr)
initDate = index(GE[1]) - 1
initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
currency="USD")
initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
initEq=1e4, currency="USD")
initOrders(portfolio=strategyStr, initDate=initDate)
strategy(strategyStr, store=TRUE)

zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
col=6);addTA(zeros, on=2, col=7);")

# The indicator function.  Force a TRUE value on 6/5/2012
myIndicator <- function(n=2)
{
  indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
  names(indicator) = "indValue"
  indicator[magicGoLongDay, "indValue"] = 1
  return( indicator[, "indValue"] )
}

add.indicator(strategy=strategyStr, name="myIndicator",
arguments=list(n=2), label="indLabel")

add.signal(
  strategy=strategyStr,
  name="sigThreshold",
  arguments=list(
    column       = "CrossBack",
    relationship = "lt",
    threshold    = 0,
    cross        = TRUE
  ),
  label="sig.price.lt.sma50"
)

add.signal(
  strategy=strategyStr,
  name="sigThreshold",
  arguments=list(
    column       = "indValue.indLabel",
    relationship = "eq",
    threshold    = 1,
    cross        = TRUE
  ),
  label="goLong"
)


# Exit remaining when price crosses below on SMA50
add.rule(strategy=strategyStr, name='ruleSignal',
  arguments = list(
    sigcol      = "sig.price.lt.sma50",
    sigval      = TRUE,
    replace     = FALSE,
    orderside   = 'long',
    ordertype   = 'market',
    orderqty    = 'all',
    prefer      = 'Open'
  ),
  type    = 'exit',
  label   = 'ExitPriceLTSMA50'
)

# Exit 1 unit as an initial profit target
add.rule(strategy=strategyStr, name='ruleSignal',
  arguments = list(
    sigcol    = 'goLong',
    sigval    = TRUE,
    replace   = FALSE,
    orderside = 'long',
    ordertype = 'limit',
#   ruletype  = 'exit',   # Is this order ambiguous?
    tmult     = FALSE,
    threshold = 1.00,
    orderqty  = 1,
    prefer    = 'Open'
  ),
  type    = 'chain',
  parent  = 'EnterLong',
  label   = 'TakeProfit'
)

# Go long 2 shares when we have long signal
add.rule(strategy=strategyStr, name = 'ruleSignal',
  arguments = list(
    sigcol    = 'goLong',
    sigval    = TRUE,
    orderside = 'long' ,
    ordertype = 'market',
    orderqty  = 2,
    prefer    = 'Open'
  ),
  type  = 'enter',
  label = 'EnterLong'
)

out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
verbose=TRUE, debug=TRUE)

# Calculate P&L and resulting equity with blotter
dateRange=paste(
           as.character(index(first(GE))-1),
           '::',
           as.character(index(last(GE))+1),
           sep='')

updatePortf(strategyStr, Dates = dateRange)
updateAcct(strategyStr,  Dates = dateRange)
updateEndEq(strategyStr, Dates = dateRange)

obook        = getOrderBook(portfolio=strategyStr)
transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)

	[[alternative HTML version deleted]]


From ilya.kipnis at gmail.com  Fri Aug 22 22:38:04 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Fri, 22 Aug 2014 16:38:04 -0400
Subject: [R-SIG-Finance] quantstrat chain rule type
In-Reply-To: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
References: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
Message-ID: <CA+oJuEEpqxhpjDphTB8DxALJqfPGtOzi5AxMms7dAsyBpspN7Q@mail.gmail.com>

Stergios,

Can you rerun your code with orderqty set to -1 for your chain rule
and see if that solves it?

-Ilya

On Fri, Aug 22, 2014 at 4:08 PM, stergios marinopoulos
<stergenator at gmail.com> wrote:
> Hi, I am having trouble getting a simple profit taking order to work via a
> chaining rule.  In the contrived example below, I force a long entry of 2
> shares.  Then I expect 1 share to be sold after a 1 point move (i.e. the
> "profit taker"), and then I expect the final share to be sold when price
> falls below the SMA50.
>
> While I do not see the profit taker order get executed, the price falling
> below the SMA50 works as expected for all remaining shares.
>
> I would appreciate it if someone could point out what I am doing wrong with
> the chaining rule.
>
> Thank you,
> --
> sm
> Stergios Marinopoulos
>
>
> library(quantstrat)
>
> # Boiler Plate
> tickerSymbol   = "GE"
> strategyStr  = 'TwoUnits'
> GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
> auto.assign = FALSE)
> GE$SMA50  = SMA(Cl(GE), n = 50)
> GE$CrossBack  = Cl(GE) - GE$SMA50
> GE = GE["2012-07-15/"]
> magicGoLongDay = "2012-07-23"
>
> currency("USD")
> stock(tickerSymbol, currency="USD", multiplier=1)
> rm.strat(strategyStr)
> initDate = index(GE[1]) - 1
> initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
> currency="USD")
> initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
> initEq=1e4, currency="USD")
> initOrders(portfolio=strategyStr, initDate=initDate)
> strategy(strategyStr, store=TRUE)
>
> zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
> chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
> col=6);addTA(zeros, on=2, col=7);")
>
> # The indicator function.  Force a TRUE value on 6/5/2012
> myIndicator <- function(n=2)
> {
>   indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
>   names(indicator) = "indValue"
>   indicator[magicGoLongDay, "indValue"] = 1
>   return( indicator[, "indValue"] )
> }
>
> add.indicator(strategy=strategyStr, name="myIndicator",
> arguments=list(n=2), label="indLabel")
>
> add.signal(
>   strategy=strategyStr,
>   name="sigThreshold",
>   arguments=list(
>     column       = "CrossBack",
>     relationship = "lt",
>     threshold    = 0,
>     cross        = TRUE
>   ),
>   label="sig.price.lt.sma50"
> )
>
> add.signal(
>   strategy=strategyStr,
>   name="sigThreshold",
>   arguments=list(
>     column       = "indValue.indLabel",
>     relationship = "eq",
>     threshold    = 1,
>     cross        = TRUE
>   ),
>   label="goLong"
> )
>
>
> # Exit remaining when price crosses below on SMA50
> add.rule(strategy=strategyStr, name='ruleSignal',
>   arguments = list(
>     sigcol      = "sig.price.lt.sma50",
>     sigval      = TRUE,
>     replace     = FALSE,
>     orderside   = 'long',
>     ordertype   = 'market',
>     orderqty    = 'all',
>     prefer      = 'Open'
>   ),
>   type    = 'exit',
>   label   = 'ExitPriceLTSMA50'
> )
>
> # Exit 1 unit as an initial profit target
> add.rule(strategy=strategyStr, name='ruleSignal',
>   arguments = list(
>     sigcol    = 'goLong',
>     sigval    = TRUE,
>     replace   = FALSE,
>     orderside = 'long',
>     ordertype = 'limit',
> #   ruletype  = 'exit',   # Is this order ambiguous?
>     tmult     = FALSE,
>     threshold = 1.00,
>     orderqty  = 1,
>     prefer    = 'Open'
>   ),
>   type    = 'chain',
>   parent  = 'EnterLong',
>   label   = 'TakeProfit'
> )
>
> # Go long 2 shares when we have long signal
> add.rule(strategy=strategyStr, name = 'ruleSignal',
>   arguments = list(
>     sigcol    = 'goLong',
>     sigval    = TRUE,
>     orderside = 'long' ,
>     ordertype = 'market',
>     orderqty  = 2,
>     prefer    = 'Open'
>   ),
>   type  = 'enter',
>   label = 'EnterLong'
> )
>
> out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
> verbose=TRUE, debug=TRUE)
>
> # Calculate P&L and resulting equity with blotter
> dateRange=paste(
>            as.character(index(first(GE))-1),
>            '::',
>            as.character(index(last(GE))+1),
>            sep='')
>
> updatePortf(strategyStr, Dates = dateRange)
> updateAcct(strategyStr,  Dates = dateRange)
> updateEndEq(strategyStr, Dates = dateRange)
>
> obook        = getOrderBook(portfolio=strategyStr)
> transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From ilya.kipnis at gmail.com  Fri Aug 22 22:46:25 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Fri, 22 Aug 2014 16:46:25 -0400
Subject: [R-SIG-Finance] quantstrat chain rule type
In-Reply-To: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
References: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
Message-ID: <CA+oJuEFveCau+mh5E9DyenGtiqMhkQ-pe8Sx-PnHesybT==4jA@mail.gmail.com>

Also, just to answer the question with a demo I know for sure works,
here's one with the take profit order working as intended.
require(quantstrat)
require(PerformanceAnalytics)

initDate="1990-01-01"
from="2003-01-01"
to=as.character(Sys.Date())
options(width=70)

options("getSymbols.warning4.0"=FALSE)
rm(list=ls(.blotter), envir=.blotter)
currency('USD')
Sys.setenv(TZ="UTC")
getSymbols("SPY", from=from, to=to)
stock(symbols, currency="USD", multiplier=1)

strategy.st <- portfolio.st <- account.st <- "chainExample"
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols=symbols, initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate,
currency='USD',initEq=initEq)
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)

add.indicator(strategy.st, name="RSI",
              arguments=list(price=quote(Cl(mktdata)), n=2),
              label="rsi")

add.signal(strategy.st, name="sigThreshold",
           arguments=list(column="rsi", threshold=10,
relationship="lt", cross=TRUE),
           label="entryLong")

add.signal(strategy.st, name="sigThreshold",
           arguments=list(column="rsi", threshold=70,
relationship="gt", cross=TRUE),
           label="exitLong")

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="entryLong", sigval=TRUE, ordertype="market",
                        orderside="long", replace=FALSE,
prefer="Open", orderqty=2,
                        orderset='orders'),
         type="enter", path.dep=TRUE, label="longEntry")

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="entryLong", sigval=TRUE, ordertype="limit",
                        orderside="long", replace=FALSE,
prefer="Open", orderqty=-1,
                        threshold=1, tmult=FALSE, orderset='orders'),
         type='chain', path.dep=TRUE, parent="longEntry", label="TPlong")

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="exitLong", sigval=TRUE, ordertype="market",
                        orderside="long", replace=FALSE,
prefer="Open", orderqty="all",
                        orderset='orders'),
         type='exit', path.dep=TRUE, label="usualExit")

#apply strategy
t1 <- Sys.time()
out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
t2 <- Sys.time()
print(t2-t1)

#set up analytics
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st,dateRange)
updateEndEq(account.st)

chart.Posn(portfolio.st, "SPY")
zoom_Chart("2005")

On Fri, Aug 22, 2014 at 4:08 PM, stergios marinopoulos
<stergenator at gmail.com> wrote:
> Hi, I am having trouble getting a simple profit taking order to work via a
> chaining rule.  In the contrived example below, I force a long entry of 2
> shares.  Then I expect 1 share to be sold after a 1 point move (i.e. the
> "profit taker"), and then I expect the final share to be sold when price
> falls below the SMA50.
>
> While I do not see the profit taker order get executed, the price falling
> below the SMA50 works as expected for all remaining shares.
>
> I would appreciate it if someone could point out what I am doing wrong with
> the chaining rule.
>
> Thank you,
> --
> sm
> Stergios Marinopoulos
>
>
> library(quantstrat)
>
> # Boiler Plate
> tickerSymbol   = "GE"
> strategyStr  = 'TwoUnits'
> GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
> auto.assign = FALSE)
> GE$SMA50  = SMA(Cl(GE), n = 50)
> GE$CrossBack  = Cl(GE) - GE$SMA50
> GE = GE["2012-07-15/"]
> magicGoLongDay = "2012-07-23"
>
> currency("USD")
> stock(tickerSymbol, currency="USD", multiplier=1)
> rm.strat(strategyStr)
> initDate = index(GE[1]) - 1
> initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
> currency="USD")
> initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
> initEq=1e4, currency="USD")
> initOrders(portfolio=strategyStr, initDate=initDate)
> strategy(strategyStr, store=TRUE)
>
> zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
> chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
> col=6);addTA(zeros, on=2, col=7);")
>
> # The indicator function.  Force a TRUE value on 6/5/2012
> myIndicator <- function(n=2)
> {
>   indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
>   names(indicator) = "indValue"
>   indicator[magicGoLongDay, "indValue"] = 1
>   return( indicator[, "indValue"] )
> }
>
> add.indicator(strategy=strategyStr, name="myIndicator",
> arguments=list(n=2), label="indLabel")
>
> add.signal(
>   strategy=strategyStr,
>   name="sigThreshold",
>   arguments=list(
>     column       = "CrossBack",
>     relationship = "lt",
>     threshold    = 0,
>     cross        = TRUE
>   ),
>   label="sig.price.lt.sma50"
> )
>
> add.signal(
>   strategy=strategyStr,
>   name="sigThreshold",
>   arguments=list(
>     column       = "indValue.indLabel",
>     relationship = "eq",
>     threshold    = 1,
>     cross        = TRUE
>   ),
>   label="goLong"
> )
>
>
> # Exit remaining when price crosses below on SMA50
> add.rule(strategy=strategyStr, name='ruleSignal',
>   arguments = list(
>     sigcol      = "sig.price.lt.sma50",
>     sigval      = TRUE,
>     replace     = FALSE,
>     orderside   = 'long',
>     ordertype   = 'market',
>     orderqty    = 'all',
>     prefer      = 'Open'
>   ),
>   type    = 'exit',
>   label   = 'ExitPriceLTSMA50'
> )
>
> # Exit 1 unit as an initial profit target
> add.rule(strategy=strategyStr, name='ruleSignal',
>   arguments = list(
>     sigcol    = 'goLong',
>     sigval    = TRUE,
>     replace   = FALSE,
>     orderside = 'long',
>     ordertype = 'limit',
> #   ruletype  = 'exit',   # Is this order ambiguous?
>     tmult     = FALSE,
>     threshold = 1.00,
>     orderqty  = 1,
>     prefer    = 'Open'
>   ),
>   type    = 'chain',
>   parent  = 'EnterLong',
>   label   = 'TakeProfit'
> )
>
> # Go long 2 shares when we have long signal
> add.rule(strategy=strategyStr, name = 'ruleSignal',
>   arguments = list(
>     sigcol    = 'goLong',
>     sigval    = TRUE,
>     orderside = 'long' ,
>     ordertype = 'market',
>     orderqty  = 2,
>     prefer    = 'Open'
>   ),
>   type  = 'enter',
>   label = 'EnterLong'
> )
>
> out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
> verbose=TRUE, debug=TRUE)
>
> # Calculate P&L and resulting equity with blotter
> dateRange=paste(
>            as.character(index(first(GE))-1),
>            '::',
>            as.character(index(last(GE))+1),
>            sep='')
>
> updatePortf(strategyStr, Dates = dateRange)
> updateAcct(strategyStr,  Dates = dateRange)
> updateEndEq(strategyStr, Dates = dateRange)
>
> obook        = getOrderBook(portfolio=strategyStr)
> transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From stergenator at gmail.com  Fri Aug 22 23:19:48 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Fri, 22 Aug 2014 14:19:48 -0700
Subject: [R-SIG-Finance] Fwd:  quantstrat chain rule type
In-Reply-To: <CAM8YH=bosAYPMQW2Kr0ow=Dx+mjQDh3-xT8M5okTB_mj2tNHog@mail.gmail.com>
References: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
	<CA+oJuEEpqxhpjDphTB8DxALJqfPGtOzi5AxMms7dAsyBpspN7Q@mail.gmail.com>
	<CAM8YH=bosAYPMQW2Kr0ow=Dx+mjQDh3-xT8M5okTB_mj2tNHog@mail.gmail.com>
Message-ID: <CAM8YH=YijfmLbakKfiWcMYB832jcKBi81cdiMSrkfW-mm+_gsQ@mail.gmail.com>

(I mistakenly did not include r-sig-finance at r-project.org on the response.)


Hi Ilya,

I switched the orderqty as you suggested, but nothing changed.  That's
usually something I try when I question the total position quantity and in
my experience even if I had the wrong sign, it would still change the
quantity.  But in this case, nothing changed.

I do have the macd.R demo from the source working, which has a
commented-out stoptrailing chaining rule.  I'll check out your example
closely, and since it uses a limit order hopefully it should apply more
directly to my case.

Thanks for the ideas,

BTW, I was reading http://quantstrattrader.wordpress.com/ earlier in day
looking for clues to my problem.  That's a nice site.  Good work.




--
sm
Stergios Marinopoulos


On Fri, Aug 22, 2014 at 1:38 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:

> Stergios,
>
> Can you rerun your code with orderqty set to -1 for your chain rule
> and see if that solves it?
>
> -Ilya
>
> On Fri, Aug 22, 2014 at 4:08 PM, stergios marinopoulos
> <stergenator at gmail.com> wrote:
> > Hi, I am having trouble getting a simple profit taking order to work via
> a
> > chaining rule.  In the contrived example below, I force a long entry of 2
> > shares.  Then I expect 1 share to be sold after a 1 point move (i.e. the
> > "profit taker"), and then I expect the final share to be sold when price
> > falls below the SMA50.
> >
> > While I do not see the profit taker order get executed, the price falling
> > below the SMA50 works as expected for all remaining shares.
> >
> > I would appreciate it if someone could point out what I am doing wrong
> with
> > the chaining rule.
> >
> > Thank you,
> > --
> > sm
> > Stergios Marinopoulos
> >
> >
> > library(quantstrat)
> >
> > # Boiler Plate
> > tickerSymbol   = "GE"
> > strategyStr  = 'TwoUnits'
> > GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
> > auto.assign = FALSE)
> > GE$SMA50  = SMA(Cl(GE), n = 50)
> > GE$CrossBack  = Cl(GE) - GE$SMA50
> > GE = GE["2012-07-15/"]
> > magicGoLongDay = "2012-07-23"
> >
> > currency("USD")
> > stock(tickerSymbol, currency="USD", multiplier=1)
> > rm.strat(strategyStr)
> > initDate = index(GE[1]) - 1
> > initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
> > currency="USD")
> > initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
> > initEq=1e4, currency="USD")
> > initOrders(portfolio=strategyStr, initDate=initDate)
> > strategy(strategyStr, store=TRUE)
> >
> > zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
> > chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
> > col=6);addTA(zeros, on=2, col=7);")
> >
> > # The indicator function.  Force a TRUE value on 6/5/2012
> > myIndicator <- function(n=2)
> > {
> >   indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
> >   names(indicator) = "indValue"
> >   indicator[magicGoLongDay, "indValue"] = 1
> >   return( indicator[, "indValue"] )
> > }
> >
> > add.indicator(strategy=strategyStr, name="myIndicator",
> > arguments=list(n=2), label="indLabel")
> >
> > add.signal(
> >   strategy=strategyStr,
> >   name="sigThreshold",
> >   arguments=list(
> >     column       = "CrossBack",
> >     relationship = "lt",
> >     threshold    = 0,
> >     cross        = TRUE
> >   ),
> >   label="sig.price.lt.sma50"
> > )
> >
> > add.signal(
> >   strategy=strategyStr,
> >   name="sigThreshold",
> >   arguments=list(
> >     column       = "indValue.indLabel",
> >     relationship = "eq",
> >     threshold    = 1,
> >     cross        = TRUE
> >   ),
> >   label="goLong"
> > )
> >
> >
> > # Exit remaining when price crosses below on SMA50
> > add.rule(strategy=strategyStr, name='ruleSignal',
> >   arguments = list(
> >     sigcol      = "sig.price.lt.sma50",
> >     sigval      = TRUE,
> >     replace     = FALSE,
> >     orderside   = 'long',
> >     ordertype   = 'market',
> >     orderqty    = 'all',
> >     prefer      = 'Open'
> >   ),
> >   type    = 'exit',
> >   label   = 'ExitPriceLTSMA50'
> > )
> >
> > # Exit 1 unit as an initial profit target
> > add.rule(strategy=strategyStr, name='ruleSignal',
> >   arguments = list(
> >     sigcol    = 'goLong',
> >     sigval    = TRUE,
> >     replace   = FALSE,
> >     orderside = 'long',
> >     ordertype = 'limit',
> > #   ruletype  = 'exit',   # Is this order ambiguous?
> >     tmult     = FALSE,
> >     threshold = 1.00,
> >     orderqty  = 1,
> >     prefer    = 'Open'
> >   ),
> >   type    = 'chain',
> >   parent  = 'EnterLong',
> >   label   = 'TakeProfit'
> > )
> >
> > # Go long 2 shares when we have long signal
> > add.rule(strategy=strategyStr, name = 'ruleSignal',
> >   arguments = list(
> >     sigcol    = 'goLong',
> >     sigval    = TRUE,
> >     orderside = 'long' ,
> >     ordertype = 'market',
> >     orderqty  = 2,
> >     prefer    = 'Open'
> >   ),
> >   type  = 'enter',
> >   label = 'EnterLong'
> > )
> >
> > out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
> > verbose=TRUE, debug=TRUE)
> >
> > # Calculate P&L and resulting equity with blotter
> > dateRange=paste(
> >            as.character(index(first(GE))-1),
> >            '::',
> >            as.character(index(last(GE))+1),
> >            sep='')
> >
> > updatePortf(strategyStr, Dates = dateRange)
> > updateAcct(strategyStr,  Dates = dateRange)
> > updateEndEq(strategyStr, Dates = dateRange)
> >
> > obook        = getOrderBook(portfolio=strategyStr)
> > transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)
> >
> >         [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From josh.m.ulrich at gmail.com  Sat Aug 23 17:38:54 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Sat, 23 Aug 2014 10:38:54 -0500
Subject: [R-SIG-Finance] Fwd: quantstrat chain rule type
In-Reply-To: <CAM8YH=YijfmLbakKfiWcMYB832jcKBi81cdiMSrkfW-mm+_gsQ@mail.gmail.com>
References: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
	<CA+oJuEEpqxhpjDphTB8DxALJqfPGtOzi5AxMms7dAsyBpspN7Q@mail.gmail.com>
	<CAM8YH=bosAYPMQW2Kr0ow=Dx+mjQDh3-xT8M5okTB_mj2tNHog@mail.gmail.com>
	<CAM8YH=YijfmLbakKfiWcMYB832jcKBi81cdiMSrkfW-mm+_gsQ@mail.gmail.com>
Message-ID: <CAPPM_gSte6YHK-TS5ZFbwMmTDaztnLbSZdPVy3jgSyCBP4LepA@mail.gmail.com>

Stergios,

In addition to Ilya's correction of orderqty = -1, you need to
explicitly set the timezone of your R session using:
Sys.setenv(TZ="UTC").

If you do not do this, then the blotter portfolio xts object will be
initialized with your current system's timezone, but the timezone on
the GE data is "UTC" because it has a "Date" class index.  That causes
the chain rule's parent order price lookup to fail (because the
timestamps do not match).

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Fri, Aug 22, 2014 at 4:19 PM, stergios marinopoulos
<stergenator at gmail.com> wrote:
> (I mistakenly did not include r-sig-finance at r-project.org on the response.)
>
>
> Hi Ilya,
>
> I switched the orderqty as you suggested, but nothing changed.  That's
> usually something I try when I question the total position quantity and in
> my experience even if I had the wrong sign, it would still change the
> quantity.  But in this case, nothing changed.
>
> I do have the macd.R demo from the source working, which has a
> commented-out stoptrailing chaining rule.  I'll check out your example
> closely, and since it uses a limit order hopefully it should apply more
> directly to my case.
>
> Thanks for the ideas,
>
> BTW, I was reading http://quantstrattrader.wordpress.com/ earlier in day
> looking for clues to my problem.  That's a nice site.  Good work.
>
>
>
>
> --
> sm
> Stergios Marinopoulos
>
>
> On Fri, Aug 22, 2014 at 1:38 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
>
>> Stergios,
>>
>> Can you rerun your code with orderqty set to -1 for your chain rule
>> and see if that solves it?
>>
>> -Ilya
>>
>> On Fri, Aug 22, 2014 at 4:08 PM, stergios marinopoulos
>> <stergenator at gmail.com> wrote:
>> > Hi, I am having trouble getting a simple profit taking order to work via
>> a
>> > chaining rule.  In the contrived example below, I force a long entry of 2
>> > shares.  Then I expect 1 share to be sold after a 1 point move (i.e. the
>> > "profit taker"), and then I expect the final share to be sold when price
>> > falls below the SMA50.
>> >
>> > While I do not see the profit taker order get executed, the price falling
>> > below the SMA50 works as expected for all remaining shares.
>> >
>> > I would appreciate it if someone could point out what I am doing wrong
>> with
>> > the chaining rule.
>> >
>> > Thank you,
>> > --
>> > sm
>> > Stergios Marinopoulos
>> >
>> >
>> > library(quantstrat)
>> >
>> > # Boiler Plate
>> > tickerSymbol   = "GE"
>> > strategyStr  = 'TwoUnits'
>> > GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
>> > auto.assign = FALSE)
>> > GE$SMA50  = SMA(Cl(GE), n = 50)
>> > GE$CrossBack  = Cl(GE) - GE$SMA50
>> > GE = GE["2012-07-15/"]
>> > magicGoLongDay = "2012-07-23"
>> >
>> > currency("USD")
>> > stock(tickerSymbol, currency="USD", multiplier=1)
>> > rm.strat(strategyStr)
>> > initDate = index(GE[1]) - 1
>> > initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
>> > currency="USD")
>> > initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
>> > initEq=1e4, currency="USD")
>> > initOrders(portfolio=strategyStr, initDate=initDate)
>> > strategy(strategyStr, store=TRUE)
>> >
>> > zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
>> > chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
>> > col=6);addTA(zeros, on=2, col=7);")
>> >
>> > # The indicator function.  Force a TRUE value on 6/5/2012
>> > myIndicator <- function(n=2)
>> > {
>> >   indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
>> >   names(indicator) = "indValue"
>> >   indicator[magicGoLongDay, "indValue"] = 1
>> >   return( indicator[, "indValue"] )
>> > }
>> >
>> > add.indicator(strategy=strategyStr, name="myIndicator",
>> > arguments=list(n=2), label="indLabel")
>> >
>> > add.signal(
>> >   strategy=strategyStr,
>> >   name="sigThreshold",
>> >   arguments=list(
>> >     column       = "CrossBack",
>> >     relationship = "lt",
>> >     threshold    = 0,
>> >     cross        = TRUE
>> >   ),
>> >   label="sig.price.lt.sma50"
>> > )
>> >
>> > add.signal(
>> >   strategy=strategyStr,
>> >   name="sigThreshold",
>> >   arguments=list(
>> >     column       = "indValue.indLabel",
>> >     relationship = "eq",
>> >     threshold    = 1,
>> >     cross        = TRUE
>> >   ),
>> >   label="goLong"
>> > )
>> >
>> >
>> > # Exit remaining when price crosses below on SMA50
>> > add.rule(strategy=strategyStr, name='ruleSignal',
>> >   arguments = list(
>> >     sigcol      = "sig.price.lt.sma50",
>> >     sigval      = TRUE,
>> >     replace     = FALSE,
>> >     orderside   = 'long',
>> >     ordertype   = 'market',
>> >     orderqty    = 'all',
>> >     prefer      = 'Open'
>> >   ),
>> >   type    = 'exit',
>> >   label   = 'ExitPriceLTSMA50'
>> > )
>> >
>> > # Exit 1 unit as an initial profit target
>> > add.rule(strategy=strategyStr, name='ruleSignal',
>> >   arguments = list(
>> >     sigcol    = 'goLong',
>> >     sigval    = TRUE,
>> >     replace   = FALSE,
>> >     orderside = 'long',
>> >     ordertype = 'limit',
>> > #   ruletype  = 'exit',   # Is this order ambiguous?
>> >     tmult     = FALSE,
>> >     threshold = 1.00,
>> >     orderqty  = 1,
>> >     prefer    = 'Open'
>> >   ),
>> >   type    = 'chain',
>> >   parent  = 'EnterLong',
>> >   label   = 'TakeProfit'
>> > )
>> >
>> > # Go long 2 shares when we have long signal
>> > add.rule(strategy=strategyStr, name = 'ruleSignal',
>> >   arguments = list(
>> >     sigcol    = 'goLong',
>> >     sigval    = TRUE,
>> >     orderside = 'long' ,
>> >     ordertype = 'market',
>> >     orderqty  = 2,
>> >     prefer    = 'Open'
>> >   ),
>> >   type  = 'enter',
>> >   label = 'EnterLong'
>> > )
>> >
>> > out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
>> > verbose=TRUE, debug=TRUE)
>> >
>> > # Calculate P&L and resulting equity with blotter
>> > dateRange=paste(
>> >            as.character(index(first(GE))-1),
>> >            '::',
>> >            as.character(index(last(GE))+1),
>> >            sep='')
>> >
>> > updatePortf(strategyStr, Dates = dateRange)
>> > updateAcct(strategyStr,  Dates = dateRange)
>> > updateEndEq(strategyStr, Dates = dateRange)
>> >
>> > obook        = getOrderBook(portfolio=strategyStr)
>> > transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > _______________________________________________
>> > R-SIG-Finance at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> > -- Subscriber-posting only. If you want to post, subscribe first.
>> > -- Also note that this is not the r-help list where general R questions
>> should go.
>>
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From ole.bueker at outlook.com  Sun Aug 24 04:47:03 2014
From: ole.bueker at outlook.com (Ole Bueker)
Date: Sun, 24 Aug 2014 04:47:03 +0200
Subject: [R-SIG-Finance] rugarch + VineCopula for value at risk
In-Reply-To: <DUB130-W87A851B0E9C488F21351F09AD00@phx.gbl>
References: <DUB130-W79B0628EC78D4E275B98609AD30@phx.gbl>,
	, , <53F62AAD.4040604@4dscape.com>, ,
	<DUB130-W87BD8F5C39DD05A65714229AD30@phx.gbl>, ,
	<DUB130-W11EE90224BE95200C37C629AD30@phx.gbl>, ,
	<DUB130-W701FACF50C3B45D9E529219AD30@phx.gbl>, ,
	<53F6AD6E.9040809@4dscape.com>, ,
	<DUB405-EAS2799C3E7555B3482BE00E96B8D00@phx.gbl>, ,
	<DUB130-W9AF517AA6210528066EB7B8D00@phx.gbl>,
	<DUB130-W87A851B0E9C488F21351F09AD00@phx.gbl>
Message-ID: <DUB130-W4131FB678216BF53F188FA9ADE0@phx.gbl>

Okay, I have now successfully run the simulations and have obtained + saved the mean fitted values, the mean sigmas as well as the VaR for the means of the individual 112 companies.
However, I am not quite sure how I can calculcate the VaR of a equally-weighted portfolio consisting of the 112 companies.

Here is my current approach (modified to be working with the MWE posted before):
1. Calculate the mean fitted and mean sigma for each forecasted day for all 112 companies.rvine_fitted_mean = rvine_sigma_mean = array(NA, dim=c(10,20))
for(i in 1:10){for(k in 1:20) {    rvine_fitted_mean[i,k] <- mean(rvine_fitted[i,,k])rvine_sigma_mean[i,k] <- mean(rvine_sigma[i,,k])}}remove(i,k)
2. Calculate portfolio sigma, fitted and VaR.
rvine_portfolio_VaR01 = rvine_portfolio_VaR05 = array(NA, dim=c(10))rvine_portfolio_fitted = rvine_portfolio_sigma = array(NA, dim=c(10))sigmas <- array(NA, dim=c(10,20,20))w = 1/112
for(i in 1:10){for(j in 1:20){for(l in 1:20){sigmas[i,j,l] <- w*w*rvine_sigma_mean[i,j]*rvine_sigma_mean[i,l]*cor(rvine_fitted_mean[,j], rvine_fitted_mean[,l])}}rvine_portfolio_sigma[i] <- sum(sigmas[i,,])rvine_portfolio_fitted[i] <- w*sum(rvine_fitted_mean[i,])rvine_portfolio_VaR01[i] <- rvine_portfolio_fitted[i] + rvine_portfolio_sigma[i] * qdist('ged', 0.01, mu=0, sigma=1)rvine_portfolio_VaR05[i] <- rvine_portfolio_fitted[i] + rvine_portfolio_sigma[i] * qdist('ged', 0.05, mu=0, sigma=1)}remove(w, i, j, l, k)
The rvine_portfolio_fitted values seem to be correct since the formula is quite simple (weight * returns of individual company), but for the portfolio sigma the formula is more complex and I'm not sure if this is the correct approach.
I wanted to use the formula given at http://en.wikipedia.org/wiki/Modern_portfolio_theory#Mathematical_model : sigma = \sum_i \sum_i (w * w * sigma_i * sigma_j * \rho_{ij} ), but the resulting sigma seems to be very low.

Best Regards,
Ole

> From: ole.bueker at outlook.com
> To: alexios at 4dscape.com; r-sig-finance at r-project.org
> Date: Fri, 22 Aug 2014 06:34:10 +0200
> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> 
> Hey Alexios,thanks a lot for the corrected version, seems to be working faster than before!'returns_crisis' are indeed the same as 'returns', forgot to replace the name in that line - should be fixed now in the dropbox file.I'll remember to post the required packages next time! The qged and pged functions are from the fGarch package I believe.Good to see that my approach seems to be correct - although in practice I would increase the moving window to 500 days (which isn't an option for me unfortunately). I don't think there is anything special with the VineCopula simulation method, not sure if the authors/maintainers of the package follow this list. Guess I can't fix that some of the values are positive, however the mean VaR should be negative - therefore I will increase the number of simulations and then just take the average for all the simulations to obtain 25 1-day ahead VaR forecasts for all 112 companies. (so VaR01 is a 25 x 112 matrix of the mean VaR forecasts). Thank!
>  s again for the help!Best Regards,Ole
> > -----Original Message-----
> > From: alexios ghalanos [mailto:alexios at 4dscape.com] 
> > Sent: Friday, August 22, 2014 11:40 AM
> > To: Ole Bueker; r-sig-finance at r-project.org
> > Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> > 
> > Ole,
> > 
> > See a 'corrected' extract of the relevant code section below. You did not define 'returns_crisis' but I assume this is the same as 'returns'.
> > You also did not tell us the required packages (please do so in future).
> > 
> > There is absolutely nothing wrong (at least that I can see with the approach and results).
> > 1. You are filtering the returns by an AR-GARCH model.
> > 2. You estimate the vine copula on the uniform margins based on the standardized residuals transformed by the conditional distribution from (1).
> > 3. You simulate from this unconditional distribution 100x20 uniform variates which you transform back to standardized values using the shape parameter from (1).
> > 3. You then simulate the T+1 conditional distribution (with 100 samples for each asset) using the GARCH model from (1).
> > 4. You obtain the T+1 distribution of the quantiles for each asset.
> > 
> > Are you very surprised that a particular point in time distribution of the 5% quantile of certain assets is not entirely in the negative domain? Think about what it is you are doing, the assumptions, high degree of uncertainty (you are using 250 points to estimate a GARCH
> > model) etc The surprise would be if the MEAN of those value was positive.
> > 
> > Am not too familiar with Vine Copulas and the particular package (or if there is something particular about the way the simulation is done) so I may have missed something...
> > 
> > -Alexios
> > 
> > Note also the following:
> > a. For T+1 there is not uncertainty about sigma (see http://unstarched.net/r-examples/rugarch/a-note-on-simulation-in-the-rugarch-package/
> > if you are confused about this point).
> > b. All distributions in rugarch (and their functions qdist, rdist, pdist, ddist) are based on the standardized (0,1) representation (all have the location-scale invariance property).
> > 
> > 
> > ################################################################################
> > for(i in 1:10)
> > {
> > print(i)
> > windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1],
> > end=times[376-25+i,1])
> > fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid") print("rugarch fitting done") residuals <- sapply(fit, residuals, standardize=TRUE) shape <- sapply(fit, coef) shape <- shape[5,] # # I don't know where you found pged, but the correct version is # pdist("ged",....) UniformResiduals <- sapply(1:ncol(residuals), function(i){pdist("ged", residuals[,i], mu=0, sigma=1, shape = shape[i])}) rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > familyset=familyset)
> > print(paste(i,"RVine fitting done"))
> > set.seed(100)
> > sim <- RVineSim(100, rvine)
> > print(paste(i,"RVine simulation done"))
> > for(k in 1:20)
> > {
> > # I don't know where you found qged, but the correct version is # qdist("ged",....)
> > residuals2 <- qdist("ged", mu=0, sigma=1, sim[,k], shape = shape[k]) # Comment: custom.dist$name must be a character (anything but not NA or # NULL).
> > # Also use startMethod="sample" to use the last values of the estimated # object for the simulation rather than the unconditional values.
> > rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = list(name="sample", distfit=matrix(residuals2, ncol=100)),
> > startMethod="sample")
> > # cleaner to calculate at each step
> > rvine_fitted[i,,k] <- as.numeric(fitted(rvine_sim)) rvine_sigma[i,,k] <- as.numeric(sigma(rvine_sim)) VaR01[i,,k] <- rvine_fitted[i,,k] + rvine_sigma[i,,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k]) VaR05[i,,k] <- rvine_fitted[i,,k] + rvine_sigma[i,,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k]) } print(paste(i, "rugarch forecast done")) } ################################################################################
> > 
> > On 22/08/2014 00:44, Ole Bueker wrote:
> > > Sorry for sending another message, but it seems like there is still an 
> > > error in the formatting of the code..
> > > I'll share the R code using dropbox, in case the code is still not 
> > > readable in this
> > > email: https://www.dropbox.com/s/rc9kpanule52zu8/minimum_working.R
> > > 
> > > #Load data and define variables
> > > returns <- read.zoo("E:/Dropbox/my own/Programming/R/returns.csv", 
> > > header=TRUE, sep=",", format="%d-%m-%y")
> > > model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)
> > > ),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.mo
> > > del="ged") times <- as.data.frame(time(returns_crisis))
> > > windows <- matrix(0, 20, 250)
> > > familyset <- c(1:5, 7, 10, 13, 14, 17, 20) sim <- array(0, dim = 
> > > c(100, 20))
> > > residuals2 <- array(0, dim = c(100, 20)) rvine_fitted <- array(0, dim 
> > > = c(10,100,20)) rvine_sigma <- array(0, dim = c(10,100,20))
> > > VaR01 = VaR05 = array(0, dim = c(10,100,20))
> > > 
> > > #Main calculation
> > > for(i in 1:10)
> > > {
> > >   print(i)
> > >   windows <- window(returns_crisis[,1:20], start=times[376-250-24+i,1],
> > > end=times[376-25+i,1])     # Step 1
> > >   fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid")
> > >   print("rugarch fitting done")
> > > 
> > >   residuals <- sapply(fit, residuals, standardize=TRUE)  # Step 2     
> > >   shape <- sapply(fit, coef)
> > >   shape <- shape[5,]
> > > 
> > >   UniformResiduals <- pged(residuals, nu = shape)     # Step 3
> > >   if(any(UniformResiduals > 0.99999))
> > >   {
> > >     ix = which(UniformResiduals > 0.99999)
> > >    UniformResiduals [ix] = 0.99999
> > >   }
> > >   if(any(UniformResiduals < .Machine$double.eps))
> > >   {
> > >     ix = which(UniformResiduals < (1.5*.Machine$double.eps))
> > >     UniformResiduals [ix] = .Machine$double.eps
> > >   }
> > >   rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > > familyset=familyset)   # Step 4
> > >   print(paste(i,"RVine fitting done"))
> > >   for(j in 1:100)
> > >   {
> > >   sim[j,] <- RVineSim(1, rvine)      # Step 5
> > >   }
> > >   print(paste(i,"RVine simulation done"))
> > >   for(k in 1:20)
> > >   {
> > >   residuals2[,] <- qged(sim[,], nu = shape[k])         # Step 6
> > > 
> > >   residuals_temp <- residuals2[,k]
> > >   rvine_sim <- ugarchsim(fit[[k]], n.sim=1, m.sim=100, custom.dist = 
> > > list(name=NA, distfit=residuals_temp))  # Step 7
> > > 
> > >   rvine_fitted[i,,k] <- fitted(rvine_sim)  # Step 8
> > >   rvine_sigma[i,,k] <- sigma(rvine_sim)  
> > >   if (i==10)
> > >     {
> > >     for(j in 1:100)
> > >     {
> > >     VaR01[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * 
> > > qdist('ged', 0.01, mu=0, sigma=1, shape = shape[k])  # Step 9
> > >     VaR05[,j,k] <- rvine_fitted[,j,k] + rvine_sigma[,j,k] * 
> > > qdist('ged', 0.05, mu=0, sigma=1, shape = shape[k])
> > >     }
> > >     }else {}
> > >   }
> > >   print(paste(i, "rugarch forecast done")) }
> > > 
> > > 
> > > #Cleanup
> > > remove(i, j, k, ix, familyset, model, sim, rvine_sim, residuals,
> > > residuals_temp)
> > > 
> > > 
> > > ----------------------------------------------------------------------
> > > --
> > > 
> > >> From: ole.bueker at outlook.com
> > >> To: alexios at 4dscape.com; r-sig-finance at r-project.org
> > >> Date: Fri, 22 Aug 2014 01:10:55 +0200
> > >> Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> > >>
> > >>
> > >>
> > >>
> > >> I have no idea what happened to the formatting, looked fine to me 
> > >> when
> > > I typed it in Outlook.
> > >> Here's the revised version, with amended code so that it is minimally
> > > reproducible (for this purpose, I will only use the first 25 
> > > companies,
> > > 100 simulations for 10 trading days).
> > >> The revised code should take around 5 minutes,
> > >>
> > >>
> > >> Again, heres the code summary:
> > >> 1. Fit GARCH models to each series.
> > >> 2. Extract standardized returns.
> > >> 3. Transform standardized returns to uniform marginals using the
> > > parametric IFM method by Joe.
> > >> 4. Fit vine copulas.
> > >> 5. Generate 100 1-day ahead forecasts from the vine copulas.
> > >> 6. Reverse transform the simulated values.
> > >> 7. Use these transformed forecasts in ugarchsim (using custom.dist) 
> > >> 8. Extract forecasted mu and sigma.
> > >> 9. Calculate 95% and 99% VaR.
> > >>
> > >> The full code:
> > >> #Load data and define variablesreturns <- read.zoo("E:/Dropbox/my
> > > own/Programming/R/returns.csv", header=TRUE, sep=",", 
> > > format="%d-%m-%y")
> > >>
> > > model<-ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1)
> > > ),mean.model=list(armaOrder=c(1,0),include.mean=FALSE),distribution.mo
> > > del="ged")times
> > > <- as.data.frame(time(returns_crisis))windows <- matrix(0, 20, 
> > > 250)familyset <- c(1:5, 7, 10, 13, 14, 17, 20)sim <- array(0, dim = 
> > > c(100, 20))residuals2 <- array(0, dim = c(100, 20))rvine_fitted <- 
> > > array(0, dim = c(10,100,20))rvine_sigma <- array(0, dim =
> > > c(10,100,20))VaR01 = VaR05 = array(0, dim = c(10,100,20))
> > >> #Main calculation
> > >> for(i in 1:10){ print(i) windows <- window(returns_crisis[,1:20],
> > > start=times[376-250-24+i,1], end=times[376-25+i,1]) # Step 1 fit <- 
> > > lapply(windows, ugarchfit, spec=model, solver="hybrid") print("rugarch 
> > > fitting done")
> > >> residuals <- sapply(fit, residuals, standardize=TRUE) # Step 2 shape
> > > <- sapply(fit, coef) shape <- shape[5,]
> > >> UniformResiduals <- pged(residuals, nu = shape) # Step 3
> > > if(any(UniformResiduals > 0.99999)) { ix = which(UniformResiduals >
> > > 0.99999) UniformResiduals [ix] = 0.99999 } if(any(UniformResiduals <
> > > .Machine$double.eps)) { ix = which(UniformResiduals <
> > > (1.5*.Machine$double.eps)) UniformResiduals [ix] = .Machine$double.eps 
> > > } rvine <- RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > > familyset=familyset) # Step 4 print(paste(i,"RVine fitting done")) 
> > > for(j in 1:100) { sim[j,] <- RVineSim(1, rvine) # Step 5 } 
> > > print(paste(i,"RVine simulation done")) for(k in 1:20) { residuals2[,]
> > > <- qged(sim[,], nu = shape[k]) # Step 6
> > >> residuals_temp <- residuals2[,k] rvine_sim <- ugarchsim(fit[[k]],
> > > n.sim=1, m.sim=100, custom.dist = list(name=NA, 
> > > distfit=residuals_temp)) # Step 7
> > >> rvine_fitted[i,,k] <- fitted(rvine_sim) # Step 8 rvine_sigma[i,,k] <-
> > > sigma(rvine_sim) if (i==10) { for(j in 1:100) { VaR01[,j,k] <- 
> > > rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, 
> > > sigma=1, shape = shape[k]) # Step 9 VaR05[,j,k] <- rvine_fitted[,j,k] 
> > > + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, sigma=1, shape = 
> > > shape[k]) } }else {} } print(paste(i, "rugarch forecast done"))}
> > >>
> > >> #Cleanupremove(i, j, k, ix, familyset, model, sim, rvine_sim,
> > > residuals, residuals_temp)
> > >>
> > >> Hope this time everything is formatted correctly!
> > >> After running the code, I export VaR01 and VaR05 to Excel, and notice
> > > that there's usually quite a few positive values.
> > >> This seems to happen because sometimes the sigma is too low compare 
> > >> to
> > > the (positive) forecast, and therefore the VaR stays in the positive.
> > >> My guess is that either there's a mistake in my code at step 3 (maybe
> > > the wrong shape is used?).Or more likely there's a mistake at step 6/7 
> > > (wrong transformation or transformed values are not inserted correctly 
> > > into ugarchsim).
> > >> > Date: Thu, 21 Aug 2014 18:21:49 +0100
> > >> > From: alexios at 4dscape.com
> > >> > To: ole.bueker at outlook.com; r-sig-finance at r-project.org
> > >> > Subject: Re: [R-SIG-Finance] rugarch + VineCopula for value at risk
> > >> >
> > >> > Ole,
> > >> >
> > >> > The email you've sent is really badly formatted and all over the place.
> > >> >
> > >> > 1. Try to send a well structured text-only email (with no special 
> > >> > characters).
> > >> > 2. Make an effort to send a minimally reproducible example.
> > >> > Telling us that your problem took 8 hours to run is not the way to go.
> > >> > Take a small subsample of your data which generates the behavior 
> > >> > you want to highlight (try to find one that does), and use that so 
> > >> > that we can investigate with minimal fuss.
> > >> >
> > >> > -Alexios
> > >> >
> > >> > On 21/08/2014 17:50, Ole Bueker wrote:
> > >> > > Anyway, here s my code so far:# Load Data and define variables 
> > >> > > returns <- read.zoo("E:/Dropbox/my 
> > >> > > own/Programming/R/returns.csv",
> > > header=TRUE, sep=",",
> > > format="%d-%m-%y")model<-ugarchspec(variance.model=list(model="sGARCH"
> > > ,garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0),include.mean=FALS
> > > E),distribution.model="ged")times
> > > <- as.data.frame(time(returns))windows <- matrix(0, 112, 250)familyset
> > > <- c(1:5, 7, 10, 13, 14, 17, 20) # The vine copulas to be testedsim <- 
> > > array(0, dim = c(1000, 112))residuals2 <- array(0, dim = c(1000, 
> > > 112))rvine_fitted <- array(0, dim = c(25,1000,112))rvine_sigma <- 
> > > array(0, dim = c(25,1000,112))VaR01 = VaR05 = array(0, dim = 
> > > c(25,1000,112))
> > >> > >
> > >> > > #Main calculation
> > >> > > for(i in 1:25){ print(i) windows <- window(returns_crisis,
> > > start=times[376-250-24+i,1], end=times[376-25+i,1]) #Define the moving 
> > > window fit <- lapply(windows, ugarchfit, spec=model, solver="hybrid") 
> > > #Fit the garch models print("rugarch fitting done") residuals <- 
> > > sapply(fit, residuals, standardize=TRUE) #Extract residuals & shape 
> > > parameters shape <- sapply(fit, coef) shape <- shape[5,] 
> > > UniformResiduals <- pged(residuals, nu = shape) #Transform residuals 
> > > into uniform marginals if(any(UniformResiduals > 0.99999)) { ix = 
> > > which(UniformResiduals > 0.99999) UniformResiduals [ix] = 0.99999 } 
> > > if(any(UniformResiduals < .Machine$double.eps)) { ix = 
> > > which(UniformResiduals < (1.5*.Machine$double.eps)) UniformResiduals 
> > > [ix] =
> > >> > .Machine$double.eps } rvine <-
> > > RVineStructureSelect(UniformResiduals, indeptest=TRUE,
> > > familyset=familyset) #Fit the Vine copulas print(paste(i,"RVine 
> > > fitting
> > > done")) for(j in 1:1000) #Simulate 1000 1-day ahead using VineCopula { 
> > > sim[j,] <- RVineSim(1, rvine) # 1000 x 112 matrix of forecasts 
> > > }print(paste(i,"RVine simulation done")) for(k in 1:112) #Next:
> > > ugarchsimulation for all 112 companies { residuals2[,] <- qged(sim[,], 
> > > nu = shape[k])
> > >> > # 1000 x 112 matrix of standardized residuals residuals_temp <-
> > > residuals2[,k] # 1000 x 1 vector of standardized residuals for 
> > > individual company rvine_sim <- ugarchsim(fit[[k]], n.sim=1, 
> > > m.sim=1000, custom.dist = list(name=NA, distfit=residuals_temp)) #1000 
> > > simulations using the standardized residuals from Vine copula models 
> > > for ugarchfit rvine_fitted[i,,k] <- fitted(rvine_sim) #Extract 
> > > forecasted values - 25 x 1000 x 112 rvine_sigma[i,,k] <- 
> > > sigma(rvine_sim) #Extract forecasted sigmas - 25 x 1000 x 112 for(j in 
> > > 1:1000)
> > >> > #Next: Value at risk { VaR01[,j,k] <- rvine_fitted[,j,k] +
> > > rvine_sigma[,j,k] * qdist('ged', 0.01, mu=0, sigma=1, shape = 
> > > shape[k]) #Value at risk for 99% quantile VaR05[,j,k] <- 
> > > rvine_fitted[,j,k] + rvine_sigma[,j,k] * qdist('ged', 0.05, mu=0, 
> > > sigma=1, shape = shape[k]) #Value at risk for 95% quantile } 
> > > }}remove(i, j, k) #Cleanupremove(windows, fit, residuals, shape, 
> > > residuals2, residuals_temp, rvine, sim, rvine_sim) #Cleanup Hope I 
> > > didn t make any mistakes in my approach, but it seems like this is the 
> > >  standard  copula
> > > + rugarch approach   if anyone is familiar with this, I am open to
> > > suggestions on how to speed up the si
> > >> > mulations.
> > >> > > So far, so good   the problem I am facing now:
> > >> > > Some (only a few) of my value at risk values are positive..I have
> > > manually checked and it seems like the fitted value is much larger 
> > > than the sigma, so Value at Risk is positive   which doesn t really 
> > > make any economic sense to me.
> > >> > > Here s a dropbox link to the returns.csv, in case anyone is
> > > interested in running my code:
> > > https://www.dropbox.com/s/69i5959f3h4kweb/returns.csv
> > >> > >
> > >> > > Best Regards,
> > >> > > Ole
> > >> > > [[alternative HTML version deleted]]
> > >>
> > >>
> > >> [[alternative HTML version deleted]]
> > >>
> > >> _______________________________________________
> > >> R-SIG-Finance at r-project.org mailing list 
> > >> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > >> -- Subscriber-posting only. If you want to post, subscribe first.
> > >> -- Also note that this is not the r-help list where general R
> > > questions should go.
> > 
>  		 	   		   		 	   		  
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
 		 	   		  
	[[alternative HTML version deleted]]


From es at enricoschumann.net  Sun Aug 24 20:24:31 2014
From: es at enricoschumann.net (Enrico Schumann)
Date: Sun, 24 Aug 2014 20:24:31 +0200
Subject: [R-SIG-Finance] DEoptim and guarantees (was: parma - How to
	optimize a long/short portfolio with sum( abs( weights )) = 1)
In-Reply-To: <53F690A5.10504@4dscape.com> (alexios ghalanos's message of "Fri, 
	22 Aug 2014 01:36:53 +0100")
References: <53F6694D.2010303@wolke7.net> <53F690A5.10504@4dscape.com>
Message-ID: <877g1xg2zk.fsf@enricoschumann.net>

On Fri, 22 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:

> 1. DEoptim is a nonlinear global optimization solver. Global
> optimization is usually reserved for hard to solve non-convex
> problems with many local minima. There is no guarantee of
> optimality not even for convex problems, nor any idea of
> whether the answer you are getting is anything other than a
> local optimum.

There is no *mathematical* guarantee.  But that does not imply
that you cannot use Differential Evolution (the method that
DEoptim implements) with confidence.  Just because you cannot
prove something does not mean that it is not the case.

You do not need mathematical proofs to make meaningful statements
about whether or how well an optimisation method works.[*] For a
given model class (such as particular portfolio-selection
models), you can run experiments.  Experimental results are no
general proof, of course; but they are evidence of how a method
performs for that particular type of model, and typically that is
all that we care about when we apply a method.  In other words,
you may not be able to mathematically prove that a method works,
but you can have empirical evidence that is does.

In practical optimisation, it is not useful to think of "the
[optimal] solution" to a model, and "all the rest".  An
appropriate way to think of it is "no solution, some solution, a
better solution, an even better solution, ..."  and so on.  That
is, think of "iterative improvement", not of optimisation.


[*] If you need an example other than Differential Evolution for
    that, then look at Nelder--Mead.  You cannot prove anything,
    and yet the method "just works".

-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From alexios at 4dscape.com  Sun Aug 24 21:06:24 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Sun, 24 Aug 2014 20:06:24 +0100
Subject: [R-SIG-Finance] DEoptim and guarantees
In-Reply-To: <877g1xg2zk.fsf@enricoschumann.net>
References: <53F6694D.2010303@wolke7.net> <53F690A5.10504@4dscape.com>
	<877g1xg2zk.fsf@enricoschumann.net>
Message-ID: <53FA37B0.5010908@4dscape.com>

On 24/08/2014 19:24, Enrico Schumann wrote:
> On Fri, 22 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:
> 
>> 1. DEoptim is a nonlinear global optimization solver. Global
>> optimization is usually reserved for hard to solve non-convex
>> problems with many local minima. There is no guarantee of
>> optimality not even for convex problems, nor any idea of
>> whether the answer you are getting is anything other than a
>> local optimum.
> 
> There is no *mathematical* guarantee.  But that does not imply
> that you cannot use Differential Evolution (the method that
> DEoptim implements) with confidence.  Just because you cannot
> prove something does not mean that it is not the case.
> 
Accepted, but I'm sure you are not saying that a convex problem which
can be confidently and quickly solved by convex solvers should instead
be solved by differential evolution or other global optimization solvers?

> You do not need mathematical proofs to make meaningful statements
> about whether or how well an optimisation method works.[*] For a
> given model class (such as particular portfolio-selection
> models), you can run experiments.  Experimental results are no
> general proof, of course; but they are evidence of how a method
> performs for that particular type of model, and typically that is
> all that we care about when we apply a method.  In other words,
> you may not be able to mathematically prove that a method works,
> but you can have empirical evidence that is does.
Yes, but if the problem is convex, then there is one solution, and this
can usually be attained quite quickly with specialized convex solvers.
> 
> In practical optimisation, it is not useful to think of "the
> [optimal] solution" to a model, and "all the rest".  An
> appropriate way to think of it is "no solution, some solution, a
> better solution, an even better solution, ..."  and so on.  That
> is, think of "iterative improvement", not of optimisation.
> 
If by "practical optimization" you mean problems which are non-convex or
particularly difficult to solve (e.g. mixed integer), then perhaps. But
for convex problems, there is only one solution (by definition). Whether
that solution turns out to be sub-optimal in the out of sample, that is
down to uncertainty, quality of inputs etc.
However, I have seen a tendency to equate "practical" optimization, with
a simply lazy consideration of an optimization problem without making
the effort to see whether that problem can be put in a convex form.
Plug-and-play, without making some effort to understand the problem is
never, IMHO, a good way to do things.

> 
> [*] If you need an example other than Differential Evolution for
>     that, then look at Nelder--Mead.  You cannot prove anything,
>     and yet the method "just works".
>
Regards,

Alexios


From pastirs at gmail.com  Mon Aug 25 05:59:28 2014
From: pastirs at gmail.com (Milos Cipovic)
Date: Mon, 25 Aug 2014 05:59:28 +0200
Subject: [R-SIG-Finance] Implied volatility as external regressors in
	rugarch?
Message-ID: <CAKoFBbdh8ekO_NMSvGMOwj6a1cH9YNE2Dz4ytB2PTMkzUCuSBw@mail.gmail.com>

Hi there,
I was trying to redo in R excel exercises from Peter F. Christoffersen's
book Elements of Financial Risk Management.

I have different results for problem 3 on page 92 (chapter 4)
You can read it here:

http://books.google.rs/books?id=YkcMBGYbRasC&printsec=frontcover&dq=Elements+of+Financial+Risk+Management&hl=sr&sa=X&ei=K676U6PEJIb6PKWsgZAD&ved=0CBwQ6AEwAA#v=onepage&q&f=false

Here is my R code:


#################################################

library(gdata)
library(rugarch)
#   I downloaded data directly from book's companion site#
data=read.xls("http://booksite.elsevier.com/
               9780123744487/chapter_data_results/
               Chapter4_Results.xls",perl="C:\\Perl64\\bin\\perl.exe",
               sheet=3)
#  where perl="C:\\Perl64\\bin\\perl.exe" is location of pearl.exe file on
my machine,on your's it may differ   #

sandp=as.data.frame(data[,2])

returns=diff(log(sandp))

vix=as.data.frame(data[-1,4])

#scale to one day
ex.reg=(vix^2)/252

spec=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="NAGARCH",
external.regressors=ex.reg),mean.model=list(armaOrder=c(0,0),include.mean=F))

result=(ugarchfit(spec,returns))

coef(result)
likelihood(result)

# If you download excel sheet from
http://booksite.elsevier.com/9780123744487/chapter_data_results/Chapter4_Results.xls
#You'll see the difference in results in maximum likelihoods.
#SO,AM I DOING SOMETHING WRONG OR IS THIS JUST A NUMERICAL ERROR??
#(This may be a amateur question and I apologize for that) but I'm not
shore can I use implied volatility as an external regressor like I did here?

	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Mon Aug 25 07:06:57 2014
From: alexios at 4dscape.com (alexios ghalanos)
Date: Mon, 25 Aug 2014 06:06:57 +0100
Subject: [R-SIG-Finance] Implied volatility as external regressors in
 rugarch?
In-Reply-To: <CAKoFBbdh8ekO_NMSvGMOwj6a1cH9YNE2Dz4ytB2PTMkzUCuSBw@mail.gmail.com>
References: <CAKoFBbdh8ekO_NMSvGMOwj6a1cH9YNE2Dz4ytB2PTMkzUCuSBw@mail.gmail.com>
Message-ID: <53FAC471.5090003@4dscape.com>

Milos,

If you notice in his spreadsheet, he is using VIX[t-1] (as it should
be), but you are passing the ex.reg without lagging it (perhaps this
should be made explicit in the documentation).

Pass instead this:

>ex.reg=c(0,(vix^2)/252)

Also, don't pass data frames, use matrix (or xts) for the
external.regressors and numeric for the data (when not using xts).

You'll notice the rugarch likelihood is slightly better and the numbers
very slightly different. If you plug the rugarch coefficients into his
excel spreadsheet you'll get the exact same likelihood.

-Alexios

On 25/08/2014 04:59, Milos Cipovic wrote:
> Hi there,
> I was trying to redo in R excel exercises from Peter F. Christoffersen's
> book Elements of Financial Risk Management.
> 
> I have different results for problem 3 on page 92 (chapter 4)
> You can read it here:
> 
> http://books.google.rs/books?id=YkcMBGYbRasC&printsec=frontcover&dq=Elements+of+Financial+Risk+Management&hl=sr&sa=X&ei=K676U6PEJIb6PKWsgZAD&ved=0CBwQ6AEwAA#v=onepage&q&f=false
> 
> Here is my R code:
> 
> 
> #################################################
> 
> library(gdata)
> library(rugarch)
> #   I downloaded data directly from book's companion site#
> data=read.xls("http://booksite.elsevier.com/
>                9780123744487/chapter_data_results/
>                Chapter4_Results.xls",perl="C:\\Perl64\\bin\\perl.exe",
>                sheet=3)
> #  where perl="C:\\Perl64\\bin\\perl.exe" is location of pearl.exe file on
> my machine,on your's it may differ   #
> 
> sandp=as.data.frame(data[,2])
> 
> returns=diff(log(sandp))
> 
> vix=as.data.frame(data[-1,4])
> 
> #scale to one day
> ex.reg=(vix^2)/252
> 
> spec=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="NAGARCH",
> external.regressors=ex.reg),mean.model=list(armaOrder=c(0,0),include.mean=F))
> 
> result=(ugarchfit(spec,returns))
> 
> coef(result)
> likelihood(result)
> 
> # If you download excel sheet from
> http://booksite.elsevier.com/9780123744487/chapter_data_results/Chapter4_Results.xls
> #You'll see the difference in results in maximum likelihoods.
> #SO,AM I DOING SOMETHING WRONG OR IS THIS JUST A NUMERICAL ERROR??
> #(This may be a amateur question and I apologize for that) but I'm not
> shore can I use implied volatility as an external regressor like I did here?
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>


From es at enricoschumann.net  Mon Aug 25 09:11:25 2014
From: es at enricoschumann.net (Enrico Schumann)
Date: Mon, 25 Aug 2014 09:11:25 +0200
Subject: [R-SIG-Finance] DEoptim and guarantees
In-Reply-To: <53FA37B0.5010908@4dscape.com> (alexios ghalanos's message of
	"Sun, 24 Aug 2014 20:06:24 +0100")
References: <53F6694D.2010303@wolke7.net> <53F690A5.10504@4dscape.com>
	<877g1xg2zk.fsf@enricoschumann.net> <53FA37B0.5010908@4dscape.com>
Message-ID: <8738clqc0y.fsf@enricoschumann.net>

On Sun, 24 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:

> On 24/08/2014 19:24, Enrico Schumann wrote:
>> On Fri, 22 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:
>> 
>>> 1. DEoptim is a nonlinear global optimization solver. Global
>>> optimization is usually reserved for hard to solve non-convex
>>> problems with many local minima. There is no guarantee of
>>> optimality not even for convex problems, nor any idea of
>>> whether the answer you are getting is anything other than a
>>> local optimum.
>> 
>> There is no *mathematical* guarantee.  But that does not imply
>> that you cannot use Differential Evolution (the method that
>> DEoptim implements) with confidence.  Just because you cannot
>> prove something does not mean that it is not the case.
>> 
> Accepted, but I'm sure you are not saying that a convex problem which
> can be confidently and quickly solved by convex solvers should instead
> be solved by differential evolution or other global optimization solvers?

I can think of (and remember) situations in which using a
heuristic is fine, even if one could have used a
more-specialised/more-efficient algorithm.  The key advantage of
a heuristic is flexibility.  Even if a model is convex initially,
it may quickly become non-convex because of a constraint that is
added.  At least in my world, this happens all the time.

>> You do not need mathematical proofs to make meaningful statements
>> about whether or how well an optimisation method works.[*] For a
>> given model class (such as particular portfolio-selection
>> models), you can run experiments.  Experimental results are no
>> general proof, of course; but they are evidence of how a method
>> performs for that particular type of model, and typically that is
>> all that we care about when we apply a method.  In other words,
>> you may not be able to mathematically prove that a method works,
>> but you can have empirical evidence that is does.
>>
> Yes, but if the problem is convex, then there is one solution, and this
> can usually be attained quite quickly with specialized convex solvers.
>> 
>> In practical optimisation, it is not useful to think of "the
>> [optimal] solution" to a model, and "all the rest".  An
>> appropriate way to think of it is "no solution, some solution, a
>> better solution, an even better solution, ..."  and so on.  That
>> is, think of "iterative improvement", not of optimisation.
>> 
> If by "practical optimization" you mean problems which are non-convex or
> particularly difficult to solve (e.g. mixed integer), then perhaps. But
> for convex problems, there is only one solution (by definition). Whether
> that solution turns out to be sub-optimal in the out of sample, that is
> down to uncertainty, quality of inputs etc.

There is one solution to the model.  But with a sensible model, a
solution close to the optimum should be better (in terms of its
objective-function value) than a randomly-chosen solution.  So
the quality of a solution should not be considered either optimal
or non-optimal, but there are "shades of grey", even for convex
problems.  These shades of grey exist just as well in the
out-of-sample period.  This may be hard to square with
optimisation theory, but it makes sense for the application.

> However, I have seen a tendency to equate "practical" optimization, with
> a simply lazy consideration of an optimization problem without making
> the effort to see whether that problem can be put in a convex form.
> Plug-and-play, without making some effort to understand the problem is
> never, IMHO, a good way to do things.

By "practical optimisation" I mean optimisation in which the
results are actually used for financial decision-making, and
hence the results and their interpretation are the main priority.

Practical optimisation is conditional, of course, on having
trustworthy algorithms.  As I said, empirical evidence goes a
long way when it comes to creating trust and confidence.  But
here is my point: an optimisation algorithm is the tool, and once
we have established that the tool works sufficiently well (ie, is
trustworthy), we can stop.  Finding the optimal algorithm is not
the goal in "practical optimisation"; "good enough" is enough.
The actual goal is to find good models.

In my experience, the thing that one often lacks in "practical
optimisation" is time.  I do not mean the time that is saved when
running a faster algorithm, but the time to rewrite code that
works (just to have a more efficient algorithm).

Understanding a model, then, has less to do with how one solves
the model, but with analysing how results change when inputs
change, how results look for different datasets, or how specific
statistical properties of the data affect the results.  Or (to
come back back what I said before) how different in-sample
"shades of grey" relate to out-of-sample results. [For a sensible
model, I would want to see a positive correlation between the
in-sample quality of solutions and their out-of-sample quality.]


>> 
>> [*] If you need an example other than Differential Evolution for
>>     that, then look at Nelder--Mead.  You cannot prove anything,
>>     and yet the method "just works".
>>
> Regards,
>
> Alexios
>

Cheers,
-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net


From WANGJIANMING888 at pingan.com.cn  Mon Aug 25 12:25:54 2014
From: WANGJIANMING888 at pingan.com.cn (=?gb2312?B?zfW9qMP3?=)
Date: Mon, 25 Aug 2014 10:25:54 +0000
Subject: [R-SIG-Finance] =?gb2312?b?tPC4tDogUi1TSUctRmluYW5jZSBEaWdlc3Qs?=
	=?gb2312?b?IFZvbCAxMjMsIElzc3VlIDE5?=
In-Reply-To: <mailman.3.1408960801.16537.r-sig-finance@r-project.org>
References: <mailman.3.1408960801.16537.r-sig-finance@r-project.org>
Message-ID: <CBF7D64B3D07C04EB733428BEEF001DEA47E5B3B@PAMAILMBXA02.paicdom.local>

Hi all 
    Here  we  have some  track data recording  driver's moving path which including the speed and direction of a driving journey 
With a  hypothesis  that every single driver has its specific driving habit, we try to draw out the features of a driver and to  judge if an unknown 
Driving  path belonging to a given driver. We try to deal with it by Fourier transformation and wavelets analysis but so for come up with 
No good result.
  is anyone  who has such experience before able to give us some help?  


-----????????-----
??????: r-sig-finance-bounces at r-project.org [mailto:r-sig-finance-bounces at r-project.org] ???? r-sig-finance-request at r-project.org
????????: 2014??8??25?? 18:00
??????: r-sig-finance at r-project.org
????: R-SIG-Finance Digest, Vol 123, Issue 19

Send R-SIG-Finance mailing list submissions to
	r-sig-finance at r-project.org

To subscribe or unsubscribe via the World Wide Web, visit
	https://stat.ethz.ch/mailman/listinfo/r-sig-finance
or, via email, send a message with subject or body 'help' to
	r-sig-finance-request at r-project.org

You can reach the person managing the list at
	r-sig-finance-owner at r-project.org

When replying, please edit your Subject line so it is more specific than "Re: Contents of R-SIG-Finance digest..."


Today's Topics:

   1. DEoptim and guarantees (was: parma - How to	optimize a
      long/short portfolio with sum( abs( weights )) = 1) (Enrico Schumann)
   2. Re: DEoptim and guarantees (alexios ghalanos)
   3. Implied volatility as external regressors in	rugarch?
      (Milos Cipovic)
   4. Re: Implied volatility as external regressors in rugarch?
      (alexios ghalanos)
   5. Re: DEoptim and guarantees (Enrico Schumann)


----------------------------------------------------------------------

Message: 1
Date: Sun, 24 Aug 2014 20:24:31 +0200
From: Enrico Schumann <es at enricoschumann.net>
To: alexios ghalanos <alexios at 4dscape.com>
Cc: r-sig-finance at r-project.org
Subject: [R-SIG-Finance] DEoptim and guarantees (was: parma - How to
	optimize a long/short portfolio with sum( abs( weights )) = 1)
Message-ID: <877g1xg2zk.fsf at enricoschumann.net>
Content-Type: text/plain; charset=us-ascii

On Fri, 22 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:

> 1. DEoptim is a nonlinear global optimization solver. Global 
> optimization is usually reserved for hard to solve non-convex problems 
> with many local minima. There is no guarantee of optimality not even 
> for convex problems, nor any idea of whether the answer you are 
> getting is anything other than a local optimum.

There is no *mathematical* guarantee.  But that does not imply that you cannot use Differential Evolution (the method that DEoptim implements) with confidence.  Just because you cannot prove something does not mean that it is not the case.

You do not need mathematical proofs to make meaningful statements about whether or how well an optimisation method works.[*] For a given model class (such as particular portfolio-selection models), you can run experiments.  Experimental results are no general proof, of course; but they are evidence of how a method performs for that particular type of model, and typically that is all that we care about when we apply a method.  In other words, you may not be able to mathematically prove that a method works, but you can have empirical evidence that is does.

In practical optimisation, it is not useful to think of "the [optimal] solution" to a model, and "all the rest".  An appropriate way to think of it is "no solution, some solution, a better solution, an even better solution, ..."  and so on.  That is, think of "iterative improvement", not of optimisation.


[*] If you need an example other than Differential Evolution for
    that, then look at Nelder--Mead.  You cannot prove anything,
    and yet the method "just works".

--
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net



------------------------------

Message: 2
Date: Sun, 24 Aug 2014 20:06:24 +0100
From: alexios ghalanos <alexios at 4dscape.com>
To: Enrico Schumann <es at enricoschumann.net>
Cc: r-sig-finance at r-project.org
Subject: Re: [R-SIG-Finance] DEoptim and guarantees
Message-ID: <53FA37B0.5010908 at 4dscape.com>
Content-Type: text/plain; charset=windows-1252

On 24/08/2014 19:24, Enrico Schumann wrote:
> On Fri, 22 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:
> 
>> 1. DEoptim is a nonlinear global optimization solver. Global
>> optimization is usually reserved for hard to solve non-convex
>> problems with many local minima. There is no guarantee of
>> optimality not even for convex problems, nor any idea of
>> whether the answer you are getting is anything other than a
>> local optimum.
> 
> There is no *mathematical* guarantee.  But that does not imply
> that you cannot use Differential Evolution (the method that
> DEoptim implements) with confidence.  Just because you cannot
> prove something does not mean that it is not the case.
> 
Accepted, but I'm sure you are not saying that a convex problem which
can be confidently and quickly solved by convex solvers should instead
be solved by differential evolution or other global optimization solvers?

> You do not need mathematical proofs to make meaningful statements
> about whether or how well an optimisation method works.[*] For a
> given model class (such as particular portfolio-selection
> models), you can run experiments.  Experimental results are no
> general proof, of course; but they are evidence of how a method
> performs for that particular type of model, and typically that is
> all that we care about when we apply a method.  In other words,
> you may not be able to mathematically prove that a method works,
> but you can have empirical evidence that is does.
Yes, but if the problem is convex, then there is one solution, and this
can usually be attained quite quickly with specialized convex solvers.
> 
> In practical optimisation, it is not useful to think of "the
> [optimal] solution" to a model, and "all the rest".  An
> appropriate way to think of it is "no solution, some solution, a
> better solution, an even better solution, ..."  and so on.  That
> is, think of "iterative improvement", not of optimisation.
> 
If by "practical optimization" you mean problems which are non-convex or
particularly difficult to solve (e.g. mixed integer), then perhaps. But
for convex problems, there is only one solution (by definition). Whether
that solution turns out to be sub-optimal in the out of sample, that is
down to uncertainty, quality of inputs etc.
However, I have seen a tendency to equate "practical" optimization, with
a simply lazy consideration of an optimization problem without making
the effort to see whether that problem can be put in a convex form.
Plug-and-play, without making some effort to understand the problem is
never, IMHO, a good way to do things.

> 
> [*] If you need an example other than Differential Evolution for
>     that, then look at Nelder--Mead.  You cannot prove anything,
>     and yet the method "just works".
>
Regards,

Alexios



------------------------------

Message: 3
Date: Mon, 25 Aug 2014 05:59:28 +0200
From: Milos Cipovic <pastirs at gmail.com>
To: r-sig-finance at r-project.org
Subject: [R-SIG-Finance] Implied volatility as external regressors in
	rugarch?
Message-ID:
	<CAKoFBbdh8ekO_NMSvGMOwj6a1cH9YNE2Dz4ytB2PTMkzUCuSBw at mail.gmail.com>
Content-Type: text/plain; charset="UTF-8"

Hi there,
I was trying to redo in R excel exercises from Peter F. Christoffersen's
book Elements of Financial Risk Management.

I have different results for problem 3 on page 92 (chapter 4)
You can read it here:

http://books.google.rs/books?id=YkcMBGYbRasC&printsec=frontcover&dq=Elements+of+Financial+Risk+Management&hl=sr&sa=X&ei=K676U6PEJIb6PKWsgZAD&ved=0CBwQ6AEwAA#v=onepage&q&f=false

Here is my R code:


#################################################

library(gdata)
library(rugarch)
#   I downloaded data directly from book's companion site#
data=read.xls("http://booksite.elsevier.com/
               9780123744487/chapter_data_results/
               Chapter4_Results.xls",perl="C:\\Perl64\\bin\\perl.exe",
               sheet=3)
#  where perl="C:\\Perl64\\bin\\perl.exe" is location of pearl.exe file on
my machine,on your's it may differ   #

sandp=as.data.frame(data[,2])

returns=diff(log(sandp))

vix=as.data.frame(data[-1,4])

#scale to one day
ex.reg=(vix^2)/252

spec=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="NAGARCH",
external.regressors=ex.reg),mean.model=list(armaOrder=c(0,0),include.mean=F))

result=(ugarchfit(spec,returns))

coef(result)
likelihood(result)

# If you download excel sheet from
http://booksite.elsevier.com/9780123744487/chapter_data_results/Chapter4_Results.xls
#You'll see the difference in results in maximum likelihoods.
#SO,AM I DOING SOMETHING WRONG OR IS THIS JUST A NUMERICAL ERROR??
#(This may be a amateur question and I apologize for that) but I'm not
shore can I use implied volatility as an external regressor like I did here?

	[[alternative HTML version deleted]]



------------------------------

Message: 4
Date: Mon, 25 Aug 2014 06:06:57 +0100
From: alexios ghalanos <alexios at 4dscape.com>
To: Milos Cipovic <pastirs at gmail.com>, r-sig-finance at r-project.org
Subject: Re: [R-SIG-Finance] Implied volatility as external regressors
	in rugarch?
Message-ID: <53FAC471.5090003 at 4dscape.com>
Content-Type: text/plain; charset=windows-1252

Milos,

If you notice in his spreadsheet, he is using VIX[t-1] (as it should
be), but you are passing the ex.reg without lagging it (perhaps this
should be made explicit in the documentation).

Pass instead this:

>ex.reg=c(0,(vix^2)/252)

Also, don't pass data frames, use matrix (or xts) for the
external.regressors and numeric for the data (when not using xts).

You'll notice the rugarch likelihood is slightly better and the numbers
very slightly different. If you plug the rugarch coefficients into his
excel spreadsheet you'll get the exact same likelihood.

-Alexios

On 25/08/2014 04:59, Milos Cipovic wrote:
> Hi there,
> I was trying to redo in R excel exercises from Peter F. Christoffersen's
> book Elements of Financial Risk Management.
> 
> I have different results for problem 3 on page 92 (chapter 4)
> You can read it here:
> 
> http://books.google.rs/books?id=YkcMBGYbRasC&printsec=frontcover&dq=Elements+of+Financial+Risk+Management&hl=sr&sa=X&ei=K676U6PEJIb6PKWsgZAD&ved=0CBwQ6AEwAA#v=onepage&q&f=false
> 
> Here is my R code:
> 
> 
> #################################################
> 
> library(gdata)
> library(rugarch)
> #   I downloaded data directly from book's companion site#
> data=read.xls("http://booksite.elsevier.com/
>                9780123744487/chapter_data_results/
>                Chapter4_Results.xls",perl="C:\\Perl64\\bin\\perl.exe",
>                sheet=3)
> #  where perl="C:\\Perl64\\bin\\perl.exe" is location of pearl.exe file on
> my machine,on your's it may differ   #
> 
> sandp=as.data.frame(data[,2])
> 
> returns=diff(log(sandp))
> 
> vix=as.data.frame(data[-1,4])
> 
> #scale to one day
> ex.reg=(vix^2)/252
> 
> spec=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="NAGARCH",
> external.regressors=ex.reg),mean.model=list(armaOrder=c(0,0),include.mean=F))
> 
> result=(ugarchfit(spec,returns))
> 
> coef(result)
> likelihood(result)
> 
> # If you download excel sheet from
> http://booksite.elsevier.com/9780123744487/chapter_data_results/Chapter4_Results.xls
> #You'll see the difference in results in maximum likelihoods.
> #SO,AM I DOING SOMETHING WRONG OR IS THIS JUST A NUMERICAL ERROR??
> #(This may be a amateur question and I apologize for that) but I'm not
> shore can I use implied volatility as an external regressor like I did here?
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 
>



------------------------------

Message: 5
Date: Mon, 25 Aug 2014 09:11:25 +0200
From: Enrico Schumann <es at enricoschumann.net>
To: alexios ghalanos <alexios at 4dscape.com>
Cc: r-sig-finance at r-project.org
Subject: Re: [R-SIG-Finance] DEoptim and guarantees
Message-ID: <8738clqc0y.fsf at enricoschumann.net>
Content-Type: text/plain; charset=us-ascii

On Sun, 24 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:

> On 24/08/2014 19:24, Enrico Schumann wrote:
>> On Fri, 22 Aug 2014, alexios ghalanos <alexios at 4dscape.com> writes:
>> 
>>> 1. DEoptim is a nonlinear global optimization solver. Global
>>> optimization is usually reserved for hard to solve non-convex
>>> problems with many local minima. There is no guarantee of
>>> optimality not even for convex problems, nor any idea of
>>> whether the answer you are getting is anything other than a
>>> local optimum.
>> 
>> There is no *mathematical* guarantee.  But that does not imply
>> that you cannot use Differential Evolution (the method that
>> DEoptim implements) with confidence.  Just because you cannot
>> prove something does not mean that it is not the case.
>> 
> Accepted, but I'm sure you are not saying that a convex problem which
> can be confidently and quickly solved by convex solvers should instead
> be solved by differential evolution or other global optimization solvers?

I can think of (and remember) situations in which using a
heuristic is fine, even if one could have used a
more-specialised/more-efficient algorithm.  The key advantage of
a heuristic is flexibility.  Even if a model is convex initially,
it may quickly become non-convex because of a constraint that is
added.  At least in my world, this happens all the time.

>> You do not need mathematical proofs to make meaningful statements
>> about whether or how well an optimisation method works.[*] For a
>> given model class (such as particular portfolio-selection
>> models), you can run experiments.  Experimental results are no
>> general proof, of course; but they are evidence of how a method
>> performs for that particular type of model, and typically that is
>> all that we care about when we apply a method.  In other words,
>> you may not be able to mathematically prove that a method works,
>> but you can have empirical evidence that is does.
>>
> Yes, but if the problem is convex, then there is one solution, and this
> can usually be attained quite quickly with specialized convex solvers.
>> 
>> In practical optimisation, it is not useful to think of "the
>> [optimal] solution" to a model, and "all the rest".  An
>> appropriate way to think of it is "no solution, some solution, a
>> better solution, an even better solution, ..."  and so on.  That
>> is, think of "iterative improvement", not of optimisation.
>> 
> If by "practical optimization" you mean problems which are non-convex or
> particularly difficult to solve (e.g. mixed integer), then perhaps. But
> for convex problems, there is only one solution (by definition). Whether
> that solution turns out to be sub-optimal in the out of sample, that is
> down to uncertainty, quality of inputs etc.

There is one solution to the model.  But with a sensible model, a
solution close to the optimum should be better (in terms of its
objective-function value) than a randomly-chosen solution.  So
the quality of a solution should not be considered either optimal
or non-optimal, but there are "shades of grey", even for convex
problems.  These shades of grey exist just as well in the
out-of-sample period.  This may be hard to square with
optimisation theory, but it makes sense for the application.

> However, I have seen a tendency to equate "practical" optimization, with
> a simply lazy consideration of an optimization problem without making
> the effort to see whether that problem can be put in a convex form.
> Plug-and-play, without making some effort to understand the problem is
> never, IMHO, a good way to do things.

By "practical optimisation" I mean optimisation in which the
results are actually used for financial decision-making, and
hence the results and their interpretation are the main priority.

Practical optimisation is conditional, of course, on having
trustworthy algorithms.  As I said, empirical evidence goes a
long way when it comes to creating trust and confidence.  But
here is my point: an optimisation algorithm is the tool, and once
we have established that the tool works sufficiently well (ie, is
trustworthy), we can stop.  Finding the optimal algorithm is not
the goal in "practical optimisation"; "good enough" is enough.
The actual goal is to find good models.

In my experience, the thing that one often lacks in "practical
optimisation" is time.  I do not mean the time that is saved when
running a faster algorithm, but the time to rewrite code that
works (just to have a more efficient algorithm).

Understanding a model, then, has less to do with how one solves
the model, but with analysing how results change when inputs
change, how results look for different datasets, or how specific
statistical properties of the data affect the results.  Or (to
come back back what I said before) how different in-sample
"shades of grey" relate to out-of-sample results. [For a sensible
model, I would want to see a positive correlation between the
in-sample quality of solutions and their out-of-sample quality.]


>> 
>> [*] If you need an example other than Differential Evolution for
>>     that, then look at Nelder--Mead.  You cannot prove anything,
>>     and yet the method "just works".
>>
> Regards,
>
> Alexios
>

Cheers,
-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net



------------------------------

_______________________________________________
R-SIG-Finance mailing list
R-SIG-Finance at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-sig-finance


End of R-SIG-Finance Digest, Vol 123, Issue 19
**********************************************




********************************************************************************************************************************
The information in this email is confidential and may be legally privileged. If you have received this email in error or are not the intended recipient, please immediately notify the sender and delete this message from your computer. Any use, distribution, or copying of this email other than by the intended recipient is strictly prohibited. All messages sent to and from us may be monitored to ensure compliance with internal policies and to protect our business. 
Emails are not secure and cannot be guaranteed to be error free as they can be intercepted, amended, lost or destroyed, or contain viruses. Anyone who communicates with us by email is taken to accept these risks. 

???????????????????????????
????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????? 
********************************************************************************************************************************

From stergenator at gmail.com  Mon Aug 25 19:34:30 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Mon, 25 Aug 2014 10:34:30 -0700
Subject: [R-SIG-Finance] Fwd: quantstrat chain rule type
In-Reply-To: <CA+oJuEEOxJL3Ot6fAzHteFqkzc7-EUH78x2L8Tk-q7BoUwpsWA@mail.gmail.com>
References: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
	<CA+oJuEEpqxhpjDphTB8DxALJqfPGtOzi5AxMms7dAsyBpspN7Q@mail.gmail.com>
	<CAM8YH=bosAYPMQW2Kr0ow=Dx+mjQDh3-xT8M5okTB_mj2tNHog@mail.gmail.com>
	<CAM8YH=YijfmLbakKfiWcMYB832jcKBi81cdiMSrkfW-mm+_gsQ@mail.gmail.com>
	<CA+oJuEEOxJL3Ot6fAzHteFqkzc7-EUH78x2L8Tk-q7BoUwpsWA@mail.gmail.com>
Message-ID: <CAM8YH=b5de+MuwBoOeKiGzA=Tmb9Ov=6yi8-7ksU9qYzRF2_rw@mail.gmail.com>

Thanks for that Ilya.  I have made the edits and attached a complete
working example to this message for any else following along.  (now or in
the future)

--
sm
Stergios Marinopoulos


On Fri, Aug 22, 2014 at 2:53 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:

> Errr, in my demo, you need to put symbols <- "SPY" somewhere, as well
> as remove the initEq argument. (Was copying a bit too fast from my
> usual demos.) But yeah, the logic in my demo works.
>
> On Fri, Aug 22, 2014 at 5:19 PM, stergios marinopoulos
> <stergenator at gmail.com> wrote:
> > (I mistakenly did not include r-sig-finance at r-project.org on the
> response.)
> >
> >
> > Hi Ilya,
> >
> > I switched the orderqty as you suggested, but nothing changed.  That's
> > usually something I try when I question the total position quantity and
> in
> > my experience even if I had the wrong sign, it would still change the
> > quantity.  But in this case, nothing changed.
> >
> > I do have the macd.R demo from the source working, which has a
> > commented-out stoptrailing chaining rule.  I'll check out your example
> > closely, and since it uses a limit order hopefully it should apply more
> > directly to my case.
> >
> > Thanks for the ideas,
> >
> > BTW, I was reading http://quantstrattrader.wordpress.com/ earlier in day
> > looking for clues to my problem.  That's a nice site.  Good work.
> >
> >
> >
> >
> > --
> > sm
> > Stergios Marinopoulos
> >
> >
> > On Fri, Aug 22, 2014 at 1:38 PM, Ilya Kipnis <ilya.kipnis at gmail.com>
> wrote:
> >
> >> Stergios,
> >>
> >> Can you rerun your code with orderqty set to -1 for your chain rule
> >> and see if that solves it?
> >>
> >> -Ilya
> >>
> >> On Fri, Aug 22, 2014 at 4:08 PM, stergios marinopoulos
> >> <stergenator at gmail.com> wrote:
> >> > Hi, I am having trouble getting a simple profit taking order to work
> via
> >> a
> >> > chaining rule.  In the contrived example below, I force a long entry
> of 2
> >> > shares.  Then I expect 1 share to be sold after a 1 point move (i.e.
> the
> >> > "profit taker"), and then I expect the final share to be sold when
> price
> >> > falls below the SMA50.
> >> >
> >> > While I do not see the profit taker order get executed, the price
> falling
> >> > below the SMA50 works as expected for all remaining shares.
> >> >
> >> > I would appreciate it if someone could point out what I am doing wrong
> >> with
> >> > the chaining rule.
> >> >
> >> > Thank you,
> >> > --
> >> > sm
> >> > Stergios Marinopoulos
> >> >
> >> >
> >> > library(quantstrat)
> >> >
> >> > # Boiler Plate
> >> > tickerSymbol   = "GE"
> >> > strategyStr  = 'TwoUnits'
> >> > GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
> >> > auto.assign = FALSE)
> >> > GE$SMA50  = SMA(Cl(GE), n = 50)
> >> > GE$CrossBack  = Cl(GE) - GE$SMA50
> >> > GE = GE["2012-07-15/"]
> >> > magicGoLongDay = "2012-07-23"
> >> >
> >> > currency("USD")
> >> > stock(tickerSymbol, currency="USD", multiplier=1)
> >> > rm.strat(strategyStr)
> >> > initDate = index(GE[1]) - 1
> >> > initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
> >> > currency="USD")
> >> > initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
> >> > initEq=1e4, currency="USD")
> >> > initOrders(portfolio=strategyStr, initDate=initDate)
> >> > strategy(strategyStr, store=TRUE)
> >> >
> >> > zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
> >> > chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
> >> > col=6);addTA(zeros, on=2, col=7);")
> >> >
> >> > # The indicator function.  Force a TRUE value on 6/5/2012
> >> > myIndicator <- function(n=2)
> >> > {
> >> >   indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
> >> >   names(indicator) = "indValue"
> >> >   indicator[magicGoLongDay, "indValue"] = 1
> >> >   return( indicator[, "indValue"] )
> >> > }
> >> >
> >> > add.indicator(strategy=strategyStr, name="myIndicator",
> >> > arguments=list(n=2), label="indLabel")
> >> >
> >> > add.signal(
> >> >   strategy=strategyStr,
> >> >   name="sigThreshold",
> >> >   arguments=list(
> >> >     column       = "CrossBack",
> >> >     relationship = "lt",
> >> >     threshold    = 0,
> >> >     cross        = TRUE
> >> >   ),
> >> >   label="sig.price.lt.sma50"
> >> > )
> >> >
> >> > add.signal(
> >> >   strategy=strategyStr,
> >> >   name="sigThreshold",
> >> >   arguments=list(
> >> >     column       = "indValue.indLabel",
> >> >     relationship = "eq",
> >> >     threshold    = 1,
> >> >     cross        = TRUE
> >> >   ),
> >> >   label="goLong"
> >> > )
> >> >
> >> >
> >> > # Exit remaining when price crosses below on SMA50
> >> > add.rule(strategy=strategyStr, name='ruleSignal',
> >> >   arguments = list(
> >> >     sigcol      = "sig.price.lt.sma50",
> >> >     sigval      = TRUE,
> >> >     replace     = FALSE,
> >> >     orderside   = 'long',
> >> >     ordertype   = 'market',
> >> >     orderqty    = 'all',
> >> >     prefer      = 'Open'
> >> >   ),
> >> >   type    = 'exit',
> >> >   label   = 'ExitPriceLTSMA50'
> >> > )
> >> >
> >> > # Exit 1 unit as an initial profit target
> >> > add.rule(strategy=strategyStr, name='ruleSignal',
> >> >   arguments = list(
> >> >     sigcol    = 'goLong',
> >> >     sigval    = TRUE,
> >> >     replace   = FALSE,
> >> >     orderside = 'long',
> >> >     ordertype = 'limit',
> >> > #   ruletype  = 'exit',   # Is this order ambiguous?
> >> >     tmult     = FALSE,
> >> >     threshold = 1.00,
> >> >     orderqty  = 1,
> >> >     prefer    = 'Open'
> >> >   ),
> >> >   type    = 'chain',
> >> >   parent  = 'EnterLong',
> >> >   label   = 'TakeProfit'
> >> > )
> >> >
> >> > # Go long 2 shares when we have long signal
> >> > add.rule(strategy=strategyStr, name = 'ruleSignal',
> >> >   arguments = list(
> >> >     sigcol    = 'goLong',
> >> >     sigval    = TRUE,
> >> >     orderside = 'long' ,
> >> >     ordertype = 'market',
> >> >     orderqty  = 2,
> >> >     prefer    = 'Open'
> >> >   ),
> >> >   type  = 'enter',
> >> >   label = 'EnterLong'
> >> > )
> >> >
> >> > out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
> >> > verbose=TRUE, debug=TRUE)
> >> >
> >> > # Calculate P&L and resulting equity with blotter
> >> > dateRange=paste(
> >> >            as.character(index(first(GE))-1),
> >> >            '::',
> >> >            as.character(index(last(GE))+1),
> >> >            sep='')
> >> >
> >> > updatePortf(strategyStr, Dates = dateRange)
> >> > updateAcct(strategyStr,  Dates = dateRange)
> >> > updateEndEq(strategyStr, Dates = dateRange)
> >> >
> >> > obook        = getOrderBook(portfolio=strategyStr)
> >> > transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)
> >> >
> >> >         [[alternative HTML version deleted]]
> >> >
> >> > _______________________________________________
> >> > R-SIG-Finance at r-project.org mailing list
> >> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> >> > -- Subscriber-posting only. If you want to post, subscribe first.
> >> > -- Also note that this is not the r-help list where general R
> questions
> >> should go.
> >>
> >
> >         [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> should go.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140825/975e535d/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ilya.R
Type: application/octet-stream
Size: 3048 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140825/975e535d/attachment.obj>

From stergenator at gmail.com  Mon Aug 25 19:39:32 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Mon, 25 Aug 2014 10:39:32 -0700
Subject: [R-SIG-Finance] Fwd: quantstrat chain rule type
In-Reply-To: <CAPPM_gSte6YHK-TS5ZFbwMmTDaztnLbSZdPVy3jgSyCBP4LepA@mail.gmail.com>
References: <CAM8YH=aNyXfqFR4kO4PtzNhL4op2d0AxuNEDfFTLE8nj_Uo-ag@mail.gmail.com>
	<CA+oJuEEpqxhpjDphTB8DxALJqfPGtOzi5AxMms7dAsyBpspN7Q@mail.gmail.com>
	<CAM8YH=bosAYPMQW2Kr0ow=Dx+mjQDh3-xT8M5okTB_mj2tNHog@mail.gmail.com>
	<CAM8YH=YijfmLbakKfiWcMYB832jcKBi81cdiMSrkfW-mm+_gsQ@mail.gmail.com>
	<CAPPM_gSte6YHK-TS5ZFbwMmTDaztnLbSZdPVy3jgSyCBP4LepA@mail.gmail.com>
Message-ID: <CAM8YH=aY1HOMprQ=j6iDcmwRsNMy4m95O0=6M+pVX0k0HxSV8w@mail.gmail.com>

Wow, that's subtle.  Even though all the examples show setting the
timezone, I somehow still missed it.  Thanks for your help.

The complete, working example is attached for anyone else following along,
(now or in the future)

--
sm
Stergios Marinopoulos


On Sat, Aug 23, 2014 at 8:38 AM, Joshua Ulrich <josh.m.ulrich at gmail.com>
wrote:

> Stergios,
>
> In addition to Ilya's correction of orderqty = -1, you need to
> explicitly set the timezone of your R session using:
> Sys.setenv(TZ="UTC").
>
> If you do not do this, then the blotter portfolio xts object will be
> initialized with your current system's timezone, but the timezone on
> the GE data is "UTC" because it has a "Date" class index.  That causes
> the chain rule's parent order price lookup to fail (because the
> timestamps do not match).
>
> Best,
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
>
>
> On Fri, Aug 22, 2014 at 4:19 PM, stergios marinopoulos
> <stergenator at gmail.com> wrote:
> > (I mistakenly did not include r-sig-finance at r-project.org on the
> response.)
> >
> >
> > Hi Ilya,
> >
> > I switched the orderqty as you suggested, but nothing changed.  That's
> > usually something I try when I question the total position quantity and
> in
> > my experience even if I had the wrong sign, it would still change the
> > quantity.  But in this case, nothing changed.
> >
> > I do have the macd.R demo from the source working, which has a
> > commented-out stoptrailing chaining rule.  I'll check out your example
> > closely, and since it uses a limit order hopefully it should apply more
> > directly to my case.
> >
> > Thanks for the ideas,
> >
> > BTW, I was reading http://quantstrattrader.wordpress.com/ earlier in day
> > looking for clues to my problem.  That's a nice site.  Good work.
> >
> >
> >
> >
> > --
> > sm
> > Stergios Marinopoulos
> >
> >
> > On Fri, Aug 22, 2014 at 1:38 PM, Ilya Kipnis <ilya.kipnis at gmail.com>
> wrote:
> >
> >> Stergios,
> >>
> >> Can you rerun your code with orderqty set to -1 for your chain rule
> >> and see if that solves it?
> >>
> >> -Ilya
> >>
> >> On Fri, Aug 22, 2014 at 4:08 PM, stergios marinopoulos
> >> <stergenator at gmail.com> wrote:
> >> > Hi, I am having trouble getting a simple profit taking order to work
> via
> >> a
> >> > chaining rule.  In the contrived example below, I force a long entry
> of 2
> >> > shares.  Then I expect 1 share to be sold after a 1 point move (i.e.
> the
> >> > "profit taker"), and then I expect the final share to be sold when
> price
> >> > falls below the SMA50.
> >> >
> >> > While I do not see the profit taker order get executed, the price
> falling
> >> > below the SMA50 works as expected for all remaining shares.
> >> >
> >> > I would appreciate it if someone could point out what I am doing wrong
> >> with
> >> > the chaining rule.
> >> >
> >> > Thank you,
> >> > --
> >> > sm
> >> > Stergios Marinopoulos
> >> >
> >> >
> >> > library(quantstrat)
> >> >
> >> > # Boiler Plate
> >> > tickerSymbol   = "GE"
> >> > strategyStr  = 'TwoUnits'
> >> > GE  = getSymbols(tickerSymbol, from = "2012-01-01", to = "2012-11-15",
> >> > auto.assign = FALSE)
> >> > GE$SMA50  = SMA(Cl(GE), n = 50)
> >> > GE$CrossBack  = Cl(GE) - GE$SMA50
> >> > GE = GE["2012-07-15/"]
> >> > magicGoLongDay = "2012-07-23"
> >> >
> >> > currency("USD")
> >> > stock(tickerSymbol, currency="USD", multiplier=1)
> >> > rm.strat(strategyStr)
> >> > initDate = index(GE[1]) - 1
> >> > initPortf(name=strategyStr, symbols=tickerSymbol, initDate=initDate,
> >> > currency="USD")
> >> > initAcct(name=strategyStr, portfolios=strategyStr, initDate=initDate,
> >> > initEq=1e4, currency="USD")
> >> > initOrders(portfolio=strategyStr, initDate=initDate)
> >> > strategy(strategyStr, store=TRUE)
> >> >
> >> > zeros = xts(rep(0,nrow(GE)), order.by=index(GE))
> >> > chartSeries(GE, TA="addTA(GE$SMA50, on=1, col=6);addTA(GE$CrossBack,
> >> > col=6);addTA(zeros, on=2, col=7);")
> >> >
> >> > # The indicator function.  Force a TRUE value on 6/5/2012
> >> > myIndicator <- function(n=2)
> >> > {
> >> >   indicator = xts(x=rep(0, nrow(GE)), order.by=index(GE) )
> >> >   names(indicator) = "indValue"
> >> >   indicator[magicGoLongDay, "indValue"] = 1
> >> >   return( indicator[, "indValue"] )
> >> > }
> >> >
> >> > add.indicator(strategy=strategyStr, name="myIndicator",
> >> > arguments=list(n=2), label="indLabel")
> >> >
> >> > add.signal(
> >> >   strategy=strategyStr,
> >> >   name="sigThreshold",
> >> >   arguments=list(
> >> >     column       = "CrossBack",
> >> >     relationship = "lt",
> >> >     threshold    = 0,
> >> >     cross        = TRUE
> >> >   ),
> >> >   label="sig.price.lt.sma50"
> >> > )
> >> >
> >> > add.signal(
> >> >   strategy=strategyStr,
> >> >   name="sigThreshold",
> >> >   arguments=list(
> >> >     column       = "indValue.indLabel",
> >> >     relationship = "eq",
> >> >     threshold    = 1,
> >> >     cross        = TRUE
> >> >   ),
> >> >   label="goLong"
> >> > )
> >> >
> >> >
> >> > # Exit remaining when price crosses below on SMA50
> >> > add.rule(strategy=strategyStr, name='ruleSignal',
> >> >   arguments = list(
> >> >     sigcol      = "sig.price.lt.sma50",
> >> >     sigval      = TRUE,
> >> >     replace     = FALSE,
> >> >     orderside   = 'long',
> >> >     ordertype   = 'market',
> >> >     orderqty    = 'all',
> >> >     prefer      = 'Open'
> >> >   ),
> >> >   type    = 'exit',
> >> >   label   = 'ExitPriceLTSMA50'
> >> > )
> >> >
> >> > # Exit 1 unit as an initial profit target
> >> > add.rule(strategy=strategyStr, name='ruleSignal',
> >> >   arguments = list(
> >> >     sigcol    = 'goLong',
> >> >     sigval    = TRUE,
> >> >     replace   = FALSE,
> >> >     orderside = 'long',
> >> >     ordertype = 'limit',
> >> > #   ruletype  = 'exit',   # Is this order ambiguous?
> >> >     tmult     = FALSE,
> >> >     threshold = 1.00,
> >> >     orderqty  = 1,
> >> >     prefer    = 'Open'
> >> >   ),
> >> >   type    = 'chain',
> >> >   parent  = 'EnterLong',
> >> >   label   = 'TakeProfit'
> >> > )
> >> >
> >> > # Go long 2 shares when we have long signal
> >> > add.rule(strategy=strategyStr, name = 'ruleSignal',
> >> >   arguments = list(
> >> >     sigcol    = 'goLong',
> >> >     sigval    = TRUE,
> >> >     orderside = 'long' ,
> >> >     ordertype = 'market',
> >> >     orderqty  = 2,
> >> >     prefer    = 'Open'
> >> >   ),
> >> >   type  = 'enter',
> >> >   label = 'EnterLong'
> >> > )
> >> >
> >> > out = applyStrategy(strategy=strategyStr, portfolios=strategyStr,
> >> > verbose=TRUE, debug=TRUE)
> >> >
> >> > # Calculate P&L and resulting equity with blotter
> >> > dateRange=paste(
> >> >            as.character(index(first(GE))-1),
> >> >            '::',
> >> >            as.character(index(last(GE))+1),
> >> >            sep='')
> >> >
> >> > updatePortf(strategyStr, Dates = dateRange)
> >> > updateAcct(strategyStr,  Dates = dateRange)
> >> > updateEndEq(strategyStr, Dates = dateRange)
> >> >
> >> > obook        = getOrderBook(portfolio=strategyStr)
> >> > transactions = getTxns(Portfolio=strategyStr, Symbol=tickerSymbol)
> >> >
> >> >         [[alternative HTML version deleted]]
> >> >
> >> > _______________________________________________
> >> > R-SIG-Finance at r-project.org mailing list
> >> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> >> > -- Subscriber-posting only. If you want to post, subscribe first.
> >> > -- Also note that this is not the r-help list where general R
> questions
> >> should go.
> >>
> >
> >         [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> should go.
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140825/329e737f/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qsChainingSellLimit.R
Type: application/octet-stream
Size: 5131 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140825/329e737f/attachment.obj>

From daniel.cegielka at gmail.com  Tue Aug 26 17:24:38 2014
From: daniel.cegielka at gmail.com (=?UTF-8?Q?Daniel_Cegie=C5=82ka?=)
Date: Tue, 26 Aug 2014 17:24:38 +0200
Subject: [R-SIG-Finance] Ilya's Kipnis blog (quantstrat)
Message-ID: <CAPLrYEQb3bPZi4k_6a=QJWy0=80Ky1Cag1Nw4thCKkP+kTpRdw@mail.gmail.com>

http://quantstrattrader.wordpress.com/

Best regards,
Daniel

	[[alternative HTML version deleted]]


From daniel.cegielka at gmail.com  Tue Aug 26 17:56:16 2014
From: daniel.cegielka at gmail.com (=?UTF-8?Q?Daniel_Cegie=C5=82ka?=)
Date: Tue, 26 Aug 2014 17:56:16 +0200
Subject: [R-SIG-Finance] Ilya's Kipnis blog (quantstrat)
In-Reply-To: <CA+oJuEGC1D7-5+SFBX-XFNJe6kaT1ggKyJPCrrDjKh7p=Mcbpg@mail.gmail.com>
References: <CAPLrYEQb3bPZi4k_6a=QJWy0=80Ky1Cag1Nw4thCKkP+kTpRdw@mail.gmail.com>
	<CA+oJuEGC1D7-5+SFBX-XFNJe6kaT1ggKyJPCrrDjKh7p=Mcbpg@mail.gmail.com>
Message-ID: <CAPLrYESsXW_U-06gaYZu5-YWspVrXECZSoRuwhxPHudo0x3m4Q@mail.gmail.com>

2014-08-26 17:35 GMT+02:00 Ilya Kipnis <ilya.kipnis at gmail.com>:
>
> Daniel,
>
> Was this a response to somebody's question, or are you just sending a
> link for the purpose of knowledge? In any case, thanks.

No, I just shared a link with the group. Thanks for such an amazing blog!

Daniel

>
> -Ilya
>


From roger.bos at rothschild.com  Tue Aug 26 19:34:02 2014
From: roger.bos at rothschild.com (Bos, Roger)
Date: Tue, 26 Aug 2014 17:34:02 +0000
Subject: [R-SIG-Finance] Ilya's Kipnis blog (quantstrat)
In-Reply-To: <CAPLrYESsXW_U-06gaYZu5-YWspVrXECZSoRuwhxPHudo0x3m4Q@mail.gmail.com>
References: <CAPLrYEQb3bPZi4k_6a=QJWy0=80Ky1Cag1Nw4thCKkP+kTpRdw@mail.gmail.com>
	<CA+oJuEGC1D7-5+SFBX-XFNJe6kaT1ggKyJPCrrDjKh7p=Mcbpg@mail.gmail.com>
	<CAPLrYESsXW_U-06gaYZu5-YWspVrXECZSoRuwhxPHudo0x3m4Q@mail.gmail.com>
Message-ID: <0765308CD028654885F30322557308D81EC93BD5@NYCSM0208.rth.ad.rothschild.com>

Ilya,

Thanks for your blog, it looks interesting.  I tried running the code in your latest blog entry and got an error in the applyStrategy line.

> out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
Error in `[.xts`(x, seq_len(xlen - n)) : subscript out of bounds

Here is my sessionInfo:

R version 3.1.1 (2014-07-10)
Platform: x86_64-w64-mingw32/x64 (64-bit)

locale:
[1] LC_COLLATE=English_United States.1252
[2] LC_CTYPE=English_United States.1252
[3] LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United States.1252

attached base packages:
[1] datasets  tools     utils     stats     graphics  grDevices
[7] methods   base

other attached packages:
 [1] quantstrat_0.8.2           foreach_1.4.2
 [3] blotter_0.8.19             PerformanceAnalytics_1.1.0
 [5] FinancialInstrument_1.1.9  quantmod_0.4-0
 [7] TTR_0.22-0                 Defaults_1.1-1
 [9] Rpad_1.3.0                 formatR_0.10
[11] dplyr_0.2                  reshape2_1.4
[13] ggplot2_1.0.0              xts_0.9-7
[15] zoo_1.7-11                 XLConnect_0.2-7
[17] timeDate_3010.98           R2HTML_2.2.1
[19] RODBC_1.3-10               quadprog_1.5-5
[21] prettyR_2.0-8              MASS_7.3-33
[23] fortunes_1.5-2             corpcor_1.6.6

loaded via a namespace (and not attached):
 [1] assertthat_0.1   codetools_0.2-8  colorspace_1.2-4
 [4] digest_0.6.4     grid_3.1.1       gtable_0.1.2
 [7] iterators_1.0.7  lattice_0.20-29  magrittr_1.0.1
[10] munsell_0.4.2    parallel_3.1.1   plyr_1.8.1
[13] proto_0.3-10     Rcpp_0.11.2      rJava_0.9-6
[16] scales_0.2.4     stringr_0.6.2

Here is the complete code I tried to run (I pasted in the code for demoData.R so there is only one file (for simplicity):

require(DSTrading)
require(IKTrading)
require(quantstrat)
require(PerformanceAnalytics)

initDate="1990-01-01"
from="2003-01-01"
to="2010-12-31"
options(width=70)
verbose=TRUE

### start demoData.R
options("getSymbols.warning4.0"=FALSE)
rm(list=ls(.blotter), envir=.blotter)
initDate='1990-12-31'

currency('USD')
Sys.setenv(TZ="UTC")

symbols <- c("XLB", #SPDR Materials sector
             "XLE", #SPDR Energy sector
             "XLF", #SPDR Financial sector
             "XLP", #SPDR Consumer staples sector
             "XLI", #SPDR Industrial sector
             "XLU", #SPDR Utilities sector
             "XLV", #SPDR Healthcare sector
             "XLK", #SPDR Tech sector
             "XLY", #SPDR Consumer discretionary sector
             "RWR", #SPDR Dow Jones REIT ETF

             "EWJ", #iShares Japan
             "EWG", #iShares Germany
             "EWU", #iShares UK
             "EWC", #iShares Canada
             "EWY", #iShares South Korea
             "EWA", #iShares Australia
             "EWH", #iShares Hong Kong
             "EWS", #iShares Singapore
             "IYZ", #iShares U.S. Telecom
             "EZU", #iShares MSCI EMU ETF
             "IYR", #iShares U.S. Real Estate
             "EWT", #iShares Taiwan
             "EWZ", #iShares Brazil
             "EFA", #iShares EAFE
             "IGE", #iShares North American Natural Resources
             "EPP", #iShares Pacific Ex Japan
             "LQD", #iShares Investment Grade Corporate Bonds
             "SHY", #iShares 1-3 year TBonds
             "IEF", #iShares 3-7 year TBonds
             "TLT" #iShares 20+ year Bonds
)

#SPDR ETFs first, iShares ETFs afterwards
if(!"XLB" %in% ls()) {
  suppressMessages(getSymbols(symbols, from="2003-01-01", to="2010-12-31", src="yahoo", adjust=TRUE))
}

stock(symbols, currency="USD", multiplier=1)
### end demoData.R

#trade sizing and initial equity settings
tradeSize <- 100000
initEq <- tradeSize*length(symbols)

strategy.st <- portfolio.st <- account.st <- "Cycle_RSI_I"
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols=symbols, initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD',initEq=initEq)
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)

#parameters
nRSI=2
RSIentry=10
RSIexit=70

nSMA=200

period=10
pctATR=.04

#indicators
add.indicator(strategy.st, name="lagATR",
              arguments=list(HLC=quote(HLC(mktdata)), n=period),
              label="atrX")
add.indicator(strategy.st, name="SMA",
              arguments=list(x=quote(Cl(mktdata)), n=nSMA),
              label="SMA")
add.indicator(strategy.st, name="CycleRSI",
              arguments=list(x=quote(Cl(mktdata)), n=nRSI),
              label="RSI")

#signals
add.signal(strategy.st, name="sigComparison",
           arguments=list(columns=c("Close", "SMA"), relationship="gt"),
           label="ClGtSMA")

add.signal(strategy.st, name="sigThreshold",
           arguments=list(column="CycleRSI.RSI", threshold=RSIentry,
                          relationship="lt", cross=FALSE),
           label="RSIltEntryThresh")

add.signal(strategy.st, name="sigAND",
           arguments=list(columns=c("ClGtSMA", "RSIltEntryThresh"),
                          cross=TRUE),
           label="longEntry")

add.signal(strategy.st, name="sigCrossover",
           arguments=list(columns=c("Close", "SMA"), relationship="lt"),
           label="exitSMA")

add.signal(strategy.st, name="sigThreshold",
           arguments=list(column="CycleRSI.RSI", threshold=RSIexit,
                          relationship="gt", cross=TRUE),
           label="longExit")

#rules
#rules
add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="longEntry", sigval=TRUE,
                        ordertype="market",
                        orderside="long", replace=FALSE,
                        prefer="Open", osFUN=osDollarATR,
                        tradeSize=tradeSize, pctATR=pctATR,
                        atrMod="X"),
         type="enter", path.dep=TRUE)

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="longExit", sigval=TRUE,
                        orderqty="all", ordertype="market",
                        orderside="long", replace=FALSE,
                        prefer="Open"),
         type="exit", path.dep=TRUE)

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="exitSMA", sigval=TRUE,
                        orderqty="all", ordertype="market",
                        orderside="long", replace=FALSE,
                        prefer="Open"),
         type="exit", path.dep=TRUE)

#apply strategy
t1 <- Sys.time()
out <- applyStrategy(strategy=strategy.st,portfolios=portfolio.st)
t2 <- Sys.time()
print(t2-t1)

#set up analytics
updatePortf(portfolio.st)
dateRange <- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st,dateRange)
updateEndEq(account.st)


agg.chart.ME <- function(Portfolio, Symbols, type=c("MAE", "MFE"), scale=c("cash", "percent", "tick")) {
  type=type[1]
  scale=scale[1]
  trades <- list()
  length(trades) <- length(Symbols)
  for(Symbol in Symbols) {
    trades[[Symbol]] <- pts <- perTradeStats(Portfolio=Portfolio, Symbol=Symbol, includeOpenTrade=FALSE)
  }
  trades <- do.call(rbind, trades)
  trades$Pct.Net.Trading.PL <- 100 * trades$Pct.Net.Trading.PL
  trades$Pct.MAE <- 100 * trades$Pct.MAE
  trades$Pct.MFE <- 100 * trades$Pct.MFE
  profitable <- (trades$Net.Trading.PL > 0)
  switch(scale, cash = {
    .ylab <- "Profit/Loss (cash)"
    if (type == "MAE") {
      .cols <- c("MAE", "Net.Trading.PL")
      .xlab <- "Drawdown (cash)"
      .main <- "Maximum Adverse Excursion (MAE)"
    } else {
      .cols <- c("MFE", "Net.Trading.PL")
      .xlab <- "Run Up (cash)"
      .main <- "Maximum Favourable Excursion (MFE)"
    }
  }, percent = {
    .ylab <- "Profit/Loss (%)"
    if (type == "MAE") {
      .cols <- c("Pct.MAE", "Pct.Net.Trading.PL")
      .xlab <- "Drawdown (%)"
      .main <- "Maximum Adverse Excursion (MAE)"
    } else {
      .cols <- c("Pct.MFE", "Pct.Net.Trading.PL")
      .xlab <- "Run Up (%)"
      .main <- "Maximum Favourable Excursion (MFE)"
    }
  }, tick = {
    .ylab <- "Profit/Loss (ticks)"
    if (type == "MAE") {
      .cols <- c("tick.MAE", "tick.Net.Trading.PL")
      .xlab <- "Drawdown (ticks)"
      .main <- "Maximum Adverse Excursion (MAE)"
    } else {
      .cols <- c("tick.MFE", "tick.Net.Trading.PL")
      .xlab <- "Run Up (ticks)"
      .main <- "Maximum Favourable Excursion (MFE)"
    }
  })
  .main <- paste("All trades", .main)
  plot(abs(trades[, .cols]), type = "n", xlab = .xlab, ylab = .ylab,
       main = .main)
  grid()
  points(abs(trades[profitable, .cols]), pch = 24, col = "green",
         bg = "green", cex = 0.6)
  points(abs(trades[!profitable, .cols]), pch = 25, col = "red",
         bg = "red", cex = 0.6)
  abline(a = 0, b = 1, lty = "dashed", col = "darkgrey")
  legend(x = "bottomright", inset = 0.1, legend = c("Profitable Trade",
                                                    "Losing Trade"), pch = c(24, 25), col = c("green", "red"),
         pt.bg = c("green", "red"))
}






***************************************************************
This message and any attachments are for the named person's use only.
This message may contain confidential, proprietary or legally privileged
information. No right to confidential or privileged treatment
of this message is waived or lost by an error in transmission.
If you have received this message in error, please immediately
notify the sender by e-mail, delete the message, any attachments and all
copies from your system and destroy any hard copies. You must
not, directly or indirectly, use, disclose, distribute,
print or copy any part of this message or any attachments if you are not
the intended recipient.



-----Original Message-----
From: r-sig-finance-bounces at r-project.org [mailto:r-sig-finance-bounces at r-project.org] On Behalf Of Daniel Cegielka
Sent: Tuesday, August 26, 2014 11:56 AM
To: Ilya Kipnis; R-Finance
Subject: Re: [R-SIG-Finance] Ilya's Kipnis blog (quantstrat)

2014-08-26 17:35 GMT+02:00 Ilya Kipnis <ilya.kipnis at gmail.com>:
>
> Daniel,
>
> Was this a response to somebody's question, or are you just sending a
> link for the purpose of knowledge? In any case, thanks.

No, I just shared a link with the group. Thanks for such an amazing blog!

Daniel

>
> -Ilya
>

_______________________________________________
R-SIG-Finance at r-project.org mailing list https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.

From zhangchao at gmail.com  Wed Aug 27 18:04:56 2014
From: zhangchao at gmail.com (Chao Zhang)
Date: Wed, 27 Aug 2014 12:04:56 -0400
Subject: [R-SIG-Finance] Rbbg:::bdh Override Field Question
Message-ID: <CAL4MF2gFq_DfcbK0M5jt900aj3OoKjOZkGcU9rw4v1Hh2SLbOg@mail.gmail.com>

Hey Guys,

I am trying to use the code below to run a BDH call with override
fields/values. However, the results I get are the same with or without the
overrides.

But if I do the same BDH call in Excel, the override fields/values will be
effective and I will get the results I want. Can someone point out to me
what's wrong with my code below? Thanks,

library(Rbbg)

conBBG <- blpConnect(throw.ticker.errors = FALSE)

res <- bdh(conn=conBBG,
           securities='IBM equity',
           fields='TRAIL_12M_EPS',
           start_date=as.Date('2000-01-01'),
           override_fields='BEST_FPERIOD_OVERRIDE',
           override_values='1GQ'
)

- Chao

	[[alternative HTML version deleted]]


From john.laing at gmail.com  Wed Aug 27 18:49:28 2014
From: john.laing at gmail.com (John Laing)
Date: Wed, 27 Aug 2014 12:49:28 -0400
Subject: [R-SIG-Finance] Rbbg:::bdh Override Field Question
In-Reply-To: <CAL4MF2gFq_DfcbK0M5jt900aj3OoKjOZkGcU9rw4v1Hh2SLbOg@mail.gmail.com>
References: <CAL4MF2gFq_DfcbK0M5jt900aj3OoKjOZkGcU9rw4v1Hh2SLbOg@mail.gmail.com>
Message-ID: <CAA3Wa=uy9nbJirxA9AiQs4_p-B5-5QGHXdRkW-aiG5Y4vQk0Qg@mail.gmail.com>

Hi Chao,

Can you send the Excel formulas you're using to get different results? For
me these return the same:
=BDH("IBM Equity","TRAIL_12M_EPS","1/1/2000","8/27/2014")
=BDH("IBM
Equity","TRAIL_12M_EPS","1/1/2000","8/27/2014","BEST_FPERIOD_OVERRIDE=1GQ")

-John


On Wed, Aug 27, 2014 at 12:04 PM, Chao Zhang <zhangchao at gmail.com> wrote:

> Hey Guys,
>
> I am trying to use the code below to run a BDH call with override
> fields/values. However, the results I get are the same with or without the
> overrides.
>
> But if I do the same BDH call in Excel, the override fields/values will be
> effective and I will get the results I want. Can someone point out to me
> what's wrong with my code below? Thanks,
>
> library(Rbbg)
>
> conBBG <- blpConnect(throw.ticker.errors = FALSE)
>
> res <- bdh(conn=conBBG,
>            securities='IBM equity',
>            fields='TRAIL_12M_EPS',
>            start_date=as.Date('2000-01-01'),
>            override_fields='BEST_FPERIOD_OVERRIDE',
>            override_values='1GQ'
> )
>
> - Chao
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From a.chandhial at btinternet.com  Sun Aug 31 09:13:53 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Sun, 31 Aug 2014 08:13:53 +0100
Subject: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization &
	walk-forward procedure
Message-ID: <26919643.1747.1409469233231.JavaMail.defaultUser@defaultHost>

I cannot get quantstrat's luxor.8 periodic optimization & walk-forward procedure, in the demos working.
The idea being akin to the following diagram:
http://www.tradestation.com/trading-technology/tradestation-platform/analyze/walk-forward-optimizer
The error I get is,
Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative subscripts") : 
  missing value where TRUE/FALSE needed 
If anybody can please email a working program.
Otherwise, what I am really after is a demo with the workflow: 
 - a simple vanilla technical stratgey - I can do
 - In-sample optimization of parameter(s) of simple strategy, Out-of-sample run - I can do
 - periodic optimization & walk-forward procedure 
Amarjit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140831/d0c0e721/attachment.html>

From gyollin at r-programming.org  Sun Aug 31 19:54:09 2014
From: gyollin at r-programming.org (Guy Yollin)
Date: Sun, 31 Aug 2014 10:54:09 -0700
Subject: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization &
 walk-forward procedure
In-Reply-To: <26919643.1747.1409469233231.JavaMail.defaultUser@defaultHost>
References: <26919643.1747.1409469233231.JavaMail.defaultUser@defaultHost>
Message-ID: <54036141.80606@r-programming.org>

Amarjit,

I'm pretty sure that you can get the luxor.8.walk.forward.R script to 
run successfully as follows:
1. execute luxor.5.strategy.ordersets.R which saves the strategy
2. modify the the period argument in the call to walk.forward() to be 
period='days'

Good luck with this.

G


On 8/31/2014 12:13 AM, amarjit chandhial wrote:
>
>
> I cannot get quantstrat's luxor.8 periodic optimization & walk-forward 
> procedure, in the demos working.
>
>
> The idea being akin to the following diagram:
>
> http://www.tradestation.com/trading-technology/tradestation-platform/analyze/walk-forward-optimizer
>
>
> The error I get is,
>
> Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative 
> subscripts") :
>   missing value where TRUE/FALSE needed
>
>
> If anybody can please email a working program.
>
>
>
> Otherwise, what I am really after is a demo with the workflow:
>  - a simple vanilla technical stratgey - I can do
>  - In-sample optimization of parameter(s) of simple strategy, 
> Out-of-sample run - I can do
>  - periodic optimization & walk-forward procedure
>
>
>
>
> Amarjit
>
>
>
>
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


	[[alternative HTML version deleted]]


From 1111938 at qq.com  Mon Sep  1 05:23:12 2014
From: 1111938 at qq.com (domodo)
Date: Sun, 31 Aug 2014 20:23:12 -0700 (PDT)
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
Message-ID: <1409541792340-4696291.post@n4.nabble.com>

hi,guys,I'm learning blotter package,and have coded several trade strategies
in R.
all are good when the strategis run on daily data,but when I run on intraday
data, function 'addtxn' runs incorrectly.

the strategy stores trade signals of each bar,when close price cross over
sma,signal = 1,close price cross under sma, signal = -1,otherwise, signal =
0

and the bar-by-bar treatment are:

#Bar-by-bar treatment
for( i in 17:nrow(if2) )
{
  currentDate <- time(if2)[i]
  
  equity<-getEndEq(b.strategy, currentDate)
  Posn <- getPosQty(b.strategy, Symbol='if2', Date=currentDate)
  #cat(as.character(i),"position on current bar is ",Posn, append = FALSE)
  
  if(!is.na(MA[i-2])) 
  {
    if( Posn == 0 ) { #no marketposition 
      if( signal[i] == 1 ) {
        #long entry
        #openprice <- as.double((Op(if2[i])))  #the result is the same as
the following line
        openprice <- as.double((Op(if2[currentDate])))
        unitsize <- abs(as.numeric(trunc(equity/(openprice*300*0.15))))
        addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
               TxnPrice=openprice, TxnQty = unitsize ,
TxnFees=-openprice*300*0.00005*unitsize, verbose = F) 
      }
    } 
    else { 
      if( signal[i] == -1 ) {
        #exit position
        openprice <- as.double((Op(if2[currentDate])))
        unitsize  <- abs(getPosQty(b.strategy, Symbol='if2',
Date=currentDate))        
        addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
               TxnPrice=openprice, TxnQty = -unitsize ,
TxnFees=-openprice*300*0.00005*unitsize, verbose = F) 
      }
    }
  }
  
  updatePortf(b.strategy, Dates = currentDate)
  updateAcct(b.strategy, Dates = currentDate)
  updateEndEq(b.strategy, Dates = currentDate)
}

these are signal's table

1	2012-01-18 09:15:00	0
2	2012-01-18 09:16:00	0
3	2012-01-18 09:17:00	0
4	2012-01-18 09:18:00	0
5	2012-01-18 09:19:00	0
6	2012-01-18 09:20:00	0
7	2012-01-18 09:21:00	0
8	2012-01-18 09:22:00	0
9	2012-01-18 09:23:00	0
10	2012-01-18 09:24:00	0
11	2012-01-18 09:25:00	0
12	2012-01-18 09:26:00	0
13	2012-01-18 09:27:00	0
14	2012-01-18 09:28:00	0
15	2012-01-18 09:29:00	0
16	2012-01-18 09:30:00	0
17	2012-01-18 09:31:00	0
18	2012-01-18 09:32:00	-1
19	2012-01-18 09:33:00	0
20	2012-01-18 09:34:00	0
21	2012-01-18 09:35:00	1
22	2012-01-18 09:36:00	0
23	2012-01-18 09:37:00	0
24	2012-01-18 09:38:00	0
25	2012-01-18 09:39:00	0
26	2012-01-18 09:40:00	0
27	2012-01-18 09:41:00	0
28	2012-01-18 09:42:00	0
29	2012-01-18 09:43:00	-1
30	2012-01-18 09:44:00	0
31	2012-01-18 09:45:00	0
32	2012-01-18 09:46:00	0
33	2012-01-18 09:47:00	0
34	2012-01-18 09:48:00	0
35	2012-01-18 09:49:00	0
36	2012-01-18 09:50:00	0
37	2012-01-18 09:51:00	0
38	2012-01-18 09:52:00	0
39	2012-01-18 09:53:00	0
40	2012-01-18 09:54:00	1
41	2012-01-18 09:55:00	0
42	2012-01-18 09:56:00	0
43	2012-01-18 09:57:00	-1
44	2012-01-18 09:58:00	1
45	2012-01-18 09:59:00	0
46	2012-01-18 10:00:00	0
47	2012-01-18 10:01:00	0

relating trades info when getting by function 'getTxns':

                    Txn.Qty Txn.Price Txn.Fees Txn.Value Txn.Avg.Cost
Net.Txn.Realized.PL
2012-01-18 00:00:00       0       0.0        0         0            0                  
0
2012-01-18 09:35:00       0    2580.0        0         0          NaN                
NaN
2012-01-18 09:54:00       0    2580.8        0         0          NaN                
NaN
2012-01-18 09:58:00       0    2581.8        0         0          NaN                
NaN
2012-01-18 10:33:00       0    2552.6        0         0          NaN                
NaN
2012-01-18 10:40:00       0    2552.6        0         0          NaN                
NaN
2012-01-18 10:57:00       0    2555.4        0         0          NaN                
NaN
2012-01-18 11:00:00       0    2559.6        0         0          NaN                
NaN
2012-01-18 11:14:00       0    2562.8        0         0          NaN                
NaN
2012-01-18 11:26:00       0    2555.8        0         0          NaN                
NaN
2012-01-18 11:29:00       0    2553.4        0         0          NaN                
NaN
2012-01-18 13:01:00       0    2556.0        0         0          NaN                
NaN
2012-01-18 13:26:00       0    2549.2        0         0          NaN                
NaN
2012-01-18 13:44:00       0    2553.8        0         0          NaN                
NaN

from the table, only time and trade price are added, TxnQty, TxnFees, and
other info are ignored.

why it happen,do I miss something?

regards.



--
View this message in context: http://r.789695.n4.nabble.com/function-addtxn-in-blotter-package-can-t-add-intraday-trade-into-account-tp4696291.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From a.chandhial at btinternet.com  Mon Sep  1 09:11:27 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Mon, 1 Sep 2014 08:11:27 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization &
 walk-forward procedure
In-Reply-To: <54036141.80606@r-programming.org>
References: <26919643.1747.1409469233231.JavaMail.defaultUser@defaultHost>
	<54036141.80606@r-programming.org>
Message-ID: <25606351.2460.1409555487964.JavaMail.defaultUser@defaultHost>



Many thanks for getting back to me Guy. I should have noticed the frequency! Anyways it's got me started on proper strategy design in quantstrat.




UBUNTU
----------

Running on Ubuntu 14.10, I get past the 1st in-sample training and 1st out-of-sample WFA testing, however an error thereafter


[1] "=== training WFA on 2002-10-21 00:30:00/2002-10-22 23:30:00"
[1] "=== testing param.combo 1 on 2002-10-23/2002-10-23 23:30:00"
  nFAST nSLOW
1     1    42
[1] "=== training WFA on 2002-10-22/2002-10-23 23:30:00"
error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5, result.6,     result.7, result.8, result.9, result.10, result.11, result.12,     result.13,
result.14, result.15): attempt to select less than one element>
Error in walk.forward(strategy.st, paramset.label = "WFA", portfolio.st = portfolio.st,  : 
  obj.func() returned empty result
In addition: Warning message:
In max(x$tradeStats$Net.Trading.PL) :
  no non-missing arguments to max; returning -Inf




WINDOWS
------------

Running on Windows, I get past the 1st in-sample training  then get problems at the 1st out-of-sample testing with the file 'wfa.GBPUSD.2002-10-21 00:30:00.2002-10-22 23:30:00.RData'

[1] "=== training WFA on 2002-10-21 00:30:00/2002-10-22 23:30:00"
  nFAST nSLOW
1     1    42
[1] "2002-10-22 02:00:00 GBPUSD 1e+05 @ 1.545"
[1] "2002-10-22 16:30:00 GBPUSD -1e+05 @ 1.5453"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5448"
  nFAST nSLOW
2     3    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 17:00:00 GBPUSD -1e+05 @ 1.5453"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
3     5    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5435"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
4     7    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
  nFAST nSLOW
5     9    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:30:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5425"
  nFAST nSLOW
6     1    44
[1] "2002-10-22 02:00:00 GBPUSD 1e+05 @ 1.545"
[1] "2002-10-22 17:00:00 GBPUSD -1e+05 @ 1.5453"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
7     3    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5435"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
8     5    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
  nFAST nSLOW
9     7    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
10     9    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:30:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5425"
   nFAST nSLOW
11     1    46
[1] "2002-10-22 02:00:00 GBPUSD 1e+05 @ 1.545"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5435"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
   nFAST nSLOW
12     3    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
13     5    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
14     7    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
15     9    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5466"
[1] "2002-10-22 18:30:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5425"
[1] "=== testing param.combo 1 on 2002-10-23/2002-10-23 23:30:00"
  nFAST nSLOW
1     1    42
Error in gzfile(file, "wb") : cannot open the connection
In addition: Warning messages:
1: executing %dopar% sequentially: no parallel backend registered
2: In gzfile(file, "wb") :
  cannot open compressed file 'wfa.GBPUSD.2002-10-21 00:30:00.2002-10-22 23:30:00.RData', probable reason 'Invalid argument'



However, if I commet out #audit.prefix='wfa', the following error at the end of the 2nd in-sample training

error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5, result.6,     result.7, result.8, result.9, result.10, result.11, result.12,     result.13, result.14, result.15): attempt to select less than one element>
Error in walk.forward(strategy.st, paramset.label = "WFA", portfolio.st = portfolio.st,  :
  obj.func() returned empty result
In addition: Warning messages:
1: executing %dopar% sequentially: no parallel backend registered
2: In covMcd(as.matrix(R), alpha = 1 - alpha) :
  Initial scale 0 because more than 'h' (=9) observations are identical.
3: In covMcd(as.matrix(R), alpha = 1 - alpha) :
  Initial scale 0 because more than 'h' (=9) observations are identical.
4: In covMcd(as.matrix(R), alpha = 1 - alpha) :
  Initial scale 0 because more than 'h' (=9) observations are identical.
5: In max(x$tradeStats$Net.Trading.PL) :
  no non-missing arguments to max; returning -Inf





Please help!




################################################################################################



Here's the program:



##############################
# MUST RUN LUXOR.5.ORDERSETS              #
##############################


 setwd("  your directory  ")


 require(quantstrat)

 source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
 source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))



#IMPORTANT NOTE
#---------------------
# As of 2013-08-12, apply.paramset does not appear to run properly in parallel on
# Windows. To run on a Windows platform, load the doParallel package but do not call
# the registerDoParallel function; apply.paramset will then be able to run in sequential
# rather than parallel mode.


 library(parallel)
 detectCores()


 if( Sys.info()['sysname'] == "Windows" )
 {
  library(doParallel)
   # registerDoParallel(cores=detectCores())
 } else {
  library(doMC)
  registerDoMC(cores=detectCores())
 }


###############################################################################################

#usual stuff
#-----------
 initPortf(portfolio.st, symbols='GBPUSD', initDate=initDate, currency='USD')
 initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD', initEq=100000)
 initOrders(portfolio.st, initDate=initDate)
 load.strategy(strategy.st)


#chain rules
#-----------
#enable.rule(strategy.st, 'chain', 'StopLoss')
#enable.rule(strategy.st, 'chain', 'StopTrailing')
 enable.rule(strategy.st, 'chain', 'TakeProfit')



 addPosLimit(portfolio=portfolio.st,symbol='GBPUSD',timestamp=initDate, maxpos=.orderqty)



###############################################################################################

#objective function
#------------------

 ess <- function(account.st, portfolio.st) {

    require(robustbase, quietly=TRUE)
    require(PerformanceAnalytics, quietly=TRUE)

    portfolios.st <- ls(pos=.blotter, pattern=paste('portfolio', portfolio.st, '[0-9]*',sep='.'))
    pr <- PortfReturns(Account = account.st, Portfolios=portfolios.st)

    my.es <- ES(R=pr, clean='boudt')

    return(my.es)
 }


##########


#walk.forward
#------------

 my.obj.func <- function(x){

    #pick one of the following objective functions (uncomment)

    #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
    return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
    #return(max(x$user.func$GBPUSD.DailyEndEq) == x$user.func$GBPUSD.DailyEndEq)

}


 r  <- walk.forward(strategy.st, 
                  paramset.label='WFA', 
                  portfolio.st=portfolio.st, 
                  account.st=account.st, 
                  period='days', 
                  k.training=2, 
                  k.testing=1, 
                  obj.func=my.obj.func, 
                  obj.args=list(x=quote(result$apply.paramset)), 
                  user.func=ess, 
                  user.args=list('account.st'=account.st, 
                                 'portfolio.st'=portfolio.st), 
                  audit.prefix='wfa', 
                  anchored=FALSE, 
                  verbose=FALSE)



###############################################################################################

#Results
#-------

 pdf(paste('GBPUSD', .from, .to, 'pdf', sep='.'))
 chart.Posn(portfolio.st)
 dev.off()

 ts <- tradeStats(portfolio.st)
 save(ts, file=paste('GBPUSD', .from, .to, 'RData', sep='.'))






Amarjit







----Original message----
>From : gyollin at r-programming.org
Date : 31/08/2014 - 18:54 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization & walk-forward procedure

Amarjit,

I'm pretty sure that you can get the luxor.8.walk.forward.R script to 
run successfully as follows:
1. execute luxor.5.strategy.ordersets.R which saves the strategy
2. modify the the period argument in the call to walk.forward() to be 
period='days'

Good luck with this.

G


On 8/31/2014 12:13 AM, amarjit chandhial wrote:
>
>
> I cannot get quantstrat's luxor.8 periodic optimization & walk-forward 
> procedure, in the demos working.
>
>
> The idea being akin to the following diagram:
>
> http://www.tradestation.com/trading-technology/tradestation-platform/analyze/walk-forward-optimizer
>
>
> The error I get is,
>
> Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative 
> subscripts") :
>   missing value where TRUE/FALSE needed
>
>
> If anybody can please email a working program.
>
>
>
> Otherwise, what I am really after is a demo with the workflow:
>  - a simple vanilla technical stratgey - I can do
>  - In-sample optimization of parameter(s) of simple strategy, 
> Out-of-sample run - I can do
>  - periodic optimization & walk-forward procedure
>
>
>
>
> Amarjit
>
>
>
>
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


	[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From josh.m.ulrich at gmail.com  Mon Sep  1 17:18:57 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Mon, 1 Sep 2014 10:18:57 -0500
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
In-Reply-To: <1409541792340-4696291.post@n4.nabble.com>
References: <1409541792340-4696291.post@n4.nabble.com>
Message-ID: <CAPPM_gQPFrg_Cm7qU34=zOKdcai2j1DO3QpheK0dBwqTJSquKQ@mail.gmail.com>

On Sun, Aug 31, 2014 at 10:23 PM, domodo <1111938 at qq.com> wrote:
> hi,guys,I'm learning blotter package,and have coded several trade strategies
> in R.
> all are good when the strategis run on daily data,but when I run on intraday
> data, function 'addtxn' runs incorrectly.
>
addTxn is working correctly.  See below.

> the strategy stores trade signals of each bar,when close price cross over
> sma,signal = 1,close price cross under sma, signal = -1,otherwise, signal =
> 0
>
> and the bar-by-bar treatment are:
>
> #Bar-by-bar treatment
> for( i in 17:nrow(if2) )
> {
>   currentDate <- time(if2)[i]
>
>   equity<-getEndEq(b.strategy, currentDate)
>   Posn <- getPosQty(b.strategy, Symbol='if2', Date=currentDate)
>   #cat(as.character(i),"position on current bar is ",Posn, append = FALSE)
>
>   if(!is.na(MA[i-2]))
>   {
>     if( Posn == 0 ) { #no marketposition
>       if( signal[i] == 1 ) {
>         #long entry
>         #openprice <- as.double((Op(if2[i])))  #the result is the same as
> the following line
>         openprice <- as.double((Op(if2[currentDate])))
>         unitsize <- abs(as.numeric(trunc(equity/(openprice*300*0.15))))
>         addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
>                TxnPrice=openprice, TxnQty = unitsize ,
> TxnFees=-openprice*300*0.00005*unitsize, verbose = F)
>       }
>     }
>     else {
>       if( signal[i] == -1 ) {
>         #exit position
>         openprice <- as.double((Op(if2[currentDate])))
>         unitsize  <- abs(getPosQty(b.strategy, Symbol='if2',
> Date=currentDate))
>         addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
>                TxnPrice=openprice, TxnQty = -unitsize ,
> TxnFees=-openprice*300*0.00005*unitsize, verbose = F)
>       }
>     }
>   }
>
>   updatePortf(b.strategy, Dates = currentDate)
>   updateAcct(b.strategy, Dates = currentDate)
>   updateEndEq(b.strategy, Dates = currentDate)
> }
>
> these are signal's table
>
<snip>
>
> relating trades info when getting by function 'getTxns':
>
>                     Txn.Qty Txn.Price Txn.Fees Txn.Value Txn.Avg.Cost
> Net.Txn.Realized.PL
> 2012-01-18 00:00:00       0       0.0        0         0            0
> 0
> 2012-01-18 09:35:00       0    2580.0        0         0          NaN
> NaN
> 2012-01-18 09:54:00       0    2580.8        0         0          NaN
> NaN
> 2012-01-18 09:58:00       0    2581.8        0         0          NaN
> NaN
> 2012-01-18 10:33:00       0    2552.6        0         0          NaN
> NaN
> 2012-01-18 10:40:00       0    2552.6        0         0          NaN
> NaN
> 2012-01-18 10:57:00       0    2555.4        0         0          NaN
> NaN
> 2012-01-18 11:00:00       0    2559.6        0         0          NaN
> NaN
> 2012-01-18 11:14:00       0    2562.8        0         0          NaN
> NaN
> 2012-01-18 11:26:00       0    2555.8        0         0          NaN
> NaN
> 2012-01-18 11:29:00       0    2553.4        0         0          NaN
> NaN
> 2012-01-18 13:01:00       0    2556.0        0         0          NaN
> NaN
> 2012-01-18 13:26:00       0    2549.2        0         0          NaN
> NaN
> 2012-01-18 13:44:00       0    2553.8        0         0          NaN
> NaN
>
> from the table, only time and trade price are added, TxnQty, TxnFees, and
> other info are ignored.
>
They are not ignored.  TxnQty=0, TxnFees=0, Txn.Avg.Cost=NaN, and
Net.Txn.Realized.PL=NaN.

> why it happen,do I miss something?
>
Yes. It's fairly obvious that, since TxnQty=0, TxnFees will also equal
zero, and the two values I mentioned above will be NaN.
TxnQty=unitsize, so why does unitsize=0?  It's likely because
equity=0.

So the question isn't "why isn't addTxn working?"; it's "Why does
equity=0?".  You need to provide more information for anyone to be
able to help you answer that question.

> regards.
>

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From 1111938 at qq.com  Mon Sep  1 17:28:28 2014
From: 1111938 at qq.com (domodo)
Date: Mon, 1 Sep 2014 08:28:28 -0700 (PDT)
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
In-Reply-To: <1409541792340-4696291.post@n4.nabble.com>
References: <1409541792340-4696291.post@n4.nabble.com>
Message-ID: <1409585308209-4696307.post@n4.nabble.com>

this is data file :  ifBAC2.csv
<http://r.789695.n4.nabble.com/file/n4696307/ifBAC2.csv>  
and below is complete code

[code]
library(blotter)
library(quantstrat)

#initialize environtments
currency("USD")
startdate <- '2012-01-18'
finaldate <- '2012-01-19'

future("if2", currency = "USD", multiplier = 300, tick_size = 0.2)
Sys.setenv(TZ = "UTC") 
rm(list=ls(envir=.blotter),envir=.blotter)
b.strategy <- "strategy"

initPortf(b.strategy, "if2", initDate = startdate)
initAcct(b.strategy, portfolios = b.strategy, initDate = startdate, initEq =
1e+06) 

ifBAC2 <- read.table("C:/ifBAC2.csv", head = F, sep = ",")
coredata <- ifBAC2[3:6]
rownames(coredata) <- as.POSIXlt(paste(ifBAC2[,1],ifBAC2[,2]))
ifxts <- as.xts(coredata)
colnames(ifxts) <- c("open","high","low","close")
if2 <- ifxts['2012-01-18 09:15:00/2012-01-19 15:14:00']
if2$SMA15 <- SMA(Cl(if2),15)

#custom theme
myTheme <- chart_theme()
myTheme$col$dn.col <- "lightgreen"
myTheme$col$up.col <- "red"
myTheme$col$dn.border <- "grey"
myTheme$col$up.border <- "grey"

MA <- if2$SMA15
C <- Cl(if2)
O <- Op(if2)

#trading signal judgement
signal <- ifelse(lag(C)>lag(MA) & lag(C,2)<lag(MA,2),1,
                 ifelse(lag(C)&lt;lag(MA) &amp; lag(C,2)>lag(MA,2),-1,0))
signal[is.na(signal)] <- 0

#Bar-by-bar treatment
for( i in 17:nrow(if2) )
{
  currentDate <- time(if2)[i]
  
  equity<-getEndEq(b.strategy, currentDate)
  Posn <- getPosQty(b.strategy, Symbol='if2', Date=currentDate)
  #cat(as.character(i),"position on current bar is ",Posn, append = FALSE)
  
  if(!is.na(MA[i-2])) 
  {
    if( Posn == 0 ) { #no marketposition 
      if( signal[i] == 1 ) {
        #long entry
        #openprice <- as.double((Op(if2[i])))  #the result is the same as
the following line
        openprice <- as.double((Op(if2[currentDate])))
        unitsize <- abs(as.numeric(trunc(equity/(openprice*300*0.15))))
        addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
               TxnPrice=openprice, TxnQty = unitsize ,
TxnFees=-openprice*300*0.00005*unitsize, verbose = F) 
      }
    } 
    else { 
      if( signal[i] == -1 ) {
        #exit position
        openprice <- as.double((Op(if2[currentDate])))
        unitsize  <- abs(getPosQty(b.strategy, Symbol='if2',
Date=currentDate))        
        addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
               TxnPrice=openprice, TxnQty = -unitsize ,
TxnFees=-openprice*300*0.00005*unitsize, verbose = F) 
      }
    }
  }
  
  updatePortf(b.strategy, Dates = currentDate)
  updateAcct(b.strategy, Dates = currentDate)
  updateEndEq(b.strategy, Dates = currentDate)
}

chart.Posn(b.strategy, Symbol = "if2", theme = myTheme, TA =
"add_SMA(n=15,col=4)")

txns <- getTxns(Portfolio = b.strategy, Symbol = "if2")
tstats <- tradeStats(Portfolio = b.strategy, Symbol = "if2")
[/code]



--
View this message in context: http://r.789695.n4.nabble.com/function-addtxn-in-blotter-package-can-t-add-intraday-trade-into-account-tp4696291p4696307.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From josh.m.ulrich at gmail.com  Mon Sep  1 18:49:25 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Mon, 1 Sep 2014 11:49:25 -0500
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
In-Reply-To: <1409585308209-4696307.post@n4.nabble.com>
References: <1409541792340-4696291.post@n4.nabble.com>
	<1409585308209-4696307.post@n4.nabble.com>
Message-ID: <CAPPM_gQzKvM37M539dDDzrKDmW+mWZ2bgmzKFCeWFFqh2UzBKQ@mail.gmail.com>

Your first transaction is when signal[i] == -1, when Posn=0, so the
TxnQty=0 too.  I don't know how/why that causes updateEndEq() to make
the account equity equal zero, but I'm not going to dig into it
because that transaction doesn't make sense.
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Mon, Sep 1, 2014 at 10:28 AM, domodo <1111938 at qq.com> wrote:
> this is data file :  ifBAC2.csv
> <http://r.789695.n4.nabble.com/file/n4696307/ifBAC2.csv>
> and below is complete code
>
> [code]
> library(blotter)
> library(quantstrat)
>
> #initialize environtments
> currency("USD")
> startdate <- '2012-01-18'
> finaldate <- '2012-01-19'
>
> future("if2", currency = "USD", multiplier = 300, tick_size = 0.2)
> Sys.setenv(TZ = "UTC")
> rm(list=ls(envir=.blotter),envir=.blotter)
> b.strategy <- "strategy"
>
> initPortf(b.strategy, "if2", initDate = startdate)
> initAcct(b.strategy, portfolios = b.strategy, initDate = startdate, initEq =
> 1e+06)
>
> ifBAC2 <- read.table("C:/ifBAC2.csv", head = F, sep = ",")
> coredata <- ifBAC2[3:6]
> rownames(coredata) <- as.POSIXlt(paste(ifBAC2[,1],ifBAC2[,2]))
> ifxts <- as.xts(coredata)
> colnames(ifxts) <- c("open","high","low","close")
> if2 <- ifxts['2012-01-18 09:15:00/2012-01-19 15:14:00']
> if2$SMA15 <- SMA(Cl(if2),15)
>
> #custom theme
> myTheme <- chart_theme()
> myTheme$col$dn.col <- "lightgreen"
> myTheme$col$up.col <- "red"
> myTheme$col$dn.border <- "grey"
> myTheme$col$up.border <- "grey"
>
> MA <- if2$SMA15
> C <- Cl(if2)
> O <- Op(if2)
>
> #trading signal judgement
> signal <- ifelse(lag(C)>lag(MA) & lag(C,2)<lag(MA,2),1,
>                  ifelse(lag(C)&lt;lag(MA) &amp; lag(C,2)>lag(MA,2),-1,0))
> signal[is.na(signal)] <- 0
>
> #Bar-by-bar treatment
> for( i in 17:nrow(if2) )
> {
>   currentDate <- time(if2)[i]
>
>   equity<-getEndEq(b.strategy, currentDate)
>   Posn <- getPosQty(b.strategy, Symbol='if2', Date=currentDate)
>   #cat(as.character(i),"position on current bar is ",Posn, append = FALSE)
>
>   if(!is.na(MA[i-2]))
>   {
>     if( Posn == 0 ) { #no marketposition
>       if( signal[i] == 1 ) {
>         #long entry
>         #openprice <- as.double((Op(if2[i])))  #the result is the same as
> the following line
>         openprice <- as.double((Op(if2[currentDate])))
>         unitsize <- abs(as.numeric(trunc(equity/(openprice*300*0.15))))
>         addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
>                TxnPrice=openprice, TxnQty = unitsize ,
> TxnFees=-openprice*300*0.00005*unitsize, verbose = F)
>       }
>     }
>     else {
>       if( signal[i] == -1 ) {
>         #exit position
>         openprice <- as.double((Op(if2[currentDate])))
>         unitsize  <- abs(getPosQty(b.strategy, Symbol='if2',
> Date=currentDate))
>         addTxn(b.strategy, Symbol='if2', TxnDate=currentDate,
>                TxnPrice=openprice, TxnQty = -unitsize ,
> TxnFees=-openprice*300*0.00005*unitsize, verbose = F)
>       }
>     }
>   }
>
>   updatePortf(b.strategy, Dates = currentDate)
>   updateAcct(b.strategy, Dates = currentDate)
>   updateEndEq(b.strategy, Dates = currentDate)
> }
>
> chart.Posn(b.strategy, Symbol = "if2", theme = myTheme, TA =
> "add_SMA(n=15,col=4)")
>
> txns <- getTxns(Portfolio = b.strategy, Symbol = "if2")
> tstats <- tradeStats(Portfolio = b.strategy, Symbol = "if2")
> [/code]
>
>
>
> --
> View this message in context: http://r.789695.n4.nabble.com/function-addtxn-in-blotter-package-can-t-add-intraday-trade-into-account-tp4696291p4696307.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From 1111938 at qq.com  Mon Sep  1 20:00:01 2014
From: 1111938 at qq.com (domodo)
Date: Mon, 1 Sep 2014 11:00:01 -0700 (PDT)
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
In-Reply-To: <CAPPM_gQzKvM37M539dDDzrKDmW+mWZ2bgmzKFCeWFFqh2UzBKQ@mail.gmail.com>
References: <1409541792340-4696291.post@n4.nabble.com>
	<1409585308209-4696307.post@n4.nabble.com>
	<CAPPM_gQzKvM37M539dDDzrKDmW+mWZ2bgmzKFCeWFFqh2UzBKQ@mail.gmail.com>
Message-ID: <1409594401311-4696314.post@n4.nabble.com>

Ulrich,thanks for your reply.

I found the reason why equity are always zero. the argument 'initDate' in
initPortf and initAcct should be earlier than market data's start date,in
this case, the start date is '2012-01-18 09:15:00',so argument 'initDate' in
initPortf and initAcct should at least be '2012-01-18 09:14:00' or earlier. 
Having replace both of the value of initDate with  '2012-01-18 09:14:00', I
got the result of txns as below:

> head(txns)
                    Txn.Qty Txn.Price Txn.Fees Txn.Value Txn.Avg.Cost
Net.Txn.Realized.PL
2012-01-18 09:14:00       0       0.0    0.000         0          0.0              
0.000
2012-01-18 09:35:00       8    2580.0 -309.600   6192000       2580.0           
-309.600
2012-01-18 09:43:00      -8    2582.0 -309.840  -6196800       2582.0           
4490.160
2012-01-18 09:54:00       8    2580.8 -309.696   6193920       2580.8           
-309.696
2012-01-18 09:57:00      -8    2575.8 -309.096  -6181920       2575.8         
-12309.096
2012-01-18 09:58:00       8    2581.8 -309.816   6196320       2581.8           
-309.816

all transactions are OK,except the first transaction. why it occurs ? I
tried to run the codes in debug mode line-by-line,but couldn't find the
reason.

PS:
I couldn't find the reason why argument 'initDate' in initPortf and 
initAcct must be earlier than market data's start date/time in help
documents.

regards.



--
View this message in context: http://r.789695.n4.nabble.com/function-addtxn-in-blotter-package-can-t-add-intraday-trade-into-account-tp4696291p4696314.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From a.chandhial at btinternet.com  Tue Sep  2 08:56:46 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Tue, 2 Sep 2014 07:56:46 +0100 (BST)
Subject: [R-SIG-Finance] Fwd: quantstrat - luxor.8 periodic optimization &
 walk-forward procedure
In-Reply-To: <25606351.2460.1409555487964.JavaMail.defaultUser@defaultHost>
References: <26919643.1747.1409469233231.JavaMail.defaultUser@defaultHost>
	<54036141.80606@r-programming.org>
	<25606351.2460.1409555487964.JavaMail.defaultUser@defaultHost>
Message-ID: <29063956.2374.1409641006568.JavaMail.defaultUser@defaultHost>


The same way, this issue unresolved from July

http://r.789695.n4.nabble.com/demo-quot-luxor-8-walk-forward-quot-Error-in-if-all-i-lt-0-stop-quot-only-zeros-may-be-mixed-with-ned-td4694382.html



Amarjit




----Original message----
>From : a.chandhial at btinternet.com
Date : 01/09/2014 - 08:11 (GMTST)
To : gyollin at r-programming.org
Cc : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization & walk-forward procedure



Many thanks for getting back to me Guy. I should have noticed the frequency! Anyways it's got me started on proper strategy design in quantstrat.




UBUNTU
----------

Running on Ubuntu 14.10, I get past the 1st in-sample training and 1st out-of-sample WFA testing, however an error thereafter


[1] "=== training WFA on 2002-10-21 00:30:00/2002-10-22 23:30:00"
[1] "=== testing param.combo 1 on 2002-10-23/2002-10-23 23:30:00"
  nFAST nSLOW
1     1    42
[1] "=== training WFA on 2002-10-22/2002-10-23 23:30:00"
error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5, result.6,     result.7, result.8, result.9, result.10, result.11, result.12,     result.13,
result.14, result.15): attempt to select less than one element>
Error in walk.forward(strategy.st, paramset.label = "WFA", portfolio.st = portfolio.st,  : 
  obj.func() returned empty result
In addition: Warning message:
In max(x$tradeStats$Net.Trading.PL) :
  no non-missing arguments to max; returning -Inf




WINDOWS
------------

Running on Windows, I get past the 1st in-sample training  then get problems at the 1st out-of-sample testing with the file 'wfa.GBPUSD.2002-10-21 00:30:00.2002-10-22 23:30:00.RData'

[1] "=== training WFA on 2002-10-21 00:30:00/2002-10-22 23:30:00"
  nFAST nSLOW
1     1    42
[1] "2002-10-22 02:00:00 GBPUSD 1e+05 @ 1.545"
[1] "2002-10-22 16:30:00 GBPUSD -1e+05 @ 1.5453"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5448"
  nFAST nSLOW
2     3    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 17:00:00 GBPUSD -1e+05 @ 1.5453"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
3     5    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5435"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
4     7    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
  nFAST nSLOW
5     9    42
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:30:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5425"
  nFAST nSLOW
6     1    44
[1] "2002-10-22 02:00:00 GBPUSD 1e+05 @ 1.545"
[1] "2002-10-22 17:00:00 GBPUSD -1e+05 @ 1.5453"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
7     3    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5435"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
  nFAST nSLOW
8     5    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
  nFAST nSLOW
9     7    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
10     9    44
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:30:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5425"
   nFAST nSLOW
11     1    46
[1] "2002-10-22 02:00:00 GBPUSD 1e+05 @ 1.545"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5435"
[1] "2002-10-22 17:30:00 GBPUSD -1e+05 @ 1.5447"
   nFAST nSLOW
12     3    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.547"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
13     5    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
14     7    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5469"
[1] "2002-10-22 18:00:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5426"
   nFAST nSLOW
15     9    46
[1] "2002-10-22 04:00:00 GBPUSD 1e+05 @ 1.5466"
[1] "2002-10-22 18:30:00 GBPUSD -1e+05 @ 1.543"
[1] "2002-10-22 19:00:00 GBPUSD -1e+05 @ 1.5425"
[1] "=== testing param.combo 1 on 2002-10-23/2002-10-23 23:30:00"
  nFAST nSLOW
1     1    42
Error in gzfile(file, "wb") : cannot open the connection
In addition: Warning messages:
1: executing %dopar% sequentially: no parallel backend registered
2: In gzfile(file, "wb") :
  cannot open compressed file 'wfa.GBPUSD.2002-10-21 00:30:00.2002-10-22 23:30:00.RData', probable reason 'Invalid argument'



However, if I commet out #audit.prefix='wfa', the following error at the end of the 2nd in-sample training

error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5, result.6,     result.7, result.8, result.9, result.10, result.11, result.12,     result.13, result.14, result.15): attempt to select less than one element>
Error in walk.forward(strategy.st, paramset.label = "WFA", portfolio.st = portfolio.st,  :
  obj.func() returned empty result
In addition: Warning messages:
1: executing %dopar% sequentially: no parallel backend registered
2: In covMcd(as.matrix(R), alpha = 1 - alpha) :
  Initial scale 0 because more than 'h' (=9) observations are identical.
3: In covMcd(as.matrix(R), alpha = 1 - alpha) :
  Initial scale 0 because more than 'h' (=9) observations are identical.
4: In covMcd(as.matrix(R), alpha = 1 - alpha) :
  Initial scale 0 because more than 'h' (=9) observations are identical.
5: In max(x$tradeStats$Net.Trading.PL) :
  no non-missing arguments to max; returning -Inf





Please help!




################################################################################################



Here's the program:



##############################
# MUST RUN LUXOR.5.ORDERSETS              #
##############################


 setwd("  your directory  ")


 require(quantstrat)

 source(paste0(path.package("quantstrat"),"/demo/luxor.include.R"))
 source(paste0(path.package("quantstrat"),"/demo/luxor.getSymbols.R"))



#IMPORTANT NOTE
#---------------------
# As of 2013-08-12, apply.paramset does not appear to run properly in parallel on
# Windows. To run on a Windows platform, load the doParallel package but do not call
# the registerDoParallel function; apply.paramset will then be able to run in sequential
# rather than parallel mode.


 library(parallel)
 detectCores()


 if( Sys.info()['sysname'] == "Windows" )
 {
  library(doParallel)
   # registerDoParallel(cores=detectCores())
 } else {
  library(doMC)
  registerDoMC(cores=detectCores())
 }


###############################################################################################

#usual stuff
#-----------
 initPortf(portfolio.st, symbols='GBPUSD', initDate=initDate, currency='USD')
 initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD', initEq=100000)
 initOrders(portfolio.st, initDate=initDate)
 load.strategy(strategy.st)


#chain rules
#-----------
#enable.rule(strategy.st, 'chain', 'StopLoss')
#enable.rule(strategy.st, 'chain', 'StopTrailing')
 enable.rule(strategy.st, 'chain', 'TakeProfit')



 addPosLimit(portfolio=portfolio.st,symbol='GBPUSD',timestamp=initDate, maxpos=.orderqty)



###############################################################################################

#objective function
#------------------

 ess <- function(account.st, portfolio.st) {

    require(robustbase, quietly=TRUE)
    require(PerformanceAnalytics, quietly=TRUE)

    portfolios.st <- ls(pos=.blotter, pattern=paste('portfolio', portfolio.st, '[0-9]*',sep='.'))
    pr <- PortfReturns(Account = account.st, Portfolios=portfolios.st)

    my.es <- ES(R=pr, clean='boudt')

    return(my.es)
 }


##########


#walk.forward
#------------

 my.obj.func <- function(x){

    #pick one of the following objective functions (uncomment)

    #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
    return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
    #return(max(x$user.func$GBPUSD.DailyEndEq) == x$user.func$GBPUSD.DailyEndEq)

}


 r  <- walk.forward(strategy.st, 
                  paramset.label='WFA', 
                  portfolio.st=portfolio.st, 
                  account.st=account.st, 
                  period='days', 
                  k.training=2, 
                  k.testing=1, 
                  obj.func=my.obj.func, 
                  obj.args=list(x=quote(result$apply.paramset)), 
                  user.func=ess, 
                  user.args=list('account.st'=account.st, 
                                 'portfolio.st'=portfolio.st), 
                  audit.prefix='wfa', 
                  anchored=FALSE, 
                  verbose=FALSE)



###############################################################################################

#Results
#-------

 pdf(paste('GBPUSD', .from, .to, 'pdf', sep='.'))
 chart.Posn(portfolio.st)
 dev.off()

 ts <- tradeStats(portfolio.st)
 save(ts, file=paste('GBPUSD', .from, .to, 'RData', sep='.'))






Amarjit







----Original message----
>From : gyollin at r-programming.org
Date : 31/08/2014 - 18:54 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization & walk-forward procedure

Amarjit,

I'm pretty sure that you can get the luxor.8.walk.forward.R script to 
run successfully as follows:
1. execute luxor.5.strategy.ordersets.R which saves the strategy
2. modify the the period argument in the call to walk.forward() to be 
period='days'

Good luck with this.

G


On 8/31/2014 12:13 AM, amarjit chandhial wrote:
>
>
> I cannot get quantstrat's luxor.8 periodic optimization & walk-forward 
> procedure, in the demos working.
>
>
> The idea being akin to the following diagram:
>
> http://www.tradestation.com/trading-technology/tradestation-platform/analyze/walk-forward-optimizer
>
>
> The error I get is,
>
> Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative 
> subscripts") :
>   missing value where TRUE/FALSE needed
>
>
> If anybody can please email a working program.
>
>
>
> Otherwise, what I am really after is a demo with the workflow:
>  - a simple vanilla technical stratgey - I can do
>  - In-sample optimization of parameter(s) of simple strategy, 
> Out-of-sample run - I can do
>  - periodic optimization & walk-forward procedure
>
>
>
>
> Amarjit
>
>
>
>
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


	[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From brian at braverock.com  Tue Sep  2 10:03:48 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Tue, 02 Sep 2014 03:03:48 -0500
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
In-Reply-To: <1409594401311-4696314.post@n4.nabble.com>
References: <1409541792340-4696291.post@n4.nabble.com>	<1409585308209-4696307.post@n4.nabble.com>	<CAPPM_gQzKvM37M539dDDzrKDmW+mWZ2bgmzKFCeWFFqh2UzBKQ@mail.gmail.com>
	<1409594401311-4696314.post@n4.nabble.com>
Message-ID: <540579E4.8040309@braverock.com>

On 09/01/2014 01:00 PM, domodo wrote:
> [Joshua] Ulrich,thanks for your reply.
>
> I found the reason why equity are always zero. the argument 'initDate' in
> initPortf and initAcct should be earlier than market data's start date,in
> this case, the start date is '2012-01-18 09:15:00',so argument 'initDate' in
> initPortf and initAcct should at least be '2012-01-18 09:14:00' or earlier.
> Having replace both of the value of initDate with  '2012-01-18 09:14:00', I
> got the result of txns as below:
>
>> head(txns)
>                      Txn.Qty Txn.Price Txn.Fees Txn.Value Txn.Avg.Cost
> Net.Txn.Realized.PL
> 2012-01-18 09:14:00       0       0.0    0.000         0          0.0
> 0.000
> 2012-01-18 09:35:00       8    2580.0 -309.600   6192000       2580.0
> -309.600
> 2012-01-18 09:43:00      -8    2582.0 -309.840  -6196800       2582.0
> 4490.160
> 2012-01-18 09:54:00       8    2580.8 -309.696   6193920       2580.8
> -309.696
> 2012-01-18 09:57:00      -8    2575.8 -309.096  -6181920       2575.8
> -12309.096
> 2012-01-18 09:58:00       8    2581.8 -309.816   6196320       2581.8
> -309.816
>
> all transactions are OK,except the first transaction. why it occurs ? I
> tried to run the codes in debug mode line-by-line,but couldn't find the
> reason.

The first row is there only as an initialization row.  You need a 
starting point (an empty portfolio) or none of the math makes sense.

> PS:
> I couldn't find the reason why argument 'initDate' in initPortf and
> initAcct must be earlier than market data's start date/time in help
> documents.


I don't know why it should be unclear that initDate must be before the 
first transaction.

The documentation currently describes initDate as:

initDate: A date prior to the first close price given,
           used to contain initial account equity and initial position

I suppose we can try to make this more clear and say that it must be 
prior to the first *transaction* and that you need to have initDate 
before the market data you wish to use to mark the portfolio.


As with the initial state of the portfolio, above, where you start with 
nothing.  Portfolio accounting is about marking the portfolio with 
realized and unrealized differences.  There must be a starting point. 
You have to create the portfolio and account *before* you can put 
transactions in it.  Transactions have to occur in order or you need to 
go back and reassess what happened.

Regards,

Brian

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From 1111938 at qq.com  Tue Sep  2 16:08:03 2014
From: 1111938 at qq.com (domodo)
Date: Tue, 2 Sep 2014 07:08:03 -0700 (PDT)
Subject: [R-SIG-Finance] function 'addtxn' in blotter package can't add
 intraday trade into account?
In-Reply-To: <540579E4.8040309@braverock.com>
References: <1409541792340-4696291.post@n4.nabble.com>
	<1409585308209-4696307.post@n4.nabble.com>
	<CAPPM_gQzKvM37M539dDDzrKDmW+mWZ2bgmzKFCeWFFqh2UzBKQ@mail.gmail.com>
	<1409594401311-4696314.post@n4.nabble.com>
	<540579E4.8040309@braverock.com>
Message-ID: <1409666883000-4696372.post@n4.nabble.com>

braverock,your instruction is very good,thanks.





--
View this message in context: http://r.789695.n4.nabble.com/function-addtxn-in-blotter-package-can-t-add-intraday-trade-into-account-tp4696291p4696372.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From 1111938 at qq.com  Wed Sep  3 09:21:40 2014
From: 1111938 at qq.com (domodo)
Date: Wed, 3 Sep 2014 00:21:40 -0700 (PDT)
Subject: [R-SIG-Finance] questions about order price and timestamp in
	quantstrat
Message-ID: <1409728900280-4696424.post@n4.nabble.com>

hi,guys,I'm learning quantstrat and get some questions as below:

1. transaction's order occurs and price

#add an indicator: monthly 5-sma
add.indicator(strategy = mystrategy, name = "SMA", arguments = list(x =
quote(Cl(mktdata)), n = 5), label = "SMA5")

add.indicator(strategy = mystrategy, name = "SMA", arguments = list(x =
quote(Cl(mktdata)[,1]), n = 10), label = "SMA10")


#add signal: SMA5 cross over / under sma10
add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
c("SMA5",
"SMA10"), relationship = "gt"), label = "SMA5.gt.SMA10")

add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
c("SMA5",
"SMA10"), relationship = "lt"), label = "SMA5.lt.SMA10")


#add rules
#open long position
add.rule(mystrategy, name = "ruleSignal", arguments = list(sigcol =
"SMA5.gt.SMA10",
sigval = TRUE, orderqty = 900, ordertype = "market", orderside = "long",
pricemethod = "market"), type = "enter", path.dep = TRUE) #buy 900 shares
#exit position

add.rule(mystrategy, name = "ruleSignal", arguments = list(sigcol =
"SMA5.lt.SMA10",
sigval = TRUE, orderqty = "all", ordertype = "market", orderside = "long",
pricemethod = "market"), type = "exit", path.dep = TRUE)

according to the codes above, when sma5 cross above sma10, a trading signal
occurs,and the order price is current bar's close price. it could be coded
in tradestation's easylanguage as below:

if average(close, 5) cross above average(close, 10) then
            buy this bar at close;
 
if average(close, 5) cross under average(close, 10) then
            sell this bar at close;

how if I want to set the next bar's open price as order price ? it means the
codes in easylanguage as below

if average(close, 5) cross above average(close, 10) then
            buy next bar at open;
 
if average(close, 5) cross under average(close, 10) then
            sell next bar at open;

my initial modification is:
1) make sma5 and sma10 delay a bar,that's,if sma5 of 2 bars ago is less than
sma10 of 2 bars ago,and previous bar's sma5 is greater than previous bar's
sma10,
2) then a signal occurs and an order with current bar's open price could  be
sent out.

the codes below deal with point 1):

#add signal: SMA5 cross over / under sma10
add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
c("SMA5"[1],
"SMA10"[1]), relationship = "gt"), label = "SMA5.gt.SMA10")
add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
c("SMA5"[1],
"SMA10"[1]), relationship = "lt"), label = "SMA5.lt.SMA10")

but how to specify the order price as current bar's open price.

2. how to transfer timestamp from add.rule to ruleSignal
timestamp is a argment of ruleSignal,but ruleSignal's documents doesn't give
a detailed description,just says:
timestamp 
timestamp coercible to POSIXct that will be the time the order will be
inserted on.

I don't quite catch on to what it is saying. further more,it seems that
seldom examles in demo folder of quantstrat specifies this argument ? 

3. how to code 'pyramiding' in quantstrat ?

I have no idea about how to code 'pyramiding', it means the rule below,in
quantstrat:
1) when RSI is less than 30, enter long with 300 shares of stock A,
2) when RSI is less than 10, and previous position is profitable, enter long
with 100 more shares of stock A
3) when RSI is greater than 50, 200 shares of stock A exit
4) when RSI is greater than 70, rest 200 shares of stock A exit

much appreciated if any guys give me some help about the question.

regards.



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-order-price-and-timestamp-in-quantstrat-tp4696424.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From ilya.kipnis at gmail.com  Wed Sep  3 15:53:56 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Wed, 3 Sep 2014 09:53:56 -0400
Subject: [R-SIG-Finance] questions about order price and timestamp in
	quantstrat
In-Reply-To: <1409728900280-4696424.post@n4.nabble.com>
References: <1409728900280-4696424.post@n4.nabble.com>
Message-ID: <CA+oJuEFm_fFhnA0o_Uco3WPr68L+aQ-KtAMaaSaC5pnrvzhSug@mail.gmail.com>

RSI 50 and RSI 70 will do exactly what you want on one caveat--that if
the indicator waggles around 50 before reaching 70, you'll sell twice
at the 50 cross. Or you can use a chain type of order (see R/Finance
2013 quantstrat presentation), with a separate signal generating
column, using the 50 sell rule as a parent.

Regarding "rule execution on signal bar", there's an argument in
ruleOrderProc called allowMagicalThinking. However, that's not
recommended. If you wish to delay the SMA computations and add lag,
just write a custom indicator function.

lagSMA <- function(x, n=200, k=2) {
 sma <- SMA(x, n=n)
 out <- lag.xts(sma, k=k)
 colnames(out) <- "lagSMA"
 return(out)
}

Regarding pyramiding, what I'd suggest you look at is chain rules, and
as above, use your initial buy rule as a parent, but use a separate
signal column, so when you hit your RSI10, you'll also check the
profitability of your position from the RSI30, and if both conditions
hold, you should get an order. I don't use pyramiding code myself (and
this also seems like a contradictory rule--an RSI going from 30 to 10
probably means the price has gone down, not up).

Hope this helps.

-Ilya

On Wed, Sep 3, 2014 at 3:21 AM, domodo <1111938 at qq.com> wrote:
> hi,guys,I'm learning quantstrat and get some questions as below:
>
> 1. transaction's order occurs and price
>
> #add an indicator: monthly 5-sma
> add.indicator(strategy = mystrategy, name = "SMA", arguments = list(x =
> quote(Cl(mktdata)), n = 5), label = "SMA5")
>
> add.indicator(strategy = mystrategy, name = "SMA", arguments = list(x =
> quote(Cl(mktdata)[,1]), n = 10), label = "SMA10")
>
>
> #add signal: SMA5 cross over / under sma10
> add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
> c("SMA5",
> "SMA10"), relationship = "gt"), label = "SMA5.gt.SMA10")
>
> add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
> c("SMA5",
> "SMA10"), relationship = "lt"), label = "SMA5.lt.SMA10")
>
>
> #add rules
> #open long position
> add.rule(mystrategy, name = "ruleSignal", arguments = list(sigcol =
> "SMA5.gt.SMA10",
> sigval = TRUE, orderqty = 900, ordertype = "market", orderside = "long",
> pricemethod = "market"), type = "enter", path.dep = TRUE) #buy 900 shares
> #exit position
>
> add.rule(mystrategy, name = "ruleSignal", arguments = list(sigcol =
> "SMA5.lt.SMA10",
> sigval = TRUE, orderqty = "all", ordertype = "market", orderside = "long",
> pricemethod = "market"), type = "exit", path.dep = TRUE)
>
> according to the codes above, when sma5 cross above sma10, a trading signal
> occurs,and the order price is current bar's close price. it could be coded
> in tradestation's easylanguage as below:
>
> if average(close, 5) cross above average(close, 10) then
>             buy this bar at close;
>
> if average(close, 5) cross under average(close, 10) then
>             sell this bar at close;
>
> how if I want to set the next bar's open price as order price ? it means the
> codes in easylanguage as below
>
> if average(close, 5) cross above average(close, 10) then
>             buy next bar at open;
>
> if average(close, 5) cross under average(close, 10) then
>             sell next bar at open;
>
> my initial modification is:
> 1) make sma5 and sma10 delay a bar,that's,if sma5 of 2 bars ago is less than
> sma10 of 2 bars ago,and previous bar's sma5 is greater than previous bar's
> sma10,
> 2) then a signal occurs and an order with current bar's open price could  be
> sent out.
>
> the codes below deal with point 1):
>
> #add signal: SMA5 cross over / under sma10
> add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
> c("SMA5"[1],
> "SMA10"[1]), relationship = "gt"), label = "SMA5.gt.SMA10")
> add.signal(mystrategy, name = "sigCrossover", arguments = list(columns =
> c("SMA5"[1],
> "SMA10"[1]), relationship = "lt"), label = "SMA5.lt.SMA10")
>
> but how to specify the order price as current bar's open price.
>
> 2. how to transfer timestamp from add.rule to ruleSignal
> timestamp is a argment of ruleSignal,but ruleSignal's documents doesn't give
> a detailed description,just says:
> timestamp
> timestamp coercible to POSIXct that will be the time the order will be
> inserted on.
>
> I don't quite catch on to what it is saying. further more,it seems that
> seldom examles in demo folder of quantstrat specifies this argument ?
>
> 3. how to code 'pyramiding' in quantstrat ?
>
> I have no idea about how to code 'pyramiding', it means the rule below,in
> quantstrat:
> 1) when RSI is less than 30, enter long with 300 shares of stock A,
> 2) when RSI is less than 10, and previous position is profitable, enter long
> with 100 more shares of stock A
> 3) when RSI is greater than 50, 200 shares of stock A exit
> 4) when RSI is greater than 70, rest 200 shares of stock A exit
>
> much appreciated if any guys give me some help about the question.
>
> regards.
>
>
>
> --
> View this message in context: http://r.789695.n4.nabble.com/questions-about-order-price-and-timestamp-in-quantstrat-tp4696424.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From a.chandhial at btinternet.com  Wed Sep  3 16:07:22 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Wed, 3 Sep 2014 15:07:22 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization &
 walk-forward procedure
In-Reply-To: <54036141.80606@r-programming.org>
References: <26919643.1747.1409469233231.JavaMail.defaultUser@defaultHost>
	<54036141.80606@r-programming.org>
Message-ID: <25344593.36655.1409753242864.JavaMail.defaultUser@defaultHost>


Mr. Yollin's guidance of:

>I'm pretty sure that you can get the luxor.8.walk.forward.R script to 
>run successfully as follows:
>1. execute luxor.5.strategy.ordersets.R which saves the strategy
>2. modify the the period argument in the call to walk.forward() to be 
>period='days'


doesn't work.


Anyone who can get this going email those script[s].



Amarjit



----Original message----
>From : gyollin at r-programming.org
Date : 31/08/2014 - 18:54 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - luxor.8 periodic optimization & walk-forward procedure

Amarjit,

I'm pretty sure that you can get the luxor.8.walk.forward.R script to 
run successfully as follows:
1. execute luxor.5.strategy.ordersets.R which saves the strategy
2. modify the the period argument in the call to walk.forward() to be 
period='days'

Good luck with this.

G


On 8/31/2014 12:13 AM, amarjit chandhial wrote:
>
>
> I cannot get quantstrat's luxor.8 periodic optimization & walk-forward 
> procedure, in the demos working.
>
>
> The idea being akin to the following diagram:
>
> http://www.tradestation.com/trading-technology/tradestation-platform/analyze/walk-forward-optimizer
>
>
> The error I get is,
>
> Error in if (!all(i <= 0)) stop("only zeros may be mixed with negative 
> subscripts") :
>   missing value where TRUE/FALSE needed
>
>
> If anybody can please email a working program.
>
>
>
> Otherwise, what I am really after is a demo with the workflow:
>  - a simple vanilla technical stratgey - I can do
>  - In-sample optimization of parameter(s) of simple strategy, 
> Out-of-sample run - I can do
>  - periodic optimization & walk-forward procedure
>
>
>
>
> Amarjit
>
>
>
>
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


	[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From 1111938 at qq.com  Thu Sep  4 07:05:31 2014
From: 1111938 at qq.com (domodo)
Date: Wed, 3 Sep 2014 22:05:31 -0700 (PDT)
Subject: [R-SIG-Finance] questions about order price and timestamp in
	quantstrat
In-Reply-To: <CA+oJuEFm_fFhnA0o_Uco3WPr68L+aQ-KtAMaaSaC5pnrvzhSug@mail.gmail.com>
References: <1409728900280-4696424.post@n4.nabble.com>
	<CA+oJuEFm_fFhnA0o_Uco3WPr68L+aQ-KtAMaaSaC5pnrvzhSug@mail.gmail.com>
Message-ID: <1409807131291-4696465.post@n4.nabble.com>

Ilya, you recommanded 'R/Finance 2013 quantstrat presentation',is it "Using
quantstrat to evaluate intraday trading strategies" by Peterson ?

I'm reading your blog, there are so many tips in it, I should read through
it before posting my questions.

PS:
2 pics in your posts are not available,
one is in the post of "Trend Vigor Part III: ATR position sizing, Annualized
Sharpe above 1.4, and Why Leverage Is Pointless"
another is in the post of "FRAMA Part IV: Continuing the Long/Short Filter
Search"
could you have a check-up and fix it ?

regards,



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-order-price-and-timestamp-in-quantstrat-tp4696424p4696465.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From mcewan.gareth at gmail.com  Thu Sep  4 09:54:07 2014
From: mcewan.gareth at gmail.com (Gareth McEwan)
Date: Thu, 4 Sep 2014 09:54:07 +0200
Subject: [R-SIG-Finance] AIC and deeper insight into model comparison
Message-ID: <CALGfFMa-ohEPxGu2h39uhYBVsQnmJrAQrRCM__=ZfNKMUDjKsg@mail.gmail.com>

Dear all

Using reference paper "Ng, S. and Perron, P. (2005). A Note on the
Selection of Time Series Models. *Oxford Bulletin of Economics and *
*Statistics*, 67 (1):115-134."

In fitting ARMA(p,q)-GARCH(1,1), ARMA(p,q)-GJR-GARCH(1,1) and
ARMA(p,q)-EGARCH(1,1) models to a time series (p,q = 0,1,2) under the
available error specifications (norm, std, ged, ghyp, sstd, sged, jsu,
nig), I had in mind to choose the fit with the lowest AIC value.

The Ng and Perron paper, however, advise holding N (the number of
observations) *fixed* (bottom of p.8) if you want theoretically valid model
comparisons. I assume R fits all the data in ARMA(0,q) and would drop 1
observation in fitting ARMA(1,q) and, similarly, would drop 2 observations
in fitting ARMA(2,q).

Has anyone dealt with this model selection issue before? If so, could you
recommend an approach that would allow N to be fixed for all fittings.
Note: I think the way to address the problem is to use the whole dataset
for ARMA(2,q), then drop the first observation when fitting ARMA(1,q), and
drop the first 2 observations when fitting ARMA(2,q)...thinking that this
would use R in a way that leads to theoretically correct AIC values valid
in comparing models.

Any help or guidance would be appreciated.

Many thanks
Gareth McEwan

	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Thu Sep  4 10:20:56 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Thu, 04 Sep 2014 09:20:56 +0100
Subject: [R-SIG-Finance] AIC and deeper insight into model comparison
In-Reply-To: <CALGfFMa-ohEPxGu2h39uhYBVsQnmJrAQrRCM__=ZfNKMUDjKsg@mail.gmail.com>
References: <CALGfFMa-ohEPxGu2h39uhYBVsQnmJrAQrRCM__=ZfNKMUDjKsg@mail.gmail.com>
Message-ID: <540820E8.6030508@4dscape.com>

Hi Gareth,

On 04/09/2014 08:54, Gareth McEwan wrote:
> Dear all
> 
> Using reference paper "Ng, S. and Perron, P. (2005). A Note on the
> Selection of Time Series Models. *Oxford Bulletin of Economics and *
> *Statistics*, 67 (1):115-134."
> 
> In fitting ARMA(p,q)-GARCH(1,1), ARMA(p,q)-GJR-GARCH(1,1) and
> ARMA(p,q)-EGARCH(1,1) models to a time series (p,q = 0,1,2) under the
> available error specifications (norm, std, ged, ghyp, sstd, sged, jsu,
> nig), I had in mind to choose the fit with the lowest AIC value.
> 
> The Ng and Perron paper, however, advise holding N (the number of
> observations) *fixed* (bottom of p.8) if you want theoretically valid model
> comparisons. I assume R fits all the data in ARMA(0,q) and would drop 1
> observation in fitting ARMA(1,q) and, similarly, would drop 2 observations
> in fitting ARMA(2,q).
That depends on the implementation. Some implementations try to build up
the "model" as data is made available rather than dropping everything
upto the highest lag order i.e for an AR(2) model, at time T=1 use the
unconditional mean (if that is included in the model), at time T=2 apply
the ar1 coefficient, and at T=3 the ar2 coefficient.
> 
> Has anyone dealt with this model selection issue before? If so, could you
> recommend an approach that would allow N to be fixed for all fittings.
> Note: I think the way to address the problem is to use the whole dataset
> for ARMA(2,q), then drop the first observation when fitting ARMA(1,q), and
> drop the first 2 observations when fitting ARMA(2,q)...thinking that this
> would use R in a way that leads to theoretically correct AIC values valid
> in comparing models.
In rugarch the information criteria are scaled by the number of
observations N e.g. the AIC is calculated as:
>(-2*LLH)/N + 2 * m/N
where m is the number of parameters.

This therefore adjusts the statistic to yield a per observation
contribution.

Whether this is a "theoretically" valid way or not to compare these
compare models I cannot say for sure.
Unless your dataset is very small, includes very large outliers in the
first "q" observations or you are using a very large number of lags,
how important do you think will be a couple of points in the overall
comparison?
> 
> Any help or guidance would be appreciated.
> 
> Many thanks
> Gareth McEwan
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 

Alexios


From grgkumar4 at gmail.com  Thu Sep  4 21:38:04 2014
From: grgkumar4 at gmail.com (George Kumar)
Date: Thu, 4 Sep 2014 12:38:04 -0700
Subject: [R-SIG-Finance] How to get chart.CumReturns to return dataframe of
	cumulative returns
Message-ID: <CAJDeD2piDzGSENvt04CHgRrGv_HVw9uKKYTFkLQfn7D0A=Vq8w@mail.gmail.com>

Hi all,

I am using performanceanalytics
<http://stackoverflow.com/questions/tagged/performanceanalytics> package
and specifically the function

chart.CumReturns. This works fine. But my question
is suppose instead of plotting the data I would like
chart.CumReturns to return me a table/data frame of values.

I realize that I can use cumsum function

df.cumsum = apply(df,2,cumsum)

but this only gives me arithmatic sum, whereas I would prefer geometric

cumulative return and chart.CumReturns seem to do a good job
in returning that information.

Thanks.

George

	[[alternative HTML version deleted]]


From brian at braverock.com  Thu Sep  4 21:47:19 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Thu, 04 Sep 2014 14:47:19 -0500
Subject: [R-SIG-Finance] How to get chart.CumReturns to return dataframe
 of cumulative returns
In-Reply-To: <CAJDeD2piDzGSENvt04CHgRrGv_HVw9uKKYTFkLQfn7D0A=Vq8w@mail.gmail.com>
References: <CAJDeD2piDzGSENvt04CHgRrGv_HVw9uKKYTFkLQfn7D0A=Vq8w@mail.gmail.com>
Message-ID: <5408C1C7.1000807@braverock.com>

On 09/04/2014 02:38 PM, George Kumar wrote:
> Hi all,
>
> I am using PerformanceAnalytics package
> and specifically the function
>
> chart.CumReturns. This works fine. But my question
> is suppose instead of plotting the data I would like
> chart.CumReturns to return me a table/data frame of values.
>
> I realize that I can use cumsum function
>
> df.cumsum = apply(df,2,cumsum)
>
> but this only gives me arithmetic sum, whereas I would prefer geometric
>
> cumulative return and chart.CumReturns seem to do a good job
> in returning that information.

use cumprod instead of cumsum.

Since cumprod and cumsum are core R functions, we didn't see a need to 
create a  function in PerformanceAnalytics for it.

Alternately, Return.portfolio will also do what you want, and return a 
time series of cumulative returns if wealth.index=TRUE

Regards,

Brian

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From 1111938 at qq.com  Fri Sep  5 18:31:56 2014
From: 1111938 at qq.com (domodo)
Date: Fri, 5 Sep 2014 09:31:56 -0700 (PDT)
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
Message-ID: <1409934716272-4696562.post@n4.nabble.com>

hi,guys,I got some questions in these days,any help would be appreciated.

1. about coding adaptive technical indicator.
For example, adaptive sma for dynamic break out, the Pseudro codes are:

for ( bar in 1: nrow(data)){
    If( bar == 1 ) {
        lookBackDays = 20;
    }
    Else {
        lastVolatility = currentVolatility;
        currentVolatility = StdDev(Close,30);
        
        deltaVolatility = (currentVolatility -
lastVolatility)/currentVolatility;
        lookBackDays = (1 + deltaVolatility) * lookBackDays;
        lookBackDays = MinList(lookBackDays,60);
        lookBackDays = MaxList(lookBackDays,20)
    }

    adapSMA[bar] = SMA(Close, lookBackDays) ;
}

for not quite familiar with R coding, I got error when calculating variable
'adapsma', the code are below:

adapSMA <- function(x, SDlen, n, ceiling, floor, multi){
    #error treatments
    x <- try.xts(x, error = as.matrix)
    if (n < 1 || n > NROW(x)) 
        stop("Invalid 'n'")
    if (any(nNonNA <- n > colSums(!is.na(x)))) 
        stop("n > number of non-NA values in column(s) ",
paste(which(nNonNA), collapse = ", "))   
    
    #calculate dynamic parameter 
    currentV  <-  runSD(x, SDlen, sample=T)
    deltaV  <-  -Delt(currentV)
    deltav[is.na(deltav)] = 0
    
    series <- 1+deltav
    series[1] <- n
    lookback <- cumprod(series)-0.5  
    
    # limit the parameter in a specified range between (floor, celling)
    for( i in 1:NROW(lookback)){
        lookback[i] <- min(lookback[i], ceiling)
        lookback[i] <- max(lookback[i], floor)
    }
    
    #get int portion of the value
    lookback <- round(lookback)
    
    #calculate adaptive sma according dynamic parameter,but get error here
    adapsma  <-  runMean(x,lookBack)

    reclass(adapsma, x)
    return(adapsma)
}

2. intra-day trading strategy by specified time 
for example, an intra-day strategy is:
1) market opens from 9:00 to 15:30,the strategy's trading time is from 9:31
to 15:25 on 1-minute chart.

2) at 9:30, get the highest high and lowest low of the day (that's, the
highest high from 9:00 to 9:30, the lowest low from 9:00 to 9:30 of the
1-minute bar ), and store them in variable ?todayHigh' and 'todayLow'

3) during the trading time, when last bar's close cross above todayHigh,
enter long on current bar,when last bar's close cross under todayLow,enter
shorton current bar

4) when last bar's close cross todayHigh/2+todayLow/2, exit long/short. 

5) if 2 trades on the same direction in total are in loss, stop trading this
direction until tomorrow.

the rules are not very complicated, my problem is, have no idea about how to
code rule 2) and 5) 

3. It's very time-consuming when back-testing strategy on long range of
intraday historical data (especially on 1-minute data), is it possible to
accelerate the back-testing by package 'parallel' or other method ? 

regards, and have a nice weekend.   ( ^ ^ ) /



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From 1111938 at qq.com  Fri Sep  5 18:36:26 2014
From: 1111938 at qq.com (domodo)
Date: Fri, 5 Sep 2014 09:36:26 -0700 (PDT)
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <1409934716272-4696562.post@n4.nabble.com>
References: <1409934716272-4696562.post@n4.nabble.com>
Message-ID: <1409934986747-4696563.post@n4.nabble.com>

regarding adaptive indicator, Ilya gives an example in his blog ( function
coded by C and R),
but how about a pure R-code version ?



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562p4696563.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From ilya.kipnis at gmail.com  Fri Sep  5 18:55:51 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Fri, 5 Sep 2014 12:55:51 -0400
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <1409934986747-4696563.post@n4.nabble.com>
References: <1409934716272-4696562.post@n4.nabble.com>
	<1409934986747-4696563.post@n4.nabble.com>
Message-ID: <CA+oJuEHAso_WpFxjmtyptU6zSorRD9OYAFMu3-wWz_OY+BFrMQ@mail.gmail.com>

If you have a computation that deals with this type of computation:
x(t) <- a*value + (1-a)*x(t-1), and a is dynamic, then you'll need to
drop down to Rcpp to do that in a timely fashion. Always.

On Fri, Sep 5, 2014 at 12:36 PM, domodo <1111938 at qq.com> wrote:
> regarding adaptive indicator, Ilya gives an example in his blog ( function
> coded by C and R),
> but how about a pure R-code version ?
>
>
>
> --
> View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562p4696563.html
> Sent from the Rmetrics mailing list archive at Nabble.com.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From a.chandhial at btinternet.com  Fri Sep  5 20:21:19 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Fri, 5 Sep 2014 19:21:19 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat luxor.4, timespan optimization
Message-ID: <21177022.17294.1409941279587.JavaMail.defaultUser@defaultHost>

I am trying to get "luxor.4, luxor timespan paramset optimization" running.
In order to to do this:
(a) I run luxor.1, including timespan=.timespan in the 4 rules.
luxor.1 uses an include file which has
 .timespans <- c('T06:00/T10:00', 'T07:00/T11:00', 
'T08:00/T12:00', 'T09:00/T13:00', 'T10:00/T14:00', 'T11:00/T15:00', 
'T12:00/T16:00')
&
I have  .timespan = 'T06:00/T10:00' 
I then save strategy. 
(b) I run luxor.2 paramsets and save strategy. 
(c) I run luxor.4, the optimization, whereby I get the following results$tradeStats for the various  .timespans:
        r$param.combo Portfolio Symbol Num.Txns Num.Trades Net.Trading.PL Avg.Trade.PL Med.Trade.PL Largest.Winner Largest.Loser Gross.Profits Gross.Losses Std.Dev.Trade.PL Percent.Positive Percent.Negative Profit.Factor Avg.Win.Trade
GBPUSD  T06:00/T10:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
GBPUSD1 T07:00/T11:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
GBPUSD2 T08:00/T12:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
GBPUSD3 T09:00/T13:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
GBPUSD4 T10:00/T14:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
GBPUSD5 T11:00/T15:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
GBPUSD6 T12:00/T16:00    forex. GBPUSD        6          2           -502          149          149            354           -56           354          -56         289.9138               50               50      6.321429           354
        Med.Win.Trade Avg.Losing.Trade Med.Losing.Trade Avg.Daily.PL Med.Daily.PL Std.Dev.Daily.PL Ann.Sharpe Max.Drawdown Profit.To.Max.Draw Avg.WinLoss.Ratio Med.WinLoss.Ratio Max.Equity Min.Equity End.Equity
GBPUSD            354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
GBPUSD1           354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
GBPUSD2           354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
GBPUSD3           354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
GBPUSD4           354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
GBPUSD5           354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
GBPUSD6           354              -56              -56          149          149         289.9138   8.158638        -1712         -0.2932243          6.321429          6.321429       1040      -1000       -502
Well, no, as you can see I get *the same* results for the various times in .timespans.
These are the same tradeStats results for the vanilla luxor.1 strategy having put .timespan = 'T06:00/T10:00' in the 4 rules, 
So luxor.4 is trying to do an optimization but doesn't get past the .timespan value, to do the .timespans. That is so because if I follow the procedure for a different .timespan including a .timepsan=NULL, the script[s] will do the 'optimization' for that .timespan only, giving the same tradeStats repeated and not do for the remaining times. 
Advice/solution appreciated.
As said what I am, and probably lots of others reading this are after is:
A workflow giving
(1) simple vanilla stratgey (an MA or oscillator) 
(2) In-sample optimization of parameter(s) of simple strategy, Out-of-sample run
(3) periodic optimization & walk-forward procedure 
 with the right results.
Amarjit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140905/49f1c140/attachment.html>

From grchang at gmail.com  Fri Sep  5 21:50:34 2014
From: grchang at gmail.com (George Chang)
Date: Fri, 5 Sep 2014 15:50:34 -0400
Subject: [R-SIG-Finance] Errors with Quanstrat-IV Demo
Message-ID: <CAMz0m8Cj80pSwySCw5pCLgOyt0WpXP3TMdYgtwG2tQBhSV=Zeg@mail.gmail.com>

Dear Fellow R-sig-fiance members,

I am relatively new to R but have written one working  R program recently.
In my continuing education, I am studying Guy Yollin's presentations and
related scripts about Quantstrat. If you're interested, please see his blog
at:
http://www.r-programming.org/files

My particular problem is the following error when I run Guy's Quantstrat-IV
script. It does not know 'add.constraint', but accepts the other 'add'
functions, such as 'add.distribution'.

Error in args(add.constraint) : object 'add.constraint' not found

Any suggestions/solutions are much appreciated.

George C

	[[alternative HTML version deleted]]


From teamtraders3564 at gmail.com  Fri Sep  5 23:31:00 2014
From: teamtraders3564 at gmail.com (Jason Eyerly)
Date: Fri, 5 Sep 2014 14:31:00 -0700
Subject: [R-SIG-Finance] Help With Library Install...
Message-ID: <D7ECAC06-3211-4F8F-92A9-71C077D1390E@gmail.com>

Hello Everyone,
   I?m using RStudio and R on a Macbook. However, every time I try installing a library I get the following message (I?ve tried 3.0.3 and 3.1.X). If anybody can help me figure this out I?d greatly appreciate it. 

> install.packages("quantstrat", repos="http://R-Forge.R-project.org")
Warning in install.packages :
  cannot open: HTTP status was '404 Not Found'
Warning in install.packages :
  cannot open: HTTP status was '404 Not Found'
Warning in install.packages :
  unable to access index for repository http://R-Forge.R-project.org/bin/macosx/contrib/3.0

   package ?quantstrat? is available as a source package but not as a binary

Warning in install.packages :
  package ?quantstrat? is not available (for R version 3.0.3)

Regards,
    Jason Eyerly

From thomas.fuller at coherentlogic.com  Fri Sep  5 23:38:14 2014
From: thomas.fuller at coherentlogic.com (Thomas Fuller)
Date: Fri, 5 Sep 2014 14:38:14 -0700
Subject: [R-SIG-Finance] Help With Library Install...
In-Reply-To: <D7ECAC06-3211-4F8F-92A9-71C077D1390E@gmail.com>
References: <D7ECAC06-3211-4F8F-92A9-71C077D1390E@gmail.com>
Message-ID: <1409953094.99726.YahooMailNeo@web142705.mail.bf1.yahoo.com>

The following works with R version 3.1.0 (2014-04-10):

install.packages("quantstrat", repos="http://R-Forge.R-project.org")

 
Tom
+1.312.694.3313+1.312.694.3313
  
Thomas P. Fuller,  MSc
President

Coherent Logic Limited [LinkedIn]
High Performance  Software Engineering

thomas.fuller at coherentlogic.com
IM:  thospfuller (Yahoo)
 


1751 Pinnacle Drive Suite 600
McLean, VA 22102
United States of America

mobile:  +1.312.694.3313+1.312.694.3313
 
Call
Send SMS
Add to Skype
You'll need Skype CreditFree via Skype


________________________________
 From: Jason Eyerly <teamtraders3564 at gmail.com>
To: r-sig-finance at r-project.org 
Sent: Friday, September 5, 2014 5:31 PM
Subject: [R-SIG-Finance] Help With Library Install...


Hello Everyone,
   I?m using RStudio and R on a Macbook. However, every time I try installing a library I get the following message (I?ve tried 3.0.3 and 3.1.X). If anybody can help me figure this out I?d greatly appreciate it. 

> install.packages("quantstrat", repos="http://R-Forge.R-project.org")
Warning in install.packages :
  cannot open: HTTP status was '404 Not Found'
Warning in install.packages :
  cannot open: HTTP status was '404 Not Found'
Warning in install.packages :
  unable to access index for repository http://R-Forge.R-project.org/bin/macosx/contrib/3.0

   package ?quantstrat? is available as a source package but not as a binary

Warning in install.packages :
  package ?quantstrat? is not available (for R version 3.0.3)

Regards,
    Jason Eyerly
_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.
	[[alternative HTML version deleted]]


From thomas.fuller at coherentlogic.com  Fri Sep  5 23:43:43 2014
From: thomas.fuller at coherentlogic.com (Thomas Fuller)
Date: Fri, 5 Sep 2014 14:43:43 -0700
Subject: [R-SIG-Finance] Help With Library Install...
In-Reply-To: <1409953094.99726.YahooMailNeo@web142705.mail.bf1.yahoo.com>
References: <D7ECAC06-3211-4F8F-92A9-71C077D1390E@gmail.com>
	<1409953094.99726.YahooMailNeo@web142705.mail.bf1.yahoo.com>
Message-ID: <1409953423.43649.YahooMailNeo@web142706.mail.bf1.yahoo.com>

I need to clarify -- I executed what's written below using RStudio version 0.98.507.


Tom
+1.312.694.3313+1.312.694.3313
  
Thomas P. Fuller,  MSc
President

Coherent Logic Limited [LinkedIn]
High Performance  Software Engineering

thomas.fuller at coherentlogic.com
IM:  thospfuller (Yahoo)
 


1751 Pinnacle Drive Suite 600
McLean, VA 22102
United States of America

mobile:  +1.312.694.3313+1.312.694.3313
 
Call
Send SMS
Add to Skype
You'll need Skype CreditFree via Skype


________________________________
 From: Thomas Fuller <thomas.fuller at coherentlogic.com>
To: Jason Eyerly <teamtraders3564 at gmail.com>; "r-sig-finance at r-project.org" <r-sig-finance at r-project.org> 
Sent: Friday, September 5, 2014 5:38 PM
Subject: Re: [R-SIG-Finance] Help With Library Install...


The following works with R version 3.1.0 (2014-04-10):

install.packages("quantstrat", repos="http://R-Forge.R-project.org")


Tom
+1.312.694.3313+1.312.694.3313
  
Thomas P. Fuller,  MSc
President

Coherent Logic Limited [LinkedIn]
High Performance  Software Engineering

thomas.fuller at coherentlogic.com
IM:  thospfuller (Yahoo)



1751 Pinnacle Drive Suite 600
McLean, VA 22102
United States of America

mobile:  +1.312.694.3313+1.312.694.3313

Call
Send SMS
Add to Skype
You'll need Skype CreditFree via Skype


________________________________
From: Jason Eyerly <teamtraders3564 at gmail.com>
To: r-sig-finance at r-project.org 
Sent: Friday, September 5, 2014 5:31 PM
Subject: [R-SIG-Finance] Help With Library Install...


Hello Everyone,
   I?m using RStudio and R on a Macbook. However, every time I try installing a library I get the following message (I?ve tried 3.0.3 and 3.1.X). If anybody can help me figure this out I?d greatly appreciate it. 

> install.packages("quantstrat", repos="http://R-Forge.R-project.org")
Warning in install.packages :
  cannot open: HTTP status was '404 Not Found'
Warning in install.packages :
  cannot open: HTTP status was '404 Not Found'
Warning in install.packages :
  unable to access index for repository http://R-Forge.R-project.org/bin/macosx/contrib/3.0

   package ?quantstrat? is available as a source package but not as a binary

Warning in install.packages :
  package ?quantstrat? is not available (for R version 3.0.3)

Regards,
    Jason Eyerly
_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.
    [[alternative HTML version deleted]]




_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.
	[[alternative HTML version deleted]]


From teamtraders3564 at gmail.com  Sat Sep  6 00:06:27 2014
From: teamtraders3564 at gmail.com (Jason Eyerly)
Date: Fri, 5 Sep 2014 15:06:27 -0700
Subject: [R-SIG-Finance] Help With Library Install...
In-Reply-To: <1409953094.99726.YahooMailNeo@web142705.mail.bf1.yahoo.com>
References: <D7ECAC06-3211-4F8F-92A9-71C077D1390E@gmail.com>
	<1409953094.99726.YahooMailNeo@web142705.mail.bf1.yahoo.com>
Message-ID: <CAHhBSjo+taHTow_vOfcwCz+h8Wq6jLuDgCUad9emKybp5SFGTA@mail.gmail.com>

I've just tried with version 3.1.0 as well and I get the same issue.

-Jason Eyerly
On Sep 5, 2014 2:38 PM, "Thomas Fuller" <thomas.fuller at coherentlogic.com>
wrote:

> The following works with R version 3.1.0 (2014-04-10):
>
> install.packages("quantstrat", repos="http://R-Forge.R-project.org")
>
> Tom
> +1.312.694.3313+1.312.694.3313
>    *Thomas P. Fuller, MSc*
> President
>
> Coherent Logic Limited <http://www.coherentlogic.com/> [LinkedIn
> <https://www.linkedin.com/company/coherent-logic-limited/>]
> High Performance Software Engineering
>
> thomas.fuller at coherentlogic.com
> IM: thospfuller (Yahoo)
>
>
>
> 1751 Pinnacle Drive Suite 600
> McLean, VA 22102
> United States of America
>
> mobile:  +1.312.694.3313+1.312.694.3313
> Call
> Send SMS
> Add to Skype
> You'll need Skype CreditFree via Skype
>
>   ------------------------------
>  *From:* Jason Eyerly <teamtraders3564 at gmail.com>
> *To:* r-sig-finance at r-project.org
> *Sent:* Friday, September 5, 2014 5:31 PM
> *Subject:* [R-SIG-Finance] Help With Library Install...
>
> Hello Everyone,
>   I?m using RStudio and R on a Macbook. However, every time I try
> installing a library I get the following message (I?ve tried 3.0.3 and
> 3.1.X). If anybody can help me figure this out I?d greatly appreciate it.
>
> > install.packages("quantstrat", repos="http://R-Forge.R-project.org
> <http://r-forge.r-project.org/>")
> Warning in install.packages :
>   cannot open: HTTP status was '404 Not Found'
> Warning in install.packages :
>   cannot open: HTTP status was '404 Not Found'
> Warning in install.packages :
>   unable to access index for repository
> http://R-Forge.R-project.org/bin/macosx/contrib/3.0
> <http://r-forge.r-project.org/bin/macosx/contrib/3.0>
>
>   package ?quantstrat? is available as a source package but not as a binary
>
> Warning in install.packages :
>   package ?quantstrat? is not available (for R version 3.0.3)
>
> Regards,
>     Jason Eyerly
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>
>

	[[alternative HTML version deleted]]


From josh.m.ulrich at gmail.com  Sat Sep  6 22:56:02 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Sat, 6 Sep 2014 15:56:02 -0500
Subject: [R-SIG-Finance] quantstrat luxor.4, timespan optimization
In-Reply-To: <21177022.17294.1409941279587.JavaMail.defaultUser@defaultHost>
References: <21177022.17294.1409941279587.JavaMail.defaultUser@defaultHost>
Message-ID: <CAPPM_gSO2A9JWP6En9Nsy8qqovDWHYsXHkFjmH2+1nqnCWd_zg@mail.gmail.com>

On Fri, Sep 5, 2014 at 1:21 PM, amarjit chandhial
<a.chandhial at btinternet.com> wrote:
>
>
> I am trying to get "luxor.4, luxor timespan paramset optimization" running.
>
> In order to to do this:
>
> (a) I run luxor.1, including timespan=.timespan in the 4 rules.
>
> luxor.1 uses an include file which has
>
>  .timespans <- c('T06:00/T10:00', 'T07:00/T11:00', 'T08:00/T12:00',
> 'T09:00/T13:00', 'T10:00/T14:00', 'T11:00/T15:00', 'T12:00/T16:00')
>
> &
>
> I have  .timespan = 'T06:00/T10:00'
>
> I then save strategy.
>
>
>
> (b) I run luxor.2 paramsets and save strategy.
>
>
>
> (c) I run luxor.4, the optimization, whereby I get the following
> results$tradeStats for the various  .timespans:
>
<snip>
>
>
>
> Well, no, as you can see I get *the same* results for the various times in
> .timespans.
>
> These are the same tradeStats results for the vanilla luxor.1 strategy
> having put .timespan = 'T06:00/T10:00' in the 4 rules,
>
> So luxor.4 is trying to do an optimization but doesn't get past the
> .timespan value, to do the .timespans. That is so because if I follow the
> procedure for a different .timespan including a .timepsan=NULL, the
> script[s] will do the 'optimization' for that .timespan only, giving the
> same tradeStats repeated and not do for the remaining times.
>
>
>
>
> Advice/solution appreciated.
>
I spent some time this morning looking at this specific example and I
don't think the luxor.4 timespan paramset ever worked (at least I
can't see how it ever worked).  Unfortunately, I also do not see a
quick/easy way to make it work.

>
>
>
> As said what I am, and probably lots of others reading this are after is:
>
> A workflow giving
> (1) simple vanilla stratgey (an MA or oscillator)
> (2) In-sample optimization of parameter(s) of simple strategy, Out-of-sample
> run
> (3) periodic optimization & walk-forward procedure
>  with the right results.
>
>
>
>
> Amarjit
>

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From gyollin at r-programming.org  Sun Sep  7 01:35:17 2014
From: gyollin at r-programming.org (Guy Yollin)
Date: Sat, 06 Sep 2014 16:35:17 -0700
Subject: [R-SIG-Finance] Errors with Quanstrat-IV Demo
In-Reply-To: <CAMz0m8Cj80pSwySCw5pCLgOyt0WpXP3TMdYgtwG2tQBhSV=Zeg@mail.gmail.com>
References: <CAMz0m8Cj80pSwySCw5pCLgOyt0WpXP3TMdYgtwG2tQBhSV=Zeg@mail.gmail.com>
Message-ID: <540B9A35.9000205@r-programming.org>

George,

I just posted the latest update to all of the slides and R scripts.

Further, there are 3 new slide decks:  quantstrat-III (this is actually 
new because I changed the naming convention), Luxor, and WFA.

All of the code should be operational with one exception.  I had to 
modify the functions chart.forward and chart.forward.training and these 
changes haven't been checked in to SVN.

I will try to do that in the near future.

G

On 9/5/2014 12:50 PM, George Chang wrote:
> Dear Fellow R-sig-fiance members,
>
> I am relatively new to R but have written one working  R program recently.
> In my continuing education, I am studying Guy Yollin's presentations and
> related scripts about Quantstrat. If you're interested, please see his blog
> at:
> http://www.r-programming.org/files
>
> My particular problem is the following error when I run Guy's Quantstrat-IV
> script. It does not know 'add.constraint', but accepts the other 'add'
> functions, such as 'add.distribution'.
>
> Error in args(add.constraint) : object 'add.constraint' not found
>
> Any suggestions/solutions are much appreciated.
>
> George C
>
> 	[[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From mamushbukana at gmail.com  Mon Sep  8 09:58:41 2014
From: mamushbukana at gmail.com (mamuash bukana)
Date: Mon, 8 Sep 2014 09:58:41 +0200
Subject: [R-SIG-Finance] Error in (ur.df) function
Message-ID: <CAFxDEqKAmvYw+6UjEcZVPcKqVCxo+WFTM9JO3Ry5=seM8L9-+Q@mail.gmail.com>

Dear R users,

For a time series, say y:
y<-cumsum(rnorm(100)) # I used ur.df function (urca package) to test
for unit root with/without a drift as follows:

test<-ur.df(y,lags=3,type="drift") # this works for the artificial
data here, but when I apply the same function to my very big data, it
comes with the following error:

Error in coef(summary(result))[2, 3] : subscript out of bounds


Any suggestion please?


Mamuash


From markknecht at gmail.com  Mon Sep  8 18:34:41 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Mon, 8 Sep 2014 09:34:41 -0700
Subject: [R-SIG-Finance] Errors with Quanstrat-IV Demo
In-Reply-To: <540B9A35.9000205@r-programming.org>
References: <CAMz0m8Cj80pSwySCw5pCLgOyt0WpXP3TMdYgtwG2tQBhSV=Zeg@mail.gmail.com>
	<540B9A35.9000205@r-programming.org>
Message-ID: <CAK2H+edZDO36UHKLdBhzgff1A3mv3UZTvb-AvhYmbcVXip_Q8Q@mail.gmail.com>

Guy,
   Other than some warning messages in RStudio about only supporting a
single graphics I can confirm that the WFA demo at least runs to
completion and generates some charts.

   Thanks for your work!

Cheers,
Mark



On Sat, Sep 6, 2014 at 4:35 PM, Guy Yollin <gyollin at r-programming.org> wrote:
> George,
>
> I just posted the latest update to all of the slides and R scripts.
>
> Further, there are 3 new slide decks:  quantstrat-III (this is actually new
> because I changed the naming convention), Luxor, and WFA.
>
> All of the code should be operational with one exception.  I had to modify
> the functions chart.forward and chart.forward.training and these changes
> haven't been checked in to SVN.
>
> I will try to do that in the near future.
>
> G
>
>
> On 9/5/2014 12:50 PM, George Chang wrote:
>>
>> Dear Fellow R-sig-fiance members,
>>
>> I am relatively new to R but have written one working  R program recently.
>> In my continuing education, I am studying Guy Yollin's presentations and
>> related scripts about Quantstrat. If you're interested, please see his
>> blog
>> at:
>> http://www.r-programming.org/files
>>
>> My particular problem is the following error when I run Guy's
>> Quantstrat-IV
>> script. It does not know 'add.constraint', but accepts the other 'add'
>> functions, such as 'add.distribution'.
>>
>> Error in args(add.constraint) : object 'add.constraint' not found
>>
>> Any suggestions/solutions are much appreciated.
>>
>> George C
>>
>>         [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.


From treydog999 at gmail.com  Mon Sep  8 21:26:13 2014
From: treydog999 at gmail.com (Derek Wong)
Date: Mon, 8 Sep 2014 14:26:13 -0500
Subject: [R-SIG-Finance] Adding Stop Loss to pair_trade example
Message-ID: <CALQudT-7Ja0z5c2Uhu93Muupyh9M4vDDvxR_q9u9fJ584_MUAg@mail.gmail.com>

I am very new to quantstrat and R. I have been playing with the pair_trade
example and have been wondering how to implement stop losses that are non
indicator based. I would like to implement a stop loss based on the
movement of the spread. I have looked at the macd example for risk stop
losses however when i apply that same syntax to the pair_trade it does not
affect the system at all. Can anyone help?

The Changes i made to the orignal example code are, labeling the entries as
Long or Short. Then adding 2 additional rules as chain and having them use
a threshold multiplier or +/- .05

*My code for the Rules Section of the example*

pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.dn", sigval=TRUE,
                                     orderqty=1e6, ordertype='market',
                                     orderside=NULL,
osFUN='osSpreadMaxPos'),
                      type='enter',
                      label = 'Long')
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.up", sigval=TRUE,
                                     orderqty=-1e6, ordertype='market',
                                     orderside=NULL,
osFUN='osSpreadMaxPos'),
                      type='enter',
                      label = 'Short')
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.mid.fb", sigval=TRUE,
                                     orderqty='all', ordertype='market',
                                     orderside=NULL),
                      type='exit')
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.mid.fa", sigval=TRUE,
                                     orderqty='all', ordertype='market',
                                     orderside=NULL),
                      type='exit')

pairStrat <- add.rule(strategy=pairStrat, name'ruleSignal',
                      arguments=list(sigcol="cross.dn", sigval=TRUE,
                                     orderqty='all', ordertype='stoplimit',
                                     orderside=NULL,
                                     threshold = -.05, tmult=TRUE,
                                     orderset='exit2'),
                      type = 'chain',
                      parent = 'Long',
                      label = 'LongStop')

pairStrat <- add.rule(strategy=pairStrat, name'ruleSignal',
                      arguments=list(sigcol="cross.dn", sigval=TRUE,
                                     orderqty='all', ordertype='stoplimit',
                                     orderside=NULL,
                                     threshold = .05, tmult=TRUE,
                                     orderset='exit2'),
                      type = 'chain',
                      parent = 'Short',
                      label = 'ShortStop')



Thanks

Derek

	[[alternative HTML version deleted]]


From a.chandhial at btinternet.com  Tue Sep  9 11:15:15 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Tue, 9 Sep 2014 10:15:15 +0100 (BST)
Subject: [R-SIG-Finance] Errors with Quanstrat-IV Demo
In-Reply-To: <CAK2H+edZDO36UHKLdBhzgff1A3mv3UZTvb-AvhYmbcVXip_Q8Q@mail.gmail.com>
References: <CAMz0m8Cj80pSwySCw5pCLgOyt0WpXP3TMdYgtwG2tQBhSV=Zeg@mail.gmail.com>
	<540B9A35.9000205@r-programming.org>
	<CAK2H+edZDO36UHKLdBhzgff1A3mv3UZTvb-AvhYmbcVXip_Q8Q@mail.gmail.com>
Message-ID: <27254475.9773.1410254115607.JavaMail.defaultUser@defaultHost>


The walk-forward demo does not run to completion,

chart.forward("wfa.results.RData")
Error in chart.forward("wfa.results.RData") : object '.audit' not found


Amarjit



----Original message----
>From : markknecht at gmail.com
Date : 08/09/2014 - 17:34 (GMTST)
To : gyollin at r-programming.org
Cc : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] Errors with Quanstrat-IV Demo

Guy,
   Other than some warning messages in RStudio about only supporting a
single graphics I can confirm that the WFA demo at least runs to
completion and generates some charts.

   Thanks for your work!

Cheers,
Mark



On Sat, Sep 6, 2014 at 4:35 PM, Guy Yollin <gyollin at r-programming.org> wrote:
> George,
>
> I just posted the latest update to all of the slides and R scripts.
>
> Further, there are 3 new slide decks:  quantstrat-III (this is actually new
> because I changed the naming convention), Luxor, and WFA.
>
> All of the code should be operational with one exception.  I had to modify
> the functions chart.forward and chart.forward.training and these changes
> haven't been checked in to SVN.
>
> I will try to do that in the near future.
>
> G
>
>
> On 9/5/2014 12:50 PM, George Chang wrote:
>>
>> Dear Fellow R-sig-fiance members,
>>
>> I am relatively new to R but have written one working  R program recently.
>> In my continuing education, I am studying Guy Yollin's presentations and
>> related scripts about Quantstrat. If you're interested, please see his
>> blog
>> at:
>> http://www.r-programming.org/files
>>
>> My particular problem is the following error when I run Guy's
>> Quantstrat-IV
>> script. It does not know 'add.constraint', but accepts the other 'add'
>> functions, such as 'add.distribution'.
>>
>> Error in args(add.constraint) : object 'add.constraint' not found
>>
>> Any suggestions/solutions are much appreciated.
>>
>> George C
>>
>>         [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From andre_mikulec at hotmail.com  Tue Sep  9 15:13:11 2014
From: andre_mikulec at hotmail.com (Andre Mikulec)
Date: Tue, 9 Sep 2014 09:13:11 -0400
Subject: [R-SIG-Finance] An easy way to run the quantstrat faber.R demo
	within an R function?
In-Reply-To: <BLU174-W18245986C4CFA7DC88B9719CC30@phx.gbl>
References: <BLU174-W18245986C4CFA7DC88B9719CC30@phx.gbl>
Message-ID: <BLU174-W544CF74601176500FEA6B9CCE0@phx.gbl>


 Hi,I am trying to run the faber.R demo within a function
Here is the urlhttps://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
Within a function, when the 'faber.R code reaches initPortf() the following error is thrown.
Error in exists(paste("portfolio", name, sep = "."), envir = .blotter,  :   object '.blotter' not found
# what I have done to fix is insert the following code # and tested running   # within a function  # within a lexical function  # within R studio ( within a lexical function )
# just after# require(quantstrat) call# required ( If I am running in a function )if(!is.null(sys.call(sys.parent()))) {  if (!exists('.blotter' , envir=.GlobalEnv ))  { .GlobalEnv$.blotter   <- new.env() }   if (!exists('.strategy', envir=.GlobalEnv ))  { .GlobalEnv$.strategy  <- new.env() } }  # just after# getSymbols( . . . ) call# optional: ( If I am running in a function )# does not affect the program ( but for consistency if nothing else )# note: .getSymbols is not an environmentif(!is.null(sys.call(sys.parent()))) {  .GlobalEnv$.getSymbols <- .getSymbols}
# just after # assign(symbol,x) call# required ( If I am running in a function )if(!is.null(sys.call(sys.parent()))) {  assign(symbol,x, envir = .GlobalEnv)}
# RStudio # surrounding any dev() OR chart.#() calls# dev() # Only one RStudio graphics device is permitted# chart # RStudio margins errorif (!any(search() %in% "tools:rstudio")) { # ...}
# Does any other easier way exist, so I do not have to modify# so much code?
Thanks,Andre MikulecAndre_Mikulec at Hotmail.com
 		 	   		   		 	   		  
	[[alternative HTML version deleted]]


From andre_mikulec at hotmail.com  Tue Sep  9 15:13:58 2014
From: andre_mikulec at hotmail.com (Andre Mikulec)
Date: Tue, 9 Sep 2014 09:13:58 -0400
Subject: [R-SIG-Finance] quantstrat faber.R transactions?
In-Reply-To: <BLU174-W51ACF7E90F56E9D56732E79CC30@phx.gbl>
References: <BLU174-W51ACF7E90F56E9D56732E79CC30@phx.gbl>
Message-ID: <BLU174-W54C1A6CE0FCDA70E7B6C99CCE0@phx.gbl>

 Hi,May someone enlighten me?
I am running the faber.R demo
Here is the urlhttps://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
Q # 1------Of the initial equity, I notice that  100,000 dollars invested.At the start ,is the money split evenly, among the 9 sectors? 
Each is invested  11,111.11 dollars? Is this true?
Or, is just a big pile of cash sitting there, waiting for the first transaction?
One reason why I am asking this is because the end result offaber.stats$Net.Trading.PL seems to look like the average is around 11,000.

Q # 2-----I notice that financial data on the sectors is loaded the beginning of 1999getSymbols( ...  from='1999-01-01')
I notice that the first transaction starts 10 months later,is this because the SMA of 10 months needs '10 months of data'?
[1] "1999-12-31 00:00:00 XLB 500 @ 26.58"[1] "2000-01-31 00:00:00 XLB -500 @ 23.33"[1] "2000-12-31 00:00:00 XLB 500 @ 21.42"[1] "2001-03-31 00:00:00 XLB -500 @ 19.97"[1] "2001-04-30 00:00:00 XLB 500 @ 22.1"
Q # 3-----This relates to (Q # 1) and (Q # 2)At the time of "1999-12-31" is just the "XLB" being 'invested in'?
Are the other sectors already invested? '1/9th of 100,000'? Or something different?  
Before "1999-12-31" is all of the 100,000 dollars in cash and 'not invested at all'?
Q & 4-----Is 11,111.11  ('1/9th of 100,000') dollars being reserved for each sector?If a 'sector' performs poorly and looses all of the 11,111.11 dollars,will following future  transactions 'to sell -500' just turn into '-0'?
Thank you,Andre MikulecAndre_Mikulec at Hotmail.com


 		 	   		   		 	   		  
	[[alternative HTML version deleted]]


From brian at braverock.com  Tue Sep  9 15:22:57 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Tue, 09 Sep 2014 08:22:57 -0500
Subject: [R-SIG-Finance] An easy way to run the quantstrat faber.R demo
 within an R function?
In-Reply-To: <BLU174-W544CF74601176500FEA6B9CCE0@phx.gbl>
References: <BLU174-W18245986C4CFA7DC88B9719CC30@phx.gbl>
	<BLU174-W544CF74601176500FEA6B9CCE0@phx.gbl>
Message-ID: <540EFF31.4050009@braverock.com>

Please follow the posting guide and do not post in HTML.

Your message is unreadable

http://www.r-project.org/posting-guide.html


On 09/09/2014 08:13 AM, Andre Mikulec wrote:
>
>   Hi,I am trying to run the faber.R demo within a function
> Here is the urlhttps://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
> Within a function, when the 'faber.R code reaches initPortf() the following error is thrown.
> Error in exists(paste("portfolio", name, sep = "."), envir = .blotter,  :   object '.blotter' not found
> # what I have done to fix is insert the following code # and tested running   # within a function  # within a lexical function  # within R studio ( within a lexical function )
> # just after# require(quantstrat) call# required ( If I am running in a function )if(!is.null(sys.call(sys.parent()))) {  if (!exists('.blotter' , envir=.GlobalEnv ))  { .GlobalEnv$.blotter   <- new.env() }   if (!exists('.strategy', envir=.GlobalEnv ))  { .GlobalEnv$.strategy  <- new.env() } }  # just after# getSymbols( . . . ) call# optional: ( If I am running in a function )# does not affect the program ( but for consistency if nothing else )# note: .getSymbols is not an environmentif(!is.null(sys.call(sys.parent()))) {  .GlobalEnv$.getSymbols <- .getSymbols}
> # just after # assign(symbol,x) call# required ( If I am running in a function )if(!is.null(sys.call(sys.parent()))) {  assign(symbol,x, envir = .GlobalEnv)}
> # RStudio # surrounding any dev() OR chart.#() calls# dev() # Only one RStudio graphics device is permitted# chart # RStudio margins errorif (!any(search() %in% "tools:rstudio")) { # ...}
> # Does any other easier way exist, so I do not have to modify# so much code?
> Thanks,Andre MikulecAndre_Mikulec at Hotmail.com


-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From brian at braverock.com  Tue Sep  9 15:31:06 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Tue, 09 Sep 2014 08:31:06 -0500
Subject: [R-SIG-Finance] quantstrat faber.R transactions?
In-Reply-To: <BLU174-W54C1A6CE0FCDA70E7B6C99CCE0@phx.gbl>
References: <BLU174-W51ACF7E90F56E9D56732E79CC30@phx.gbl>
	<BLU174-W54C1A6CE0FCDA70E7B6C99CCE0@phx.gbl>
Message-ID: <540F011A.10103@braverock.com>

As I mentioned on your other post, please follow the posting guide and 
do not post in HTML.

http://www.r-project.org/posting-guide.html

This one is a bit more decipherable.

The faber.R demo uses a fixed order quantity, as should be obvious from

orderqty=500

There is also a rebalancing demo that uses a fixed percentage of equity, 
see

demo('faber_rebal')

It is, of course, impossible to compute a 10 month SMA without 10 months 
of data.

Investments happen when there is a signal.  If there is no signal, there 
is no investment.

If you want to more closely follow Faber's paper, the 'faber_rebal' demo 
is a much closer representation of the paper.  Per the paper, the 
investment is either in the market for a fixed percentage of equity, or 
in cash.

Regards,

Brian

On 09/09/2014 08:13 AM, Andre Mikulec wrote:
>   Hi,May someone enlighten me?
> I am running the faber.R demo
> Here is the urlhttps://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
> Q # 1------Of the initial equity, I notice that  100,000 dollars invested.At the start ,is the money split evenly, among the 9 sectors?
> Each is invested  11,111.11 dollars? Is this true?
> Or, is just a big pile of cash sitting there, waiting for the first transaction?
> One reason why I am asking this is because the end result offaber.stats$Net.Trading.PL seems to look like the average is around 11,000.
>
> Q # 2-----I notice that financial data on the sectors is loaded the beginning of 1999getSymbols( ...  from='1999-01-01')
> I notice that the first transaction starts 10 months later,is this because the SMA of 10 months needs '10 months of data'?
> [1] "1999-12-31 00:00:00 XLB 500 @ 26.58"[1] "2000-01-31 00:00:00 XLB -500 @ 23.33"[1] "2000-12-31 00:00:00 XLB 500 @ 21.42"[1] "2001-03-31 00:00:00 XLB -500 @ 19.97"[1] "2001-04-30 00:00:00 XLB 500 @ 22.1"
> Q # 3-----This relates to (Q # 1) and (Q # 2)At the time of "1999-12-31" is just the "XLB" being 'invested in'?
> Are the other sectors already invested? '1/9th of 100,000'? Or something different?
> Before "1999-12-31" is all of the 100,000 dollars in cash and 'not invested at all'?
> Q & 4-----Is 11,111.11  ('1/9th of 100,000') dollars being reserved for each sector?If a 'sector' performs poorly and looses all of the 11,111.11 dollars,will following future  transactions 'to sell -500' just turn into '-0'?
> Thank you,Andre MikulecAndre_Mikulec at Hotmail.com
>
> 	[[alternative HTML version deleted]]


From maechler at stat.math.ethz.ch  Tue Sep  9 15:49:22 2014
From: maechler at stat.math.ethz.ch (Martin Maechler)
Date: Tue, 9 Sep 2014 15:49:22 +0200
Subject: [R-SIG-Finance] quantstrat faber.R transactions?
In-Reply-To: <BLU174-W54C1A6CE0FCDA70E7B6C99CCE0@phx.gbl>
References: <BLU174-W51ACF7E90F56E9D56732E79CC30@phx.gbl>
	<BLU174-W54C1A6CE0FCDA70E7B6C99CCE0@phx.gbl>
Message-ID: <21519.1378.13349.362809@stat.math.ethz.ch>


>  Hi,May someone enlighten me?

Not if you continue posting in HTML and expect that your format
will be readable (or preserved in this case) by others:

> I am running the faber.R demo
> Here is the urlhttps://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
> Q # 1------Of the initial equity, I notice that  100,000 dollars invested.At the start ,is the money split evenly, among the 9 sectors? 
> Each is invested  11,111.11 dollars? Is this true?
> Or, is just a big pile of cash sitting there, waiting for the first transaction?
> One reason why I am asking this is because the end result offaber.stats$Net.Trading.PL seems to look like the average is around 11,000.

> Q # 2-----I notice that financial data on the sectors is loaded the beginning of 1999getSymbols( ...  from='1999-01-01')
> I notice that the first transaction starts 10 months later,is this because the SMA of 10 months needs '10 months of data'?
> [1] "1999-12-31 00:00:00 XLB 500 @ 26.58"[1] "2000-01-31 00:00:00 XLB -500 @ 23.33"[1] "2000-12-31 00:00:00 XLB 500 @ 21.42"[1] "2001-03-31 00:00:00 XLB -500 @ 19.97"[1] "2001-04-30 00:00:00 XLB 500 @ 22.1"
> Q # 3-----This relates to (Q # 1) and (Q # 2)At the time of "1999-12-31" is just the "XLB" being 'invested in'?
> Are the other sectors already invested? '1/9th of 100,000'? Or something different?  
> Before "1999-12-31" is all of the 100,000 dollars in cash and 'not invested at all'?
> Q & 4-----Is 11,111.11  ('1/9th of 100,000') dollars being reserved for each sector?If a 'sector' performs poorly and looses all of the 11,111.11 dollars,will following future  transactions 'to sell -500' just turn into '-0'?
> Thank you,Andre MikulecAndre_Mikulec at Hotmail.com


 		 	   		   		 	   		  
> 	[[alternative HTML version deleted]]

> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From im.elouadghiri at gmail.com  Tue Sep  9 15:58:31 2014
From: im.elouadghiri at gmail.com (Imane Elouadghiri)
Date: Tue, 9 Sep 2014 15:58:31 +0200
Subject: [R-SIG-Finance] retire from listing
Message-ID: <CAO+BTwUHhx+yqmkUw44ScBMzTSbzeKrsiQzHPxTv8cYynVXwgQ@mail.gmail.com>

Hi ,

I want to retire my mail from the R-SIG-Finance list please, I receive too
much emails a day, so please can you retire my name from the list,

thank you very much

-- 

Imane El Ouadghiri

Economix - UMR 7235 CNRS et
Universit? Paris Ouest Nanterre La D?fense

Bureau G 611 bis
Tel. 33 (0) 1 40 97 78 69
http://economix.fr/fr/membres/details.php?id=1514im.elouadghiri at gmail.com

	[[alternative HTML version deleted]]


From josh.m.ulrich at gmail.com  Tue Sep  9 16:12:12 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Tue, 9 Sep 2014 09:12:12 -0500
Subject: [R-SIG-Finance] retire from listing
In-Reply-To: <CAO+BTwUHhx+yqmkUw44ScBMzTSbzeKrsiQzHPxTv8cYynVXwgQ@mail.gmail.com>
References: <CAO+BTwUHhx+yqmkUw44ScBMzTSbzeKrsiQzHPxTv8cYynVXwgQ@mail.gmail.com>
Message-ID: <CAPPM_gTNaYssGhMWodUC98zBAa57GGxV8HKHkUCb+UnOQ8zdCw@mail.gmail.com>

Only you can do that, by following the instructions in the link at the
bottom of every email you receive from the list...
https://stat.ethz.ch/mailman/listinfo/r-sig-finance

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Tue, Sep 9, 2014 at 8:58 AM, Imane Elouadghiri
<im.elouadghiri at gmail.com> wrote:
> Hi ,
>
> I want to retire my mail from the R-SIG-Finance list please, I receive too
> much emails a day, so please can you retire my name from the list,
>
> thank you very much
>
> --
>
> Imane El Ouadghiri
>
> Economix - UMR 7235 CNRS et
> Universit? Paris Ouest Nanterre La D?fense
>
> Bureau G 611 bis
> Tel. 33 (0) 1 40 97 78 69
> http://economix.fr/fr/membres/details.php?id=1514im.elouadghiri at gmail.com
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From a.chandhial at btinternet.com  Wed Sep 10 16:42:48 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Wed, 10 Sep 2014 15:42:48 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - Guy Yollin: walk-forward (WFA)
	presentation
Message-ID: <9067397.80495.1410360168506.JavaMail.defaultUser@defaultHost>

I am working on WFA presentation from Guy Yollin's slides.
WFA runs, however the results: numbers & charts from slides 27-30 inc. do not agree with those via the program.
In addition,
 
chart.forward("wfa.results.RData") 
Error in chart.forward("wfa.results.RData") : object '.audit' not found.
 
 
Amarjit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140910/8ba91b3a/attachment.html>

From markknecht at gmail.com  Wed Sep 10 19:00:20 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Wed, 10 Sep 2014 10:00:20 -0700
Subject: [R-SIG-Finance] quantstrat - problems adding multiple indicators
Message-ID: <CAK2H+efAjj+CYLhuVM5vmhcUfpU_NECE98n70TPJB_bYV6Z58A@mail.gmail.com>

Hi,
   This started out as me essentially rewriting Guy Yollin's
quantstrat3 demo over by hand as a learning exercise. That worked
fine. I then wanted to add an addition moving average filter (50 day
above 200 day) and figure out how to add indicators & write the
signals, etc., to make that work. However I've gotten stuck. It seems
I can add either the 50 day or the 200 day moving averages fine, but
if I try to add both I get the following message when I run the
attached code:

> out<-applyStrategy("Test2" ,
+                    portfolios="Port2",
+                    verbose=TRUE)
Error in `colnames<-`(`*tmp*`, value = c("SPY.Close.SMA.200",
"SPY.Close.SMA.50.SMA.F.SMA.200" :
  length of 'dimnames' [2] not equal to array extent

   Can someone point out what I'm doing wrong in adding both of these
indicators?

Thanks,
Mark


library(quantstrat)
StartData = "2000-01-01"
EndData   = format(Sys.time(), "%Y-%m-%d")
initDate = '2009-12-31'
startDate = '2010-01-01'  # start of data
endDate   =  '2013-07-31'   # end of data
symbols   = c("SPY")
Sys.setenv(TZ="UTC")       # set time zone
initEq <- 1e6
currency("USD")
stock(symbols, currency="USD",multiplier=1)

Filter.Fast = 50
Filter.Slow = 200

getSymbols(symbols, src='yahoo',
           #            index.class=c("POSIXt","POSIXct"),
           from=StartData, to=EndData, adjust=TRUE)

SPY = round(SPY, 2)

strategy("Test2", store=TRUE)

add.indicator("Test2",
              label='ind1',
              name = "MACD",
              arguments = list(x=quote(Cl(mktdata))
              )
)

add.indicator("Test2",
              label='SMA.F',
              name = 'SMA',
              arguments = list(x=quote(Cl(mktdata)),
                               n=Filter.Fast
              )
)

add.indicator("Test2",
              label='SMA.S',
              name = 'SMA',
              arguments = list(x=quote(Cl(mktdata)),
                               n=Filter.Slow
              )
)

rm.strat("Port2")
initPortf(name="Port2", symbols, initDate=initDate)
initAcct(name="Port2", portfolios="Port2",
         initDate=initDate, initEq=initEq)
initOrders(portfolio="Port2", initDate=initDate)

out<-applyStrategy("Test2" ,
                   portfolios="Port2",
                   verbose=TRUE)

updatePortf("Port2")
updateAcct("Port2")
updateEndEq("Port2")


From brian at braverock.com  Wed Sep 10 19:06:40 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Wed, 10 Sep 2014 12:06:40 -0500
Subject: [R-SIG-Finance] quantstrat - problems adding multiple indicators
In-Reply-To: <CAK2H+efAjj+CYLhuVM5vmhcUfpU_NECE98n70TPJB_bYV6Z58A@mail.gmail.com>
References: <CAK2H+efAjj+CYLhuVM5vmhcUfpU_NECE98n70TPJB_bYV6Z58A@mail.gmail.com>
Message-ID: <54108520.7080609@braverock.com>

This has been discussed on this list multiple times.

TTR is taking the column namees of your market data and appending the 
indicator.

so:

Cl(mktdata)

will return multiple columns after the first indicator has been applied.

you most likely want

quote(Cl(mktdata)[,1])

to get only the first column.

Brian

On 09/10/2014 12:00 PM, Mark Knecht wrote:
> Hi,
>     This started out as me essentially rewriting Guy Yollin's
> quantstrat3 demo over by hand as a learning exercise. That worked
> fine. I then wanted to add an addition moving average filter (50 day
> above 200 day) and figure out how to add indicators & write the
> signals, etc., to make that work. However I've gotten stuck. It seems
> I can add either the 50 day or the 200 day moving averages fine, but
> if I try to add both I get the following message when I run the
> attached code:
>
>> out<-applyStrategy("Test2" ,
> +                    portfolios="Port2",
> +                    verbose=TRUE)
> Error in `colnames<-`(`*tmp*`, value = c("SPY.Close.SMA.200",
> "SPY.Close.SMA.50.SMA.F.SMA.200" :
>    length of 'dimnames' [2] not equal to array extent
>
>     Can someone point out what I'm doing wrong in adding both of these
> indicators?
>
> Thanks,
> Mark
>
>
> library(quantstrat)
> StartData = "2000-01-01"
> EndData   = format(Sys.time(), "%Y-%m-%d")
> initDate = '2009-12-31'
> startDate = '2010-01-01'  # start of data
> endDate   =  '2013-07-31'   # end of data
> symbols   = c("SPY")
> Sys.setenv(TZ="UTC")       # set time zone
> initEq <- 1e6
> currency("USD")
> stock(symbols, currency="USD",multiplier=1)
>
> Filter.Fast = 50
> Filter.Slow = 200
>
> getSymbols(symbols, src='yahoo',
>             #            index.class=c("POSIXt","POSIXct"),
>             from=StartData, to=EndData, adjust=TRUE)
>
> SPY = round(SPY, 2)
>
> strategy("Test2", store=TRUE)
>
> add.indicator("Test2",
>                label='ind1',
>                name = "MACD",
>                arguments = list(x=quote(Cl(mktdata))
>                )
> )
>
> add.indicator("Test2",
>                label='SMA.F',
>                name = 'SMA',
>                arguments = list(x=quote(Cl(mktdata)),
>                                 n=Filter.Fast
>                )
> )
>
> add.indicator("Test2",
>                label='SMA.S',
>                name = 'SMA',
>                arguments = list(x=quote(Cl(mktdata)),
>                                 n=Filter.Slow
>                )
> )
>
> rm.strat("Port2")
> initPortf(name="Port2", symbols, initDate=initDate)
> initAcct(name="Port2", portfolios="Port2",
>           initDate=initDate, initEq=initEq)
> initOrders(portfolio="Port2", initDate=initDate)
>
> out<-applyStrategy("Test2" ,
>                     portfolios="Port2",
>                     verbose=TRUE)
>
> updatePortf("Port2")
> updateAcct("Port2")
> updateEndEq("Port2")


From markknecht at gmail.com  Wed Sep 10 19:35:22 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Wed, 10 Sep 2014 10:35:22 -0700
Subject: [R-SIG-Finance] quantstrat - problems adding multiple indicators
In-Reply-To: <54108520.7080609@braverock.com>
References: <CAK2H+efAjj+CYLhuVM5vmhcUfpU_NECE98n70TPJB_bYV6Z58A@mail.gmail.com>
	<54108520.7080609@braverock.com>
Message-ID: <CAK2H+edAG_6ZsZn_oJ9i-s1BPCLrfr8x3dew=63E51BrF9MP0g@mail.gmail.com>

On Wed, Sep 10, 2014 at 10:06 AM, Brian G. Peterson <brian at braverock.com> wrote:
> This has been discussed on this list multiple times.
>
> TTR is taking the column namees of your market data and appending the
> indicator.
>
> so:
>
> Cl(mktdata)
>
> will return multiple columns after the first indicator has been applied.
>
> you most likely want
>
> quote(Cl(mktdata)[,1])
>
> to get only the first column.
>
> Brian
>

Ah, indeed, that does work, although Googling for 'quantstrat' and
'quote(Cl(mktdata)[,1])' doesn't turn up much.

None the less, I now see that Cl() is finding all names with 'close'
anywhere in the name which indeed isn't want I thought it was doing
and the first one is the one I want:


> head(Cl(mktdata))
           SPY.Close SPY.Close.SMA.50.ind3 SPY.Close.SMA.200.ind4
2008-12-31     82.08                    NA                     NA
2009-01-02     84.56                    NA                     NA
2009-01-05     84.46                    NA                     NA
2009-01-06     85.02                    NA                     NA
2009-01-07     82.47                    NA                     NA
2009-01-08     82.81                    NA                     NA

Thanks for the quick (and reasonably friendly!) ;-) response.

Cheers,
Mark


From a.chandhial at btinternet.com  Thu Sep 11 08:45:53 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 11 Sep 2014 07:45:53 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014 presentation
Message-ID: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>

I have asked Guy Yollin directly who says and I quote "I do not have the time or resources to provide 1-on-1 support in this area." 
Thus, I am asking the community regarding his blotter 2014 presentation found here: http://www.r-programming.org/papers
Slides 39-40
------------------
Slide 39 has Drawdown = 0 --- from chart.Posn
Slide 40 has Max.Drawdown = -441461.8
Why the difference?
Slides 30-57
------------------
My understanding is via the following definitions:
(a) for discrete or simple returns, cumulative return <- cumprod(1+rets.s)
(b) for compound or log returns, cumulative return <- exp(cumsum(rets.cc) )
'rets' are returns from b.strategy calculated via PortfReturns (Slide 47). So from ?PortfReturns these are returns on initial equity. At each point in time 'rets' = Net.Trading.PL/initEq. These require geometric chaining.
In Slide 47 charts.PerformanceSummary(rets,colorset = bluefocus) --- has default geometric=TRUE
'returns' (Slide 56) are cbind(rets,rets.bh), with
'rets.bh': buyHold 
'rets': b.strategy, as before, 
In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE, wealth.index=TRUE)
Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a value of approx.10.63, Slide 57 has a value of approx.3.77 (wealth+2.77). It cannot be both-ways regarding returns from b.strategy, it's either geometric or arithmetic chaining?
So hypothetically speaking my boss says to me you have a strategy that makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides 30-42), yet you say to me it makes cumulative return of 10.63 (slides 47-50), how does that work?
Can someone shed some light on this?
Amarjit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140911/af72cc1d/attachment.html>

From ludovic.theate at gmail.com  Thu Sep 11 11:57:08 2014
From: ludovic.theate at gmail.com (Ludovic Theate)
Date: Thu, 11 Sep 2014 11:57:08 +0200
Subject: [R-SIG-Finance] Rugarch update
Message-ID: <CA+TVX6sDDEb-4DMQ0b8ZxGuHs7S6-WCNJpuObzAqv5jHUMB3hQ@mail.gmail.com>

Hi,

I am a frequent user of the rugarch package. In a model of mine, I use the
following command:

spec_model <-
ugarchspec(mean.model=list(armaOrder=c(0,2),include.mean=FALSE),variance.model=list(model="sGARCH",garchOrder=c(1,1)),distribution.model="std")


fit_model <- ugarchfit(spec_model,data=data)

While using this with version 1.3-1 of the package, this worked perfectly
but now that I've made the update to version 1.3-1 I get the following
message:

Warning message:
In .makefitmodel(garchmodel = "sGARCH", f = .sgarchLLH, T = T, m = m,  :
rugarch-->warning: failed to invert hessian

I think that I have to try several solvers to find one that may converge
for the hessian inversion, but I do not understand what change in the
package has led to this. Do you have an idea ? Thanks.

Ludovic

	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Thu Sep 11 12:44:03 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Thu, 11 Sep 2014 13:44:03 +0300
Subject: [R-SIG-Finance] Rugarch update
In-Reply-To: <CA+TVX6sDDEb-4DMQ0b8ZxGuHs7S6-WCNJpuObzAqv5jHUMB3hQ@mail.gmail.com>
References: <CA+TVX6sDDEb-4DMQ0b8ZxGuHs7S6-WCNJpuObzAqv5jHUMB3hQ@mail.gmail.com>
Message-ID: <BFF2A8AC-4B5B-48A6-80FF-666F46B3088B@4dscape.com>

Hi Ludovic,

See this post:
https://stat.ethz.ch/pipermail/r-sig-finance/2014q3/012597.html

Best,

Alexios

> On 11 Sep 2014, at 12:57, Ludovic Theate <ludovic.theate at gmail.com> wrote:
> 
> Hi,
> 
> I am a frequent user of the rugarch package. In a model of mine, I use the
> following command:
> 
> spec_model <-
> ugarchspec(mean.model=list(armaOrder=c(0,2),include.mean=FALSE),variance.model=list(model="sGARCH",garchOrder=c(1,1)),distribution.model="std")
> 
> 
> fit_model <- ugarchfit(spec_model,data=data)
> 
> While using this with version 1.3-1 of the package, this worked perfectly
> but now that I've made the update to version 1.3-1 I get the following
> message:
> 
> Warning message:
> In .makefitmodel(garchmodel = "sGARCH", f = .sgarchLLH, T = T, m = m,  :
> rugarch-->warning: failed to invert hessian
> 
> I think that I have to try several solvers to find one that may converge
> for the hessian inversion, but I do not understand what change in the
> package has led to this. Do you have an idea ? Thanks.
> 
> Ludovic
> 
>    [[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From andre_mikulec at hotmail.com  Thu Sep 11 14:26:00 2014
From: andre_mikulec at hotmail.com (Andre Mikulec)
Date: Thu, 11 Sep 2014 08:26:00 -0400
Subject: [R-SIG-Finance] An easy way to run the quantstrat faber.R demo
	within an R function?
Message-ID: <BLU174-W30B498DBC9A73B9DC1B7F19CCC0@phx.gbl>



Hi,

I am trying to run the faber.R demo within a function

Here is the url
https://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter


Within a function, when the 'faber.R code reaches initPortf() the following error is thrown.


Error in exists(paste("portfolio", name, sep = "."), envir = .blotter,  : 

  object '.blotter' not found



what I have done to fix is insert the following code and tested running 

  1 within a function

  2 within a lexical function

  3 within R studio ( within a lexical function )



Just after the calls

  require(quantstrat) call

  required ( If I am running in a function )

I put the following code


if(!is.null(sys.call(sys.parent()))) {

  if (!exists('.blotter' , envir=.GlobalEnv ))  { .GlobalEnv$.blotter   <- new.env() } 

  if (!exists('.strategy', envir=.GlobalEnv ))  { .GlobalEnv$.strategy  <- new.env() } 

}

  

Just after the calls

  getSymbols( . . . ) 

and optionally ( If I am running in a function ) I put in the following code.

( This does not affect the program ( but for consistency if nothing else ) )

(note: .getSymbols is not an environment )


if(!is.null(sys.call(sys.parent()))) {

  .GlobalEnv$.getSymbols <- .getSymbols

}



Just after the calls

  assign(symbol,x) call

  (required ( If I am running in a function )

I put in the following code.


if(!is.null(sys.call(sys.parent()))) {

  assign(symbol,x, envir = .GlobalEnv)

}



If I am running the code through RStudio 

I surround any dev() OR chart.#() calls to prevent the following errors

  1 dev() # Only one RStudio graphics device is permitted

  2 chart # RStudio margins error

I put the following cde wrapper


if (!any(search() %in% "tools:rstudio")) {

 # ...

}


Does any other easier way exist, so I do not have to modify
so much code?


Thanks,
Andre Mikulec
Andre_Mikulec at Hotmail.com 		 	   		  

From markknecht at gmail.com  Thu Sep 11 15:11:08 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Thu, 11 Sep 2014 06:11:08 -0700
Subject: [R-SIG-Finance] An easy way to run the quantstrat faber.R demo
 within an R function?
In-Reply-To: <BLU174-W30B498DBC9A73B9DC1B7F19CCC0@phx.gbl>
References: <BLU174-W30B498DBC9A73B9DC1B7F19CCC0@phx.gbl>
Message-ID: <CAK2H+eftaAyQ7_yg+X7o1WAKKNgkWsp-0fMWdEVPdrJQpr_isw@mail.gmail.com>

On Thu, Sep 11, 2014 at 5:26 AM, Andre Mikulec
<andre_mikulec at hotmail.com> wrote:
>
>
> Hi,
>
> I am trying to run the faber.R demo within a function
>
> Here is the url
> https://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
>
>
> Within a function, when the 'faber.R code reaches initPortf() the following error is thrown.
>
>
> Error in exists(paste("portfolio", name, sep = "."), envir = .blotter,  :
>
>   object '.blotter' not found
>

When running R-Studio in the upper right there's a 'Clear' button
which gives you an additional checked option to clear hidden objects.
If you have that selected then all the environments, like blotter, are
deleted and this sort of error occurrs WRT blotter. If blotter exists
then

ls(envir=.blotter)

will show that it's there and what's in it. If it's not there then
I've fixed it in the past using

.blotter <- new.env()

to recreate it.

HTH,
Mark


From a.chandhial at btinternet.com  Thu Sep 11 15:58:25 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 11 Sep 2014 14:58:25 +0100 (BST)
Subject: [R-SIG-Finance] Fwd: quantstrat - Guy Yollin: walk-forward
	(WFA)	presentation
In-Reply-To: <9067397.80495.1410360168506.JavaMail.defaultUser@defaultHost>
References: <9067397.80495.1410360168506.JavaMail.defaultUser@defaultHost>
Message-ID: <15293546.19036.1410443905071.JavaMail.defaultUser@defaultHost>

So given that Guy Yollin said all the code should be operational & no-one has said otherwise, I will assume the WFA script is right as opposed to his slides 27-30.
I'd be grateful if he could check-in to SVN the modifications for chart.forward.
Amarjit
----Original message----
>From : a.chandhial at btinternet.com
Date : 10/09/2014 - 15:42 (GMTST)
To : r-sig-finance at r-project.org
Subject : [R-SIG-Finance] quantstrat - Guy Yollin: walk-forward (WFA)	presentation
I am working on WFA presentation from Guy Yollin's slides.
WFA runs, however the results: numbers & charts from slides 27-30 inc. do not agree with those via the program.
In addition,
 
chart.forward("wfa.results.RData") 
Error in chart.forward("wfa.results.RData") : object '.audit' not found.
 
 
Amarjit
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140911/c03b6552/attachment.html>

From gyollin at r-programming.org  Thu Sep 11 17:51:00 2014
From: gyollin at r-programming.org (Guy Yollin)
Date: Thu, 11 Sep 2014 08:51:00 -0700
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014
	presentation
In-Reply-To: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
Message-ID: <5411C4E4.5070506@r-programming.org>

Amarjit,

I'm not comfortable with you taking a single line from our private 
communication and posting it to a public mailing list since it may be 
interpreted out of context.

What I fully said was:


    I started sharing my lecture slides because I wanted to give back to
    the R community and I thought other folks may find the slides and
    the scripts useful; in this particular area there is very little
    other documentation.

    However, that's really all I can do.  I do not have the time or
    resources to provide 1-on-1 support in this area.

    If you find the materials useful, that's great; if you have
    questions about blotter/quantstrat then R-SIG-FINANCE is probably
    the best resource.  For specific questions about my slides, I'm
    sorry but they are provided without support.    Hopefully you
    understand these limitations.

    If you are interested, you could certainly enroll in my class, it's
    available online and I'll be teaching this material again in March
    2015.  Now, however, I'm onto a another subject.


G


On 9/10/2014 11:45 PM, amarjit chandhial wrote:
> I have asked Guy Yollin directly who says and I quote "I do not have 
> the time or resources to provide 1-on-1 support in this area."
>
> Thus, I am asking the community regarding his blotter 2014 
> presentation found here: http://www.r-programming.org/papers
>
>
> Slides 39-40
> ------------------
> Slide 39 has Drawdown = 0 --- from chart.Posn
> Slide 40 has Max.Drawdown = -441461.8
>
> Why the difference?
>
>
>
> Slides 30-57
> ------------------
> My understanding is via the following definitions:
> (a) for discrete or simple returns, cumulative return <- cumprod(1+rets.s)
> (b) for compound or log returns, cumulative return <- 
> exp(cumsum(rets.cc) )
>
>
> 'rets' are returns from b.strategy calculated via PortfReturns (Slide 
> 47). So from ?PortfReturns these are returns on initial equity. At 
> each point in time 'rets' = Net.Trading.PL/initEq. These require 
> geometric chaining.
>
> In Slide 47 charts.PerformanceSummary(rets,colorset = bluefocus) --- 
> has default geometric=TRUE
>
>
> 'returns' (Slide 56) are cbind(rets,rets.bh), with
> 'rets.bh': buyHold
> 'rets': b.strategy, as before,
>
> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE, 
> wealth.index=TRUE)
>
>
> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a 
> value of approx.10.63, Slide 57 has a value of approx.3.77 
> (wealth+2.77). It cannot be both-ways regarding returns from 
> b.strategy, it's either geometric or arithmetic chaining?
>
> So hypothetically speaking my boss says to me you have a strategy that 
> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides 
> 30-42), yet you say to me it makes cumulative return of 10.63 (slides 
> 47-50), how does that work?
>
>
> Can someone shed some light on this?
>
>
>
> Amarjit
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


	[[alternative HTML version deleted]]


From brian at braverock.com  Thu Sep 11 18:07:56 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Thu, 11 Sep 2014 11:07:56 -0500
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014
	presentation
In-Reply-To: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
Message-ID: <5411C8DC.3040206@braverock.com>

Amarjit,

Prof. Yollin has addressed your poor etiquette.

I'll address the substantive portion of your email.

On 09/11/2014 01:45 AM, amarjit chandhial wrote:
> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE,
> wealth.index=TRUE)
>
>
> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a value
> of approx.10.63, Slide 57 has a value of approx.3.77 (wealth+2.77). It
> cannot be both-ways regarding returns from b.strategy, it's either
> geometric or arithmetic chaining?
>
> So hypothetically speaking my boss says to me you have a strategy that
> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides
> 30-42), yet you say to me it makes cumulative return of 10.63 (slides
> 47-50), how does that work?

I think you answered your own question.  These are cash returns, without 
compounding.

So applying geometric compounding as though every dollar earned were 
somehow available for instant reinvestment (even though that is clearly 
not what the fixed order sizing of the strategy did) is clearly erroneous.

It seems that analysts need to know when to use geometric versus 
arithmetic chaining, so this is likely a typo in the slide code.  The 
responsibility for understanding that data continues to lie with the reader.

Brian

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From a.chandhial at btinternet.com  Thu Sep 11 18:41:15 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 11 Sep 2014 17:41:15 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter
	2014	presentation
In-Reply-To: <5411C4E4.5070506@r-programming.org>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
	<5411C4E4.5070506@r-programming.org>
Message-ID: <27596069.42379.1410453675237.JavaMail.defaultUser@defaultHost>

Guy,


I am sorry you feel the way you do.

If you are providing information via your slides and advertising them to be available on a public list, I think it is entirely reasonable for you to expect questions from it, especially given the job you're in: teaching.

You say:

" For specific questions about my slides, I'm sorry but they are provided without support.    Hopefully you understand these limitations." 

and

" I do not have the time or resources to provide 1-on-1 support in this area "


Well, if you do not want to answer specific questions on them -- that's your right.


Rarely, if ever, in my experience has there been a lecturer worth their name not willing to answer questions on their work, especially if they are advertising them to be available publically as you are irregardless of your reasons of:

"I wanted to give back to the R community and I thought other folks may find the slides and the scripts useful; in this particular area there is very little other documentation. 



Regards,
Amarjit




----Original message----
>From : gyollin at r-programming.org
Date : 11/09/2014 - 16:51 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014	presentation

Amarjit,

I'm not comfortable with you taking a single line from our private 
communication and posting it to a public mailing list since it may be 
interpreted out of context.

What I fully said was:


    I started sharing my lecture slides because I wanted to give back to
    the R community and I thought other folks may find the slides and
    the scripts useful; in this particular area there is very little
    other documentation.

    However, that's really all I can do.  I do not have the time or
    resources to provide 1-on-1 support in this area.

    If you find the materials useful, that's great; if you have
    questions about blotter/quantstrat then R-SIG-FINANCE is probably
    the best resource.  For specific questions about my slides, I'm
    sorry but they are provided without support.    Hopefully you
    understand these limitations.

    If you are interested, you could certainly enroll in my class, it's
    available online and I'll be teaching this material again in March
    2015.  Now, however, I'm onto a another subject.


G


On 9/10/2014 11:45 PM, amarjit chandhial wrote:
> I have asked Guy Yollin directly who says and I quote "I do not have 
> the time or resources to provide 1-on-1 support in this area."
>
> Thus, I am asking the community regarding his blotter 2014 
> presentation found here: http://www.r-programming.org/papers
>
>
> Slides 39-40
> ------------------
> Slide 39 has Drawdown = 0 --- from chart.Posn
> Slide 40 has Max.Drawdown = -441461.8
>
> Why the difference?
>
>
>
> Slides 30-57
> ------------------
> My understanding is via the following definitions:
> (a) for discrete or simple returns, cumulative return <- cumprod(1+rets.s)
> (b) for compound or log returns, cumulative return <- 
> exp(cumsum(rets.cc) )
>
>
> 'rets' are returns from b.strategy calculated via PortfReturns (Slide 
> 47). So from ?PortfReturns these are returns on initial equity. At 
> each point in time 'rets' = Net.Trading.PL/initEq. These require 
> geometric chaining.
>
> In Slide 47 charts.PerformanceSummary(rets,colorset = bluefocus) --- 
> has default geometric=TRUE
>
>
> 'returns' (Slide 56) are cbind(rets,rets.bh), with
> 'rets.bh': buyHold
> 'rets': b.strategy, as before,
>
> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE, 
> wealth.index=TRUE)
>
>
> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a 
> value of approx.10.63, Slide 57 has a value of approx.3.77 
> (wealth+2.77). It cannot be both-ways regarding returns from 
> b.strategy, it's either geometric or arithmetic chaining?
>
> So hypothetically speaking my boss says to me you have a strategy that 
> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides 
> 30-42), yet you say to me it makes cumulative return of 10.63 (slides 
> 47-50), how does that work?
>
>
> Can someone shed some light on this?
>
>
>
> Amarjit
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


	[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From a.chandhial at btinternet.com  Thu Sep 11 18:42:33 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 11 Sep 2014 17:42:33 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter
	2014	presentation
In-Reply-To: <5411C8DC.3040206@braverock.com>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
	<5411C8DC.3040206@braverock.com>
Message-ID: <21769077.42479.1410453753999.JavaMail.defaultUser@defaultHost>



Brian,


If you regard this is to be poor etiquette, I'm sorry to you and anybody else who finds this to be poor etiquette.


Amarjit



----Original message----
>From : brian at braverock.com
Date : 11/09/2014 - 17:07 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014	presentation

Amarjit,

Prof. Yollin has addressed your poor etiquette.

I'll address the substantive portion of your email.

On 09/11/2014 01:45 AM, amarjit chandhial wrote:
> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE,
> wealth.index=TRUE)
>
>
> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a value
> of approx.10.63, Slide 57 has a value of approx.3.77 (wealth+2.77). It
> cannot be both-ways regarding returns from b.strategy, it's either
> geometric or arithmetic chaining?
>
> So hypothetically speaking my boss says to me you have a strategy that
> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides
> 30-42), yet you say to me it makes cumulative return of 10.63 (slides
> 47-50), how does that work?

I think you answered your own question.  These are cash returns, without 
compounding.

So applying geometric compounding as though every dollar earned were 
somehow available for instant reinvestment (even though that is clearly 
not what the fixed order sizing of the strategy did) is clearly erroneous.

It seems that analysts need to know when to use geometric versus 
arithmetic chaining, so this is likely a typo in the slide code.  The 
responsibility for understanding that data continues to lie with the reader.

Brian

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From josh.m.ulrich at gmail.com  Thu Sep 11 18:48:32 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Thu, 11 Sep 2014 11:48:32 -0500
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014
	presentation
In-Reply-To: <27596069.42379.1410453675237.JavaMail.defaultUser@defaultHost>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
	<5411C4E4.5070506@r-programming.org>
	<27596069.42379.1410453675237.JavaMail.defaultUser@defaultHost>
Message-ID: <CAPPM_gS8hvtMBT=qebLABuA=giGx6mQ+E2pKc1pAeOGyACEtwg@mail.gmail.com>

On Thu, Sep 11, 2014 at 11:41 AM, amarjit chandhial
<a.chandhial at btinternet.com> wrote:
> Guy,
>
>
> I am sorry you feel the way you do.
>
> If you are providing information via your slides and advertising them to be available on a public list, I think it is entirely reasonable for you to expect questions from it, especially given the job you're in: teaching.
>
> You say:
>
> " For specific questions about my slides, I'm sorry but they are provided without support.    Hopefully you understand these limitations."
>
> and
>
> " I do not have the time or resources to provide 1-on-1 support in this area "
>
>
> Well, if you do not want to answer specific questions on them -- that's your right.
>
>
> Rarely, if ever, in my experience has there been a lecturer worth their name not willing to answer questions on their work, especially if they are advertising them to be available publically as you are irregardless of your reasons of:
>
That implies Guy is "not worth his name", which is insulting.  He, nor
anyone on this list, owe you anything, regardless of their profession.

Many people here provide resources for free, without warranty.  You
have only demonstrated that you're willing to consume what is freely
given, and have not shown much effort in contributing back to the
community.  That is likely to make you very unpopular.

> "I wanted to give back to the R community and I thought other folks may find the slides and the scripts useful; in this particular area there is very little other documentation.
>
>
>
> Regards,
> Amarjit
>
>
>
>
> ----Original message----
> >From : gyollin at r-programming.org
> Date : 11/09/2014 - 16:51 (GMTST)
> To : r-sig-finance at r-project.org
> Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014      presentation
>
> Amarjit,
>
> I'm not comfortable with you taking a single line from our private
> communication and posting it to a public mailing list since it may be
> interpreted out of context.
>
> What I fully said was:
>
>
>     I started sharing my lecture slides because I wanted to give back to
>     the R community and I thought other folks may find the slides and
>     the scripts useful; in this particular area there is very little
>     other documentation.
>
>     However, that's really all I can do.  I do not have the time or
>     resources to provide 1-on-1 support in this area.
>
>     If you find the materials useful, that's great; if you have
>     questions about blotter/quantstrat then R-SIG-FINANCE is probably
>     the best resource.  For specific questions about my slides, I'm
>     sorry but they are provided without support.    Hopefully you
>     understand these limitations.
>
>     If you are interested, you could certainly enroll in my class, it's
>     available online and I'll be teaching this material again in March
>     2015.  Now, however, I'm onto a another subject.
>
>
> G
>
>
> On 9/10/2014 11:45 PM, amarjit chandhial wrote:
>> I have asked Guy Yollin directly who says and I quote "I do not have
>> the time or resources to provide 1-on-1 support in this area."
>>
>> Thus, I am asking the community regarding his blotter 2014
>> presentation found here: http://www.r-programming.org/papers
>>
>>
>> Slides 39-40
>> ------------------
>> Slide 39 has Drawdown = 0 --- from chart.Posn
>> Slide 40 has Max.Drawdown = -441461.8
>>
>> Why the difference?
>>
>>
>>
>> Slides 30-57
>> ------------------
>> My understanding is via the following definitions:
>> (a) for discrete or simple returns, cumulative return <- cumprod(1+rets.s)
>> (b) for compound or log returns, cumulative return <-
>> exp(cumsum(rets.cc) )
>>
>>
>> 'rets' are returns from b.strategy calculated via PortfReturns (Slide
>> 47). So from ?PortfReturns these are returns on initial equity. At
>> each point in time 'rets' = Net.Trading.PL/initEq. These require
>> geometric chaining.
>>
>> In Slide 47 charts.PerformanceSummary(rets,colorset = bluefocus) ---
>> has default geometric=TRUE
>>
>>
>> 'returns' (Slide 56) are cbind(rets,rets.bh), with
>> 'rets.bh': buyHold
>> 'rets': b.strategy, as before,
>>
>> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE,
>> wealth.index=TRUE)
>>
>>
>> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a
>> value of approx.10.63, Slide 57 has a value of approx.3.77
>> (wealth+2.77). It cannot be both-ways regarding returns from
>> b.strategy, it's either geometric or arithmetic chaining?
>>
>> So hypothetically speaking my boss says to me you have a strategy that
>> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides
>> 30-42), yet you say to me it makes cumulative return of 10.63 (slides
>> 47-50), how does that work?
>>
>>
>> Can someone shed some light on this?
>>
>>
>>
>> Amarjit
>>
>>
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.

--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From a.chandhial at btinternet.com  Thu Sep 11 19:10:36 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 11 Sep 2014 18:10:36 +0100 (BST)
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014
 presentation
In-Reply-To: <CAPPM_gS8hvtMBT=qebLABuA=giGx6mQ+E2pKc1pAeOGyACEtwg@mail.gmail.com>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
	<5411C4E4.5070506@r-programming.org>
	<27596069.42379.1410453675237.JavaMail.defaultUser@defaultHost>
	<CAPPM_gS8hvtMBT=qebLABuA=giGx6mQ+E2pKc1pAeOGyACEtwg@mail.gmail.com>
Message-ID: <17156356.44357.1410455436775.JavaMail.defaultUser@defaultHost>



It is not my intention to be insulting to anyone!


You say:
> He, nor, anyone on this list, owe you anything, regardless of their profession.


If you read my email properly, I said

'If you do not want to answer specific questions on them -- that's your right'


Amarjit




----Original message----
>From : josh.m.ulrich at gmail.com
Date : 11/09/2014 - 17:48 (GMTST)
To : a.chandhial at btinternet.com
Cc : gyollin at r-programming.org, r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014 presentation

On Thu, Sep 11, 2014 at 11:41 AM, amarjit chandhial
<a.chandhial at btinternet.com> wrote:
> Guy,
>
>
> I am sorry you feel the way you do.
>
> If you are providing information via your slides and advertising them to be available on a public list, I think it is entirely reasonable for you to expect questions from it, especially given the job you're in: teaching.
>
> You say:
>
> " For specific questions about my slides, I'm sorry but they are provided without support.    Hopefully you understand these limitations."
>
> and
>
> " I do not have the time or resources to provide 1-on-1 support in this area "
>
>
> Well, if you do not want to answer specific questions on them -- that's your right.
>
>
> Rarely, if ever, in my experience has there been a lecturer worth their name not willing to answer questions on their work, especially if they are advertising them to be available publically as you are irregardless of your reasons of:
>
That implies Guy is "not worth his name", which is insulting.  He, nor
anyone on this list, owe you anything, regardless of their profession.

Many people here provide resources for free, without warranty.  You
have only demonstrated that you're willing to consume what is freely
given, and have not shown much effort in contributing back to the
community.  That is likely to make you very unpopular.

> "I wanted to give back to the R community and I thought other folks may find the slides and the scripts useful; in this particular area there is very little other documentation.
>
>
>
> Regards,
> Amarjit
>
>
>
>
> ----Original message----
> >From : gyollin at r-programming.org
> Date : 11/09/2014 - 16:51 (GMTST)
> To : r-sig-finance at r-project.org
> Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014      presentation
>
> Amarjit,
>
> I'm not comfortable with you taking a single line from our private
> communication and posting it to a public mailing list since it may be
> interpreted out of context.
>
> What I fully said was:
>
>
>     I started sharing my lecture slides because I wanted to give back to
>     the R community and I thought other folks may find the slides and
>     the scripts useful; in this particular area there is very little
>     other documentation.
>
>     However, that's really all I can do.  I do not have the time or
>     resources to provide 1-on-1 support in this area.
>
>     If you find the materials useful, that's great; if you have
>     questions about blotter/quantstrat then R-SIG-FINANCE is probably
>     the best resource.  For specific questions about my slides, I'm
>     sorry but they are provided without support.    Hopefully you
>     understand these limitations.
>
>     If you are interested, you could certainly enroll in my class, it's
>     available online and I'll be teaching this material again in March
>     2015.  Now, however, I'm onto a another subject.
>
>
> G
>
>
> On 9/10/2014 11:45 PM, amarjit chandhial wrote:
>> I have asked Guy Yollin directly who says and I quote "I do not have
>> the time or resources to provide 1-on-1 support in this area."
>>
>> Thus, I am asking the community regarding his blotter 2014
>> presentation found here: http://www.r-programming.org/papers
>>
>>
>> Slides 39-40
>> ------------------
>> Slide 39 has Drawdown = 0 --- from chart.Posn
>> Slide 40 has Max.Drawdown = -441461.8
>>
>> Why the difference?
>>
>>
>>
>> Slides 30-57
>> ------------------
>> My understanding is via the following definitions:
>> (a) for discrete or simple returns, cumulative return <- cumprod(1+rets.s)
>> (b) for compound or log returns, cumulative return <-
>> exp(cumsum(rets.cc) )
>>
>>
>> 'rets' are returns from b.strategy calculated via PortfReturns (Slide
>> 47). So from ?PortfReturns these are returns on initial equity. At
>> each point in time 'rets' = Net.Trading.PL/initEq. These require
>> geometric chaining.
>>
>> In Slide 47 charts.PerformanceSummary(rets,colorset = bluefocus) ---
>> has default geometric=TRUE
>>
>>
>> 'returns' (Slide 56) are cbind(rets,rets.bh), with
>> 'rets.bh': buyHold
>> 'rets': b.strategy, as before,
>>
>> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE,
>> wealth.index=TRUE)
>>
>>
>> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a
>> value of approx.10.63, Slide 57 has a value of approx.3.77
>> (wealth+2.77). It cannot be both-ways regarding returns from
>> b.strategy, it's either geometric or arithmetic chaining?
>>
>> So hypothetically speaking my boss says to me you have a strategy that
>> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides
>> 30-42), yet you say to me it makes cumulative return of 10.63 (slides
>> 47-50), how does that work?
>>
>>
>> Can someone shed some light on this?
>>
>>
>>
>> Amarjit
>>
>>
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.

--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From josh.m.ulrich at gmail.com  Thu Sep 11 19:56:00 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Thu, 11 Sep 2014 12:56:00 -0500
Subject: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014
	presentation
In-Reply-To: <17156356.44357.1410455436775.JavaMail.defaultUser@defaultHost>
References: <14916735.1567.1410417953093.JavaMail.defaultUser@defaultHost>
	<5411C4E4.5070506@r-programming.org>
	<27596069.42379.1410453675237.JavaMail.defaultUser@defaultHost>
	<CAPPM_gS8hvtMBT=qebLABuA=giGx6mQ+E2pKc1pAeOGyACEtwg@mail.gmail.com>
	<17156356.44357.1410455436775.JavaMail.defaultUser@defaultHost>
Message-ID: <CAPPM_gTgnMQsq31Yd2TA5qdJ0giurFHmSdMP1i9ieLqaZ5MQsQ@mail.gmail.com>

On Thu, Sep 11, 2014 at 12:10 PM, amarjit chandhial
<a.chandhial at btinternet.com> wrote:
>
>
> It is not my intention to be insulting to anyone!
>
If you do not intend to be insulting, then you need to find someone to
help you understand how the tone you use in emails can be interpreted
as insulting the recipient.

>
> You say:
>> He, nor, anyone on this list, owe you anything, regardless of their profession.
>
>
> If you read my email properly, I said
>
> 'If you do not want to answer specific questions on them -- that's your right'
>
I read your email properly.  You said that right before saying,
"Rarely, if ever, in my experience has there been a lecturer worth
their name not willing to answer questions on their work, especially
if they are advertising them to be available publically as you are
[ir]regardless of your reasons"

My point was: if you understand Guy has the right to not answer
specific questions, then there is no reason to tell Guy that "a
lecturer worth their name" would answer specific questions on their
work and that the reasons he gave for not helping you were not
relevant.  You essentially said, "A good lecturer would have helped
me, regardless of the reasons you gave."

>
> Amarjit
>
>
>
>
> ----Original message----
> From : josh.m.ulrich at gmail.com
> Date : 11/09/2014 - 17:48 (GMTST)
> To : a.chandhial at btinternet.com
> Cc : gyollin at r-programming.org, r-sig-finance at r-project.org
> Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014 presentation
>
> On Thu, Sep 11, 2014 at 11:41 AM, amarjit chandhial
> <a.chandhial at btinternet.com> wrote:
>> Guy,
>>
>>
>> I am sorry you feel the way you do.
>>
>> If you are providing information via your slides and advertising them to be available on a public list, I think it is entirely reasonable for you to expect questions from it, especially given the job you're in: teaching.
>>
>> You say:
>>
>> " For specific questions about my slides, I'm sorry but they are provided without support.    Hopefully you understand these limitations."
>>
>> and
>>
>> " I do not have the time or resources to provide 1-on-1 support in this area "
>>
>>
>> Well, if you do not want to answer specific questions on them -- that's your right.
>>
>>
>> Rarely, if ever, in my experience has there been a lecturer worth their name not willing to answer questions on their work, especially if they are advertising them to be available publically as you are irregardless of your reasons of:
>>
> That implies Guy is "not worth his name", which is insulting.  He, nor
> anyone on this list, owe you anything, regardless of their profession.
>
> Many people here provide resources for free, without warranty.  You
> have only demonstrated that you're willing to consume what is freely
> given, and have not shown much effort in contributing back to the
> community.  That is likely to make you very unpopular.
>
>> "I wanted to give back to the R community and I thought other folks may find the slides and the scripts useful; in this particular area there is very little other documentation.
>>
>>
>>
>> Regards,
>> Amarjit
>>
>>
>>
>>
>> ----Original message----
>> >From : gyollin at r-programming.org
>> Date : 11/09/2014 - 16:51 (GMTST)
>> To : r-sig-finance at r-project.org
>> Subject : Re: [R-SIG-Finance] quantstrat - Guy Yollin blotter 2014      presentation
>>
>> Amarjit,
>>
>> I'm not comfortable with you taking a single line from our private
>> communication and posting it to a public mailing list since it may be
>> interpreted out of context.
>>
>> What I fully said was:
>>
>>
>>     I started sharing my lecture slides because I wanted to give back to
>>     the R community and I thought other folks may find the slides and
>>     the scripts useful; in this particular area there is very little
>>     other documentation.
>>
>>     However, that's really all I can do.  I do not have the time or
>>     resources to provide 1-on-1 support in this area.
>>
>>     If you find the materials useful, that's great; if you have
>>     questions about blotter/quantstrat then R-SIG-FINANCE is probably
>>     the best resource.  For specific questions about my slides, I'm
>>     sorry but they are provided without support.    Hopefully you
>>     understand these limitations.
>>
>>     If you are interested, you could certainly enroll in my class, it's
>>     available online and I'll be teaching this material again in March
>>     2015.  Now, however, I'm onto a another subject.
>>
>>
>> G
>>
>>
>> On 9/10/2014 11:45 PM, amarjit chandhial wrote:
>>> I have asked Guy Yollin directly who says and I quote "I do not have
>>> the time or resources to provide 1-on-1 support in this area."
>>>
>>> Thus, I am asking the community regarding his blotter 2014
>>> presentation found here: http://www.r-programming.org/papers
>>>
>>>
>>> Slides 39-40
>>> ------------------
>>> Slide 39 has Drawdown = 0 --- from chart.Posn
>>> Slide 40 has Max.Drawdown = -441461.8
>>>
>>> Why the difference?
>>>
>>>
>>>
>>> Slides 30-57
>>> ------------------
>>> My understanding is via the following definitions:
>>> (a) for discrete or simple returns, cumulative return <- cumprod(1+rets.s)
>>> (b) for compound or log returns, cumulative return <-
>>> exp(cumsum(rets.cc) )
>>>
>>>
>>> 'rets' are returns from b.strategy calculated via PortfReturns (Slide
>>> 47). So from ?PortfReturns these are returns on initial equity. At
>>> each point in time 'rets' = Net.Trading.PL/initEq. These require
>>> geometric chaining.
>>>
>>> In Slide 47 charts.PerformanceSummary(rets,colorset = bluefocus) ---
>>> has default geometric=TRUE
>>>
>>>
>>> 'returns' (Slide 56) are cbind(rets,rets.bh), with
>>> 'rets.bh': buyHold
>>> 'rets': b.strategy, as before,
>>>
>>> In Slide 56 charts.PerformanceSummary(returns, geometric=FALSE,
>>> wealth.index=TRUE)
>>>
>>>
>>> Comparing Slides 48 & 57 faber curves do not agree. Slide 48 has a
>>> value of approx.10.63, Slide 57 has a value of approx.3.77
>>> (wealth+2.77). It cannot be both-ways regarding returns from
>>> b.strategy, it's either geometric or arithmetic chaining?
>>>
>>> So hypothetically speaking my boss says to me you have a strategy that
>>> makes Net profit = 2,770,644, on an initial equity = 1,000,000 (slides
>>> 30-42), yet you say to me it makes cumulative return of 10.63 (slides
>>> 47-50), how does that work?
>>>
>>>
>>> Can someone shed some light on this?
>>>
>>>
>>>
>>> Amarjit
>>>
>>>
>>>
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R questions should go.
>>
>>
>>         [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
>


From stefano.iacus at unimi.it  Fri Sep 12 00:22:59 2014
From: stefano.iacus at unimi.it (stefano iacus)
Date: Fri, 12 Sep 2014 07:22:59 +0900
Subject: [R-SIG-Finance] CARMA models with Yuima package
Message-ID: <41A2922F-DFF0-4A0D-B9DC-1DEFBF7E950B@unimi.it>

Hi all,
in case you ever wanted to play with Carma models (simulation&estimation): we have just added this functionality to the Yuima package. 
Stefano + the rest of Yuima team but especially Lorenzo

http://arxiv.org/abs/1409.3027

Sent from my StrawBerry?

From andre_mikulec at hotmail.com  Fri Sep 12 16:18:33 2014
From: andre_mikulec at hotmail.com (Andre Mikulec)
Date: Fri, 12 Sep 2014 10:18:33 -0400
Subject: [R-SIG-Finance] quantstrat faber.R: where is the money at the start?
Message-ID: <BLU174-W11754CC4869FD41144DB4B9CCD0@phx.gbl>

Hi,

May someone enlighten me?


I am running the faber.R demo

Here is the url
https://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter


Q # 1
------

Of the initial equity, I notice that  100,000 dollars invested.
At the start ,is the money split evenly, among the 9 sectors? 


Each is invested  11,111.11 dollars? Is this true?


Or, is just a big pile of cash sitting there, waiting for the first transaction?


One reason why I am asking this is because the end result of

faber.stats$Net.Trading.PL seems to look like the 
average is around 11,000. 		 	   		  

From brian at braverock.com  Fri Sep 12 16:44:07 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Fri, 12 Sep 2014 09:44:07 -0500
Subject: [R-SIG-Finance] quantstrat faber.R: where is the money at the
 start?
In-Reply-To: <BLU174-W11754CC4869FD41144DB4B9CCD0@phx.gbl>
References: <BLU174-W11754CC4869FD41144DB4B9CCD0@phx.gbl>
Message-ID: <541306B7.6030300@braverock.com>

On 09/12/2014 09:18 AM, Andre Mikulec wrote:
> I am running the faber.R demo
>
> Here is the url
> https://r-forge.r-project.org/scm/viewvc.php/pkg/quantstrat/demo/faber.R?view=markup&root=blotter
>
>
> Q # 1
> ------
>
> Of the initial equity, I notice that  100,000 dollars invested.
> At the start ,is the money split evenly, among the 9 sectors?
>
>
> Each is invested  11,111.11 dollars? Is this true?
>
>
> Or, is just a big pile of cash sitting there, waiting for the first transaction?
>
>
> One reason why I am asking this is because the end result of
>
> faber.stats$Net.Trading.PL seems to look like the
> average is around 11,000. 		 	

I already answered this in response to your prior query here:

http://r.789695.n4.nabble.com/quantstrat-faber-R-transactions-td4696707.html


The faber.R demo uses a fixed order quantity, as should be obvious from

orderqty=500

So, this demo doesn't care what initial account equity is.  It is 
investing fixed sizes.

Brian


From grchang at gmail.com  Fri Sep 12 22:07:53 2014
From: grchang at gmail.com (George Chang)
Date: Fri, 12 Sep 2014 16:07:53 -0400
Subject: [R-SIG-Finance] Errors with Quanstrat-IV Demo
In-Reply-To: <540B9A35.9000205@r-programming.org>
References: <CAMz0m8Cj80pSwySCw5pCLgOyt0WpXP3TMdYgtwG2tQBhSV=Zeg@mail.gmail.com>
	<540B9A35.9000205@r-programming.org>
Message-ID: <CAMz0m8CCEXirc3f_0+S6OcT6E5gYyjE527dvz1xG-23UjWX0_Q@mail.gmail.com>

Guy and Interested R-SIG Finance Members,

FYI, I was able to successfully run all of Guy's demo scripts that were
updated at: www.r-programming.org/papers.

I plan to study Guy's presentations and his approach with R scripts and
with luck,  develop my own strategy in the next few months. Many thanks to
Guy for his excellent slides and demo scripts.

Regards,
George Chang



On Sat, Sep 6, 2014 at 7:35 PM, Guy Yollin <gyollin at r-programming.org>
wrote:

> George,
>
> I just posted the latest update to all of the slides and R scripts.
>
> Further, there are 3 new slide decks:  quantstrat-III (this is actually
> new because I changed the naming convention), Luxor, and WFA.
>
> All of the code should be operational with one exception.  I had to modify
> the functions chart.forward and chart.forward.training and these changes
> haven't been checked in to SVN.
>
> I will try to do that in the near future.
>
> G
>
>
> On 9/5/2014 12:50 PM, George Chang wrote:
>
>> Dear Fellow R-sig-fiance members,
>>
>> I am relatively new to R but have written one working  R program recently.
>> In my continuing education, I am studying Guy Yollin's presentations and
>> related scripts about Quantstrat. If you're interested, please see his
>> blog
>> at:
>> http://www.r-programming.org/files
>>
>> My particular problem is the following error when I run Guy's
>> Quantstrat-IV
>> script. It does not know 'add.constraint', but accepts the other 'add'
>> functions, such as 'add.distribution'.
>>
>> Error in args(add.constraint) : object 'add.constraint' not found
>>
>> Any suggestions/solutions are much appreciated.
>>
>> George C
>>
>>         [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>



-- 
George Chang
VOIP Ph (Magic Jack): 201-203-0065
China Telecom Ph: +86-15955303251

	[[alternative HTML version deleted]]


From 1111938 at qq.com  Sat Sep 13 12:57:47 2014
From: 1111938 at qq.com (domodo)
Date: Sat, 13 Sep 2014 03:57:47 -0700 (PDT)
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <1409934716272-4696562.post@n4.nabble.com>
References: <1409934716272-4696562.post@n4.nabble.com>
Message-ID: <1410605867039-4696908.post@n4.nabble.com>

Thanks,Kipnis,and sorry for my delay reply.I'll learn how to use Rcpp.

regarding parallel computation,I'v learned how to compute parallel on
multi-cores computer when optimizing by professor Yollin's represetation
document,is it possible to compute parallel on multi-cores computer when 
back-testing intra-day historical data ? and how to ?   



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562p4696908.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From brian at braverock.com  Sat Sep 13 15:03:58 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Sat, 13 Sep 2014 08:03:58 -0500
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <1410605867039-4696908.post@n4.nabble.com>
References: <1409934716272-4696562.post@n4.nabble.com>
	<1410605867039-4696908.post@n4.nabble.com>
Message-ID: <541440BE.3080700@braverock.com>

On 09/13/2014 05:57 AM, domodo wrote:
> Thanks,Kipnis,and sorry for my delay reply.I'll learn how to use Rcpp.
>
> regarding parallel computation,I'v learned how to compute parallel on
> multi-cores computer when optimizing by professor Yollin's represetation
> document,is it possible to compute parallel on multi-cores computer when
> back-testing intra-day historical data ? and how to ?

It is trivial to use the foreach package to call applyStrategy in parallel.

It seems unlikely that you would need to if your strategy is well 
specified.  We routinely run strategy backtests in under one core-minute 
per symbol per day on tick data.

parameter optimization and walk forward analysis clearly benefit from 
multiple cores and even clusters of multiple machines, and quantstrat 
supports this directly. For a single backtest, even on hundreds or 
thousands of symbols with intra-day data, it is rarely needed on modern 
hardware.

I recommend learning the tools first, then learning how to profile your 
indicator or signal code to focus on where you need to speed it up.  As 
in almost anything in R, vectorization or filtering is almost always 
possible, and will provide huge gains in performance, often of several 
orders of magnitude.  If that fails, you can always write C, Fortran, or 
C++ code to tackle some particularly difficult computation.

Typically, the largest gains come from writing efficient vectorized 
indicators and signal generators.  After that, many strategies allow for 
signal pre-filtering.  We only rarely need to resort to compiled code, 
even for 'adaptive indicators', and we only work with intra-day data.

Regards,

Brian

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From 1111938 at qq.com  Sun Sep 14 08:45:55 2014
From: 1111938 at qq.com (domodo)
Date: Sat, 13 Sep 2014 23:45:55 -0700 (PDT)
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <541440BE.3080700@braverock.com>
References: <1409934716272-4696562.post@n4.nabble.com>
	<1410605867039-4696908.post@n4.nabble.com>
	<541440BE.3080700@braverock.com>
Message-ID: <1410677155781-4696922.post@n4.nabble.com>

Got it and thanks, braverock, it's more clearly for me to the steps of
learning R.



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562p4696922.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From 1111938 at qq.com  Sun Sep 14 09:24:18 2014
From: 1111938 at qq.com (domodo)
Date: Sun, 14 Sep 2014 00:24:18 -0700 (PDT)
Subject: [R-SIG-Finance] questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <1410677155781-4696922.post@n4.nabble.com>
References: <1409934716272-4696562.post@n4.nabble.com>
	<1410605867039-4696908.post@n4.nabble.com>
	<541440BE.3080700@braverock.com>
	<1410677155781-4696922.post@n4.nabble.com>
Message-ID: <1410679458840-4696923.post@n4.nabble.com>

braverock, I'm trying to code a hans123-like strategy, be unfamiliar with
fine control in R and quantstrat, it's hard for me to code the rules below.
could you help to give me an example ?

1. market opens at 9:00, closes at 15:00, and the trading period is 1-min
2. determine hband = highest high of the day at 9:30 (that's, the highest
high of the recent 30 min at 9:30 )
3. determine lband = lowest low of the day at 9:30 (that's, the lowest low
of the recent 30 min at 9:30 )
4. from 9:31 to 14:55, if close of the 1-min bar cross above hband, enter
long; if close cross under lband, enter short;
5. if positon is long,and close cross under hband/2+lband/2, exit long; if
position is short,and close cross above hband/2+lband/2, exit short;
6. exit all position at 14:55
7. having 2 loss trades, stop trading today.

regards,



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562p4696923.html
Sent from the Rmetrics mailing list archive at Nabble.com.


From stergenator at gmail.com  Tue Sep 16 18:52:32 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Tue, 16 Sep 2014 09:52:32 -0700
Subject: [R-SIG-Finance] Guy Yollin's blotter.pdf Example
Message-ID: <CAM8YH=ZB6T+t2ruWefRz=yygq5rqdtEj8YVRe+bwNMczP7fEXA@mail.gmail.com>

In Guy Yollin's blotter.pdf slide there's an example on page 30 about which
I have a question.

The example is a loop over each period of data where the trading rules are
applied.  At the very end of the loop the three blotter functions named
updatePortf(), updateAcct(), and updateEndEq() are called.  Here it is
briefly:

for( i in 1:nrow(SPY) ) {

    // Trading Rules Omitted

    updatePortf(b.strategy,Dates=CurrentDate)
    updateAcct(b.strategy,Dates=CurrentDate)
    updateEndEq(b.strategy,CurrentDate)

}


My question is "could we hoist those last 3 functions out of the loop, and
place them afterwards with an expanded date range to cover all dates?"
 Doing so dramatically speeds up processing.  A downside to doing so is not
having the current equity available for use in trade sizing.  Of course,
there may be a loss of clarity in the example as well.  Are there other
important reasons for keeping the functions inside the loop?

Perhaps those functions could be called inside the loop only when a
position is closed out, or when rebalancing needs to occur?

Thanks for your thoughts on the matter.

--
sm
Stergios Marinopoulos

	[[alternative HTML version deleted]]


From treydog999 at gmail.com  Tue Sep 16 20:29:30 2014
From: treydog999 at gmail.com (Derek Wong)
Date: Tue, 16 Sep 2014 13:29:30 -0500
Subject: [R-SIG-Finance] Error using quantstrat walk.forward on windows,
	pls help.
Message-ID: <CALQudT9U7vWqENkP6vzhnz8MLHMxWuzUR1q3AnGYgxMpAxrhbg@mail.gmail.com>

Hello, I am having problems with the walk.forward function on windows. I am
recieve the error calling combine function. This also happens if i just try
to apply.paramset.

error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5,
result.6,     result.7, result.8, result.9): attempt to select less than
one element>
numValues: 9, numResults: 9, stopped: TRUE
Error in walk.forward("pairStrat", paramset.label = "BBOPT", portfolio.st =
portfolio1.st,  :
  obj.func() returned empty result
In addition: Warning messages:
1: executing %dopar% sequentially: no parallel backend registered
2: In max(x$tradeStats$Net.Trading.PL) :
  no non-missing arguments to max; returning -Inf


I know this is common on windows systems, I have tried doParallel
then registerDoSEQ() but still receive the error. I have also attempted to
use doRedis package and set up a local server. However there is no output
and it will just run for hours and hours.

I am very new to this package and would really like anyone helps. Thank you

-Derek

	[[alternative HTML version deleted]]


From josh.m.ulrich at gmail.com  Tue Sep 16 20:32:05 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Tue, 16 Sep 2014 13:32:05 -0500
Subject: [R-SIG-Finance] Error using quantstrat walk.forward on windows,
 pls help.
In-Reply-To: <CALQudT9U7vWqENkP6vzhnz8MLHMxWuzUR1q3AnGYgxMpAxrhbg@mail.gmail.com>
References: <CALQudT9U7vWqENkP6vzhnz8MLHMxWuzUR1q3AnGYgxMpAxrhbg@mail.gmail.com>
Message-ID: <CAPPM_gSxAEiSS+_2G-NuTaJ2mwPkGA3+00wZp8LfOQ6fGu958g@mail.gmail.com>

What version / revision of quantstrat are you using?  I've fixed
several related issues in the past week or so.
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Tue, Sep 16, 2014 at 1:29 PM, Derek Wong <treydog999 at gmail.com> wrote:
> Hello, I am having problems with the walk.forward function on windows. I am
> recieve the error calling combine function. This also happens if i just try
> to apply.paramset.
>
> error calling combine function:
> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
> result.6,     result.7, result.8, result.9): attempt to select less than
> one element>
> numValues: 9, numResults: 9, stopped: TRUE
> Error in walk.forward("pairStrat", paramset.label = "BBOPT", portfolio.st =
> portfolio1.st,  :
>   obj.func() returned empty result
> In addition: Warning messages:
> 1: executing %dopar% sequentially: no parallel backend registered
> 2: In max(x$tradeStats$Net.Trading.PL) :
>   no non-missing arguments to max; returning -Inf
>
>
> I know this is common on windows systems, I have tried doParallel
> then registerDoSEQ() but still receive the error. I have also attempted to
> use doRedis package and set up a local server. However there is no output
> and it will just run for hours and hours.
>
> I am very new to this package and would really like anyone helps. Thank you
>
> -Derek
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From treydog999 at gmail.com  Tue Sep 16 20:36:09 2014
From: treydog999 at gmail.com (Derek Wong)
Date: Tue, 16 Sep 2014 13:36:09 -0500
Subject: [R-SIG-Finance] Error using quantstrat walk.forward on windows,
 pls help.
In-Reply-To: <CAPPM_gSxAEiSS+_2G-NuTaJ2mwPkGA3+00wZp8LfOQ6fGu958g@mail.gmail.com>
References: <CALQudT9U7vWqENkP6vzhnz8MLHMxWuzUR1q3AnGYgxMpAxrhbg@mail.gmail.com>
	<CAPPM_gSxAEiSS+_2G-NuTaJ2mwPkGA3+00wZp8LfOQ6fGu958g@mail.gmail.com>
Message-ID: <CALQudT9M_DzbK36xEaRZiAQ_HFM1suSC0S+OvOCAX63UptkF8w@mail.gmail.com>

platform       x86_64-w64-mingw32
arch           x86_64
os             mingw32
system         x86_64, mingw32
status
major          3
minor          1.1
year           2014
month          07
day            10
svn rev        66115
language       R
version.string R version 3.1.1 (2014-07-10)
nickname       Sock it to Me

On Tue, Sep 16, 2014 at 1:32 PM, Joshua Ulrich <josh.m.ulrich at gmail.com>
wrote:

> What version / revision of quantstrat are you using?  I've fixed
> several related issues in the past week or so.
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
>
>
> On Tue, Sep 16, 2014 at 1:29 PM, Derek Wong <treydog999 at gmail.com> wrote:
> > Hello, I am having problems with the walk.forward function on windows. I
> am
> > recieve the error calling combine function. This also happens if i just
> try
> > to apply.paramset.
> >
> > error calling combine function:
> > <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
> > result.6,     result.7, result.8, result.9): attempt to select less than
> > one element>
> > numValues: 9, numResults: 9, stopped: TRUE
> > Error in walk.forward("pairStrat", paramset.label = "BBOPT",
> portfolio.st =
> > portfolio1.st,  :
> >   obj.func() returned empty result
> > In addition: Warning messages:
> > 1: executing %dopar% sequentially: no parallel backend registered
> > 2: In max(x$tradeStats$Net.Trading.PL) :
> >   no non-missing arguments to max; returning -Inf
> >
> >
> > I know this is common on windows systems, I have tried doParallel
> > then registerDoSEQ() but still receive the error. I have also attempted
> to
> > use doRedis package and set up a local server. However there is no output
> > and it will just run for hours and hours.
> >
> > I am very new to this package and would really like anyone helps. Thank
> you
> >
> > -Derek
> >
> >         [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From gyollin at r-programming.org  Tue Sep 16 20:48:16 2014
From: gyollin at r-programming.org (Guy Yollin)
Date: Tue, 16 Sep 2014 11:48:16 -0700
Subject: [R-SIG-Finance] Guy Yollin's blotter.pdf Example
In-Reply-To: <CAM8YH=ZB6T+t2ruWefRz=yygq5rqdtEj8YVRe+bwNMczP7fEXA@mail.gmail.com>
References: <CAM8YH=ZB6T+t2ruWefRz=yygq5rqdtEj8YVRe+bwNMczP7fEXA@mail.gmail.com>
Message-ID: <541885F0.7060203@r-programming.org>

Stergios,

Clearly this example is largely based off of the longtrend demo in blotter.

As you noted, the equity  position is retreived at the top of the loop 
and this requires the updates at the bottom of the loop.

I believe that you probably could refactor the loop so that you only 
call the update functions if you've just had a cross-over so that a 
position change may need to be made; in this case I believe you're date 
range would be "::CurrentDate"

G


On 9/16/2014 9:52 AM, stergios marinopoulos wrote:
> In Guy Yollin's blotter.pdf slide there's an example on page 30 about which
> I have a question.
>
> The example is a loop over each period of data where the trading rules are
> applied.  At the very end of the loop the three blotter functions named
> updatePortf(), updateAcct(), and updateEndEq() are called.  Here it is
> briefly:
>
> for( i in 1:nrow(SPY) ) {
>
>      // Trading Rules Omitted
>
>      updatePortf(b.strategy,Dates=CurrentDate)
>      updateAcct(b.strategy,Dates=CurrentDate)
>      updateEndEq(b.strategy,CurrentDate)
>
> }
>
>
> My question is "could we hoist those last 3 functions out of the loop, and
> place them afterwards with an expanded date range to cover all dates?"
>   Doing so dramatically speeds up processing.  A downside to doing so is not
> having the current equity available for use in trade sizing.  Of course,
> there may be a loss of clarity in the example as well.  Are there other
> important reasons for keeping the functions inside the loop?
>
> Perhaps those functions could be called inside the loop only when a
> position is closed out, or when rebalancing needs to occur?
>
> Thanks for your thoughts on the matter.
>
> --
> sm
> Stergios Marinopoulos
>
> 	[[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From brian at braverock.com  Tue Sep 16 21:25:50 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Tue, 16 Sep 2014 14:25:50 -0500
Subject: [R-SIG-Finance] Guy Yollin's blotter.pdf Example
In-Reply-To: <CAM8YH=ZB6T+t2ruWefRz=yygq5rqdtEj8YVRe+bwNMczP7fEXA@mail.gmail.com>
References: <CAM8YH=ZB6T+t2ruWefRz=yygq5rqdtEj8YVRe+bwNMczP7fEXA@mail.gmail.com>
Message-ID: <54188EBE.2010708@braverock.com>



On 09/16/2014 11:52 AM, stergios marinopoulos wrote:
> The example is a loop over each period of data where the trading rules are
> applied.  At the very end of the loop the three blotter functions named
> updatePortf(), updateAcct(), and updateEndEq() are called.  Here it is
> briefly:
>
> for( i in 1:nrow(SPY) ) {
>
>      // Trading Rules Omitted
>
>      updatePortf(b.strategy,Dates=CurrentDate)
>      updateAcct(b.strategy,Dates=CurrentDate)
>      updateEndEq(b.strategy,CurrentDate)
>
> }
>
>
> My question is "could we hoist those last 3 functions out of the loop, and
> place them afterwards with an expanded date range to cover all dates?"
>   Doing so dramatically speeds up processing.  A downside to doing so is not
> having the current equity available for use in trade sizing.  Of course,
> there may be a loss of clarity in the example as well.  Are there other
> important reasons for keeping the functions inside the loop?

Only to update portfolio equity.

It is also possible to approximate by taking the last mark plus any 
realized gains plus the mark to market difference in any open position.

> Perhaps those functions could be called inside the loop only when a
> position is closed out, or when rebalancing needs to occur?

Correct.

blotter isn't really designed for writing trading strategies.  It is 
designed to do portfolio accounting.  We use it mostly as either a 
backend behind quantstrat (which is designed for strategy backtests) or 
for post-trade analysis on production trades.

In the first case (backtesting), performance is obviously important, so 
you would want to minimize how often you call the update* functions, 
perhaps using secondary calculations instead of marking the entire 
portfolio. There's no point in marking the portfolio every tick, or 
every second, even if you only call it once at the end.  We often mark 
the portfolio hourly, even if we ran a backtest on tick.

In the post-trade analysis case, you would typically call the update* 
functions only once, at the end, and performance is not really an issue, 
because even a giant portfolio across very long periods of time takes 
only seconds to mark.

Regards,

Brian

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From mcewan.gareth at gmail.com  Wed Sep 17 11:33:20 2014
From: mcewan.gareth at gmail.com (Gareth McEwan)
Date: Wed, 17 Sep 2014 11:33:20 +0200
Subject: [R-SIG-Finance] Unusually large t-values from ugarchfit
Message-ID: <CALGfFMaMStb8OSh6tXxj+jsfCxj4mp6O-YdcyZv6Bsc6k+ktUQ@mail.gmail.com>

Hi Alexios

I seem to be getting exceptionally big t-values in a lot of my fitting
output (across a number of financial variables). The majority of the
variables are in "monthly log return" format calculated from "monthly price
observations" over the last 20 years (of the 18 log return series 1 is
first-differenced and another is second-differenced). Sample sizes are
small, unfortunately, only around 242 log return observations per variable.

I'm a big fan of reproducible research, but I'm not sure how to get the
data to you. I've attached a .csv document to this email though. If others
are interested, I've selected the FSPI variable (S&P 500 Index) for which
data is easily obtainable. My data is from a local data vendor here in
South Africa. So, this variable is in monthly log returns, multiplied by
100 to put it in percentage form.

# 5: S&P 500 Index (Developed Equity Markets)
# 5: ARMA(2,3)-GARCH(1,1) errors~jsu
spec.FSPI <-
ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),

 submodel=NULL,external.regressors=NULL,variance.targeting=F),

 mean.model=list(armaOrder=c(2,3),include.mean=T,external.regressors=NULL),
                   distribution.model="jsu")
garch.FSPI <-
ugarchfit(spec=spec.FSPI,data=coredata(FSPI.log.ret),solver="hybrid")
show(garch.FSPI)

Optimal Parameters
------------------------------------
               Estimate      Std. Error      t value       Pr(>|t|)
mu          0.70104    0.000762       919.8719     0.000000
ar1         -1.93142    0.000391    -4944.8270     0.000000
ar2         -0.93236    0.000206    -4534.2598     0.000000
ma1        1.85979    0.000165    11287.6463     0.000000
ma2        0.72827    0.000149      4887.0466     0.000000
ma3       -0.13019    0.000058     -2232.2089     0.000000
omega    1.28003    0.599599            2.1348     0.032776
alpha1    0.21330    0.038001            5.6129     0.000000
beta1      0.74371    0.035146          21.1605     0.000000
skew      -2.35018    1.132755           -2.0747     0.038010
shape      2.19635    0.714951            3.0720     0.002126

Robust Standard Errors:
             Estimate      Std. Error        t value        Pr(>|t|)
mu        0.70104      0.029683        23.61746    0.00000
ar1       -1.93142      0.030470      -63.38848    0.00000
ar2       -0.93236      0.012092      -77.10479    0.00000
ma1       1.85979      0.001194   1558.23243    0.00000
ma2       0.72827      0.000222   3283.16473    0.00000
ma3      -0.13019      0.003171      -41.05573    0.00000
omega    1.28003     4.319409         0.29634    0.76697
alpha1    0.21330     1.281223         0.16648    0.86778
beta1      0.74371     1.042388         0.71347    0.47556
skew      -2.35018     4.813643       -0.48823    0.62538
shape      2.19635     3.490002        0.62933    0.52914

The excessively large t-values are worrying me. Have you found this to be
normal? Or is there something I'm missing in the modelling methodology?

Also, a word on how the Robust Standard Errors are calculated would be
highly appreciated. I find some of the fitted variables have statistically
significant variables in the "Optimal Parameters" output, but which then
become insignificant in the "Robust Standard Errors" output (as in the case
above). Can you provide any guidance on this finding?

Many many thanks for the help !!
Gareth
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140917/0fd38fd5/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: SnP500 Monthly Price Series.csv
Type: text/csv
Size: 4769 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140917/0fd38fd5/attachment.bin>

From alexios at 4dscape.com  Wed Sep 17 14:12:03 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Wed, 17 Sep 2014 15:12:03 +0300
Subject: [R-SIG-Finance] Unusually large t-values from ugarchfit
In-Reply-To: <CALGfFMaMStb8OSh6tXxj+jsfCxj4mp6O-YdcyZv6Bsc6k+ktUQ@mail.gmail.com>
References: <CALGfFMaMStb8OSh6tXxj+jsfCxj4mp6O-YdcyZv6Bsc6k+ktUQ@mail.gmail.com>
Message-ID: <54197A93.80101@4dscape.com>

Gareth,

1. For such a small dataset (242 points) try using QML (i.e.
distribution="norm").
2. Also, don't use "coredata" and don't multiply by 100.
Instead, pass the returns as xts (as is).

-Alexios


On 17/09/2014 12:33, Gareth McEwan wrote:
> Hi Alexios
> 
> I seem to be getting exceptionally big t-values in a lot of my fitting
> output (across a number of financial variables). The majority of the
> variables are in "monthly log return" format calculated from "monthly
> price observations" over the last 20 years (of the 18 log return series
> 1 is first-differenced and another is second-differenced). Sample sizes
> are small, unfortunately, only around 242 log return observations per
> variable.
> 
> I'm a big fan of reproducible research, but I'm not sure how to get the
> data to you. I've attached a .csv document to this email though. If
> others are interested, I've selected the FSPI variable (S&P 500 Index)
> for which data is easily obtainable. My data is from a local data vendor
> here in South Africa. So, this variable is in monthly log returns,
> multiplied by 100 to put it in percentage form.
> 
> # 5: S&P 500 Index (Developed Equity Markets)
> # 5: ARMA(2,3)-GARCH(1,1) errors~jsu
> spec.FSPI <-
> ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),
>                  
>  submodel=NULL,external.regressors=NULL,variance.targeting=F), 
>                  
>  mean.model=list(armaOrder=c(2,3),include.mean=T,external.regressors=NULL),
>                    distribution.model="jsu")
> garch.FSPI <-
> ugarchfit(spec=spec.FSPI,data=coredata(FSPI.log.ret),solver="hybrid")
> show(garch.FSPI)
> 
> Optimal Parameters
> ------------------------------------
>                Estimate      Std. Error      t value       Pr(>|t|)
> mu          0.70104    0.000762       919.8719     0.000000
> ar1         -1.93142    0.000391    -4944.8270     0.000000
> ar2         -0.93236    0.000206    -4534.2598     0.000000
> ma1        1.85979    0.000165    11287.6463     0.000000
> ma2        0.72827    0.000149      4887.0466     0.000000
> ma3       -0.13019    0.000058     -2232.2089     0.000000
> omega    1.28003    0.599599            2.1348     0.032776
> alpha1    0.21330    0.038001            5.6129     0.000000
> beta1      0.74371    0.035146          21.1605     0.000000
> skew      -2.35018    1.132755           -2.0747     0.038010
> shape      2.19635    0.714951            3.0720     0.002126
> 
> Robust Standard Errors:
>              Estimate      Std. Error        t value        Pr(>|t|)
> mu        0.70104      0.029683        23.61746    0.00000
> ar1       -1.93142      0.030470      -63.38848    0.00000
> ar2       -0.93236      0.012092      -77.10479    0.00000
> ma1       1.85979      0.001194   1558.23243    0.00000
> ma2       0.72827      0.000222   3283.16473    0.00000
> ma3      -0.13019      0.003171      -41.05573    0.00000
> omega    1.28003     4.319409         0.29634    0.76697
> alpha1    0.21330     1.281223         0.16648    0.86778
> beta1      0.74371     1.042388         0.71347    0.47556
> skew      -2.35018     4.813643       -0.48823    0.62538
> shape      2.19635     3.490002        0.62933    0.52914
> 
> The excessively large t-values are worrying me. Have you found this to
> be normal? Or is there something I'm missing in the modelling methodology?
> 
> Also, a word on how the Robust Standard Errors are calculated would be
> highly appreciated. I find some of the fitted variables have
> statistically significant variables in the "Optimal Parameters" output,
> but which then become insignificant in the "Robust Standard Errors"
> output (as in the case above). Can you provide any guidance on this finding?
> 
> Many many thanks for the help !!
> Gareth
> 
> 
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From alexios at 4dscape.com  Wed Sep 17 14:21:02 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Wed, 17 Sep 2014 15:21:02 +0300
Subject: [R-SIG-Finance] Unusually large t-values from ugarchfit
In-Reply-To: <54197A93.80101@4dscape.com>
References: <CALGfFMaMStb8OSh6tXxj+jsfCxj4mp6O-YdcyZv6Bsc6k+ktUQ@mail.gmail.com>
	<54197A93.80101@4dscape.com>
Message-ID: <C0F0027F-9E2A-48C6-95E9-7B6471E8F0A6@4dscape.com>

Robust standard errors formula/details are provided in the vignette if I am not mistaken, but will add some additional details (re the calculation and the additional arguments to ugarchfit in the development version) when I find some time.

Alexios

> On 17 Sep 2014, at 15:12, alexios ghalalanos <alexios at 4dscape.com> wrote:
> 
> Gareth,
> 
> 1. For such a small dataset (242 points) try using QML (i.e.
> distribution="norm").
> 2. Also, don't use "coredata" and don't multiply by 100.
> Instead, pass the returns as xts (as is).
> 
> -Alexios
> 
> 
>> On 17/09/2014 12:33, Gareth McEwan wrote:
>> Hi Alexios
>> 
>> I seem to be getting exceptionally big t-values in a lot of my fitting
>> output (across a number of financial variables). The majority of the
>> variables are in "monthly log return" format calculated from "monthly
>> price observations" over the last 20 years (of the 18 log return series
>> 1 is first-differenced and another is second-differenced). Sample sizes
>> are small, unfortunately, only around 242 log return observations per
>> variable.
>> 
>> I'm a big fan of reproducible research, but I'm not sure how to get the
>> data to you. I've attached a .csv document to this email though. If
>> others are interested, I've selected the FSPI variable (S&P 500 Index)
>> for which data is easily obtainable. My data is from a local data vendor
>> here in South Africa. So, this variable is in monthly log returns,
>> multiplied by 100 to put it in percentage form.
>> 
>> # 5: S&P 500 Index (Developed Equity Markets)
>> # 5: ARMA(2,3)-GARCH(1,1) errors~jsu
>> spec.FSPI <-
>> ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),
>> 
>> submodel=NULL,external.regressors=NULL,variance.targeting=F), 
>> 
>> mean.model=list(armaOrder=c(2,3),include.mean=T,external.regressors=NULL),
>>                   distribution.model="jsu")
>> garch.FSPI <-
>> ugarchfit(spec=spec.FSPI,data=coredata(FSPI.log.ret),solver="hybrid")
>> show(garch.FSPI)
>> 
>> Optimal Parameters
>> ------------------------------------
>>               Estimate      Std. Error      t value       Pr(>|t|)
>> mu          0.70104    0.000762       919.8719     0.000000
>> ar1         -1.93142    0.000391    -4944.8270     0.000000
>> ar2         -0.93236    0.000206    -4534.2598     0.000000
>> ma1        1.85979    0.000165    11287.6463     0.000000
>> ma2        0.72827    0.000149      4887.0466     0.000000
>> ma3       -0.13019    0.000058     -2232.2089     0.000000
>> omega    1.28003    0.599599            2.1348     0.032776
>> alpha1    0.21330    0.038001            5.6129     0.000000
>> beta1      0.74371    0.035146          21.1605     0.000000
>> skew      -2.35018    1.132755           -2.0747     0.038010
>> shape      2.19635    0.714951            3.0720     0.002126
>> 
>> Robust Standard Errors:
>>             Estimate      Std. Error        t value        Pr(>|t|)
>> mu        0.70104      0.029683        23.61746    0.00000
>> ar1       -1.93142      0.030470      -63.38848    0.00000
>> ar2       -0.93236      0.012092      -77.10479    0.00000
>> ma1       1.85979      0.001194   1558.23243    0.00000
>> ma2       0.72827      0.000222   3283.16473    0.00000
>> ma3      -0.13019      0.003171      -41.05573    0.00000
>> omega    1.28003     4.319409         0.29634    0.76697
>> alpha1    0.21330     1.281223         0.16648    0.86778
>> beta1      0.74371     1.042388         0.71347    0.47556
>> skew      -2.35018     4.813643       -0.48823    0.62538
>> shape      2.19635     3.490002        0.62933    0.52914
>> 
>> The excessively large t-values are worrying me. Have you found this to
>> be normal? Or is there something I'm missing in the modelling methodology?
>> 
>> Also, a word on how the Robust Standard Errors are calculated would be
>> highly appreciated. I find some of the fitted variables have
>> statistically significant variables in the "Optimal Parameters" output,
>> but which then become insignificant in the "Robust Standard Errors"
>> output (as in the case above). Can you provide any guidance on this finding?
>> 
>> Many many thanks for the help !!
>> Gareth
>> 
>> 
>> 
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
> 


From stergenator at gmail.com  Wed Sep 17 22:34:20 2014
From: stergenator at gmail.com (stergios marinopoulos)
Date: Wed, 17 Sep 2014 13:34:20 -0700
Subject: [R-SIG-Finance] Guy Yollin's blotter.pdf Example
In-Reply-To: <54188EBE.2010708@braverock.com>
References: <CAM8YH=ZB6T+t2ruWefRz=yygq5rqdtEj8YVRe+bwNMczP7fEXA@mail.gmail.com>
	<54188EBE.2010708@braverock.com>
Message-ID: <CAM8YH=Yo2=nTjLL9fvakAo8XjE+oAFA8nY8Kxu3B4+bkTN7khQ@mail.gmail.com>

Thanks for the feedback Guy & Brian.

--
sm
Stergios Marinopoulos

On Tue, Sep 16, 2014 at 12:25 PM, Brian G. Peterson <brian at braverock.com>
wrote:

>
>
> On 09/16/2014 11:52 AM, stergios marinopoulos wrote:
>
>> The example is a loop over each period of data where the trading rules are
>> applied.  At the very end of the loop the three blotter functions named
>> updatePortf(), updateAcct(), and updateEndEq() are called.  Here it is
>> briefly:
>>
>> for( i in 1:nrow(SPY) ) {
>>
>>      // Trading Rules Omitted
>>
>>      updatePortf(b.strategy,Dates=CurrentDate)
>>      updateAcct(b.strategy,Dates=CurrentDate)
>>      updateEndEq(b.strategy,CurrentDate)
>>
>> }
>>
>>
>> My question is "could we hoist those last 3 functions out of the loop, and
>> place them afterwards with an expanded date range to cover all dates?"
>>   Doing so dramatically speeds up processing.  A downside to doing so is
>> not
>> having the current equity available for use in trade sizing.  Of course,
>> there may be a loss of clarity in the example as well.  Are there other
>> important reasons for keeping the functions inside the loop?
>>
>
> Only to update portfolio equity.
>
> It is also possible to approximate by taking the last mark plus any
> realized gains plus the mark to market difference in any open position.
>
>  Perhaps those functions could be called inside the loop only when a
>> position is closed out, or when rebalancing needs to occur?
>>
>
> Correct.
>
> blotter isn't really designed for writing trading strategies.  It is
> designed to do portfolio accounting.  We use it mostly as either a backend
> behind quantstrat (which is designed for strategy backtests) or for
> post-trade analysis on production trades.
>
> In the first case (backtesting), performance is obviously important, so
> you would want to minimize how often you call the update* functions,
> perhaps using secondary calculations instead of marking the entire
> portfolio. There's no point in marking the portfolio every tick, or every
> second, even if you only call it once at the end.  We often mark the
> portfolio hourly, even if we ran a backtest on tick.
>
> In the post-trade analysis case, you would typically call the update*
> functions only once, at the end, and performance is not really an issue,
> because even a giant portfolio across very long periods of time takes only
> seconds to mark.
>
> Regards,
>
> Brian
>
> --
> Brian G. Peterson
> http://braverock.com/brian/
> Ph: 773-459-4973
> IM: bgpbraverock
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From n-e-w at qtradr.net  Thu Sep 18 07:41:54 2014
From: n-e-w at qtradr.net (Nick White)
Date: Thu, 18 Sep 2014 15:41:54 +1000
Subject: [R-SIG-Finance] In highfrequency package `convert` function creates
 folder structure, but no .RData file with TickData.com data
Message-ID: <CAH+4RFssCMN0psZkDCSPx=wrLWha-Eg98P1igqMz1rvhAmFM2A@mail.gmail.com>

Hi all,

I also raised the following (summarised, but pretty much verbatim) as an
issue on the highfrequency package's github Issues page... but that doesn't
appear to get a lot of attention:

https://github.com/jonathancornelissen/highfrequency/issues/3

Here's the same substance:

I am new to using the package. The following issue is with TickData.com
files.

I have setup the folders with a single day's worth of data for XYZ as per
the documentation:

from = "2014-09-02";
to     = "2014-09-02";
datasource = "~/raw_data";
datadestination = "~/xts_data"

in ~/raw_data I have placed the files:

XYZ_quotes.asc
XYZ_trades.asc

which are simply copied and renamed files from my original TickData folder.
Note, I have *not* extracted these using TickWrite7. These are just the raw
.asc files from the download directory.

I then run the convert function as follows:

> convert(from=from, to=to, datasource=datasource, datadestination=datadestination, trades = TRUE,quotes = TRUE, ticker="XYZ", dir = TRUE, format = "%d/%m/%Y %H:%M:%OS",extension = "tickdatacom", header = TRUE,  onefile = TRUE )

which begins to run and take some time....but then produces this error:

Error in if (length(c(year, month, day, hour, min, sec)) == 6 && c(year,  :
  missing value where TRUE/FALSE needed
In addition: Warning messages:
1: In as_numeric(YYYY) : NAs introduced by coercion
2: In as_numeric(YYYY) : NAs introduced by coercion

which, when calling traceback produces:

> traceback()
7: (function (year = 1970, month = 12, day = 31, hour = 23, min = 59,
       sec = 59, subsec = 0.99999, tz = "")
   {
       if (!missing(sec) && sec%%1 != 0)
           subsec <- 0
       sec <- ifelse(year < 1970, sec, sec + subsec)
       mon.lengths <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
           30, 31)
       if (missing(day)) {
           day <- ifelse(month %in% 2, ifelse(((year%%4 %in% 0 &
               !year%%100 %in% 0) | (year%%400 %in% 0)), 29, 28),
               mon.lengths[month])
       }
       if (length(c(year, month, day, hour, min, sec)) == 6 && c(year,
           month, day, hour, min, sec) == c(1969, 12, 31, 23, 59,
           59) && Sys.getenv("TZ") %in% c("", "GMT", "UTC"))
           sec <- sec - 1
       ISOdatetime(year, month, day, hour, min, sec, tz)
   })(year = NA_real_, tz = "GMT")
6: do.call(lastof, parse.side(intervals[2], intervals[1]))
5: as.POSIXlt(do.call(lastof, parse.side(intervals[2], intervals[1])))
4: .parseISO8601(ii, .index(x)[1], .index(x)[nr], tz = tz)
3: `[.xts`(alldata, as.character(dates[i]))
2: alldata[as.character(dates[i])]
1: convert(from = from, to = to, datasource = datasource,
datadestination = datadestination,
       trades = TRUE, quotes = TRUE, ticker = "XYZ", dir = TRUE,
       format = "%d/%m/%Y %H:%M:%OS", extension = "tickdatacom",
       header = TRUE, onefile = TRUE)


This occurs using extracted .asc files from TickWrite7 both where Date and
Time field is chosen or where individual Date and Time fields were selected.


This also happens whether I extract the files using TW7 or just get use the
raw files in my TickWrite data download folders as noted above.


This is on R3.0.2, x64, Win8.1P, highfrequency v = 0.3


Any help v much appreciated.


Cheers,

n.

	[[alternative HTML version deleted]]


From Philipp_Lammers at gmx.de  Thu Sep 18 09:35:28 2014
From: Philipp_Lammers at gmx.de (Philipp Lammers)
Date: Thu, 18 Sep 2014 09:35:28 +0200
Subject: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
Message-ID: <004501cfd313$1e9fc420$5bdf4c60$@de>

Hello everybody,

 

I am currently facing an estimation problem in the ARMAX-GARCHX model. The
"rugarch"-package is used for estimation. The problem arises because my
professor is not satisfied with the estimation results, he expects the
ARMAX-GARCH results in the mean equation to be the same as the normal ARMAX
results. But this is not the case and the results differ significantly. 

 

I already wrote to the programmer of the rugarch package, who thankfully
gave me a hint , that the results are different under the presence of
heteroskedasticity. He recommended me to post to this mailing list. Can
anybody confirm that the results are different? Where can I find this issue
in the literature?

 

My R-code can be downloaded from my Dropbox:
https://www.dropbox.com/s/k557ev4lmmnykqu/ARMAGARCH.R?dl=0 .Note that the
corresponding data will be downloaded from the Dropbox as well, when the
code is executed.

 

I hope that you can help me.

 

Thank you all in advance.

 

Philipp Lammers

 


	[[alternative HTML version deleted]]


From samo.pahor at gmail.com  Thu Sep 18 09:49:21 2014
From: samo.pahor at gmail.com (Samo Pahor)
Date: Thu, 18 Sep 2014 03:49:21 -0400
Subject: [R-SIG-Finance] quantmod and yahoo historical data download error -
 did yahoo changed the url?
Message-ID: <CAFNBy2kc9gC9DvyrSRv_noUV=7pG6vTEHM=Ucn3xno9hVTtW-g@mail.gmail.com>

Hi,

I am facing issues with downloading historical data from yahoo using
quantmod this morning:
[1] "BAL"
Error in download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
  cannot open URL
'http://ichart.finance.yahoo.com/table.csv?s=BAL&a=8&b=17&c=2014&d=8&e=18&f=2014&g=d&q=q&y=0&z=BAL&x=.csv'
In addition: Warning message:
In download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
  cannot open: HTTP status was '404 Not Found'

To me it looks like yahoo change urls (again?) since if I go to yahoo
webpage http://finance.yahoo.com/q/hp?s=BAL+Historical+Prices and
hover over link "Download to Spreadsheet" I can see this
http://real-chart.finance.yahoo.com/table.csv?s=BAL&d=8&e=18&f=2014&g=d&a=5&b=25&c=2008&ignore=.csv
 . It looks ichart changed to real-chart and maybe parameters have
also changed.

Best regards,
Samo


From alexios at 4dscape.com  Thu Sep 18 10:00:44 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Thu, 18 Sep 2014 11:00:44 +0300
Subject: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
In-Reply-To: <004501cfd313$1e9fc420$5bdf4c60$@de>
References: <004501cfd313$1e9fc420$5bdf4c60$@de>
Message-ID: <541A912C.9080202@4dscape.com>

Philipp,

In the presence of heteroscedasticity, there is a loss in the asymptotic
efficiency of the parameter estimates which are no longer BLUE (see the
original ARCH paper by Engle 1982). This effectively means that for most
datasets of length N (where N is some finite number), the parameters
will be somewhat different.
In the rugarch package, ARMA-GARCH is jointly estimated.

If you want to compare non-GARCH ARMA with the typical arima function in
R, use the arfimaspec/arfimafit functions (or set the ugarchspec
garchOrder to c(0,0) and the stationarity flag in the fit.control to 0).
You should also choose method="ML" for arima.

Regards,

Alexios

PS I could not download your dataset from dropbox (only the code).

On 18/09/2014 10:35, Philipp Lammers wrote:
> Hello everybody,
> 
>  
> 
> I am currently facing an estimation problem in the ARMAX-GARCHX model. The
> "rugarch"-package is used for estimation. The problem arises because my
> professor is not satisfied with the estimation results, he expects the
> ARMAX-GARCH results in the mean equation to be the same as the normal ARMAX
> results. But this is not the case and the results differ significantly. 
> 
>  
> 
> I already wrote to the programmer of the rugarch package, who thankfully
> gave me a hint , that the results are different under the presence of
> heteroskedasticity. He recommended me to post to this mailing list. Can
> anybody confirm that the results are different? Where can I find this issue
> in the literature?
> 
>  
> 
> My R-code can be downloaded from my Dropbox:
> https://www.dropbox.com/s/k557ev4lmmnykqu/ARMAGARCH.R?dl=0 .Note that the
> corresponding data will be downloaded from the Dropbox as well, when the
> code is executed.
> 
>  
> 
> I hope that you can help me.
> 
>  
> 
> Thank you all in advance.
> 
>  
> 
> Philipp Lammers
> 
>  
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From Philipp_Lammers at gmx.de  Thu Sep 18 10:42:50 2014
From: Philipp_Lammers at gmx.de (Philipp Lammers)
Date: Thu, 18 Sep 2014 10:42:50 +0200
Subject: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
In-Reply-To: <541A912C.9080202@4dscape.com>
References: <004501cfd313$1e9fc420$5bdf4c60$@de> <541A912C.9080202@4dscape.com>
Message-ID: <004a01cfd31c$89e22d00$9da68700$@de>

Dear Alexios,

thank you for your help. Now, I get decent results for AR and MA part from
ugarchfit. These are approximately the same as for arima(). Nevertheless,
the results for the exogenous variables added are still different between
the two functions.

I attachted the data in a .csv file.

Regards,

Philipp

-----Urspr?ngliche Nachricht-----
Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
Gesendet: Donnerstag, 18. September 2014 10:01
An: Philipp Lammers; r-sig-finance at r-project.org
Cc: alexios at 4dscape.com
Betreff: Re: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX

Philipp,

In the presence of heteroscedasticity, there is a loss in the asymptotic
efficiency of the parameter estimates which are no longer BLUE (see the
original ARCH paper by Engle 1982). This effectively means that for most
datasets of length N (where N is some finite number), the parameters will be
somewhat different.
In the rugarch package, ARMA-GARCH is jointly estimated.

If you want to compare non-GARCH ARMA with the typical arima function in R,
use the arfimaspec/arfimafit functions (or set the ugarchspec garchOrder to
c(0,0) and the stationarity flag in the fit.control to 0).
You should also choose method="ML" for arima.

Regards,

Alexios

PS I could not download your dataset from dropbox (only the code).

On 18/09/2014 10:35, Philipp Lammers wrote:
> Hello everybody,
> 
>  
> 
> I am currently facing an estimation problem in the ARMAX-GARCHX model. 
> The "rugarch"-package is used for estimation. The problem arises 
> because my professor is not satisfied with the estimation results, he 
> expects the ARMAX-GARCH results in the mean equation to be the same as 
> the normal ARMAX results. But this is not the case and the results differ
significantly.
> 
>  
> 
> I already wrote to the programmer of the rugarch package, who 
> thankfully gave me a hint , that the results are different under the 
> presence of heteroskedasticity. He recommended me to post to this 
> mailing list. Can anybody confirm that the results are different? 
> Where can I find this issue in the literature?
> 
>  
> 
> My R-code can be downloaded from my Dropbox:
> https://www.dropbox.com/s/k557ev4lmmnykqu/ARMAGARCH.R?dl=0 .Note that 
> the corresponding data will be downloaded from the Dropbox as well, 
> when the code is executed.
> 
>  
> 
> I hope that you can help me.
> 
>  
> 
> Thank you all in advance.
> 
>  
> 
> Philipp Lammers
> 
>  
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list 
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
should go.
> 
-------------- next part --------------
A non-text attachment was scrubbed...
Name: data.csv
Type: application/vnd.ms-excel
Size: 31163 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140918/ca233cdd/attachment.xlb>

From daniel.cegielka at gmail.com  Thu Sep 18 10:55:30 2014
From: daniel.cegielka at gmail.com (=?UTF-8?Q?Daniel_Cegie=C5=82ka?=)
Date: Thu, 18 Sep 2014 10:55:30 +0200
Subject: [R-SIG-Finance] quantmod and yahoo historical data download
 error - did yahoo changed the url?
In-Reply-To: <CAFNBy2kc9gC9DvyrSRv_noUV=7pG6vTEHM=Ucn3xno9hVTtW-g@mail.gmail.com>
References: <CAFNBy2kc9gC9DvyrSRv_noUV=7pG6vTEHM=Ucn3xno9hVTtW-g@mail.gmail.com>
Message-ID: <CAPLrYEQWobVfbq4NuGX8hOTYmx45G97NgVzcm1tCCtUp7VaXxA@mail.gmail.com>

2014-09-18 9:49 GMT+02:00 Samo Pahor <samo.pahor at gmail.com>:
> Hi,
>
> I am facing issues with downloading historical data from yahoo using
> quantmod this morning:
> [1] "BAL"
> Error in download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
>   cannot open URL
> 'http://ichart.finance.yahoo.com/table.csv?s=BAL&a=8&b=17&c=2014&d=8&e=18&f=2014&g=d&q=q&y=0&z=BAL&x=.csv'
> In addition: Warning message:
> In download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
>   cannot open: HTTP status was '404 Not Found'
>
> To me it looks like yahoo change urls (again?)

> rm(BAL)
> getSymbols("BAL")
[1] "BAL"
> tail(BAL)
           BAL.Open BAL.High BAL.Low BAL.Close BAL.Volume BAL.Adjusted
2014-09-09    43.50    44.23   43.50     44.03      12600        44.03
2014-09-10    43.95    45.24   43.95     45.07      30500        45.07
2014-09-11    44.67    45.84   44.67     45.69      43000        45.69
2014-09-12    45.45    46.04   45.40     45.61      29600        45.61
2014-09-15    44.76    44.76   44.00     44.17      13500        44.17
2014-09-16    43.99    44.13   43.83     44.04       8900        44.04

looks ok.

Best regards,
Daniel


From alexios at 4dscape.com  Thu Sep 18 11:15:29 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Thu, 18 Sep 2014 12:15:29 +0300
Subject: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
In-Reply-To: <004a01cfd31c$89e22d00$9da68700$@de>
References: <004501cfd313$1e9fc420$5bdf4c60$@de> <541A912C.9080202@4dscape.com>
	<004a01cfd31c$89e22d00$9da68700$@de>
Message-ID: <541AA2B1.2030202@4dscape.com>

Philipp,

I've checked your data and here are my comments:

>
spec <- arfimaspec(mean.model = list(armaOrder = c(1,
1),include.mean=FALSE,arfima=FALSE,
external.regressors=X),distribution.model ="norm")
setbounds(spec)<-list(mxreg1=c(-2,2), mxreg2=c(-2,2), mxreg3=c(-2,2))
fit1 <- arfimafit(spec,data=P)
fit2 = arima(P, order=c(1,0,1), method="ML",xreg=X, include.mean=FALSE)

cbind(c(coef(fit1),"LLH"=likelihood(fit1)), c(coef(fit2),
"sigma"=sqrt(fit2$sigma2), "LLH"=fit2$loglik))

ar1       0.22517917    0.22668311
ma1      -0.99999998   -0.99999860
mxreg1    1.39220340    1.35950370
mxreg2   -0.04714268   -0.04866735
mxreg3    0.03632310    0.03341936
sigma     0.34747055    0.34745002
LLH    -247.51441921 -250.50795353

As far as the pure arma estimation goes, I don't see any problems here.
rugarch and arima are identical (small difference which gives a higher
likelihood to the rugarch estimation is probably down to start-up
recursion method).

As regards the ARMA-GARCH model:

spec <- ugarchspec(mean.model = list(armaOrder = c(1,
1),include.mean=FALSE,arfima=FALSE,
external.regressors=X),distribution.model ="norm")
fit3 <- ugarchfit(spec,data=P)


data.frame("ARMA-GARCH"=c(coef(fit3), "LLH"=likelihood(fit3)))

          ARMA.GARCH
ar1      0.709683664
ma1     -0.997124020
mxreg1   0.448243364
mxreg2  -0.031824864
mxreg3  -0.016998532
omega    0.001552758
alpha1   0.315193600
beta1    0.241478834
LLH    942.895313178

The log-likelihood is significantly higher, but the GARCH persistence is
not very high. If you look at your dataset (P), you have a HUGE
spike/outlier. Try removing that and re-test for
heteroscedasticity...but I am guessing that you already know all this
since you must have learned it in class?

Alexios

On 18/09/2014 11:42, Philipp Lammers wrote:
> Dear Alexios,
> 
> thank you for your help. Now, I get decent results for AR and MA part from
> ugarchfit. These are approximately the same as for arima(). Nevertheless,
> the results for the exogenous variables added are still different between
> the two functions.
> 
> I attachted the data in a .csv file.
> 
> Regards,
> 
> Philipp
> 
> -----Urspr?ngliche Nachricht-----
> Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
> Gesendet: Donnerstag, 18. September 2014 10:01
> An: Philipp Lammers; r-sig-finance at r-project.org
> Cc: alexios at 4dscape.com
> Betreff: Re: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
> 
> Philipp,
> 
> In the presence of heteroscedasticity, there is a loss in the asymptotic
> efficiency of the parameter estimates which are no longer BLUE (see the
> original ARCH paper by Engle 1982). This effectively means that for most
> datasets of length N (where N is some finite number), the parameters will be
> somewhat different.
> In the rugarch package, ARMA-GARCH is jointly estimated.
> 
> If you want to compare non-GARCH ARMA with the typical arima function in R,
> use the arfimaspec/arfimafit functions (or set the ugarchspec garchOrder to
> c(0,0) and the stationarity flag in the fit.control to 0).
> You should also choose method="ML" for arima.
> 
> Regards,
> 
> Alexios
> 
> PS I could not download your dataset from dropbox (only the code).
> 
> On 18/09/2014 10:35, Philipp Lammers wrote:
>> Hello everybody,
>>
>>  
>>
>> I am currently facing an estimation problem in the ARMAX-GARCHX model. 
>> The "rugarch"-package is used for estimation. The problem arises 
>> because my professor is not satisfied with the estimation results, he 
>> expects the ARMAX-GARCH results in the mean equation to be the same as 
>> the normal ARMAX results. But this is not the case and the results differ
> significantly.
>>
>>  
>>
>> I already wrote to the programmer of the rugarch package, who 
>> thankfully gave me a hint , that the results are different under the 
>> presence of heteroskedasticity. He recommended me to post to this 
>> mailing list. Can anybody confirm that the results are different? 
>> Where can I find this issue in the literature?
>>
>>  
>>
>> My R-code can be downloaded from my Dropbox:
>> https://www.dropbox.com/s/k557ev4lmmnykqu/ARMAGARCH.R?dl=0 .Note that 
>> the corresponding data will be downloaded from the Dropbox as well, 
>> when the code is executed.
>>
>>  
>>
>> I hope that you can help me.
>>
>>  
>>
>> Thank you all in advance.
>>
>>  
>>
>> Philipp Lammers
>>
>>  
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list 
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
> should go.
>>


From samo.pahor at gmail.com  Thu Sep 18 11:32:53 2014
From: samo.pahor at gmail.com (Samo Pahor)
Date: Thu, 18 Sep 2014 05:32:53 -0400
Subject: [R-SIG-Finance] quantmod and yahoo historical data download
 error - did yahoo changed the url?
In-Reply-To: <CAPLrYEQWobVfbq4NuGX8hOTYmx45G97NgVzcm1tCCtUp7VaXxA@mail.gmail.com>
References: <CAFNBy2kc9gC9DvyrSRv_noUV=7pG6vTEHM=Ucn3xno9hVTtW-g@mail.gmail.com>
	<CAPLrYEQWobVfbq4NuGX8hOTYmx45G97NgVzcm1tCCtUp7VaXxA@mail.gmail.com>
Message-ID: <CAFNBy2k9c-pb743QAS7R5aAd8Up8U3jQStbaYqynAg-bPp15hQ@mail.gmail.com>

Daniel, thanks.

Not working for me if I use like this:
> getSymbols("SPY", verbose=TRUE, from="2014-09-17", to="2014-09-18")
downloading  SPY .....

trying URL 'http://ichart.finance.yahoo.com/table.csv?s=SPY&a=8&b=17&c=2014&d=8&e=18&f=2014&g=d&q=q&y=0&z=SPY&x=.csv'
Error in download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
  cannot open URL
'http://ichart.finance.yahoo.com/table.csv?s=SPY&a=8&b=17&c=2014&d=8&e=18&f=2014&g=d&q=q&y=0&z=SPY&x=.csv'
In addition: Warning message:
In download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
  cannot open: HTTP status was '404 Not Found'

But magically works if I use:
> getSymbols("SPY", verbose=TRUE)
downloading  SPY .....

trying URL 'http://ichart.finance.yahoo.com/table.csv?s=SPY&a=0&b=01&c=2007&d=8&e=18&f=2014&g=d&q=q&y=0&z=SPY&x=.csv'
Content type 'text/csv' length unknown
opened URL
.......... .......... .......... .......... ..........
.......... .......... .......... .......... ..........
....
downloaded 104 Kb

done.
[1] "SPY"

So it look something is wrong with from/to...

Or, that data is not actually available on Yahoo for the 17th... Since:
> getSymbols("SPY", verbose=TRUE)
downloading  SPY .....

trying URL 'http://ichart.finance.yahoo.com/table.csv?s=SPY&a=0&b=01&c=2007&d=8&e=18&f=2014&g=d&q=q&y=0&z=SPY&x=.csv'
Content type 'text/csv' length unknown
opened URL
.......... .......... .......... .......... ..........
.......... .......... .......... .......... ..........
....
downloaded 104 Kb

done.
[1] "SPY"
> tail(SPY)
           SPY.Open SPY.High SPY.Low SPY.Close SPY.Volume SPY.Adjusted
2014-09-09   200.41   200.55  198.91    199.32   88509200       199.32
2014-09-10   199.43   200.20  198.77    200.07   67189500       200.07
2014-09-11   199.27   200.33  199.12    200.30   66774400       200.30
2014-09-12   200.10   200.12  198.56    199.13  117409300       199.13
2014-09-15   199.16   199.32  198.38    198.98   76350000       198.98
2014-09-16   198.61   200.84  198.50    200.48  116070400       200.48

Any ideas?

Best regards,
Samo

2014-09-18 4:55 GMT-04:00 Daniel Cegie?ka <daniel.cegielka at gmail.com>:
> 2014-09-18 9:49 GMT+02:00 Samo Pahor <samo.pahor at gmail.com>:
>> Hi,
>>
>> I am facing issues with downloading historical data from yahoo using
>> quantmod this morning:
>> [1] "BAL"
>> Error in download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
>>   cannot open URL
>> 'http://ichart.finance.yahoo.com/table.csv?s=BAL&a=8&b=17&c=2014&d=8&e=18&f=2014&g=d&q=q&y=0&z=BAL&x=.csv'
>> In addition: Warning message:
>> In download.file(paste(yahoo.URL, "s=", Symbols.name, "&a=", from.m,  :
>>   cannot open: HTTP status was '404 Not Found'
>>
>> To me it looks like yahoo change urls (again?)
>
>> rm(BAL)
>> getSymbols("BAL")
> [1] "BAL"
>> tail(BAL)
>            BAL.Open BAL.High BAL.Low BAL.Close BAL.Volume BAL.Adjusted
> 2014-09-09 43.50 44.23 43.50     44.03      12600        44.03
> 2014-09-10 43.95 45.24 43.95     45.07      30500        45.07
> 2014-09-11    44.67    45.84   44.67     45.69      43000        45.69
> 2014-09-12    45.45    46.04   45.40     45.61      29600        45.61
> 2014-09-15    44.76    44.76   44.00     44.17      13500        44.17
> 2014-09-16    43.99    44.13   43.83     44.04       8900        44.04
>
> looks ok.
>
> Best regards,
> Daniel


From daniel.cegielka at gmail.com  Thu Sep 18 11:43:41 2014
From: daniel.cegielka at gmail.com (=?UTF-8?Q?Daniel_Cegie=C5=82ka?=)
Date: Thu, 18 Sep 2014 11:43:41 +0200
Subject: [R-SIG-Finance] quantmod and yahoo historical data download
 error - did yahoo changed the url?
In-Reply-To: <CAFNBy2k9c-pb743QAS7R5aAd8Up8U3jQStbaYqynAg-bPp15hQ@mail.gmail.com>
References: <CAFNBy2kc9gC9DvyrSRv_noUV=7pG6vTEHM=Ucn3xno9hVTtW-g@mail.gmail.com>
	<CAPLrYEQWobVfbq4NuGX8hOTYmx45G97NgVzcm1tCCtUp7VaXxA@mail.gmail.com>
	<CAFNBy2k9c-pb743QAS7R5aAd8Up8U3jQStbaYqynAg-bPp15hQ@mail.gmail.com>
Message-ID: <CAPLrYETqkVeRnnHyojP+9vSiBrmeNST0eF2wzGKYe+sQ+zNZkw@mail.gmail.com>

it seems that these dates are not available.

Instead from="2014-09-17", to="2014-09-18":

> rm(SPY)
> getSymbols("SPY", from="2014-09-14", to="2014-09-16")
[1] "SPY"
> SPY
           SPY.Open SPY.High SPY.Low SPY.Close SPY.Volume SPY.Adjusted
2014-09-15   199.16   199.32  198.38    198.98   76350000       198.98
2014-09-16   198.61   200.84  198.50    200.48  116070400       200.48

Daniel


From Philipp_Lammers at gmx.de  Thu Sep 18 13:32:20 2014
From: Philipp_Lammers at gmx.de (Philipp Lammers)
Date: Thu, 18 Sep 2014 13:32:20 +0200
Subject: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
In-Reply-To: <541AA2B1.2030202@4dscape.com>
References: <004501cfd313$1e9fc420$5bdf4c60$@de> <541A912C.9080202@4dscape.com>
	<004a01cfd31c$89e22d00$9da68700$@de> <541AA2B1.2030202@4dscape.com>
Message-ID: <006001cfd334$3cfb8370$b6f28a50$@de>

Dear Alexios,

thank you for taking your time to help me.
Now I receive the exact results as you do.

But there is still a difference in the estimation of the external
parameters, if the ARMAX-GARCH is regarded. Is this due to the limited
asymptotic efficiency you mentioned?

Thank you.

Regards,

Philipp 


-----Urspr?ngliche Nachricht-----
Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
Gesendet: Donnerstag, 18. September 2014 11:15
An: Philipp Lammers; r-sig-finance at r-project.org
Cc: alexios at 4dscape.com
Betreff: Re: AW: [R-SIG-Finance] Problem with estimation results of
ARMAX-GARCHX

Philipp,

I've checked your data and here are my comments:

>
spec <- arfimaspec(mean.model = list(armaOrder = c(1,
1),include.mean=FALSE,arfima=FALSE,
external.regressors=X),distribution.model ="norm")
setbounds(spec)<-list(mxreg1=c(-2,2), mxreg2=c(-2,2), mxreg3=c(-2,2))
fit1 <- arfimafit(spec,data=P)
fit2 = arima(P, order=c(1,0,1), method="ML",xreg=X, include.mean=FALSE)

cbind(c(coef(fit1),"LLH"=likelihood(fit1)), c(coef(fit2),
"sigma"=sqrt(fit2$sigma2), "LLH"=fit2$loglik))

ar1       0.22517917    0.22668311
ma1      -0.99999998   -0.99999860
mxreg1    1.39220340    1.35950370
mxreg2   -0.04714268   -0.04866735
mxreg3    0.03632310    0.03341936
sigma     0.34747055    0.34745002
LLH    -247.51441921 -250.50795353

As far as the pure arma estimation goes, I don't see any problems here.
rugarch and arima are identical (small difference which gives a higher
likelihood to the rugarch estimation is probably down to start-up recursion
method).

As regards the ARMA-GARCH model:

spec <- ugarchspec(mean.model = list(armaOrder = c(1,
1),include.mean=FALSE,arfima=FALSE,
external.regressors=X),distribution.model ="norm")
fit3 <- ugarchfit(spec,data=P)


data.frame("ARMA-GARCH"=c(coef(fit3), "LLH"=likelihood(fit3)))

          ARMA.GARCH
ar1      0.709683664
ma1     -0.997124020
mxreg1   0.448243364
mxreg2  -0.031824864
mxreg3  -0.016998532
omega    0.001552758
alpha1   0.315193600
beta1    0.241478834
LLH    942.895313178

The log-likelihood is significantly higher, but the GARCH persistence is not
very high. If you look at your dataset (P), you have a HUGE spike/outlier.
Try removing that and re-test for heteroscedasticity...but I am guessing
that you already know all this since you must have learned it in class?

Alexios

On 18/09/2014 11:42, Philipp Lammers wrote:
> Dear Alexios,
> 
> thank you for your help. Now, I get decent results for AR and MA part 
> from ugarchfit. These are approximately the same as for arima(). 
> Nevertheless, the results for the exogenous variables added are still 
> different between the two functions.
> 
> I attachted the data in a .csv file.
> 
> Regards,
> 
> Philipp
> 
> -----Urspr?ngliche Nachricht-----
> Von: alexios ghalalanos [mailto:alexios at 4dscape.com]
> Gesendet: Donnerstag, 18. September 2014 10:01
> An: Philipp Lammers; r-sig-finance at r-project.org
> Cc: alexios at 4dscape.com
> Betreff: Re: [R-SIG-Finance] Problem with estimation results of 
> ARMAX-GARCHX
> 
> Philipp,
> 
> In the presence of heteroscedasticity, there is a loss in the 
> asymptotic efficiency of the parameter estimates which are no longer 
> BLUE (see the original ARCH paper by Engle 1982). This effectively 
> means that for most datasets of length N (where N is some finite 
> number), the parameters will be somewhat different.
> In the rugarch package, ARMA-GARCH is jointly estimated.
> 
> If you want to compare non-GARCH ARMA with the typical arima function 
> in R, use the arfimaspec/arfimafit functions (or set the ugarchspec 
> garchOrder to
> c(0,0) and the stationarity flag in the fit.control to 0).
> You should also choose method="ML" for arima.
> 
> Regards,
> 
> Alexios
> 
> PS I could not download your dataset from dropbox (only the code).
> 
> On 18/09/2014 10:35, Philipp Lammers wrote:
>> Hello everybody,
>>
>>  
>>
>> I am currently facing an estimation problem in the ARMAX-GARCHX model. 
>> The "rugarch"-package is used for estimation. The problem arises 
>> because my professor is not satisfied with the estimation results, he 
>> expects the ARMAX-GARCH results in the mean equation to be the same 
>> as the normal ARMAX results. But this is not the case and the results 
>> differ
> significantly.
>>
>>  
>>
>> I already wrote to the programmer of the rugarch package, who 
>> thankfully gave me a hint , that the results are different under the 
>> presence of heteroskedasticity. He recommended me to post to this 
>> mailing list. Can anybody confirm that the results are different?
>> Where can I find this issue in the literature?
>>
>>  
>>
>> My R-code can be downloaded from my Dropbox:
>> https://www.dropbox.com/s/k557ev4lmmnykqu/ARMAGARCH.R?dl=0 .Note that 
>> the corresponding data will be downloaded from the Dropbox as well, 
>> when the code is executed.
>>
>>  
>>
>> I hope that you can help me.
>>
>>  
>>
>> Thank you all in advance.
>>
>>  
>>
>> Philipp Lammers
>>
>>  
>>
>>
>> 	[[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list 
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R 
>> questions
> should go.
>>


From alexios at 4dscape.com  Thu Sep 18 13:48:21 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Thu, 18 Sep 2014 14:48:21 +0300
Subject: [R-SIG-Finance] Problem with estimation results of ARMAX-GARCHX
In-Reply-To: <006001cfd334$3cfb8370$b6f28a50$@de>
References: <004501cfd313$1e9fc420$5bdf4c60$@de> <541A912C.9080202@4dscape.com>
	<004a01cfd31c$89e22d00$9da68700$@de> <541AA2B1.2030202@4dscape.com>
	<006001cfd334$3cfb8370$b6f28a50$@de>
Message-ID: <B36123F1-C013-479C-AE89-0B07CC8C6921@4dscape.com>

I think I've already answered that question and also provided a reference which you can consult (apart from the myriad resources on the internet with regards to this).

Regards,

Alexios

> On 18 Sep 2014, at 14:32, "Philipp Lammers" <Philipp_Lammers at gmx.de> wrote:
> 
> Dear Alexios,
> 
> thank you for taking your time to help me.
> Now I receive the exact results as you do.
> 
> But there is still a difference in the estimation of the external
> parameters, if the ARMAX-GARCH is regarded. Is this due to the limited
> asymptotic efficiency you mentioned?
> 
> Thank you.
> 
> Regards,
> 
> Philipp 
> 
> 
> -----Urspr?ngliche Nachricht-----
> Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
> Gesendet: Donnerstag, 18. September 2014 11:15
> An: Philipp Lammers; r-sig-finance at r-project.org
> Cc: alexios at 4dscape.com
> Betreff: Re: AW: [R-SIG-Finance] Problem with estimation results of
> ARMAX-GARCHX
> 
> Philipp,
> 
> I've checked your data and here are my comments:
> 
>> 
> spec <- arfimaspec(mean.model = list(armaOrder = c(1,
> 1),include.mean=FALSE,arfima=FALSE,
> external.regressors=X),distribution.model ="norm")
> setbounds(spec)<-list(mxreg1=c(-2,2), mxreg2=c(-2,2), mxreg3=c(-2,2))
> fit1 <- arfimafit(spec,data=P)
> fit2 = arima(P, order=c(1,0,1), method="ML",xreg=X, include.mean=FALSE)
> 
> cbind(c(coef(fit1),"LLH"=likelihood(fit1)), c(coef(fit2),
> "sigma"=sqrt(fit2$sigma2), "LLH"=fit2$loglik))
> 
> ar1       0.22517917    0.22668311
> ma1      -0.99999998   -0.99999860
> mxreg1    1.39220340    1.35950370
> mxreg2   -0.04714268   -0.04866735
> mxreg3    0.03632310    0.03341936
> sigma     0.34747055    0.34745002
> LLH    -247.51441921 -250.50795353
> 
> As far as the pure arma estimation goes, I don't see any problems here.
> rugarch and arima are identical (small difference which gives a higher
> likelihood to the rugarch estimation is probably down to start-up recursion
> method).
> 
> As regards the ARMA-GARCH model:
> 
> spec <- ugarchspec(mean.model = list(armaOrder = c(1,
> 1),include.mean=FALSE,arfima=FALSE,
> external.regressors=X),distribution.model ="norm")
> fit3 <- ugarchfit(spec,data=P)
> 
> 
> data.frame("ARMA-GARCH"=c(coef(fit3), "LLH"=likelihood(fit3)))
> 
>          ARMA.GARCH
> ar1      0.709683664
> ma1     -0.997124020
> mxreg1   0.448243364
> mxreg2  -0.031824864
> mxreg3  -0.016998532
> omega    0.001552758
> alpha1   0.315193600
> beta1    0.241478834
> LLH    942.895313178
> 
> The log-likelihood is significantly higher, but the GARCH persistence is not
> very high. If you look at your dataset (P), you have a HUGE spike/outlier.
> Try removing that and re-test for heteroscedasticity...but I am guessing
> that you already know all this since you must have learned it in class?
> 
> Alexios
> 
>> On 18/09/2014 11:42, Philipp Lammers wrote:
>> Dear Alexios,
>> 
>> thank you for your help. Now, I get decent results for AR and MA part 
>> from ugarchfit. These are approximately the same as for arima(). 
>> Nevertheless, the results for the exogenous variables added are still 
>> different between the two functions.
>> 
>> I attachted the data in a .csv file.
>> 
>> Regards,
>> 
>> Philipp
>> 
>> -----Urspr?ngliche Nachricht-----
>> Von: alexios ghalalanos [mailto:alexios at 4dscape.com]
>> Gesendet: Donnerstag, 18. September 2014 10:01
>> An: Philipp Lammers; r-sig-finance at r-project.org
>> Cc: alexios at 4dscape.com
>> Betreff: Re: [R-SIG-Finance] Problem with estimation results of 
>> ARMAX-GARCHX
>> 
>> Philipp,
>> 
>> In the presence of heteroscedasticity, there is a loss in the 
>> asymptotic efficiency of the parameter estimates which are no longer 
>> BLUE (see the original ARCH paper by Engle 1982). This effectively 
>> means that for most datasets of length N (where N is some finite 
>> number), the parameters will be somewhat different.
>> In the rugarch package, ARMA-GARCH is jointly estimated.
>> 
>> If you want to compare non-GARCH ARMA with the typical arima function 
>> in R, use the arfimaspec/arfimafit functions (or set the ugarchspec 
>> garchOrder to
>> c(0,0) and the stationarity flag in the fit.control to 0).
>> You should also choose method="ML" for arima.
>> 
>> Regards,
>> 
>> Alexios
>> 
>> PS I could not download your dataset from dropbox (only the code).
>> 
>>> On 18/09/2014 10:35, Philipp Lammers wrote:
>>> Hello everybody,
>>> 
>>> 
>>> 
>>> I am currently facing an estimation problem in the ARMAX-GARCHX model. 
>>> The "rugarch"-package is used for estimation. The problem arises 
>>> because my professor is not satisfied with the estimation results, he 
>>> expects the ARMAX-GARCH results in the mean equation to be the same 
>>> as the normal ARMAX results. But this is not the case and the results 
>>> differ
>> significantly.
>>> 
>>> 
>>> 
>>> I already wrote to the programmer of the rugarch package, who 
>>> thankfully gave me a hint , that the results are different under the 
>>> presence of heteroskedasticity. He recommended me to post to this 
>>> mailing list. Can anybody confirm that the results are different?
>>> Where can I find this issue in the literature?
>>> 
>>> 
>>> 
>>> My R-code can be downloaded from my Dropbox:
>>> https://www.dropbox.com/s/k557ev4lmmnykqu/ARMAGARCH.R?dl=0 .Note that 
>>> the corresponding data will be downloaded from the Dropbox as well, 
>>> when the code is executed.
>>> 
>>> 
>>> 
>>> I hope that you can help me.
>>> 
>>> 
>>> 
>>> Thank you all in advance.
>>> 
>>> 
>>> 
>>> Philipp Lammers
>>> 
>>> 
>>> 
>>> 
>>>    [[alternative HTML version deleted]]
>>> 
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list 
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R 
>>> questions
>> should go.
>>> 
> 
> 


From zadig_1 at excite.com  Thu Sep 18 19:58:13 2014
From: zadig_1 at excite.com (ce)
Date: Thu, 18 Sep 2014 13:58:13 -0400
Subject: [R-SIG-Finance] ANN ARIMA or ANN ES Examples ?
Message-ID: <20140918135813.3832@web007.roc2.bluetie.com>

Hello,

I am looking for ANN ARIMA or ANN ES ( Artificial Neural Networks Hybrid with ARIMA or Exponential Smoothing ) R examples or packages ?
as referenced in http://cs.uni-muenster.de/Professoren/Lippe/diplomarbeiten/html/eisenbach/Untersuchte%20Artikel/Zhan03.pdf

regard


From josh.m.ulrich at gmail.com  Thu Sep 18 23:04:29 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Thu, 18 Sep 2014 16:04:29 -0500
Subject: [R-SIG-Finance] In highfrequency package `convert` function
 creates folder structure, but no .RData file with TickData.com data
In-Reply-To: <CAH+4RFssCMN0psZkDCSPx=wrLWha-Eg98P1igqMz1rvhAmFM2A@mail.gmail.com>
References: <CAH+4RFssCMN0psZkDCSPx=wrLWha-Eg98P1igqMz1rvhAmFM2A@mail.gmail.com>
Message-ID: <CAPPM_gRy5N=gzh=twOtD7SEaVskARFUaV-Pn6J0hYwvVBCiHrQ@mail.gmail.com>

Nick,

On Thu, Sep 18, 2014 at 12:41 AM, Nick White <n-e-w at qtradr.net> wrote:
> Hi all,
>
> I also raised the following (summarised, but pretty much verbatim) as an
> issue on the highfrequency package's github Issues page... but that doesn't
> appear to get a lot of attention:
>
> https://github.com/jonathancornelissen/highfrequency/issues/3
>
I think the github account was only used for the initial Google Summer
of Code project.  The current code base seems to be on R-Forge:
https://r-forge.r-project.org/projects/highfrequency/

> Here's the same substance:
>
> I am new to using the package. The following issue is with TickData.com
> files.
>
> I have setup the folders with a single day's worth of data for XYZ as per
> the documentation:
>
> from = "2014-09-02";
> to     = "2014-09-02";
> datasource = "~/raw_data";
> datadestination = "~/xts_data"
>
> in ~/raw_data I have placed the files:
>
> XYZ_quotes.asc
> XYZ_trades.asc
>
> which are simply copied and renamed files from my original TickData folder.
> Note, I have *not* extracted these using TickWrite7. These are just the raw
> .asc files from the download directory.
>
> I then run the convert function as follows:
>
>> convert(from=from, to=to, datasource=datasource, datadestination=datadestination, trades = TRUE,quotes = TRUE, ticker="XYZ", dir = TRUE, format = "%d/%m/%Y %H:%M:%OS",extension = "tickdatacom", header = TRUE,  onefile = TRUE )
>
> which begins to run and take some time....but then produces this error:
>
> Error in if (length(c(year, month, day, hour, min, sec)) == 6 && c(year,  :
>   missing value where TRUE/FALSE needed
> In addition: Warning messages:
> 1: In as_numeric(YYYY) : NAs introduced by coercion
> 2: In as_numeric(YYYY) : NAs introduced by coercion
>
> which, when calling traceback produces:
>
>> traceback()
> 7: (function (year = 1970, month = 12, day = 31, hour = 23, min = 59,
>        sec = 59, subsec = 0.99999, tz = "")
>    {
>        if (!missing(sec) && sec%%1 != 0)
>            subsec <- 0
>        sec <- ifelse(year < 1970, sec, sec + subsec)
>        mon.lengths <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,
>            30, 31)
>        if (missing(day)) {
>            day <- ifelse(month %in% 2, ifelse(((year%%4 %in% 0 &
>                !year%%100 %in% 0) | (year%%400 %in% 0)), 29, 28),
>                mon.lengths[month])
>        }
>        if (length(c(year, month, day, hour, min, sec)) == 6 && c(year,
>            month, day, hour, min, sec) == c(1969, 12, 31, 23, 59,
>            59) && Sys.getenv("TZ") %in% c("", "GMT", "UTC"))
>            sec <- sec - 1
>        ISOdatetime(year, month, day, hour, min, sec, tz)
>    })(year = NA_real_, tz = "GMT")
> 6: do.call(lastof, parse.side(intervals[2], intervals[1]))
> 5: as.POSIXlt(do.call(lastof, parse.side(intervals[2], intervals[1])))
> 4: .parseISO8601(ii, .index(x)[1], .index(x)[nr], tz = tz)
> 3: `[.xts`(alldata, as.character(dates[i]))
> 2: alldata[as.character(dates[i])]
> 1: convert(from = from, to = to, datasource = datasource,
> datadestination = datadestination,
>        trades = TRUE, quotes = TRUE, ticker = "XYZ", dir = TRUE,
>        format = "%d/%m/%Y %H:%M:%OS", extension = "tickdatacom",
>        header = TRUE, onefile = TRUE)
>
It's really hard to say without a reproducible example, but the error
occurs either on line 2301 or 2308 of realized.R.  And dates is
defined as:

dates = unique(as.Date(index(alldata)))

which makes me think this is a TZ issue.  The default TZ for as.Date
is "UTC", but the TZ of alldata is likely different.  You could cross
your fingers and run Sys.setenv(TZ="UTC") at the beginning of your R
session and see if that works...

>
> This occurs using extracted .asc files from TickWrite7 both where Date and
> Time field is chosen or where individual Date and Time fields were selected.
>
>
> This also happens whether I extract the files using TW7 or just get use the
> raw files in my TickWrite data download folders as noted above.
>
>
> This is on R3.0.2, x64, Win8.1P, highfrequency v = 0.3
>
>
> Any help v much appreciated.
>
>
> Cheers,
>
> n.
>

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From mcewan.gareth at gmail.com  Fri Sep 19 13:22:49 2014
From: mcewan.gareth at gmail.com (Gareth McEwan)
Date: Fri, 19 Sep 2014 13:22:49 +0200
Subject: [R-SIG-Finance] Different results using "rugarch" and "fGarch"
	packages
Message-ID: <CALGfFMbPZvBOYCHw07_GbzWi-F8kL944j547XMEHSTsNPimJWg@mail.gmail.com>

Hi Alexios

I am modelling the same data and getting vastly different estimates using
"rugarch" package and "fGarch" package (all installs and packages have been
recently downloaded and should be up to date). The data is 242 monthly log
returns in raw log return format (i.e. not multiplied by 100 to get percent
format). I have attached the file for reproducible results.

In estimating an ARMA(2,2)-GARCH(1,1) with "normal" errors, I get the
following output using:

(1) "rugarch" package:
spec <- ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),
          submodel=NULL,external.regressors=NULL,variance.targeting=F),

mean.model=list(armaOrder=c(2,2),include.mean=T,external.regressors=NULL),
          distribution.model="norm")
tempgarch <- ugarchfit(spec=spec,data=ALSI.reg.log.ret,solver="hybrid")
show(tempgarch)

Output:
Optimal Parameters
------------------------------------
              Estimate     Std. Error     t value       Pr(>|t|)
mu         0.015107    0.003310     4.56480      0.000005
ar1         0.561145    0.577557     0.97158      0.331258
ar2        -0.303709    0.526705    -0.57662      0.564195
ma1      -0.629355    0.555266    -1.13343      0.257033
ma2       0.430343    0.511488     0.84135      0.400149
omega   0.000257    0.000343     0.75094      0.452687
alpha1   0.197622    0.148026     1.33505      0.181862
beta1     0.730256    0.228730     3.19265      0.001410

(2) "fGarch" package
garch.fit=garchFit(formula=~arma(2,2)+garch(1,1),data=ALSI.reg.log.ret,cond.dist="norm",trace=F,include.mean=T)
summary(garch.fit)

Output:
Error Analysis:
              Estimate      Std. Error      t value    Pr(>|t|)
mu          0.0368275   0.0070622    5.215      0.000000184 ***
ar1        -0.4909910   0.0955405   -5.139      0.000000276 ***
ar2        -0.8424945   0.0538062  -15.658     < 2e-16 ***
ma1       0.4733331   0.0904955    5.230      0.000000169 ***
ma2       0.8844500   0.0550194   16.075     < 2e-16 ***
omega   0.0003106   0.0001838    1.690      0.0910 .
alpha1   0.3696620   0.1496237    2.471      0.0135 *
beta1     0.5808720   0.1434332    4.050      0.000051267 ***

I am confused as to why the output differs to such a great extent. Any idea
why this is happening?

Thank you very much
Gareth
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140919/e2c28748/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: ALSI Monthly Log Returns.csv
Type: text/csv
Size: 3215 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140919/e2c28748/attachment.bin>

From wlmr at zhaw.ch  Fri Sep 19 13:39:10 2014
From: wlmr at zhaw.ch (Wildi Marc (wlmr))
Date: Fri, 19 Sep 2014 11:39:10 +0000
Subject: [R-SIG-Finance] Different results using "rugarch" and
	"fGarch"	packages
In-Reply-To: <CALGfFMbPZvBOYCHw07_GbzWi-F8kL944j547XMEHSTsNPimJWg@mail.gmail.com>
References: <CALGfFMbPZvBOYCHw07_GbzWi-F8kL944j547XMEHSTsNPimJWg@mail.gmail.com>
Message-ID: <E2339A3600811248AB525B8FAB3A1BCEBBC901DD@srv-mail-121.zhaw.ch>

Here's an explanation:

-ARMA-models are not uniquely identified: x_t-a1x_{t-1}=epsilon_t-a1 epsilon_{t-1} is the same as x_t=epsilon_t i.e. white noise.

-Your two ARMA-models are fakes: both sides of each equality could be simplified (AR- and MA lag polynomials are `almost' identical). Stated otherwise: in both cases you really just have white noise (efficient market hypothesis...)! The spurious differences are due to (generally inocuous) differences in numerical algorithms. Since the estimation problem is nearly singular, you can obtain substantially different estimates depending on the algorithm. Mind you: these estimates are `fakes'.

To summarize: everything's OK. Just simplify your ARMA-model specification.
________________________________
Von: r-sig-finance-bounces at r-project.org [r-sig-finance-bounces at r-project.org]" im Auftrag von "Gareth McEwan [mcewan.gareth at gmail.com]
Gesendet: Freitag, 19. September 2014 13:22
An: r-sig-finance at r-project.org
Betreff: [R-SIG-Finance] Different results using "rugarch" and "fGarch" packages

Hi Alexios

I am modelling the same data and getting vastly different estimates using "rugarch" package and "fGarch" package (all installs and packages have been recently downloaded and should be up to date). The data is 242 monthly log returns in raw log return format (i.e. not multiplied by 100 to get percent format). I have attached the file for reproducible results.

In estimating an ARMA(2,2)-GARCH(1,1) with "normal" errors, I get the following output using:

(1) "rugarch" package:
spec <- ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),
          submodel=NULL,external.regressors=NULL,variance.targeting=F),
          mean.model=list(armaOrder=c(2,2),include.mean=T,external.regressors=NULL),
          distribution.model="norm")
tempgarch <- ugarchfit(spec=spec,data=ALSI.reg.log.ret,solver="hybrid")
show(tempgarch)

Output:
Optimal Parameters
------------------------------------
              Estimate     Std. Error     t value       Pr(>|t|)
mu         0.015107    0.003310     4.56480      0.000005
ar1         0.561145    0.577557     0.97158      0.331258
ar2        -0.303709    0.526705    -0.57662      0.564195
ma1      -0.629355    0.555266    -1.13343      0.257033
ma2       0.430343    0.511488     0.84135      0.400149
omega   0.000257    0.000343     0.75094      0.452687
alpha1   0.197622    0.148026     1.33505      0.181862
beta1     0.730256    0.228730     3.19265      0.001410

(2) "fGarch" package
garch.fit=garchFit(formula=~arma(2,2)+garch(1,1),data=ALSI.reg.log.ret,cond.dist="norm",trace=F,include.mean=T)
summary(garch.fit)

Output:
Error Analysis:
              Estimate      Std. Error      t value    Pr(>|t|)
mu          0.0368275   0.0070622    5.215      0.000000184 ***
ar1        -0.4909910   0.0955405   -5.139      0.000000276 ***
ar2        -0.8424945   0.0538062  -15.658     < 2e-16 ***
ma1       0.4733331   0.0904955    5.230      0.000000169 ***
ma2       0.8844500   0.0550194   16.075     < 2e-16 ***
omega   0.0003106   0.0001838    1.690      0.0910 .
alpha1   0.3696620   0.1496237    2.471      0.0135 *
beta1     0.5808720   0.1434332    4.050      0.000051267 ***

I am confused as to why the output differs to such a great extent. Any idea why this is happening?

Thank you very much
Gareth


	[[alternative HTML version deleted]]


From wlmr at zhaw.ch  Fri Sep 19 13:47:31 2014
From: wlmr at zhaw.ch (Wildi Marc (wlmr))
Date: Fri, 19 Sep 2014 11:47:31 +0000
Subject: [R-SIG-Finance] Different results using "rugarch"
	and	"fGarch"	packages
In-Reply-To: <E2339A3600811248AB525B8FAB3A1BCEBBC901DD@srv-mail-121.zhaw.ch>
References: <CALGfFMbPZvBOYCHw07_GbzWi-F8kL944j547XMEHSTsNPimJWg@mail.gmail.com>,
	<E2339A3600811248AB525B8FAB3A1BCEBBC901DD@srv-mail-121.zhaw.ch>
Message-ID: <E2339A3600811248AB525B8FAB3A1BCEBBC901ED@srv-mail-121.zhaw.ch>

I forgot to mention that you could rely on information criteria (BIC : clearly better than AIC) in order to avoid this kind of identification problems.

To the r-sig list: sorry for posting twice...

Marc
________________________________________
Von: r-sig-finance-bounces at r-project.org [r-sig-finance-bounces at r-project.org]&quot; im Auftrag von &quot;Wildi Marc (wlmr) [wlmr at zhaw.ch]
Gesendet: Freitag, 19. September 2014 13:39
An: Gareth McEwan; r-sig-finance at r-project.org
Betreff: Re: [R-SIG-Finance] Different results using "rugarch" and      "fGarch"        packages

Here's an explanation:

-ARMA-models are not uniquely identified: x_t-a1x_{t-1}=epsilon_t-a1 epsilon_{t-1} is the same as x_t=epsilon_t i.e. white noise.

-Your two ARMA-models are fakes: both sides of each equality could be simplified (AR- and MA lag polynomials are `almost' identical). Stated otherwise: in both cases you really just have white noise (efficient market hypothesis...)! The spurious differences are due to (generally inocuous) differences in numerical algorithms. Since the estimation problem is nearly singular, you can obtain substantially different estimates depending on the algorithm. Mind you: these estimates are `fakes'.

To summarize: everything's OK. Just simplify your ARMA-model specification.
________________________________
Von: r-sig-finance-bounces at r-project.org [r-sig-finance-bounces at r-project.org]" im Auftrag von "Gareth McEwan [mcewan.gareth at gmail.com]
Gesendet: Freitag, 19. September 2014 13:22
An: r-sig-finance at r-project.org
Betreff: [R-SIG-Finance] Different results using "rugarch" and "fGarch" packages

Hi Alexios

I am modelling the same data and getting vastly different estimates using "rugarch" package and "fGarch" package (all installs and packages have been recently downloaded and should be up to date). The data is 242 monthly log returns in raw log return format (i.e. not multiplied by 100 to get percent format). I have attached the file for reproducible results.

In estimating an ARMA(2,2)-GARCH(1,1) with "normal" errors, I get the following output using:

(1) "rugarch" package:
spec <- ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),
          submodel=NULL,external.regressors=NULL,variance.targeting=F),
          mean.model=list(armaOrder=c(2,2),include.mean=T,external.regressors=NULL),
          distribution.model="norm")
tempgarch <- ugarchfit(spec=spec,data=ALSI.reg.log.ret,solver="hybrid")
show(tempgarch)

Output:
Optimal Parameters
------------------------------------
              Estimate     Std. Error     t value       Pr(>|t|)
mu         0.015107    0.003310     4.56480      0.000005
ar1         0.561145    0.577557     0.97158      0.331258
ar2        -0.303709    0.526705    -0.57662      0.564195
ma1      -0.629355    0.555266    -1.13343      0.257033
ma2       0.430343    0.511488     0.84135      0.400149
omega   0.000257    0.000343     0.75094      0.452687
alpha1   0.197622    0.148026     1.33505      0.181862
beta1     0.730256    0.228730     3.19265      0.001410

(2) "fGarch" package
garch.fit=garchFit(formula=~arma(2,2)+garch(1,1),data=ALSI.reg.log.ret,cond.dist="norm",trace=F,include.mean=T)
summary(garch.fit)

Output:
Error Analysis:
              Estimate      Std. Error      t value    Pr(>|t|)
mu          0.0368275   0.0070622    5.215      0.000000184 ***
ar1        -0.4909910   0.0955405   -5.139      0.000000276 ***
ar2        -0.8424945   0.0538062  -15.658     < 2e-16 ***
ma1       0.4733331   0.0904955    5.230      0.000000169 ***
ma2       0.8844500   0.0550194   16.075     < 2e-16 ***
omega   0.0003106   0.0001838    1.690      0.0910 .
alpha1   0.3696620   0.1496237    2.471      0.0135 *
beta1     0.5808720   0.1434332    4.050      0.000051267 ***

I am confused as to why the output differs to such a great extent. Any idea why this is happening?

Thank you very much
Gareth


        [[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From alexios at 4dscape.com  Fri Sep 19 14:43:43 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Fri, 19 Sep 2014 15:43:43 +0300
Subject: [R-SIG-Finance] Different results using "rugarch" and "fGarch"
 packages
In-Reply-To: <E2339A3600811248AB525B8FAB3A1BCEBBC901DD@srv-mail-121.zhaw.ch>
References: <CALGfFMbPZvBOYCHw07_GbzWi-F8kL944j547XMEHSTsNPimJWg@mail.gmail.com>
	<E2339A3600811248AB525B8FAB3A1BCEBBC901DD@srv-mail-121.zhaw.ch>
Message-ID: <541C24FF.60409@4dscape.com>

Gareth,

First off, please show the likelihood of the 2 estimated models.

Following up from Marc's comments, there are at least 3 things you
should keep in mind when estimating ARMA models (and detailed in well
over 100 lecture notes/papers on the web):

1. Causality: roots of AR part of ARMA lie outside unit circle
2. Invertibility: roots of MA part of ARMA  lie outside the unit circle.
3. Redundancy: Check that polynomial of ARMA process have no common factor.

A fast way to check all this is to use the very nice function with plot
from fArma:

>fArma::armaRoots(armacoef)


-Alexios


On 19/09/2014 14:39, Wildi Marc (wlmr) wrote:
> Here's an explanation:
> 
> -ARMA-models are not uniquely identified: x_t-a1x_{t-1}=epsilon_t-a1 epsilon_{t-1} is the same as x_t=epsilon_t i.e. white noise.
> 
> -Your two ARMA-models are fakes: both sides of each equality could be simplified (AR- and MA lag polynomials are `almost' identical). Stated otherwise: in both cases you really just have white noise (efficient market hypothesis...)! The spurious differences are due to (generally inocuous) differences in numerical algorithms. Since the estimation problem is nearly singular, you can obtain substantially different estimates depending on the algorithm. Mind you: these estimates are `fakes'.
> 
> To summarize: everything's OK. Just simplify your ARMA-model specification.
> ________________________________
> Von: r-sig-finance-bounces at r-project.org [r-sig-finance-bounces at r-project.org]" im Auftrag von "Gareth McEwan [mcewan.gareth at gmail.com]
> Gesendet: Freitag, 19. September 2014 13:22
> An: r-sig-finance at r-project.org
> Betreff: [R-SIG-Finance] Different results using "rugarch" and "fGarch" packages
> 
> Hi Alexios
> 
> I am modelling the same data and getting vastly different estimates using "rugarch" package and "fGarch" package (all installs and packages have been recently downloaded and should be up to date). The data is 242 monthly log returns in raw log return format (i.e. not multiplied by 100 to get percent format). I have attached the file for reproducible results.
> 
> In estimating an ARMA(2,2)-GARCH(1,1) with "normal" errors, I get the following output using:
> 
> (1) "rugarch" package:
> spec <- ugarchspec(variance.model=list(model="sGARCH",garchOrder=c(1,1),
>           submodel=NULL,external.regressors=NULL,variance.targeting=F),
>           mean.model=list(armaOrder=c(2,2),include.mean=T,external.regressors=NULL),
>           distribution.model="norm")
> tempgarch <- ugarchfit(spec=spec,data=ALSI.reg.log.ret,solver="hybrid")
> show(tempgarch)
> 
> Output:
> Optimal Parameters
> ------------------------------------
>               Estimate     Std. Error     t value       Pr(>|t|)
> mu         0.015107    0.003310     4.56480      0.000005
> ar1         0.561145    0.577557     0.97158      0.331258
> ar2        -0.303709    0.526705    -0.57662      0.564195
> ma1      -0.629355    0.555266    -1.13343      0.257033
> ma2       0.430343    0.511488     0.84135      0.400149
> omega   0.000257    0.000343     0.75094      0.452687
> alpha1   0.197622    0.148026     1.33505      0.181862
> beta1     0.730256    0.228730     3.19265      0.001410
> 
> (2) "fGarch" package
> garch.fit=garchFit(formula=~arma(2,2)+garch(1,1),data=ALSI.reg.log.ret,cond.dist="norm",trace=F,include.mean=T)
> summary(garch.fit)
> 
> Output:
> Error Analysis:
>               Estimate      Std. Error      t value    Pr(>|t|)
> mu          0.0368275   0.0070622    5.215      0.000000184 ***
> ar1        -0.4909910   0.0955405   -5.139      0.000000276 ***
> ar2        -0.8424945   0.0538062  -15.658     < 2e-16 ***
> ma1       0.4733331   0.0904955    5.230      0.000000169 ***
> ma2       0.8844500   0.0550194   16.075     < 2e-16 ***
> omega   0.0003106   0.0001838    1.690      0.0910 .
> alpha1   0.3696620   0.1496237    2.471      0.0135 *
> beta1     0.5808720   0.1434332    4.050      0.000051267 ***
> 
> I am confused as to why the output differs to such a great extent. Any idea why this is happening?
> 
> Thank you very much
> Gareth
> 
> 
> 	[[alternative HTML version deleted]]
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From markknecht at gmail.com  Sat Sep 20 00:13:51 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Fri, 19 Sep 2014 15:13:51 -0700
Subject: [R-SIG-Finance] Duplicated indexes in blotter
Message-ID: <CAK2H+edQHrE6+ZgtEgTCtJ0t0b=80LbZ5ESnYcqW8q++2E543Q@mail.gmail.com>

In the attached code I have 3 transactions on the same date for the
symbol IVOG. When I go to roll up position values this is leading to
duplicate indexes in my xts objects and NA's in other columns, such as
in tempPos.Value:

2014-05-05  55182 45420.0
2014-05-06  54702 45135.0
2014-05-07  63945 68212.5
2014-05-07  73080      NA
2014-05-07  82215      NA
2014-05-08  81747 68025.0
2014-05-09  81891 68040.0
2014-05-12  83448 68985.0

Am I doing something improper in the way I'm entering the transactions
or is this a bug? It's pretty typical that I'll put in a limit order
and it will get filled in pieces with each portion having a different
price.

I could of course figure out by hand what the average price was and
then have a single transaction but I'd like to have what's saved in
the account match what actually happened.

In general I've been fixing these as they pop up using code like:

tempNet.Txn.Value[is.na(tempNet.Txn.Value)] = 0

but I'm finally tired enough of doing that I thought I'd ask if I'm
doing something wrong.

Additionally, I thought one of the things xts was supposed to ensure
against was duplicate indexes so maybe this is me using some older
version? I'm mostly CRAN oriented so if I need to load something else
please let me know.

Thanks,
Mark


library(blotter)
library(quantmod)

MyPortfolios = c("Test1")

MySymbols = list()
MySymbols[[1]]= c("IVOG", "IVOV")

currency("USD")

DataStart = "2014-03-01"
DataEnd = format(Sys.time(), "%Y-%m-%d")
Sys.setenv(TZ = "UTC")

getSymbols(MySymbols[[1]], from=DataStart, to=DataEnd, src="yahoo")

stock(MySymbols[[1]], currency = "USD", multiplier = 1)

suppressWarnings(rm("account.Test1", pos = .blotter))
suppressWarnings(rm("portfolio.Test1", pos = .blotter))

initPortf(MyPortfolios[1], as.list(MySymbols[[1]]), initDate = "2014-01-01")
initAcct("Test1", MyPortfolios, initDate = "2013-06-01", initEq = 1e+06)

addTxn("Test1", Symbol = "IVOG",  TxnDate = "2014-03-25", TxnQty =
600,  TxnPrice = 93.71,   TxnFees = 0, verbose = FALSE)
addTxn("Test1", Symbol = "IVOG",  TxnDate = "2014-05-07", TxnQty =
100,  TxnPrice = 91.08,   TxnFees = 0, verbose = FALSE)
addTxn("Test1", Symbol = "IVOG",  TxnDate = "2014-05-07", TxnQty =
100,  TxnPrice = 91.10,   TxnFees = 0, verbose = FALSE)
addTxn("Test1", Symbol = "IVOG",  TxnDate = "2014-05-07", TxnQty =
100,  TxnPrice = 91.09,   TxnFees = 0, verbose = FALSE)
addTxn("Test1", Symbol = "IVOG",  TxnDate = "2014-08-11", TxnQty =
300,  TxnPrice = 93.93,   TxnFees = 0, verbose = FALSE)

addTxn("Test1", Symbol = "IVOV",  TxnDate = "2014-03-25", TxnQty =
500,  TxnPrice = 90.34,   TxnFees = 0, verbose = FALSE)
addTxn("Test1", Symbol = "IVOV",  TxnDate = "2014-05-07", TxnQty =
250,  TxnPrice = 90.63,   TxnFees = 0, verbose = FALSE)
addTxn("Test1", Symbol = "IVOV",  TxnDate = "2014-08-11", TxnQty =
250,  TxnPrice = 93.27,   TxnFees = 0, verbose = FALSE)

updatePortf(MyPortfolios[1])

updateAcct("Test1")
updateEndEq("Test1")

# Loops appear to be required due to symbol name
# from list being in the middle of the path
# Study later
for (j in 1:length(MyPortfolios)){
  ThisPort = getPortfolio(MyPortfolios[j])
  for (i in 1:length(MySymbols[[j]])){
    ThisSymbol = MySymbols[[j]][i]
    tempVal = ThisPort$symbols[[ThisSymbol]]
    if ((i==1) & (j==1)){
      tempPos.Value       = as.xts(tempVal$posPL$Pos.Value)
      tempNet.Trading.PL  = as.xts(tempVal$posPL$Net.Trading.PL)
      tempNet.Txn.Value   = as.xts(tempVal$posPL$Txn.Value)
    }else{
      tempPos.Value       = cbind(tempPos.Value,
as.xts(tempVal$posPL$Pos.Value))
      tempNet.Trading.PL  = cbind(tempNet.Trading.PL,
as.xts(tempVal$posPL$Net.Trading.PL))
      tempNet.Txn.Value   = cbind(tempNet.Txn.Value,
as.xts(tempVal$posPL$Txn.Value))
    }
  }
}
colnames(tempPos.Value)      =MySymbols[[1]]
colnames(tempNet.Trading.PL) =MySymbols[[1]]
colnames(tempNet.Txn.Value)  =MySymbols[[1]]


From dbrady at pobox.com  Sun Sep 21 06:56:02 2014
From: dbrady at pobox.com (Don Brady)
Date: Sun, 21 Sep 2014 00:56:02 -0400
Subject: [R-SIG-Finance] Rugarch: How to do Iterated n-ahead Multistep
 Out-of-Sample GARCH Forecasts?
Message-ID: <541E5A62.4040502@pobox.com>

What would be the most efficient way to make iterated n-ahead Multistep 
Out-of-Sample GARCH Forecasts using Rugarch?

Let me explain what I mean.

A number of papers on using GARCH describe such a method and call it the 
"iterated" method. (They also say that it works very).
I am trying to use it.

For example, from
"Multi-Period Forecasts of Volatility:Direct, Iterated, and Mixed-Data 
Approaches"
by Eric Ghysels? Antonio Rubia? et al:

"Long horizon volatility forecasts can be constructed in three 
fundamentally different ways.
....... The second approach is to estimate a daily autoregressive 
volatility forecasting model and then
iterate over the daily forecasts for the necessary number of periods to 
obtain weekly, monthly, or quarterly predictions
of the volatility. The forecasting literature refers to the first 
approach as ?direct? and
the second as ?iterated? (Marcellino, Stock, and Watson (2006))."
http://www.unc.edu/~eghysels/papers/Var_9.pdf

I am looking to use this "iterated" approach to make a long term forecast.

The authors do not appear to be referring to a simulation, but rather 
are making an out of sample iterative forecast that ends up cumulatively 
giving them a forecast for up to 30 days ahead.

I can see that this could be done in rugarch by using an R loop, 
stepping forward out of sample one day at a time. At each step of the 
loop, one would call ugarchfit, then call ugarchforecast with a one day 
horizon. Then for the next iteration of the loop in R, one would augment 
the data by the result of the just-performed forecast, and re-fit and 
re-forecast etc.

However, this might be slow so I was just wondering if there is a 
rugarch-built-in way of doing this without needing the outer loop in R.

ugarchforecast does offer n.ahead forecasts, but states that n-step 
ahead (n>1) forecasts are based on the unconditional expectation of the 
models, which does not seem to be the same thing as these authors are 
suggesting.

I just have the feeling that I am missing something.

THANK YOU for any comments and also for providing this incredibly 
comprehensive package!


From zadig_1 at excite.com  Mon Sep 22 03:11:28 2014
From: zadig_1 at excite.com (ce)
Date: Sun, 21 Sep 2014 21:11:28 -0400
Subject: [R-SIG-Finance] What happened to IBrokers Package ?
Message-ID: <20140921211128.24142@web006.roc2.bluetie.com>


Does anybody knows ? Cran doesn't have it anymore: 

Package ?IBrokers? was removed from the CRAN repository.

Formerly available versions can be obtained from the archive.

Archived on 2014-09-19 as vignette locations were never updated for R 3.1.0. 

From jeff.a.ryan at gmail.com  Mon Sep 22 03:45:54 2014
From: jeff.a.ryan at gmail.com (Jeff Ryan)
Date: Sun, 21 Sep 2014 20:45:54 -0500
Subject: [R-SIG-Finance] What happened to IBrokers Package ?
In-Reply-To: <20140921211128.24142@web006.roc2.bluetie.com>
References: <20140921211128.24142@web006.roc2.bluetie.com>
Message-ID: <CABDUZc_D-OLskMotOQq3M1ugjg=5hdOXn8UshVqUWCwvHiJBjw@mail.gmail.com>

Currently accessible on googlecode and/or archive, and will be back on CRAN
after a minor update for CRAN directory layout policies (as the vignette
note below alludes to).

Jeff

On Sun, Sep 21, 2014 at 8:11 PM, ce <zadig_1 at excite.com> wrote:

>
> Does anybody knows ? Cran doesn't have it anymore:
>
> Package ?IBrokers? was removed from the CRAN repository.
>
> Formerly available versions can be obtained from the archive.
>
> Archived on 2014-09-19 as vignette locations were never updated for R
> 3.1.0.
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.

	[[alternative HTML version deleted]]


From alexios at 4dscape.com  Mon Sep 22 04:04:30 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Mon, 22 Sep 2014 05:04:30 +0300
Subject: [R-SIG-Finance] Rugarch: How to do Iterated n-ahead Multistep
	Out-of-Sample GARCH Forecasts?
In-Reply-To: <541E5A62.4040502@pobox.com>
References: <541E5A62.4040502@pobox.com>
Message-ID: <BD158C89-D3E4-4422-9BAF-78243A23A5E3@4dscape.com>

Have a look at the ugarchfilter method (also have a look at the underlying code for ugarchroll for some possible pointers).

Alexios

> On 21 Sep 2014, at 07:56, Don Brady <dbrady at pobox.com> wrote:
> 
> What would be the most efficient way to make iterated n-ahead Multistep Out-of-Sample GARCH Forecasts using Rugarch?
> 
> Let me explain what I mean.
> 
> A number of papers on using GARCH describe such a method and call it the "iterated" method. (They also say that it works very).
> I am trying to use it.
> 
> For example, from
> "Multi-Period Forecasts of Volatility:Direct, Iterated, and Mixed-Data Approaches"
> by Eric Ghysels? Antonio Rubia? et al:
> 
> "Long horizon volatility forecasts can be constructed in three fundamentally different ways.
> ....... The second approach is to estimate a daily autoregressive volatility forecasting model and then
> iterate over the daily forecasts for the necessary number of periods to obtain weekly, monthly, or quarterly predictions
> of the volatility. The forecasting literature refers to the first approach as ?direct? and
> the second as ?iterated? (Marcellino, Stock, and Watson (2006))."
> http://www.unc.edu/~eghysels/papers/Var_9.pdf
> 
> I am looking to use this "iterated" approach to make a long term forecast.
> 
> The authors do not appear to be referring to a simulation, but rather are making an out of sample iterative forecast that ends up cumulatively giving them a forecast for up to 30 days ahead.
> 
> I can see that this could be done in rugarch by using an R loop, stepping forward out of sample one day at a time. At each step of the loop, one would call ugarchfit, then call ugarchforecast with a one day horizon. Then for the next iteration of the loop in R, one would augment the data by the result of the just-performed forecast, and re-fit and re-forecast etc.
> 
> However, this might be slow so I was just wondering if there is a rugarch-built-in way of doing this without needing the outer loop in R.
> 
> ugarchforecast does offer n.ahead forecasts, but states that n-step ahead (n>1) forecasts are based on the unconditional expectation of the models, which does not seem to be the same thing as these authors are suggesting.
> 
> I just have the feeling that I am missing something.
> 
> THANK YOU for any comments and also for providing this incredibly comprehensive package!
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From josh.m.ulrich at gmail.com  Mon Sep 22 14:13:47 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Mon, 22 Sep 2014 07:13:47 -0500
Subject: [R-SIG-Finance] What happened to IBrokers Package ?
In-Reply-To: <CABDUZc_D-OLskMotOQq3M1ugjg=5hdOXn8UshVqUWCwvHiJBjw@mail.gmail.com>
References: <20140921211128.24142@web006.roc2.bluetie.com>
	<CABDUZc_D-OLskMotOQq3M1ugjg=5hdOXn8UshVqUWCwvHiJBjw@mail.gmail.com>
Message-ID: <CAPPM_gRc9AVczVvLX40GW3V+ikEAdmwDk+vwBwjrs9CjhFMZtw@mail.gmail.com>

Back on CRAN now.
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Sun, Sep 21, 2014 at 8:45 PM, Jeff Ryan <jeff.a.ryan at gmail.com> wrote:
> Currently accessible on googlecode and/or archive, and will be back on CRAN
> after a minor update for CRAN directory layout policies (as the vignette
> note below alludes to).
>
> Jeff
>
> On Sun, Sep 21, 2014 at 8:11 PM, ce <zadig_1 at excite.com> wrote:
>
>>
>> Does anybody knows ? Cran doesn't have it anymore:
>>
>> Package ?IBrokers? was removed from the CRAN repository.
>>
>> Formerly available versions can be obtained from the archive.
>>
>> Archived on 2014-09-19 as vignette locations were never updated for R
>> 3.1.0.
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From teamtraders3564 at gmail.com  Tue Sep 23 02:36:00 2014
From: teamtraders3564 at gmail.com (Jason Eyerly)
Date: Mon, 22 Sep 2014 17:36:00 -0700
Subject: [R-SIG-Finance] Calculating Proportions & Appending New Column?
Message-ID: <FFB12840-134C-4605-9D09-D82D5110B796@gmail.com>

Hello Folks,
	I?m doing a study for a coursera Data Science class, and I am trying to determine if American?s financial satisfaction has any correlation to the percentage return of the S&P500 in the year prior. I have to calculate the proportion of "Satisfied" and "More Or Less" compared to the total number of observations for year "X", starting at 1989. After computing that for each year, I need to place them in a column at the end of the dataset similar to what we see with "PercentChange?. However, the years only go from 1989 - 2012. Calculating it for each observation seems tedious and inefficient. The end result is a chart where the X-Axis is each different percent change, and the Y-Axis is the proportion that are satisfied. What's the most efficient way to do this? Sorry for posting all of my code, but I don?t know what?s important and what isn?t. I realize I probably didn?t code everything in the most efficient way possible.

require(Quandl)
require(lubridate)
require(zoo)
require(xts)

myGSS <- load(url("http://bit.ly/dasi_gss_data"))

year <- gss$year
finSat <- gss$satfin

relativeTable <- data.frame(year, finSat)
relativeTable <- subset(relativeTable, year > "1988" & !is.na(finSat))


spReturns <- Quandl("SANDP/ANNRETS", trim_start="1970-01-11", 
                    trim_end="2012-12-31", authcode="nwy3a_Gmd7TSS9fVirxT", 
                    collapse="annual")

percentChange <- spReturns$"Total Return Change"

spReturns$"Year Ending" <- format((spReturns$"Year Ending"), "%Y")
spReturns$"Year Ending" <- as.numeric(spReturns$"Year Ending")
spReturns$"Year Ending" <- spReturns[,1] + 1 #the following year

combined <- merge(relativeTable, spReturns, by.x = "year", by.y = "Year Ending")
names(combined)[6] <- "percentChange"

finalResults <- data.frame(combined$year, combined$finSat, combined$percentChange)
names(finalResults)[1] <- "Year"
names(finalResults)[2] <- "FinancialSatisfaction"
names(finalResults)[3] <- "PercentChange"

finalResults$PercentChange <- finalResults$PercentChange * 100

Regards,
    Jason E.
	[[alternative HTML version deleted]]


From ilya.kipnis at gmail.com  Tue Sep 23 02:37:48 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Mon, 22 Sep 2014 20:37:48 -0400
Subject: [R-SIG-Finance] Calculating Proportions & Appending New Column?
In-Reply-To: <FFB12840-134C-4605-9D09-D82D5110B796@gmail.com>
References: <FFB12840-134C-4605-9D09-D82D5110B796@gmail.com>
Message-ID: <CA+oJuEF9vVPTpz5XVrYas_fNvM5HbvK51EUVtqu0ki0SLzh8mA@mail.gmail.com>

Jason,

This isn't a finance problem. This is the wrong list to post on. Does your
class have a discussion forum?

-Ilya

On Mon, Sep 22, 2014 at 8:36 PM, Jason Eyerly <teamtraders3564 at gmail.com>
wrote:

> Hello Folks,
>         I?m doing a study for a coursera Data Science class, and I am
> trying to determine if American?s financial satisfaction has any
> correlation to the percentage return of the S&P500 in the year prior. I
> have to calculate the proportion of "Satisfied" and "More Or Less" compared
> to the total number of observations for year "X", starting at 1989. After
> computing that for each year, I need to place them in a column at the end
> of the dataset similar to what we see with "PercentChange?. However, the
> years only go from 1989 - 2012. Calculating it for each observation seems
> tedious and inefficient. The end result is a chart where the X-Axis is each
> different percent change, and the Y-Axis is the proportion that are
> satisfied. What's the most efficient way to do this? Sorry for posting all
> of my code, but I don?t know what?s important and what isn?t. I realize I
> probably didn?t code everything in the most efficient way possible.
>
> require(Quandl)
> require(lubridate)
> require(zoo)
> require(xts)
>
> myGSS <- load(url("http://bit.ly/dasi_gss_data"))
>
> year <- gss$year
> finSat <- gss$satfin
>
> relativeTable <- data.frame(year, finSat)
> relativeTable <- subset(relativeTable, year > "1988" & !is.na(finSat))
>
>
> spReturns <- Quandl("SANDP/ANNRETS", trim_start="1970-01-11",
>                     trim_end="2012-12-31", authcode="nwy3a_Gmd7TSS9fVirxT",
>                     collapse="annual")
>
> percentChange <- spReturns$"Total Return Change"
>
> spReturns$"Year Ending" <- format((spReturns$"Year Ending"), "%Y")
> spReturns$"Year Ending" <- as.numeric(spReturns$"Year Ending")
> spReturns$"Year Ending" <- spReturns[,1] + 1 #the following year
>
> combined <- merge(relativeTable, spReturns, by.x = "year", by.y = "Year
> Ending")
> names(combined)[6] <- "percentChange"
>
> finalResults <- data.frame(combined$year, combined$finSat,
> combined$percentChange)
> names(finalResults)[1] <- "Year"
> names(finalResults)[2] <- "FinancialSatisfaction"
> names(finalResults)[3] <- "PercentChange"
>
> finalResults$PercentChange <- finalResults$PercentChange * 100
>
> Regards,
>     Jason E.
>         [[alternative HTML version deleted]]
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From arnaud.gaboury at gmail.com  Tue Sep 23 10:47:11 2014
From: arnaud.gaboury at gmail.com (arnaud gaboury)
Date: Tue, 23 Sep 2014 10:47:11 +0200
Subject: [R-SIG-Finance] Calculating Proportions & Appending New Column?
In-Reply-To: <CA+oJuEF9vVPTpz5XVrYas_fNvM5HbvK51EUVtqu0ki0SLzh8mA@mail.gmail.com>
References: <FFB12840-134C-4605-9D09-D82D5110B796@gmail.com>
	<CA+oJuEF9vVPTpz5XVrYas_fNvM5HbvK51EUVtqu0ki0SLzh8mA@mail.gmail.com>
Message-ID: <CAK1hC9sUh-BonvkO5t9_FzFp+2nGX1STR9zO7f_sifEv7DBixA@mail.gmail.com>

R-help is what you are looking for:

R-help at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-help

On Tue, Sep 23, 2014 at 2:37 AM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> Jason,
>
> This isn't a finance problem. This is the wrong list to post on. Does your
> class have a discussion forum?
>
> -Ilya
>
> On Mon, Sep 22, 2014 at 8:36 PM, Jason Eyerly <teamtraders3564 at gmail.com>
> wrote:
>
>> Hello Folks,
>>         I?m doing a study for a coursera Data Science class, and I am
>> trying to determine if American?s financial satisfaction has any
>> correlation to the percentage return of the S&P500 in the year prior. I
>> have to calculate the proportion of "Satisfied" and "More Or Less" compared
>> to the total number of observations for year "X", starting at 1989. After
>> computing that for each year, I need to place them in a column at the end
>> of the dataset similar to what we see with "PercentChange?. However, the
>> years only go from 1989 - 2012. Calculating it for each observation seems
>> tedious and inefficient. The end result is a chart where the X-Axis is each
>> different percent change, and the Y-Axis is the proportion that are
>> satisfied. What's the most efficient way to do this? Sorry for posting all
>> of my code, but I don?t know what?s important and what isn?t. I realize I
>> probably didn?t code everything in the most efficient way possible.
>>
>> require(Quandl)
>> require(lubridate)
>> require(zoo)
>> require(xts)
>>
>> myGSS <- load(url("http://bit.ly/dasi_gss_data"))
>>
>> year <- gss$year
>> finSat <- gss$satfin
>>
>> relativeTable <- data.frame(year, finSat)
>> relativeTable <- subset(relativeTable, year > "1988" & !is.na(finSat))
>>
>>
>> spReturns <- Quandl("SANDP/ANNRETS", trim_start="1970-01-11",
>>                     trim_end="2012-12-31", authcode="nwy3a_Gmd7TSS9fVirxT",
>>                     collapse="annual")
>>
>> percentChange <- spReturns$"Total Return Change"
>>
>> spReturns$"Year Ending" <- format((spReturns$"Year Ending"), "%Y")
>> spReturns$"Year Ending" <- as.numeric(spReturns$"Year Ending")
>> spReturns$"Year Ending" <- spReturns[,1] + 1 #the following year
>>
>> combined <- merge(relativeTable, spReturns, by.x = "year", by.y = "Year
>> Ending")
>> names(combined)[6] <- "percentChange"
>>
>> finalResults <- data.frame(combined$year, combined$finSat,
>> combined$percentChange)
>> names(finalResults)[1] <- "Year"
>> names(finalResults)[2] <- "FinancialSatisfaction"
>> names(finalResults)[3] <- "PercentChange"
>>
>> finalResults$PercentChange <- finalResults$PercentChange * 100
>>
>> Regards,
>>     Jason E.
>>         [[alternative HTML version deleted]]
>>
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>>
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.



-- 

google.com/+arnaudgabourygabx


From josh.m.ulrich at gmail.com  Wed Sep 24 13:58:38 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Wed, 24 Sep 2014 06:58:38 -0500
Subject: [R-SIG-Finance] Duplicated indexes in blotter
In-Reply-To: <CAK2H+edQHrE6+ZgtEgTCtJ0t0b=80LbZ5ESnYcqW8q++2E543Q@mail.gmail.com>
References: <CAK2H+edQHrE6+ZgtEgTCtJ0t0b=80LbZ5ESnYcqW8q++2E543Q@mail.gmail.com>
Message-ID: <CAPPM_gQakKOTOk0WeUSjg2d0kinwu6DqkZZVWMQ3GP2PQGVLGg@mail.gmail.com>

Hi Mark,

On Fri, Sep 19, 2014 at 5:13 PM, Mark Knecht <markknecht at gmail.com> wrote:
> In the attached code I have 3 transactions on the same date for the
> symbol IVOG. When I go to roll up position values this is leading to
> duplicate indexes in my xts objects and NA's in other columns, such as
> in tempPos.Value:
>
> 2014-05-05  55182 45420.0
> 2014-05-06  54702 45135.0
> 2014-05-07  63945 68212.5
> 2014-05-07  73080      NA
> 2014-05-07  82215      NA
> 2014-05-08  81747 68025.0
> 2014-05-09  81891 68040.0
> 2014-05-12  83448 68985.0
>
> Am I doing something improper in the way I'm entering the transactions
> or is this a bug? It's pretty typical that I'll put in a limit order
> and it will get filled in pieces with each portion having a different
> price.
>
The only thing you might consider improper is that you're using the
same timestamp for each fill, even though they obviously don't have
the same timestamp.

> I could of course figure out by hand what the average price was and
> then have a single transaction but I'd like to have what's saved in
> the account match what actually happened.
>
That argues for keeping the time of the transactions.  You're not
required to mark the book on the same frequency as the transactions.
For example, you can run a backtest on 1-second data, but mark the
book on 1-minute data.

> In general I've been fixing these as they pop up using code like:
>
> tempNet.Txn.Value[is.na(tempNet.Txn.Value)] = 0
>
An alternative would be to specify fill=0 in your call to merge.xts
(called by cbind):
tempPos.Value <- merge(tempPos.Value, tempVal$posPL$Pos.Value, fill=0)

Though I think fill=na.locf makes more sense for Pos.Value...

> but I'm finally tired enough of doing that I thought I'd ask if I'm
> doing something wrong.
>
It's not clear to me what you expect the behavior to be.  You enter
multiple transactions on the same timestamp, and blotter respects
that; it even keeps them in the same order.

If you want tempPos.Value to only have the last observation for each
day, you could use something like:
tpVal <- apply.daily(tempPos.Value, last)

> Additionally, I thought one of the things xts was supposed to ensure
> against was duplicate indexes so maybe this is me using some older
> version? I'm mostly CRAN oriented so if I need to load something else
> please let me know.
>
Neither zoo nor xts (on CRAN or R-Forge) prevent duplicate index values.

> Thanks,
> Mark
>
>
<snip code>

Best,
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From Stefan.Jaeschke at rwe.com  Wed Sep 24 19:01:39 2014
From: Stefan.Jaeschke at rwe.com (Stefan.Jaeschke at rwe.com)
Date: Wed, 24 Sep 2014 17:01:39 +0000
Subject: [R-SIG-Finance] Update of rugarch package yields different results
 / questions on stationarity conditions
Message-ID: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>

Hi there,


1)     I have recently updated the rugarch package to version 1.3-3 (I do not remember the previous number) and I am surprised to see different results when fitting a dataset, the loglikelihood is lower than before and the beta parameters have changed significantly. Below I put the code from the fit


Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", dec=".")
renditen <- Data$LogReturnsWTI
Data_WTI <- renditen
nrenditen = renditen - mean(renditen)
external <- Data$LogReturnsStocks
dim(external) <- c(length(external),1)
mean_WTI <- mean(renditen)

spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = c(2,3), submodel = NULL, external.regressors = NULL, variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), include.mean = FALSE, external.regressors = external), distribution.model = "sged")
fit <- ugarchfit(spec,nrenditen)




likelihood         2326.425          2319.141



mxreg1             -0.3644             -0.3124

omega              -0.3081                 -0.0474

alpha1              -0.1288                 -0.1090

alpha2              -0.1308                0.0644

gamma1           0.2575                   0.2189

gamma2           0.2340                  -0.1441

beta1                -0.6917             0.9999

beta2                0.9764              0.4135

beta3                0.6738              -0.4199

skew                0.9659             0.9708

shape               1.9107              1.9373

Why do I see these differences?


2)     Why do we need the following two conditions for strict stationarity of an EGARCH(q,p) model? I do refer to the ARMA representation in Nelson (1991), Equation (2.3)



a)     min(Mod(polyroot(c(1, -betas)))) > 1



b)    |beta_i| < 1, i = 1,...,p



Whereas condition a) is clear to me (stationarity of AR processes), I don't see we should restrict the parameter |beta_i| < 1. Could somewhen help on that? Why are the parameters regarding q not involved in the conditions at all?


3)     In general, I am aware of conditions for stationarity for conditional mean processes (e.g. ARMA-models) or conditional variance processes (e.g. GARCH-models). I am struggling a bit to find sufficient conditions for (strikt) stationarity in case of combinations. For instance, an ARMA(1,0)-GARCH(1,1) or ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for mean/variance separately and join them in the end? They should interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.

Many thanks in advance!

Mit freundlichen Gr??en / Kind regards

Stefan J?schke
RWE Supply & Trading GmbH
Performance Controlling CAO Gas & VAC (MFC-GV)
Altenessener Str. 27
45141 Essen
Germany
Phone                      +49 201 5179-1674
Email                      stefan.jaeschke at rwe.com<mailto:stefan.jaeschke at rwe.com>
____________________________________________________

Supervisory Board: Peter Terium (Chairman)
Management Board:
Stefan Judisch (CEO),
Dr Markus Krebber, Alan Robinson
Headquarters: Essen
Registered at Local District Court, Essen
Commercial Registry No.: HRB 14327
Sales Tax ID No.: DE 8130 22 070

Please consider the environment before printing this e-mail



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140924/7813535c/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: WTI_logreturnsUS.csv
Type: application/octet-stream
Size: 54675 bytes
Desc: WTI_logreturnsUS.csv
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140924/7813535c/attachment.obj>

From alexios at 4dscape.com  Wed Sep 24 19:29:59 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Wed, 24 Sep 2014 20:29:59 +0300
Subject: [R-SIG-Finance] Update of rugarch package yields different
 results / questions on stationarity conditions
In-Reply-To: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
Message-ID: <5422FF97.1090000@4dscape.com>

Unless you tell us what the previous version you had installed was, I
really can't say for sure.

1. Is for the stationarity of the eGARCH model.
2. Are the parameter bounds.

You are free to change both:
1. can be switched off by setting fit.control$stationarity=0
2. can be changes to whatever you want by using the setbounds<- method
on the specification.

As far as I know, you can take the ARMA and GARCH stationarity
conditions separately, as you can also estimate them in 2 steps
without too much loss in efficiency. If you want to see the degree of
interaction between the 2, then use the ugarchdistribution method which
includes a number of interesting parameter interaction plots (and you
can also investigate others by working with the returned parameter
distribution data).

If you feel there is some bug somewhere in the code or you have some
suggestion how to make the estimation of a certain model 'better', then
by all means feel free to contribute a detailed patch.

-Alexios


On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
> Hi there,
> 
>  
> 
> 1)     I have recently updated the rugarch package to version 1.3-3 (I
> do not remember the previous number) and I am surprised to see different
> results when fitting a dataset, the loglikelihood is lower than before
> and the beta parameters have changed significantly. Below I put the code
> from the fit
> 
>  
> 
> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", dec=".")
> 
> renditen <- Data$LogReturnsWTI
> 
> Data_WTI <- renditen
> 
> nrenditen = renditen - mean(renditen)
> 
> external <- Data$LogReturnsStocks
> 
> dim(external) <- c(length(external),1)
> 
> mean_WTI <- mean(renditen)
> 
>  
> 
> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder =
> c(2,3), submodel = NULL, external.regressors = NULL, variance.targeting
> = FALSE), mean.model =list(armaOrder = c(0, 0), include.mean = FALSE,
> external.regressors = external), distribution.model = "sged")
> 
> fit <- ugarchfit(spec,nrenditen)
> 
>  
> 
>  
> 
> likelihood         2326.425          2319.141
> 
>                        
> 
> mxreg1             -0.3644             -0.3124
> 
> omega              -0.3081                -0.0474
> 
> alpha1              -0.1288                -0.1090
> 
> alpha2              -0.1308                0.0644
> 
> gamma1           0.2575                  0.2189
> 
> gamma2           0.2340                  -0.1441
> 
> beta1                -0.6917             0.9999
> 
> beta2                0.9764              0.4135
> 
> beta3                0.6738              -0.4199
> 
> skew                0.9659             0.9708
> 
> shape               1.9107              1.9373
> 
>  
> 
> Why do I see these differences?
> 
>  
> 
> 2)     Why do we need the following two conditions for strict
> stationarity of an EGARCH(q,p) model? I do refer to the ARMA
> representation in Nelson (1991), Equation (2.3)
> 
>  
> 
> a)     min(Mod(polyroot(c(1, -betas)))) > 1
> 
>  
> 
> b)    |beta_i| < 1, i = 1,?,p
> 
>  
> 
> Whereas condition a) is clear to me (stationarity of AR processes), I
> don?t see we should restrict the parameter |beta_i| < 1. Could somewhen
> help on that? Why are the parameters regarding q not involved in the
> conditions at all?
> 
>  
> 
> 3)     In general, I am aware of conditions for stationarity for
> conditional mean processes (e.g. ARMA-models) or conditional variance
> processes (e.g. GARCH-models). I am struggling a bit to find sufficient
> conditions for (strikt) stationarity in case of combinations. For
> instance, an ARMA(1,0)-GARCH(1,1) or ARMA(0,1)-EGARCH(2,3) model. Can I
> take the conditions for mean/variance separately and join them in the
> end? They should interact somehow, shouldn?t they? If anybody could help
> me on that, I would be very pleased.
> 
>  
> 
> Many thanks in advance!
> 
>  
> 
> Mit freundlichen Gr??en / Kind regards
> 
>  
> 
> *Stefan J?schke*
> 
> RWE Supply & Trading GmbH
> 
> Performance Controlling CAO Gas & VAC (MFC-GV)
> 
> Altenessener Str. 27
> 
> 45141 Essen
> 
> Germany
> 
> Phone                      +49 201 5179-1674
> 
> Email                      stefan.jaeschke at rwe.com
> <mailto:stefan.jaeschke at rwe.com>
> 
> ____________________________________________________
> 
>  
> 
> Supervisory Board: Peter Terium (Chairman)
> 
> Management Board:
> Stefan Judisch (CEO),
> Dr Markus Krebber, Alan Robinson
> Headquarters: Essen
> Registered at Local District Court, Essen
> Commercial Registry No.: HRB 14327
> Sales Tax ID No.: DE 8130 22 070
> 
>  
> 
> Please consider the environment before printing this e-mail
> 
>  
> 
> 
> 
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>


From alexios at 4dscape.com  Wed Sep 24 19:46:49 2014
From: alexios at 4dscape.com (alexios ghalalanos)
Date: Wed, 24 Sep 2014 20:46:49 +0300
Subject: [R-SIG-Finance] Update of rugarch package yields different
 results / questions on stationarity conditions
In-Reply-To: <5422FF97.1090000@4dscape.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com>
Message-ID: <54230389.3040707@4dscape.com>

If I were to actually use your previous estimates and filter the data
you provided:


>cf=list(mxreg1=-0.3644,
omega=-0.3081,
alpha1=-0.1288,
alpha2=-0.1308,
gamma1=0.2575,
gamma2=0.2340,
beta1=-0.6917,
beta2=0.9764,
beta3=0.6738,
skew=0.9659,
shape=1.9107)

>setfixed(spec)<-cf
> likelihood(ugarchfilter(spec, nrenditen))
[1] 1051.357

This seems much lower and considerably far from what the estimated model
gives. Are you sure you provided us with the correct parameter values
and the same dataset you used before?

-Alexios


On 24/09/2014 20:29, alexios ghalalanos wrote:
> Unless you tell us what the previous version you had installed was, I
> really can't say for sure.
> 
> 1. Is for the stationarity of the eGARCH model.
> 2. Are the parameter bounds.
> 
> You are free to change both:
> 1. can be switched off by setting fit.control$stationarity=0
> 2. can be changes to whatever you want by using the setbounds<- method
> on the specification.
> 
> As far as I know, you can take the ARMA and GARCH stationarity
> conditions separately, as you can also estimate them in 2 steps
> without too much loss in efficiency. If you want to see the degree of
> interaction between the 2, then use the ugarchdistribution method which
> includes a number of interesting parameter interaction plots (and you
> can also investigate others by working with the returned parameter
> distribution data).
> 
> If you feel there is some bug somewhere in the code or you have some
> suggestion how to make the estimation of a certain model 'better', then
> by all means feel free to contribute a detailed patch.
> 
> -Alexios
> 
> 
> On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
>> Hi there,
>>
>>  
>>
>> 1)     I have recently updated the rugarch package to version 1.3-3 (I
>> do not remember the previous number) and I am surprised to see different
>> results when fitting a dataset, the loglikelihood is lower than before
>> and the beta parameters have changed significantly. Below I put the code
>> from the fit
>>
>>  
>>
>> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", dec=".")
>>
>> renditen <- Data$LogReturnsWTI
>>
>> Data_WTI <- renditen
>>
>> nrenditen = renditen - mean(renditen)
>>
>> external <- Data$LogReturnsStocks
>>
>> dim(external) <- c(length(external),1)
>>
>> mean_WTI <- mean(renditen)
>>
>>  
>>
>> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder =
>> c(2,3), submodel = NULL, external.regressors = NULL, variance.targeting
>> = FALSE), mean.model =list(armaOrder = c(0, 0), include.mean = FALSE,
>> external.regressors = external), distribution.model = "sged")
>>
>> fit <- ugarchfit(spec,nrenditen)
>>
>>  
>>
>>  
>>
>> likelihood         2326.425          2319.141
>>
>>                        
>>
>> mxreg1             -0.3644             -0.3124
>>
>> omega              -0.3081                -0.0474
>>
>> alpha1              -0.1288                -0.1090
>>
>> alpha2              -0.1308                0.0644
>>
>> gamma1           0.2575                  0.2189
>>
>> gamma2           0.2340                  -0.1441
>>
>> beta1                -0.6917             0.9999
>>
>> beta2                0.9764              0.4135
>>
>> beta3                0.6738              -0.4199
>>
>> skew                0.9659             0.9708
>>
>> shape               1.9107              1.9373
>>
>>  
>>
>> Why do I see these differences?
>>
>>  
>>
>> 2)     Why do we need the following two conditions for strict
>> stationarity of an EGARCH(q,p) model? I do refer to the ARMA
>> representation in Nelson (1991), Equation (2.3)
>>
>>  
>>
>> a)     min(Mod(polyroot(c(1, -betas)))) > 1
>>
>>  
>>
>> b)    |beta_i| < 1, i = 1,?,p
>>
>>  
>>
>> Whereas condition a) is clear to me (stationarity of AR processes), I
>> don?t see we should restrict the parameter |beta_i| < 1. Could somewhen
>> help on that? Why are the parameters regarding q not involved in the
>> conditions at all?
>>
>>  
>>
>> 3)     In general, I am aware of conditions for stationarity for
>> conditional mean processes (e.g. ARMA-models) or conditional variance
>> processes (e.g. GARCH-models). I am struggling a bit to find sufficient
>> conditions for (strikt) stationarity in case of combinations. For
>> instance, an ARMA(1,0)-GARCH(1,1) or ARMA(0,1)-EGARCH(2,3) model. Can I
>> take the conditions for mean/variance separately and join them in the
>> end? They should interact somehow, shouldn?t they? If anybody could help
>> me on that, I would be very pleased.
>>
>>  
>>
>> Many thanks in advance!
>>
>>  
>>
>> Mit freundlichen Gr??en / Kind regards
>>
>>  
>>
>> *Stefan J?schke*
>>
>> RWE Supply & Trading GmbH
>>
>> Performance Controlling CAO Gas & VAC (MFC-GV)
>>
>> Altenessener Str. 27
>>
>> 45141 Essen
>>
>> Germany
>>
>> Phone                      +49 201 5179-1674
>>
>> Email                      stefan.jaeschke at rwe.com
>> <mailto:stefan.jaeschke at rwe.com>
>>
>> ____________________________________________________
>>
>>  
>>
>> Supervisory Board: Peter Terium (Chairman)
>>
>> Management Board:
>> Stefan Judisch (CEO),
>> Dr Markus Krebber, Alan Robinson
>> Headquarters: Essen
>> Registered at Local District Court, Essen
>> Commercial Registry No.: HRB 14327
>> Sales Tax ID No.: DE 8130 22 070
>>
>>  
>>
>> Please consider the environment before printing this e-mail
>>
>>  
>>
>>
>>
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>>
>


From Stefan.Jaeschke at rwe.com  Wed Sep 24 20:58:47 2014
From: Stefan.Jaeschke at rwe.com (Stefan.Jaeschke at rwe.com)
Date: Wed, 24 Sep 2014 18:58:47 +0000
Subject: [R-SIG-Finance] Update of rugarch package yields different
 results / questions on stationarity conditions
In-Reply-To: <5422FF97.1090000@4dscape.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com>
Message-ID: <D4C25ABF67A47A4BAE99D13FA0B80938190FE8A1@S082A1080.group.rwe.com>

The version was the most updated one during end of October, 2013.

Why are these bounds for beta set to (-1,1)? This has nothing with a stationary constraint, does it? Or would this somehow explode the model?

-----Urspr?ngliche Nachricht-----
Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
Gesendet: Mittwoch, 24. September 2014 19:30
An: J?schke, Stefan; r-sig-finance at r-project.org
Cc: alexios at 4dscape.com
Betreff: Re: [R-SIG-Finance] Update of rugarch package yields different results / questions on stationarity conditions

Unless you tell us what the previous version you had installed was, I really can't say for sure.

1. Is for the stationarity of the eGARCH model.
2. Are the parameter bounds.

You are free to change both:
1. can be switched off by setting fit.control$stationarity=0 2. can be changes to whatever you want by using the setbounds<- method on the specification.

As far as I know, you can take the ARMA and GARCH stationarity conditions separately, as you can also estimate them in 2 steps without too much loss in efficiency. If you want to see the degree of interaction between the 2, then use the ugarchdistribution method which includes a number of interesting parameter interaction plots (and you can also investigate others by working with the returned parameter distribution data).

If you feel there is some bug somewhere in the code or you have some suggestion how to make the estimation of a certain model 'better', then by all means feel free to contribute a detailed patch.

-Alexios


On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
> Hi there,
> 
>  
> 
> 1)     I have recently updated the rugarch package to version 1.3-3 (I
> do not remember the previous number) and I am surprised to see 
> different results when fitting a dataset, the loglikelihood is lower 
> than before and the beta parameters have changed significantly. Below 
> I put the code from the fit
> 
>  
> 
> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", 
> dec=".")
> 
> renditen <- Data$LogReturnsWTI
> 
> Data_WTI <- renditen
> 
> nrenditen = renditen - mean(renditen)
> 
> external <- Data$LogReturnsStocks
> 
> dim(external) <- c(length(external),1)
> 
> mean_WTI <- mean(renditen)
> 
>  
> 
> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = 
> c(2,3), submodel = NULL, external.regressors = NULL, 
> variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), 
> include.mean = FALSE, external.regressors = external), 
> distribution.model = "sged")
> 
> fit <- ugarchfit(spec,nrenditen)
> 
>  
> 
>  
> 
> likelihood         2326.425          2319.141
> 
>                        
> 
> mxreg1             -0.3644             -0.3124
> 
> omega              -0.3081                -0.0474
> 
> alpha1              -0.1288                -0.1090
> 
> alpha2              -0.1308                0.0644
> 
> gamma1           0.2575                  0.2189
> 
> gamma2           0.2340                  -0.1441
> 
> beta1                -0.6917             0.9999
> 
> beta2                0.9764              0.4135
> 
> beta3                0.6738              -0.4199
> 
> skew                0.9659             0.9708
> 
> shape               1.9107              1.9373
> 
>  
> 
> Why do I see these differences?
> 
>  
> 
> 2)     Why do we need the following two conditions for strict
> stationarity of an EGARCH(q,p) model? I do refer to the ARMA 
> representation in Nelson (1991), Equation (2.3)
> 
>  
> 
> a)     min(Mod(polyroot(c(1, -betas)))) > 1
> 
>  
> 
> b)    |beta_i| < 1, i = 1,.,p
> 
>  
> 
> Whereas condition a) is clear to me (stationarity of AR processes), I 
> don't see we should restrict the parameter |beta_i| < 1. Could 
> somewhen help on that? Why are the parameters regarding q not involved 
> in the conditions at all?
> 
>  
> 
> 3)     In general, I am aware of conditions for stationarity for
> conditional mean processes (e.g. ARMA-models) or conditional variance 
> processes (e.g. GARCH-models). I am struggling a bit to find 
> sufficient conditions for (strikt) stationarity in case of 
> combinations. For instance, an ARMA(1,0)-GARCH(1,1) or 
> ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for 
> mean/variance separately and join them in the end? They should 
> interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.
> 
>  
> 
> Many thanks in advance!
> 
>  
> 
> Mit freundlichen Gr??en / Kind regards
> 
>  
> 
> *Stefan J?schke*
> 
> RWE Supply & Trading GmbH
> 
> Performance Controlling CAO Gas & VAC (MFC-GV)
> 
> Altenessener Str. 27
> 
> 45141 Essen
> 
> Germany
> 
> Phone                      +49 201 5179-1674
> 
> Email                      stefan.jaeschke at rwe.com
> <mailto:stefan.jaeschke at rwe.com>
> 
> ____________________________________________________
> 
>  
> 
> Supervisory Board: Peter Terium (Chairman)
> 
> Management Board:
> Stefan Judisch (CEO),
> Dr Markus Krebber, Alan Robinson
> Headquarters: Essen
> Registered at Local District Court, Essen Commercial Registry No.: HRB 
> 14327 Sales Tax ID No.: DE 8130 22 070
> 
>  
> 
> Please consider the environment before printing this e-mail
> 
>  
> 
> 
> 
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list 
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From Stefan.Jaeschke at rwe.com  Wed Sep 24 21:02:10 2014
From: Stefan.Jaeschke at rwe.com (Stefan.Jaeschke at rwe.com)
Date: Wed, 24 Sep 2014 19:02:10 +0000
Subject: [R-SIG-Finance] Update of rugarch package yields different
 results / questions on stationarity conditions
In-Reply-To: <54230389.3040707@4dscape.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com> <54230389.3040707@4dscape.com>
Message-ID: <D4C25ABF67A47A4BAE99D13FA0B80938190FE8B0@S082A1080.group.rwe.com>

Alexios, you provided me with this estimates back in a mail on Tues. 29.10.2013 13:46. And I could reproduce those values, now I am a bit irritated. Unfortunately, I am not able to rebuilt the "old" rugarch version.

-----Urspr?ngliche Nachricht-----
Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
Gesendet: Mittwoch, 24. September 2014 19:47
An: J?schke, Stefan; r-sig-finance at r-project.org
Cc: alexios at 4dscape.com
Betreff: Re: [R-SIG-Finance] Update of rugarch package yields different results / questions on stationarity conditions

If I were to actually use your previous estimates and filter the data you provided:


>cf=list(mxreg1=-0.3644,
omega=-0.3081,
alpha1=-0.1288,
alpha2=-0.1308,
gamma1=0.2575,
gamma2=0.2340,
beta1=-0.6917,
beta2=0.9764,
beta3=0.6738,
skew=0.9659,
shape=1.9107)

>setfixed(spec)<-cf
> likelihood(ugarchfilter(spec, nrenditen))
[1] 1051.357

This seems much lower and considerably far from what the estimated model gives. Are you sure you provided us with the correct parameter values and the same dataset you used before?

-Alexios


On 24/09/2014 20:29, alexios ghalalanos wrote:
> Unless you tell us what the previous version you had installed was, I 
> really can't say for sure.
> 
> 1. Is for the stationarity of the eGARCH model.
> 2. Are the parameter bounds.
> 
> You are free to change both:
> 1. can be switched off by setting fit.control$stationarity=0 2. can be 
> changes to whatever you want by using the setbounds<- method on the 
> specification.
> 
> As far as I know, you can take the ARMA and GARCH stationarity 
> conditions separately, as you can also estimate them in 2 steps 
> without too much loss in efficiency. If you want to see the degree of 
> interaction between the 2, then use the ugarchdistribution method 
> which includes a number of interesting parameter interaction plots 
> (and you can also investigate others by working with the returned 
> parameter distribution data).
> 
> If you feel there is some bug somewhere in the code or you have some 
> suggestion how to make the estimation of a certain model 'better', 
> then by all means feel free to contribute a detailed patch.
> 
> -Alexios
> 
> 
> On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
>> Hi there,
>>
>>  
>>
>> 1)     I have recently updated the rugarch package to version 1.3-3 (I
>> do not remember the previous number) and I am surprised to see 
>> different results when fitting a dataset, the loglikelihood is lower 
>> than before and the beta parameters have changed significantly. Below 
>> I put the code from the fit
>>
>>  
>>
>> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", 
>> dec=".")
>>
>> renditen <- Data$LogReturnsWTI
>>
>> Data_WTI <- renditen
>>
>> nrenditen = renditen - mean(renditen)
>>
>> external <- Data$LogReturnsStocks
>>
>> dim(external) <- c(length(external),1)
>>
>> mean_WTI <- mean(renditen)
>>
>>  
>>
>> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder 
>> = c(2,3), submodel = NULL, external.regressors = NULL, 
>> variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), 
>> include.mean = FALSE, external.regressors = external), 
>> distribution.model = "sged")
>>
>> fit <- ugarchfit(spec,nrenditen)
>>
>>  
>>
>>  
>>
>> likelihood         2326.425          2319.141
>>
>>                        
>>
>> mxreg1             -0.3644             -0.3124
>>
>> omega              -0.3081                -0.0474
>>
>> alpha1              -0.1288                -0.1090
>>
>> alpha2              -0.1308                0.0644
>>
>> gamma1           0.2575                  0.2189
>>
>> gamma2           0.2340                  -0.1441
>>
>> beta1                -0.6917             0.9999
>>
>> beta2                0.9764              0.4135
>>
>> beta3                0.6738              -0.4199
>>
>> skew                0.9659             0.9708
>>
>> shape               1.9107              1.9373
>>
>>  
>>
>> Why do I see these differences?
>>
>>  
>>
>> 2)     Why do we need the following two conditions for strict
>> stationarity of an EGARCH(q,p) model? I do refer to the ARMA 
>> representation in Nelson (1991), Equation (2.3)
>>
>>  
>>
>> a)     min(Mod(polyroot(c(1, -betas)))) > 1
>>
>>  
>>
>> b)    |beta_i| < 1, i = 1,.,p
>>
>>  
>>
>> Whereas condition a) is clear to me (stationarity of AR processes), I 
>> don't see we should restrict the parameter |beta_i| < 1. Could 
>> somewhen help on that? Why are the parameters regarding q not 
>> involved in the conditions at all?
>>
>>  
>>
>> 3)     In general, I am aware of conditions for stationarity for
>> conditional mean processes (e.g. ARMA-models) or conditional variance 
>> processes (e.g. GARCH-models). I am struggling a bit to find 
>> sufficient conditions for (strikt) stationarity in case of 
>> combinations. For instance, an ARMA(1,0)-GARCH(1,1) or 
>> ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for 
>> mean/variance separately and join them in the end? They should 
>> interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.
>>
>>  
>>
>> Many thanks in advance!
>>
>>  
>>
>> Mit freundlichen Gr??en / Kind regards
>>
>>  
>>
>> *Stefan J?schke*
>>
>> RWE Supply & Trading GmbH
>>
>> Performance Controlling CAO Gas & VAC (MFC-GV)
>>
>> Altenessener Str. 27
>>
>> 45141 Essen
>>
>> Germany
>>
>> Phone                      +49 201 5179-1674
>>
>> Email                      stefan.jaeschke at rwe.com
>> <mailto:stefan.jaeschke at rwe.com>
>>
>> ____________________________________________________
>>
>>  
>>
>> Supervisory Board: Peter Terium (Chairman)
>>
>> Management Board:
>> Stefan Judisch (CEO),
>> Dr Markus Krebber, Alan Robinson
>> Headquarters: Essen
>> Registered at Local District Court, Essen Commercial Registry No.: 
>> HRB 14327 Sales Tax ID No.: DE 8130 22 070
>>
>>  
>>
>> Please consider the environment before printing this e-mail
>>
>>  
>>
>>
>>
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list 
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
>>
> 


From alexios at 4dscape.com  Wed Sep 24 21:06:04 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Wed, 24 Sep 2014 22:06:04 +0300
Subject: [R-SIG-Finance] Update of rugarch package yields different
	results / questions on stationarity conditions
In-Reply-To: <D4C25ABF67A47A4BAE99D13FA0B80938190FE8A1@S082A1080.group.rwe.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com>
	<D4C25ABF67A47A4BAE99D13FA0B80938190FE8A1@S082A1080.group.rwe.com>
Message-ID: <A72A0517-8521-4821-AB92-91FBA5F67D98@4dscape.com>

These are default bounds, and sufficient for the (q,1) eGARCH model to be stationary.

Generally, all parameters are given bounds since the optimization is constrained and the solvers used require parameter bounds (where defaults were chosen were possible to speed/ease estimation).

Alexios

> On 24 Sep 2014, at 21:58, <Stefan.Jaeschke at rwe.com> wrote:
> 
> The version was the most updated one during end of October, 2013.
> 
> Why are these bounds for beta set to (-1,1)? This has nothing with a stationary constraint, does it? Or would this somehow explode the model?
> 
> -----Urspr?ngliche Nachricht-----
> Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
> Gesendet: Mittwoch, 24. September 2014 19:30
> An: J?schke, Stefan; r-sig-finance at r-project.org
> Cc: alexios at 4dscape.com
> Betreff: Re: [R-SIG-Finance] Update of rugarch package yields different results / questions on stationarity conditions
> 
> Unless you tell us what the previous version you had installed was, I really can't say for sure.
> 
> 1. Is for the stationarity of the eGARCH model.
> 2. Are the parameter bounds.
> 
> You are free to change both:
> 1. can be switched off by setting fit.control$stationarity=0 2. can be changes to whatever you want by using the setbounds<- method on the specification.
> 
> As far as I know, you can take the ARMA and GARCH stationarity conditions separately, as you can also estimate them in 2 steps without too much loss in efficiency. If you want to see the degree of interaction between the 2, then use the ugarchdistribution method which includes a number of interesting parameter interaction plots (and you can also investigate others by working with the returned parameter distribution data).
> 
> If you feel there is some bug somewhere in the code or you have some suggestion how to make the estimation of a certain model 'better', then by all means feel free to contribute a detailed patch.
> 
> -Alexios
> 
> 
>> On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
>> Hi there,
>> 
>> 
>> 
>> 1)     I have recently updated the rugarch package to version 1.3-3 (I
>> do not remember the previous number) and I am surprised to see 
>> different results when fitting a dataset, the loglikelihood is lower 
>> than before and the beta parameters have changed significantly. Below 
>> I put the code from the fit
>> 
>> 
>> 
>> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", 
>> dec=".")
>> 
>> renditen <- Data$LogReturnsWTI
>> 
>> Data_WTI <- renditen
>> 
>> nrenditen = renditen - mean(renditen)
>> 
>> external <- Data$LogReturnsStocks
>> 
>> dim(external) <- c(length(external),1)
>> 
>> mean_WTI <- mean(renditen)
>> 
>> 
>> 
>> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder = 
>> c(2,3), submodel = NULL, external.regressors = NULL, 
>> variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), 
>> include.mean = FALSE, external.regressors = external), 
>> distribution.model = "sged")
>> 
>> fit <- ugarchfit(spec,nrenditen)
>> 
>> 
>> 
>> 
>> 
>> likelihood         2326.425          2319.141
>> 
>> 
>> 
>> mxreg1             -0.3644             -0.3124
>> 
>> omega              -0.3081                -0.0474
>> 
>> alpha1              -0.1288                -0.1090
>> 
>> alpha2              -0.1308                0.0644
>> 
>> gamma1           0.2575                  0.2189
>> 
>> gamma2           0.2340                  -0.1441
>> 
>> beta1                -0.6917             0.9999
>> 
>> beta2                0.9764              0.4135
>> 
>> beta3                0.6738              -0.4199
>> 
>> skew                0.9659             0.9708
>> 
>> shape               1.9107              1.9373
>> 
>> 
>> 
>> Why do I see these differences?
>> 
>> 
>> 
>> 2)     Why do we need the following two conditions for strict
>> stationarity of an EGARCH(q,p) model? I do refer to the ARMA 
>> representation in Nelson (1991), Equation (2.3)
>> 
>> 
>> 
>> a)     min(Mod(polyroot(c(1, -betas)))) > 1
>> 
>> 
>> 
>> b)    |beta_i| < 1, i = 1,.,p
>> 
>> 
>> 
>> Whereas condition a) is clear to me (stationarity of AR processes), I 
>> don't see we should restrict the parameter |beta_i| < 1. Could 
>> somewhen help on that? Why are the parameters regarding q not involved 
>> in the conditions at all?
>> 
>> 
>> 
>> 3)     In general, I am aware of conditions for stationarity for
>> conditional mean processes (e.g. ARMA-models) or conditional variance 
>> processes (e.g. GARCH-models). I am struggling a bit to find 
>> sufficient conditions for (strikt) stationarity in case of 
>> combinations. For instance, an ARMA(1,0)-GARCH(1,1) or 
>> ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for 
>> mean/variance separately and join them in the end? They should 
>> interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.
>> 
>> 
>> 
>> Many thanks in advance!
>> 
>> 
>> 
>> Mit freundlichen Gr??en / Kind regards
>> 
>> 
>> 
>> *Stefan J?schke*
>> 
>> RWE Supply & Trading GmbH
>> 
>> Performance Controlling CAO Gas & VAC (MFC-GV)
>> 
>> Altenessener Str. 27
>> 
>> 45141 Essen
>> 
>> Germany
>> 
>> Phone                      +49 201 5179-1674
>> 
>> Email                      stefan.jaeschke at rwe.com
>> <mailto:stefan.jaeschke at rwe.com>
>> 
>> ____________________________________________________
>> 
>> 
>> 
>> Supervisory Board: Peter Terium (Chairman)
>> 
>> Management Board:
>> Stefan Judisch (CEO),
>> Dr Markus Krebber, Alan Robinson
>> Headquarters: Essen
>> Registered at Local District Court, Essen Commercial Registry No.: HRB 
>> 14327 Sales Tax ID No.: DE 8130 22 070
>> 
>> 
>> 
>> Please consider the environment before printing this e-mail
>> 
>> 
>> 
>> 
>> 
>> 
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list 
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From alexios at 4dscape.com  Wed Sep 24 21:13:53 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Wed, 24 Sep 2014 22:13:53 +0300
Subject: [R-SIG-Finance] Update of rugarch package yields different
	results / questions on stationarity conditions
In-Reply-To: <D4C25ABF67A47A4BAE99D13FA0B80938190FE8B0@S082A1080.group.rwe.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com> <54230389.3040707@4dscape.com>
	<D4C25ABF67A47A4BAE99D13FA0B80938190FE8B0@S082A1080.group.rwe.com>
Message-ID: <E62DC11E-50DA-48B0-8841-55199D34D40C@4dscape.com>

I'll need to check what you sent me then against the changes made. As for being irritated (and saying so publicly)...well, I've strived over the years to produce an open source alternative for GARCH modelling with very few contributions, but many requests for help both publicly and privately. Perhaps you'll be less irritated buying an off the shelf program with paid support.

Alexios

> On 24 Sep 2014, at 22:02, <Stefan.Jaeschke at rwe.com> wrote:
> 
> Alexios, you provided me with this estimates back in a mail on Tues. 29.10.2013 13:46. And I could reproduce those values, now I am a bit irritated. Unfortunately, I am not able to rebuilt the "old" rugarch version.
> 
> -----Urspr?ngliche Nachricht-----
> Von: alexios ghalalanos [mailto:alexios at 4dscape.com] 
> Gesendet: Mittwoch, 24. September 2014 19:47
> An: J?schke, Stefan; r-sig-finance at r-project.org
> Cc: alexios at 4dscape.com
> Betreff: Re: [R-SIG-Finance] Update of rugarch package yields different results / questions on stationarity conditions
> 
> If I were to actually use your previous estimates and filter the data you provided:
> 
> 
>> cf=list(mxreg1=-0.3644,
> omega=-0.3081,
> alpha1=-0.1288,
> alpha2=-0.1308,
> gamma1=0.2575,
> gamma2=0.2340,
> beta1=-0.6917,
> beta2=0.9764,
> beta3=0.6738,
> skew=0.9659,
> shape=1.9107)
> 
>> setfixed(spec)<-cf
>> likelihood(ugarchfilter(spec, nrenditen))
> [1] 1051.357
> 
> This seems much lower and considerably far from what the estimated model gives. Are you sure you provided us with the correct parameter values and the same dataset you used before?
> 
> -Alexios
> 
> 
>> On 24/09/2014 20:29, alexios ghalalanos wrote:
>> Unless you tell us what the previous version you had installed was, I 
>> really can't say for sure.
>> 
>> 1. Is for the stationarity of the eGARCH model.
>> 2. Are the parameter bounds.
>> 
>> You are free to change both:
>> 1. can be switched off by setting fit.control$stationarity=0 2. can be 
>> changes to whatever you want by using the setbounds<- method on the 
>> specification.
>> 
>> As far as I know, you can take the ARMA and GARCH stationarity 
>> conditions separately, as you can also estimate them in 2 steps 
>> without too much loss in efficiency. If you want to see the degree of 
>> interaction between the 2, then use the ugarchdistribution method 
>> which includes a number of interesting parameter interaction plots 
>> (and you can also investigate others by working with the returned 
>> parameter distribution data).
>> 
>> If you feel there is some bug somewhere in the code or you have some 
>> suggestion how to make the estimation of a certain model 'better', 
>> then by all means feel free to contribute a detailed patch.
>> 
>> -Alexios
>> 
>> 
>>> On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
>>> Hi there,
>>> 
>>> 
>>> 
>>> 1)     I have recently updated the rugarch package to version 1.3-3 (I
>>> do not remember the previous number) and I am surprised to see 
>>> different results when fitting a dataset, the loglikelihood is lower 
>>> than before and the beta parameters have changed significantly. Below 
>>> I put the code from the fit
>>> 
>>> 
>>> 
>>> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";", 
>>> dec=".")
>>> 
>>> renditen <- Data$LogReturnsWTI
>>> 
>>> Data_WTI <- renditen
>>> 
>>> nrenditen = renditen - mean(renditen)
>>> 
>>> external <- Data$LogReturnsStocks
>>> 
>>> dim(external) <- c(length(external),1)
>>> 
>>> mean_WTI <- mean(renditen)
>>> 
>>> 
>>> 
>>> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder 
>>> = c(2,3), submodel = NULL, external.regressors = NULL, 
>>> variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), 
>>> include.mean = FALSE, external.regressors = external), 
>>> distribution.model = "sged")
>>> 
>>> fit <- ugarchfit(spec,nrenditen)
>>> 
>>> 
>>> 
>>> 
>>> 
>>> likelihood         2326.425          2319.141
>>> 
>>> 
>>> 
>>> mxreg1             -0.3644             -0.3124
>>> 
>>> omega              -0.3081                -0.0474
>>> 
>>> alpha1              -0.1288                -0.1090
>>> 
>>> alpha2              -0.1308                0.0644
>>> 
>>> gamma1           0.2575                  0.2189
>>> 
>>> gamma2           0.2340                  -0.1441
>>> 
>>> beta1                -0.6917             0.9999
>>> 
>>> beta2                0.9764              0.4135
>>> 
>>> beta3                0.6738              -0.4199
>>> 
>>> skew                0.9659             0.9708
>>> 
>>> shape               1.9107              1.9373
>>> 
>>> 
>>> 
>>> Why do I see these differences?
>>> 
>>> 
>>> 
>>> 2)     Why do we need the following two conditions for strict
>>> stationarity of an EGARCH(q,p) model? I do refer to the ARMA 
>>> representation in Nelson (1991), Equation (2.3)
>>> 
>>> 
>>> 
>>> a)     min(Mod(polyroot(c(1, -betas)))) > 1
>>> 
>>> 
>>> 
>>> b)    |beta_i| < 1, i = 1,.,p
>>> 
>>> 
>>> 
>>> Whereas condition a) is clear to me (stationarity of AR processes), I 
>>> don't see we should restrict the parameter |beta_i| < 1. Could 
>>> somewhen help on that? Why are the parameters regarding q not 
>>> involved in the conditions at all?
>>> 
>>> 
>>> 
>>> 3)     In general, I am aware of conditions for stationarity for
>>> conditional mean processes (e.g. ARMA-models) or conditional variance 
>>> processes (e.g. GARCH-models). I am struggling a bit to find 
>>> sufficient conditions for (strikt) stationarity in case of 
>>> combinations. For instance, an ARMA(1,0)-GARCH(1,1) or 
>>> ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for 
>>> mean/variance separately and join them in the end? They should 
>>> interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.
>>> 
>>> 
>>> 
>>> Many thanks in advance!
>>> 
>>> 
>>> 
>>> Mit freundlichen Gr??en / Kind regards
>>> 
>>> 
>>> 
>>> *Stefan J?schke*
>>> 
>>> RWE Supply & Trading GmbH
>>> 
>>> Performance Controlling CAO Gas & VAC (MFC-GV)
>>> 
>>> Altenessener Str. 27
>>> 
>>> 45141 Essen
>>> 
>>> Germany
>>> 
>>> Phone                      +49 201 5179-1674
>>> 
>>> Email                      stefan.jaeschke at rwe.com
>>> <mailto:stefan.jaeschke at rwe.com>
>>> 
>>> ____________________________________________________
>>> 
>>> 
>>> 
>>> Supervisory Board: Peter Terium (Chairman)
>>> 
>>> Management Board:
>>> Stefan Judisch (CEO),
>>> Dr Markus Krebber, Alan Robinson
>>> Headquarters: Essen
>>> Registered at Local District Court, Essen Commercial Registry No.: 
>>> HRB 14327 Sales Tax ID No.: DE 8130 22 070
>>> 
>>> 
>>> 
>>> Please consider the environment before printing this e-mail
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list 
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R questions should go.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From Stefan.Jaeschke at rwe.com  Wed Sep 24 21:22:36 2014
From: Stefan.Jaeschke at rwe.com (Stefan.Jaeschke at rwe.com)
Date: Wed, 24 Sep 2014 19:22:36 +0000
Subject: [R-SIG-Finance] Update of rugarch package yields different
 results / questions on stationarity conditions
In-Reply-To: <E62DC11E-50DA-48B0-8841-55199D34D40C@4dscape.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com> <54230389.3040707@4dscape.com>
	<D4C25ABF67A47A4BAE99D13FA0B80938190FE8B0@S082A1080.group.rwe.com>
	<E62DC11E-50DA-48B0-8841-55199D34D40C@4dscape.com>
Message-ID: <D4C25ABF67A47A4BAE99D13FA0B80938190FE8CE@S082A1080.group.rwe.com>

It was not my intention to criticize, not at all. You shouldn't take this personally. On the other hand, you are encouraging to use this mailing list for asking for support. Anyway, it is a great job you are doing and the community is definitely grateful for having the chance to apply the provided functionality.

-----Urspr?ngliche Nachricht-----
Von: Alexios Ghalanos [mailto:alexios at 4dscape.com] 
Gesendet: Mittwoch, 24. September 2014 21:14
An: J?schke, Stefan
Cc: <r-sig-finance at r-project.org>
Betreff: Re: [R-SIG-Finance] Update of rugarch package yields different results / questions on stationarity conditions

I'll need to check what you sent me then against the changes made. As for being irritated (and saying so publicly)...well, I've strived over the years to produce an open source alternative for GARCH modelling with very few contributions, but many requests for help both publicly and privately. Perhaps you'll be less irritated buying an off the shelf program with paid support.

Alexios

> On 24 Sep 2014, at 22:02, <Stefan.Jaeschke at rwe.com> wrote:
> 
> Alexios, you provided me with this estimates back in a mail on Tues. 29.10.2013 13:46. And I could reproduce those values, now I am a bit irritated. Unfortunately, I am not able to rebuilt the "old" rugarch version.
> 
> -----Urspr?ngliche Nachricht-----
> Von: alexios ghalalanos [mailto:alexios at 4dscape.com]
> Gesendet: Mittwoch, 24. September 2014 19:47
> An: J?schke, Stefan; r-sig-finance at r-project.org
> Cc: alexios at 4dscape.com
> Betreff: Re: [R-SIG-Finance] Update of rugarch package yields 
> different results / questions on stationarity conditions
> 
> If I were to actually use your previous estimates and filter the data you provided:
> 
> 
>> cf=list(mxreg1=-0.3644,
> omega=-0.3081,
> alpha1=-0.1288,
> alpha2=-0.1308,
> gamma1=0.2575,
> gamma2=0.2340,
> beta1=-0.6917,
> beta2=0.9764,
> beta3=0.6738,
> skew=0.9659,
> shape=1.9107)
> 
>> setfixed(spec)<-cf
>> likelihood(ugarchfilter(spec, nrenditen))
> [1] 1051.357
> 
> This seems much lower and considerably far from what the estimated model gives. Are you sure you provided us with the correct parameter values and the same dataset you used before?
> 
> -Alexios
> 
> 
>> On 24/09/2014 20:29, alexios ghalalanos wrote:
>> Unless you tell us what the previous version you had installed was, I 
>> really can't say for sure.
>> 
>> 1. Is for the stationarity of the eGARCH model.
>> 2. Are the parameter bounds.
>> 
>> You are free to change both:
>> 1. can be switched off by setting fit.control$stationarity=0 2. can 
>> be changes to whatever you want by using the setbounds<- method on 
>> the specification.
>> 
>> As far as I know, you can take the ARMA and GARCH stationarity 
>> conditions separately, as you can also estimate them in 2 steps 
>> without too much loss in efficiency. If you want to see the degree of 
>> interaction between the 2, then use the ugarchdistribution method 
>> which includes a number of interesting parameter interaction plots 
>> (and you can also investigate others by working with the returned 
>> parameter distribution data).
>> 
>> If you feel there is some bug somewhere in the code or you have some 
>> suggestion how to make the estimation of a certain model 'better', 
>> then by all means feel free to contribute a detailed patch.
>> 
>> -Alexios
>> 
>> 
>>> On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
>>> Hi there,
>>> 
>>> 
>>> 
>>> 1)     I have recently updated the rugarch package to version 1.3-3 (I
>>> do not remember the previous number) and I am surprised to see 
>>> different results when fitting a dataset, the loglikelihood is lower 
>>> than before and the beta parameters have changed significantly. 
>>> Below I put the code from the fit
>>> 
>>> 
>>> 
>>> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";",
>>> dec=".")
>>> 
>>> renditen <- Data$LogReturnsWTI
>>> 
>>> Data_WTI <- renditen
>>> 
>>> nrenditen = renditen - mean(renditen)
>>> 
>>> external <- Data$LogReturnsStocks
>>> 
>>> dim(external) <- c(length(external),1)
>>> 
>>> mean_WTI <- mean(renditen)
>>> 
>>> 
>>> 
>>> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder 
>>> = c(2,3), submodel = NULL, external.regressors = NULL, 
>>> variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), 
>>> include.mean = FALSE, external.regressors = external), 
>>> distribution.model = "sged")
>>> 
>>> fit <- ugarchfit(spec,nrenditen)
>>> 
>>> 
>>> 
>>> 
>>> 
>>> likelihood         2326.425          2319.141
>>> 
>>> 
>>> 
>>> mxreg1             -0.3644             -0.3124
>>> 
>>> omega              -0.3081                -0.0474
>>> 
>>> alpha1              -0.1288                -0.1090
>>> 
>>> alpha2              -0.1308                0.0644
>>> 
>>> gamma1           0.2575                  0.2189
>>> 
>>> gamma2           0.2340                  -0.1441
>>> 
>>> beta1                -0.6917             0.9999
>>> 
>>> beta2                0.9764              0.4135
>>> 
>>> beta3                0.6738              -0.4199
>>> 
>>> skew                0.9659             0.9708
>>> 
>>> shape               1.9107              1.9373
>>> 
>>> 
>>> 
>>> Why do I see these differences?
>>> 
>>> 
>>> 
>>> 2)     Why do we need the following two conditions for strict
>>> stationarity of an EGARCH(q,p) model? I do refer to the ARMA 
>>> representation in Nelson (1991), Equation (2.3)
>>> 
>>> 
>>> 
>>> a)     min(Mod(polyroot(c(1, -betas)))) > 1
>>> 
>>> 
>>> 
>>> b)    |beta_i| < 1, i = 1,.,p
>>> 
>>> 
>>> 
>>> Whereas condition a) is clear to me (stationarity of AR processes), 
>>> I don't see we should restrict the parameter |beta_i| < 1. Could 
>>> somewhen help on that? Why are the parameters regarding q not 
>>> involved in the conditions at all?
>>> 
>>> 
>>> 
>>> 3)     In general, I am aware of conditions for stationarity for
>>> conditional mean processes (e.g. ARMA-models) or conditional 
>>> variance processes (e.g. GARCH-models). I am struggling a bit to 
>>> find sufficient conditions for (strikt) stationarity in case of 
>>> combinations. For instance, an ARMA(1,0)-GARCH(1,1) or
>>> ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for 
>>> mean/variance separately and join them in the end? They should 
>>> interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.
>>> 
>>> 
>>> 
>>> Many thanks in advance!
>>> 
>>> 
>>> 
>>> Mit freundlichen Gr??en / Kind regards
>>> 
>>> 
>>> 
>>> *Stefan J?schke*
>>> 
>>> RWE Supply & Trading GmbH
>>> 
>>> Performance Controlling CAO Gas & VAC (MFC-GV)
>>> 
>>> Altenessener Str. 27
>>> 
>>> 45141 Essen
>>> 
>>> Germany
>>> 
>>> Phone                      +49 201 5179-1674
>>> 
>>> Email                      stefan.jaeschke at rwe.com
>>> <mailto:stefan.jaeschke at rwe.com>
>>> 
>>> ____________________________________________________
>>> 
>>> 
>>> 
>>> Supervisory Board: Peter Terium (Chairman)
>>> 
>>> Management Board:
>>> Stefan Judisch (CEO),
>>> Dr Markus Krebber, Alan Robinson
>>> Headquarters: Essen
>>> Registered at Local District Court, Essen Commercial Registry No.: 
>>> HRB 14327 Sales Tax ID No.: DE 8130 22 070
>>> 
>>> 
>>> 
>>> Please consider the environment before printing this e-mail
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> R-SIG-Finance at r-project.org mailing list 
>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>> -- Also note that this is not the r-help list where general R questions should go.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list 
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
> 


From alexios at 4dscape.com  Wed Sep 24 21:26:49 2014
From: alexios at 4dscape.com (Alexios Ghalanos)
Date: Wed, 24 Sep 2014 22:26:49 +0300
Subject: [R-SIG-Finance] Update of rugarch package yields different
	results / questions on stationarity conditions
In-Reply-To: <D4C25ABF67A47A4BAE99D13FA0B80938190FE8CE@S082A1080.group.rwe.com>
References: <D4C25ABF67A47A4BAE99D13FA0B80938190FE80A@S082A1080.group.rwe.com>
	<5422FF97.1090000@4dscape.com> <54230389.3040707@4dscape.com>
	<D4C25ABF67A47A4BAE99D13FA0B80938190FE8B0@S082A1080.group.rwe.com>
	<E62DC11E-50DA-48B0-8841-55199D34D40C@4dscape.com>
	<D4C25ABF67A47A4BAE99D13FA0B80938190FE8CE@S082A1080.group.rwe.com>
Message-ID: <AFB07821-DF4B-44DF-9AD3-0E74F6AC181A@4dscape.com>

Thanks Stefan, email me off list and I'll help you recreate the results.

Cheers,

Alexios

Sent from my iPhone

> On 24 Sep 2014, at 22:22, <Stefan.Jaeschke at rwe.com> wrote:
> 
> It was not my intention to criticize, not at all. You shouldn't take this personally. On the other hand, you are encouraging to use this mailing list for asking for support. Anyway, it is a great job you are doing and the community is definitely grateful for having the chance to apply the provided functionality.
> 
> -----Urspr?ngliche Nachricht-----
> Von: Alexios Ghalanos [mailto:alexios at 4dscape.com] 
> Gesendet: Mittwoch, 24. September 2014 21:14
> An: J?schke, Stefan
> Cc: <r-sig-finance at r-project.org>
> Betreff: Re: [R-SIG-Finance] Update of rugarch package yields different results / questions on stationarity conditions
> 
> I'll need to check what you sent me then against the changes made. As for being irritated (and saying so publicly)...well, I've strived over the years to produce an open source alternative for GARCH modelling with very few contributions, but many requests for help both publicly and privately. Perhaps you'll be less irritated buying an off the shelf program with paid support.
> 
> Alexios
> 
>> On 24 Sep 2014, at 22:02, <Stefan.Jaeschke at rwe.com> wrote:
>> 
>> Alexios, you provided me with this estimates back in a mail on Tues. 29.10.2013 13:46. And I could reproduce those values, now I am a bit irritated. Unfortunately, I am not able to rebuilt the "old" rugarch version.
>> 
>> -----Urspr?ngliche Nachricht-----
>> Von: alexios ghalalanos [mailto:alexios at 4dscape.com]
>> Gesendet: Mittwoch, 24. September 2014 19:47
>> An: J?schke, Stefan; r-sig-finance at r-project.org
>> Cc: alexios at 4dscape.com
>> Betreff: Re: [R-SIG-Finance] Update of rugarch package yields 
>> different results / questions on stationarity conditions
>> 
>> If I were to actually use your previous estimates and filter the data you provided:
>> 
>> 
>>> cf=list(mxreg1=-0.3644,
>> omega=-0.3081,
>> alpha1=-0.1288,
>> alpha2=-0.1308,
>> gamma1=0.2575,
>> gamma2=0.2340,
>> beta1=-0.6917,
>> beta2=0.9764,
>> beta3=0.6738,
>> skew=0.9659,
>> shape=1.9107)
>> 
>>> setfixed(spec)<-cf
>>> likelihood(ugarchfilter(spec, nrenditen))
>> [1] 1051.357
>> 
>> This seems much lower and considerably far from what the estimated model gives. Are you sure you provided us with the correct parameter values and the same dataset you used before?
>> 
>> -Alexios
>> 
>> 
>>> On 24/09/2014 20:29, alexios ghalalanos wrote:
>>> Unless you tell us what the previous version you had installed was, I 
>>> really can't say for sure.
>>> 
>>> 1. Is for the stationarity of the eGARCH model.
>>> 2. Are the parameter bounds.
>>> 
>>> You are free to change both:
>>> 1. can be switched off by setting fit.control$stationarity=0 2. can 
>>> be changes to whatever you want by using the setbounds<- method on 
>>> the specification.
>>> 
>>> As far as I know, you can take the ARMA and GARCH stationarity 
>>> conditions separately, as you can also estimate them in 2 steps 
>>> without too much loss in efficiency. If you want to see the degree of 
>>> interaction between the 2, then use the ugarchdistribution method 
>>> which includes a number of interesting parameter interaction plots 
>>> (and you can also investigate others by working with the returned 
>>> parameter distribution data).
>>> 
>>> If you feel there is some bug somewhere in the code or you have some 
>>> suggestion how to make the estimation of a certain model 'better', 
>>> then by all means feel free to contribute a detailed patch.
>>> 
>>> -Alexios
>>> 
>>> 
>>>> On 24/09/2014 20:01, Stefan.Jaeschke at rwe.com wrote:
>>>> Hi there,
>>>> 
>>>> 
>>>> 
>>>> 1)     I have recently updated the rugarch package to version 1.3-3 (I
>>>> do not remember the previous number) and I am surprised to see 
>>>> different results when fitting a dataset, the loglikelihood is lower 
>>>> than before and the beta parameters have changed significantly. 
>>>> Below I put the code from the fit
>>>> 
>>>> 
>>>> 
>>>> Data <- read.csv("WTI_logreturnsUS.csv", header = TRUE, sep = ";",
>>>> dec=".")
>>>> 
>>>> renditen <- Data$LogReturnsWTI
>>>> 
>>>> Data_WTI <- renditen
>>>> 
>>>> nrenditen = renditen - mean(renditen)
>>>> 
>>>> external <- Data$LogReturnsStocks
>>>> 
>>>> dim(external) <- c(length(external),1)
>>>> 
>>>> mean_WTI <- mean(renditen)
>>>> 
>>>> 
>>>> 
>>>> spec = ugarchspec(variance.model = list(model = "eGARCH", garchOrder 
>>>> = c(2,3), submodel = NULL, external.regressors = NULL, 
>>>> variance.targeting = FALSE), mean.model =list(armaOrder = c(0, 0), 
>>>> include.mean = FALSE, external.regressors = external), 
>>>> distribution.model = "sged")
>>>> 
>>>> fit <- ugarchfit(spec,nrenditen)
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> likelihood         2326.425          2319.141
>>>> 
>>>> 
>>>> 
>>>> mxreg1             -0.3644             -0.3124
>>>> 
>>>> omega              -0.3081                -0.0474
>>>> 
>>>> alpha1              -0.1288                -0.1090
>>>> 
>>>> alpha2              -0.1308                0.0644
>>>> 
>>>> gamma1           0.2575                  0.2189
>>>> 
>>>> gamma2           0.2340                  -0.1441
>>>> 
>>>> beta1                -0.6917             0.9999
>>>> 
>>>> beta2                0.9764              0.4135
>>>> 
>>>> beta3                0.6738              -0.4199
>>>> 
>>>> skew                0.9659             0.9708
>>>> 
>>>> shape               1.9107              1.9373
>>>> 
>>>> 
>>>> 
>>>> Why do I see these differences?
>>>> 
>>>> 
>>>> 
>>>> 2)     Why do we need the following two conditions for strict
>>>> stationarity of an EGARCH(q,p) model? I do refer to the ARMA 
>>>> representation in Nelson (1991), Equation (2.3)
>>>> 
>>>> 
>>>> 
>>>> a)     min(Mod(polyroot(c(1, -betas)))) > 1
>>>> 
>>>> 
>>>> 
>>>> b)    |beta_i| < 1, i = 1,.,p
>>>> 
>>>> 
>>>> 
>>>> Whereas condition a) is clear to me (stationarity of AR processes), 
>>>> I don't see we should restrict the parameter |beta_i| < 1. Could 
>>>> somewhen help on that? Why are the parameters regarding q not 
>>>> involved in the conditions at all?
>>>> 
>>>> 
>>>> 
>>>> 3)     In general, I am aware of conditions for stationarity for
>>>> conditional mean processes (e.g. ARMA-models) or conditional 
>>>> variance processes (e.g. GARCH-models). I am struggling a bit to 
>>>> find sufficient conditions for (strikt) stationarity in case of 
>>>> combinations. For instance, an ARMA(1,0)-GARCH(1,1) or
>>>> ARMA(0,1)-EGARCH(2,3) model. Can I take the conditions for 
>>>> mean/variance separately and join them in the end? They should 
>>>> interact somehow, shouldn't they? If anybody could help me on that, I would be very pleased.
>>>> 
>>>> 
>>>> 
>>>> Many thanks in advance!
>>>> 
>>>> 
>>>> 
>>>> Mit freundlichen Gr??en / Kind regards
>>>> 
>>>> 
>>>> 
>>>> *Stefan J?schke*
>>>> 
>>>> RWE Supply & Trading GmbH
>>>> 
>>>> Performance Controlling CAO Gas & VAC (MFC-GV)
>>>> 
>>>> Altenessener Str. 27
>>>> 
>>>> 45141 Essen
>>>> 
>>>> Germany
>>>> 
>>>> Phone                      +49 201 5179-1674
>>>> 
>>>> Email                      stefan.jaeschke at rwe.com
>>>> <mailto:stefan.jaeschke at rwe.com>
>>>> 
>>>> ____________________________________________________
>>>> 
>>>> 
>>>> 
>>>> Supervisory Board: Peter Terium (Chairman)
>>>> 
>>>> Management Board:
>>>> Stefan Judisch (CEO),
>>>> Dr Markus Krebber, Alan Robinson
>>>> Headquarters: Essen
>>>> Registered at Local District Court, Essen Commercial Registry No.: 
>>>> HRB 14327 Sales Tax ID No.: DE 8130 22 070
>>>> 
>>>> 
>>>> 
>>>> Please consider the environment before printing this e-mail
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> R-SIG-Finance at r-project.org mailing list 
>>>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>>>> -- Subscriber-posting only. If you want to post, subscribe first.
>>>> -- Also note that this is not the r-help list where general R questions should go.
>> 
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list 
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions should go.
> 
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From treydog999 at gmail.com  Thu Sep 25 04:36:12 2014
From: treydog999 at gmail.com (Derek Wong)
Date: Wed, 24 Sep 2014 21:36:12 -0500
Subject: [R-SIG-Finance] quantstrat help - simple combine error using
	windows and walk.forward
Message-ID: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>

Hello,

I am having a lot of trouble with using walk.forward.in windows. i get the
following error. This may be related to bug #5814. If someone could please
help me i would really appreciate it. The reproducible code below is based
on the pair_trade example. Thanks.

error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5,
result.6,     result.7, result.8, result.9, result.10, result.11,
result.12,     result.13, result.14, result.15, result.16, result.17,
result.18,     result.19, result.20, result.21, result.22, result.23,
result.24,     result.25, result.26, result.27, result.28, result.29,
result.30,     result.31, result.32, result.33, result.34, result.35,
result.36,     result.37, result.38, result.39, result.40, result.41,
result.42,     result.43, result.44, result.45, result.46, result.47,
result.48,     result.49, result.50, result.51, result.52, result.53,
result.54,     result.55, result.56, result.57, result.58, result.59,
result.60,     result.61, result.62, result.63, result.64, result.65,
result.66,     result.67, result.68, result.69, result.70, result.71,
result.72,     result.73, result.74, result.75, result.76, result.77,
result.78,     result.79, result.80, result.81, result.82, result.83,
result.84,     result.85, result.86, result.87, result.88, result.89,
result.90,     result.91, result.92, result.93, result.94, result.95,
result.96,     result.97, result.98, result.99, result.100, result.101,
result.102, result.103, result.104, result.105, result.106,     result.107,
result.108, result.109, result.110, result.111,     result.112, result.113,
result.114, result.115, result.116,     result.117, result.118, result.119,
result.120, result.121,     result.122, result.123, result.124, result.125,
result.126,     result.127, result.128, result.129, result.130, result.131,
    result.132, result.133, result.134, result.135, result.136,
result.137, result.138, result.139, result.140, result.141,     result.142,
result.143, result.144, result.145, result.146,     result.147, result.148,
result.149, result.150, result.151,     result.152, result.153, result.154,
result.155, result.156,     result.157, result.158, result.159, result.160,
result.161,     result.162, result.163, result.164, result.165, result.166,
    result.167, result.168, result.169, result.170, result.171,
result.172, result.173, result.174, result.175, result.176,     result.177,
result.178, result.179, result.180): attempt to select less than one
element>
Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st =
portfolio1.st,  :
  obj.func() returned empty result
In addition: Warning message:
In max(x$tradeStats$Net.Trading.PL <http://net.trading.pl/>) :
  no non-missing arguments to max; returning -Inf


Reproducable code below:
------------------------------------------------------------


#Kindly contributed to quantstrat by Garrett See
#code borrowed heavily from existing quantstrat demos

# This is a simple pairs trading example intended to illustrate how you can
# extend existing quantstrat functionality.  It uses addPosLimits to specify
# levels and position limits, and shows how to pass a custom order sizing
# function to osFUN

# Note that it would be easier to build a spread first and treat it as a single
# instrument instead of dealing with a portfolio of stocks.

## given 2 stocks, calculate the ratio of their notional values.  If the ratio
# falls below it's 2 stdev band, then when it crosses back above it,
buy stock 1
# and sell stock 2.  If the ratio rises above it's 2 stdev band, then when it
# crosses back below it, sell stock 1 and buy stock 2.  If the ratio crosses
# its moving average, then flatten any open positions.

# The Qty of Stock A that it buys (sells) = MaxPos / lvls
# The Qty of Stock B that is sells (buys) = MaxPos * Ratio / lvls

require(quantstrat)

suppressWarnings(rm("order_book.pair1",pos=.strategy))
suppressWarnings(rm("account.pairs", "portfolio.pair1", pos=.blotter))
suppressWarnings(rm("initDate", "endDate", "startDate", "initEq", "SD", "N",
                    "symb1", "symb2", "portfolio1.st", "account.st",
                    "pairStrat", "out1"))

##### PLACE DEMO AND TEST DATES HERE #################
#
#if(isTRUE(options('in_test')$in_test))
#  # use test dates
#  {initDate="2011-01-01"
#  endDate="2012-12-31"
#  } else
#  # use demo defaults
#  {initDate="1999-12-31"
#  endDate=Sys.Date()}

initDate <- '2009-01-01'
endDate <- '2011-05-01'
startDate <- '2009-01-02'
initEq <- 100000
SD <- 2
N <- 20

MaxPos <- 1500  #max position in stockA;
# max position in stock B will be max * ratio, i.e. no hard position limit in
# Stock B
lvls <- 3  #how many times to fade; Each order's qty will = MaxPos/lvls

symb1 <- 'SPY' #change these to try other pairs
symb2 <- 'DIA' #if you change them, make sure position limits still make sense
portfolio1.st <- 'pair1'account.st <- 'pairs'

getSymbols(c(symb1, symb2), from=startDate, to=endDate, adjust=TRUE)

# The following function is used to make sure the timestamps of all symbols are
# the same deletes rows where one of the stocks is missing data
alignSymbols <- function(symbols, env=.GlobalEnv) {
  # This is a simplified version of qmao::alignSymbols()
  if (length(symbols) < 2)
    stop("Must provide at least 2 symbols")
  if (any(!is.character(symbols)))
    stop("Symbols must be vector of character strings.")
  ff <- get(symbols[1],env=env)
  for (sym in symbols[-1]) {
    tmp.sym <- get(sym,env=env)
    ff <- merge(ff, tmp.sym, all=FALSE)
  }
  for (sym in symbols) {
    assign(sym,ff[,grep(sym, colnames(ff))], env=env)
  }
  symbols
}
alignSymbols(c(symb1, symb2))

# Define Instruments
currency("USD")
stock(symb1, currency="USD", multiplier=1)
stock(symb2, currency="USD", multiplier=1)

# Initialize Portfolio, Account, and Orders
initPortf(name=portfolio1.st, c(symb1,symb2), initDate=initDate)
initAcct(account.st, portfolios=portfolio1.st, initDate=initDate, initEq=initEq)
initOrders(portfolio=portfolio1.st, initDate=initDate)

# osFUN will need to know which symbol is leg 1 and which is leg 2 as well as
# what the values are for MaxPos and lvls.  So, create a slot in portfolio to
# hold this info.
pair <- c(1, 2, MaxPos, lvls)
names(pair) <- c(symb1, symb2, "MaxPos", "lvls")
.blotter[[paste('portfolio', portfolio1.st, sep='.')]]$pair <- pair

# Create initial position limits and levels by symbol
# allow 3 entries for long and short if lvls=3.
addPosLimit(portfolio=portfolio1.st, timestamp=initDate, symbol=symb1,
            maxpos=MaxPos, longlevels=lvls, minpos=-MaxPos, shortlevels=lvls)
addPosLimit(portfolio=portfolio1.st, timestamp=initDate, symbol=symb2,
            maxpos=MaxPos, longlevels=lvls, minpos=-MaxPos, shortlevels=lvls)

# Create a strategy object
pairStrat <- strategy('pairStrat')

# Indicator function
calcRatio <- function(x) {
  #returns the ratio of notional close prices for 2 symbols
  x1 <- get(x[1])
  x2 <- get(x[2])
  mult1 <- getInstrument(x[1])$multiplier
  mult2 <- getInstrument(x[2])$multiplier
  rat <- (mult1 * Cl(x1)) / (mult2 * Cl(x2))
  colnames(rat) <- 'Ratio'
  rat
}
# Indicator used for determining entry/exits
Ratio <- calcRatio(c(symb1[1], symb2[1]))

# Store hedge ratio in portfolio so that it's available for order sizing
# function. In this example, the hedge ratio happens to be the same as the
# Ratio indicator.
.blotter[[paste('portfolio',portfolio1.st,sep='.')]]$HedgeRatio <- Ratio
#and make a function to get the most recent HedgeRatio
getHedgeRatio <- function(portfolio, timestamp) {
  portf <- getPortfolio(portfolio)
  timestamp <- format(timestamp,"%Y-%m-%d %H:%M:%S")
  # above line ensures you don't get last value of next day if using intraday
  # data and timestamp=midnight
  toDate <- paste("::", timestamp, sep="")
  Ratio <- last(portf$HedgeRatio[toDate])
  as.numeric(Ratio)
}

# Create an indicator - BBands on the Ratio
pairStrat <- add.indicator(strategy=pairStrat, name = "calcRatio",
                           arguments=list(x=c(symb1,symb2)))
pairStrat <- add.indicator(strategy=pairStrat, name = "BBands",
                           arguments=list(HLC=quote(Ratio), sd=SD, n=N,
                                          maType='SMA'),
                           label = "BBands")

#applyIndicators(strategy=pairStrat,mktdata=get(symb1[1])) #for debugging

# Create signals - buy when crossing lower band from below, sell when crossing
# upper band from above, flatten when crossing mavg from above or from below
pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
                        arguments=list(columns=c("Ratio","up"),
                                       relationship="lt"),
                        label="cross.up")
pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
                        arguments=list(columns=c("Ratio","dn"),
                                       relationship="gt"),
                        label="cross.dn")
pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
                        arguments=list(columns=c("Ratio","mavg"),
                                       relationship="lt"),
                        label="cross.mid.fa")
pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
                        arguments=list(columns=c("Ratio","mavg"),
                                       relationship="gt"),
                        label="cross.mid.fb")

# make an order sizing function
#######################_ORDER SIZING FUNCTION_##################################
# check to see which stock it is. If it's the second stock, reverse
orderqty and
# orderside
osSpreadMaxPos <- function (data, timestamp, orderqty, ordertype, orderside,
                            portfolio, symbol, ruletype, ..., orderprice) {
  portf <- getPortfolio(portfolio)
  #check to make sure pair slot has the things needed for this function
  if (!any(portf$pair == 1) && !(any(portf$pair == 2)))
    stop('pair must contain both values 1 and 2')
  if (!any(names(portf$pair) == "MaxPos") || !any(names(portf$pair) == "lvls"))
    stop('pair must contain MaxPos and lvls')

  if (portf$pair[symbol] == 1) legside <- "long"
  if (portf$pair[symbol] == 2) legside <- "short"
  MaxPos <- portf$pair["MaxPos"]
  lvls <- portf$pair["lvls"]
  ratio <- getHedgeRatio(portfolio, timestamp)
  pos <- getPosQty(portfolio, symbol, timestamp)
  PosLimit <- getPosLimit(portfolio, symbol, timestamp)
  qty <- orderqty
  if (legside == "short") {#symbol is 2nd leg
    ## Comment out next line to use equal ordersizes for each stock.
    addPosLimit(portfolio=portfolio, timestamp=timestamp, symbol=symbol,
                maxpos=round(MaxPos*ratio,0), longlevels=lvls,
                minpos=round(-MaxPos*ratio,0), shortlevels=lvls)
    ##
    qty <- -orderqty #switch orderqty for Stock B
  }

  if (qty > 0) orderside = 'long'
  if (qty < 0) orderside = 'short'

  orderqty <- osMaxPos(data=data,timestamp=timestamp, orderqty=qty,
                       ordertype=ordertype, orderside=orderside,
                       portfolio=portfolio, symbol=symbol, ruletype=ruletype,
                       ...)

  #Add the order here instead of in the ruleSignal function
  if (!is.null(orderqty) & !orderqty == 0 & !is.null(orderprice)) {
    addOrder(portfolio=portfolio, symbol=symbol,
             timestamp=timestamp, qty=orderqty, price=as.numeric(orderprice),
             ordertype=ordertype, side=orderside, replace=FALSE,
             status="open", ...=...)
  }
  return(0) #so that ruleSignal function doesn't also try to place an order
}
################################################################################

# Create entry and exit rules for longs  and for shorts. Both symbols will get
# the same buy/sell signals, but osMaxPos will reverse those for the second
# symbol.
# orderqty's are bigger than PosLimits allow. osMaxPos will adjust the orderqty
# down to 1/3 the max allowed. (1/3 is because we are using 3 levels in
# PosLimit)
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.dn", sigval=TRUE,
                                     orderqty=1e6, ordertype='market',
                                     orderside=NULL, osFUN='osSpreadMaxPos'),
                      type='enter')
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.up", sigval=TRUE,
                                     orderqty=-1e6, ordertype='market',
                                     orderside=NULL, osFUN='osSpreadMaxPos'),
                      type='enter')
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.mid.fb", sigval=TRUE,
                                     orderqty='all', ordertype='market',
                                     orderside=NULL),
                      type='exit')
pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
                      arguments=list(sigcol="cross.mid.fa", sigval=TRUE,
                                     orderqty='all', ordertype='market',
                                     orderside=NULL),
                      type='exit')


## for debugging
# applySignals(strategy=pairStrat,
#              mktdata=applyIndicators(strategy=pairStrat, mktdata=get(symb1)))
##

out1<-applyStrategy(strategy=pairStrat, portfolios=portfolio1.st)

updatePortf(Portfolio=portfolio1.st,
            Dates=paste("::", as.Date(Sys.time()), sep=''))
updateAcct(account.st, Dates=paste(startDate, endDate, sep="::"))
updateEndEq(account.st, Dates=paste(startDate, endDate, sep="::"))
getEndEq(account.st, Sys.time())

dev.new()
chart.Posn(Portfolio=portfolio1.st, Symbol=symb1)
dev.new()
chart.Posn(Portfolio=portfolio1.st, Symbol=symb2)
dev.new()
chartSeries(Cl(get(symb1))/Cl(get(symb2)), TA="addBBands(n=N,sd=SD)")

ret1 <- PortfReturns(account.st)
ret1$total <- rowSums(ret1)
#ret1

if("package:PerformanceAnalytics" %in% search() ||
     require("PerformanceAnalytics",quietly=TRUE)) {
  #  getSymbols("SPY", from='1999-01-01')
  #  SPY.ret <- Return.calculate(SPY$SPY.Close)
  #  tmp <- merge(SPY.ret,ret1$total,all=FALSE)
  dev.new()
  charts.PerformanceSummary(ret1$total, geometric=FALSE, wealth.index=TRUE)
}


###############################################################################
# R (http://r-project.org/) Quantitative Strategy Model Framework
#
# Package Copyright (c) 2009-2012
# Peter Carl, Dirk Eddelbuettel, Brian G. Peterson, Jeffrey Ryan, and
Joshua Ulrich
#
# This library is distributed under the terms of the GNU Public License (GPL)
# for full details see the file COPYING
#
# $Id$
#
###############################################################################

##### PLACE THIS BLOCK AT END OF DEMO SCRIPT ###################
# book  = getOrderBook(port)
# stats = tradeStats(port)
# rets  = PortfReturns(acct)
################################################################

#Distribution Initialization
pairStrat <- add.distribution(strategy = pairStrat,
                 paramset.label ="BBOPT",
                 component.type = "indicator",
                 component.label = "BBands",
                 variable = list(n = seq(10,200, by = 10)),
                 label = "n")

pairStrat <- add.distribution(strategy = pairStrat,
                 paramset.label ="BBOPT",
                 component.type = "indicator",
                 component.label = "BBands",
                 variable = list(sd = seq(1,5,by = 0.5)),
                 label = "sd")


# Objective Function
my.obj.func <- function(x)
{
  # pick one of the following objective functions (uncomment)

  #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)

  return(max(x$tradeStats$Net.Trading.PL <http://net.trading.pl/>) ==
x$tradeStats$Net.Trading.PL <http://net.trading.pl/>)

}

#WFA
require(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)

result <- walk.forward(pairStrat,
                       paramset.label = "BBOPT",
                       portfolio.st = portfolio1.st,
                       account.st = account.st,
                       period = "months",
                       k.training = 6,
                       k.testing = 3,
                       obj.func = my.obj.func,
                       obj.args = list(x=quote(result$apply.paramset)),
                       audit.prefix = "wfa",
                       anchored = FALSE,
                       verbose = TRUE)

	[[alternative HTML version deleted]]


From jbreit at nexgo.de  Thu Sep 25 11:47:39 2014
From: jbreit at nexgo.de (Joachim Breit)
Date: Thu, 25 Sep 2014 11:47:39 +0200
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
Message-ID: <5423E4BB.9070509@nexgo.de>

Hi,

I am struggling with the GBSVolatility function. I have a huge dataframe 
'd' with options market data and want to add a column with the implied 
volatility computed from the ask price.

When invoking GBSVolatility with a single line of the dataframe 
everything works fine. But when feeding the columns of the dataframe 
into GBSVolatility I get an error message.

To tackle the issue I took a mini-dataframe 'dtemp' with only two rows 
(arbitrary subset of the original d)

## mini-dataframe ########################################
 > dtemp <- d[515:516,]
 > dtemp
      strike cp   ask   bid     c ntd      rb   iva
1081     50  c 16.17 15.37 65.79  32 0.00384 1e+09
1083     51  c 15.17 14.37 65.79  32 0.00384 1e+09

## invoking with the entire mini-dataframe ####################
 > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
Fehler in uniroot(.fGBSVolatility, interval = c(-10, 10), price = price,  :
   ung?ltiger Funktionswert in 'zeroin'
Zus?tzlich: Warnmeldungen:
1: In if (is.na(f.lower)) stop("f.lower = f(lower) is NA") :
   Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
2: In if (is.na(f.upper)) stop("f.upper = f(upper) is NA") :
   Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
3: In if (f.lower * f.upper > 0) stop("f() values at end points not of 
opposite sign") :
   Bedingung hat L?nge > 1 und nur das erste Element wird benutzt


## invoking with the first row of the mini-dataframe ###############
 > dtemp <- d[515:515,]
 > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
 > dtemp
      strike cp   ask   bid     c ntd      rb       iva
1081     50  c 16.17 15.37 65.79  32 0.00384 0.5340467

## invoking with the 2nd row of the mini-dataframe ###############
 > dtemp <- d[516:516,]
 > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp, S 
= dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8, r = 
pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
 > dtemp
      strike cp   ask   bid     c ntd      rb       iva
1083     51  c 15.17 14.37 65.79  32 0.00384 0.5030617


Can somebody please help? I am going crazy...

Joachim


From ecjbosu at aol.com  Thu Sep 25 13:00:32 2014
From: ecjbosu at aol.com (Joe W. Byers)
Date: Thu, 25 Sep 2014 06:00:32 -0500
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
In-Reply-To: <5423E4BB.9070509@nexgo.de>
References: <5423E4BB.9070509@nexgo.de>
Message-ID: <5423F5D0.5060509@aol.com>

On 09/25/2014 04:47 AM, Joachim Breit wrote:
> Hi,
>
> I am struggling with the GBSVolatility function. I have a huge dataframe
> 'd' with options market data and want to add a column with the implied
> volatility computed from the ask price.
>
> When invoking GBSVolatility with a single line of the dataframe
> everything works fine. But when feeding the columns of the dataframe
> into GBSVolatility I get an error message.
>
> To tackle the issue I took a mini-dataframe 'dtemp' with only two rows
> (arbitrary subset of the original d)
>
> ## mini-dataframe ########################################
>  > dtemp <- d[515:516,]
>  > dtemp
>       strike cp   ask   bid     c ntd      rb   iva
> 1081     50  c 16.17 15.37 65.79  32 0.00384 1e+09
> 1083     51  c 15.17 14.37 65.79  32 0.00384 1e+09
>
> ## invoking with the entire mini-dataframe ####################
>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
> Fehler in uniroot(.fGBSVolatility, interval = c(-10, 10), price = price,  :
>    ung?ltiger Funktionswert in 'zeroin'
> Zus?tzlich: Warnmeldungen:
> 1: In if (is.na(f.lower)) stop("f.lower = f(lower) is NA") :
>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
> 2: In if (is.na(f.upper)) stop("f.upper = f(upper) is NA") :
>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
> 3: In if (f.lower * f.upper > 0) stop("f() values at end points not of
> opposite sign") :
>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
>
>
> ## invoking with the first row of the mini-dataframe ###############
>  > dtemp <- d[515:515,]
>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>  > dtemp
>       strike cp   ask   bid     c ntd      rb       iva
> 1081     50  c 16.17 15.37 65.79  32 0.00384 0.5340467
>
> ## invoking with the 2nd row of the mini-dataframe ###############
>  > dtemp <- d[516:516,]
>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp, S
> = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8, r =
> pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>  > dtemp
>       strike cp   ask   bid     c ntd      rb       iva
> 1083     51  c 15.17 14.37 65.79  32 0.00384 0.5030617
>
>
> Can somebody please help? I am going crazy...
>
> Joachim
>

Joachim


Try something like this.  I have this in an automated task calculating 
Energy IV's every day.  res is a dataframe of option characteristics.  I 
use a Try statement for basic error trap.  This is rough but works.

   # need to error trap options that will not return a valid Vol.  This 
occurs at
   # option  strikes close to zero and short time to expiraton.
   done = F;
   idx = as.logical(matrix(1, nrow=dim(res)[1],ncol=1)) ;
   res$IV = NaN; #initialize all IV's to NaNs
   while( !done){
     try({
       cat('impliedVolatilityCurve: calculator trying\n') 

       res$IV[idx] = mapply(GBSVolatility,price=res$Settle[idx], 
TypeFlag=lowerCase(res$Type[idx]),
          S=res$Underlying[idx], X=res$Strike[idx], 
Time=as.numeric(res$Texp[idx]), r=res$RFRate[idx],
          b=0, tol=10e-3, maxiter=300, USE.NAMES=T);
       done = T;
       cat('impliedVolatilityCurve: calculator completed try\n') 

       })#, silent=T)
     if (!done){ idx = res$Strike>1.00; }

   }

This works for what I needed.  I set the tolerance to 10e-3 because 
prices are quotes in 3 decimal places and this is an estimated parameter 
so it is close enough.  The last if(!done) traps strikes less than a 
1.00 for energy commodities.  This will need to be modified for other 
option markets.

Good Luck
Joe


From ecjbosu at aol.com  Thu Sep 25 13:00:32 2014
From: ecjbosu at aol.com (Joe W. Byers)
Date: Thu, 25 Sep 2014 06:00:32 -0500
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
In-Reply-To: <5423E4BB.9070509@nexgo.de>
References: <5423E4BB.9070509@nexgo.de>
Message-ID: <5423F5D0.5060509@aol.com>

On 09/25/2014 04:47 AM, Joachim Breit wrote:
> Hi,
>
> I am struggling with the GBSVolatility function. I have a huge dataframe
> 'd' with options market data and want to add a column with the implied
> volatility computed from the ask price.
>
> When invoking GBSVolatility with a single line of the dataframe
> everything works fine. But when feeding the columns of the dataframe
> into GBSVolatility I get an error message.
>
> To tackle the issue I took a mini-dataframe 'dtemp' with only two rows
> (arbitrary subset of the original d)
>
> ## mini-dataframe ########################################
>  > dtemp <- d[515:516,]
>  > dtemp
>       strike cp   ask   bid     c ntd      rb   iva
> 1081     50  c 16.17 15.37 65.79  32 0.00384 1e+09
> 1083     51  c 15.17 14.37 65.79  32 0.00384 1e+09
>
> ## invoking with the entire mini-dataframe ####################
>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
> Fehler in uniroot(.fGBSVolatility, interval = c(-10, 10), price = price,  :
>    ung?ltiger Funktionswert in 'zeroin'
> Zus?tzlich: Warnmeldungen:
> 1: In if (is.na(f.lower)) stop("f.lower = f(lower) is NA") :
>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
> 2: In if (is.na(f.upper)) stop("f.upper = f(upper) is NA") :
>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
> 3: In if (f.lower * f.upper > 0) stop("f() values at end points not of
> opposite sign") :
>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
>
>
> ## invoking with the first row of the mini-dataframe ###############
>  > dtemp <- d[515:515,]
>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>  > dtemp
>       strike cp   ask   bid     c ntd      rb       iva
> 1081     50  c 16.17 15.37 65.79  32 0.00384 0.5340467
>
> ## invoking with the 2nd row of the mini-dataframe ###############
>  > dtemp <- d[516:516,]
>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp, S
> = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8, r =
> pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>  > dtemp
>       strike cp   ask   bid     c ntd      rb       iva
> 1083     51  c 15.17 14.37 65.79  32 0.00384 0.5030617
>
>
> Can somebody please help? I am going crazy...
>
> Joachim
>

Joachim


Try something like this.  I have this in an automated task calculating 
Energy IV's every day.  res is a dataframe of option characteristics.  I 
use a Try statement for basic error trap.  This is rough but works.

   # need to error trap options that will not return a valid Vol.  This 
occurs at
   # option  strikes close to zero and short time to expiraton.
   done = F;
   idx = as.logical(matrix(1, nrow=dim(res)[1],ncol=1)) ;
   res$IV = NaN; #initialize all IV's to NaNs
   while( !done){
     try({
       cat('impliedVolatilityCurve: calculator trying\n') 

       res$IV[idx] = mapply(GBSVolatility,price=res$Settle[idx], 
TypeFlag=lowerCase(res$Type[idx]),
          S=res$Underlying[idx], X=res$Strike[idx], 
Time=as.numeric(res$Texp[idx]), r=res$RFRate[idx],
          b=0, tol=10e-3, maxiter=300, USE.NAMES=T);
       done = T;
       cat('impliedVolatilityCurve: calculator completed try\n') 

       })#, silent=T)
     if (!done){ idx = res$Strike>1.00; }

   }

This works for what I needed.  I set the tolerance to 10e-3 because 
prices are quotes in 3 decimal places and this is an estimated parameter 
so it is close enough.  The last if(!done) traps strikes less than a 
1.00 for energy commodities.  This will need to be modified for other 
option markets.

Good Luck
Joe


From jbreit at nexgo.de  Thu Sep 25 14:03:30 2014
From: jbreit at nexgo.de (Joachim Breit)
Date: Thu, 25 Sep 2014 14:03:30 +0200
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
In-Reply-To: <5423F5D0.5060509@aol.com>
References: <5423E4BB.9070509@nexgo.de> <5423F5D0.5060509@aol.com>
Message-ID: <54240492.4000402@nexgo.de>

Thanks a lot Joe. Will try the "try"-trick...
I only now realize that my question has been asked before:
https://stat.ethz.ch/pipermail/r-sig-finance/2010q4/006900.html
Sorry about that.

This also seems to be related
http://dirk.eddelbuettel.com/blog/2012/10/25/

Joachim

Am 25.09.2014 13:00, schrieb Joe W. Byers:
> On 09/25/2014 04:47 AM, Joachim Breit wrote:
>> Hi,
>>
>> I am struggling with the GBSVolatility function. I have a huge dataframe
>> 'd' with options market data and want to add a column with the implied
>> volatility computed from the ask price.
>>
>> When invoking GBSVolatility with a single line of the dataframe
>> everything works fine. But when feeding the columns of the dataframe
>> into GBSVolatility I get an error message.
>>
>> To tackle the issue I took a mini-dataframe 'dtemp' with only two rows
>> (arbitrary subset of the original d)
>>
>> ## mini-dataframe ########################################
>>  > dtemp <- d[515:516,]
>>  > dtemp
>>       strike cp   ask   bid     c ntd      rb   iva
>> 1081     50  c 16.17 15.37 65.79  32 0.00384 1e+09
>> 1083     51  c 15.17 14.37 65.79  32 0.00384 1e+09
>>
>> ## invoking with the entire mini-dataframe ####################
>>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
>> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
>> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>> Fehler in uniroot(.fGBSVolatility, interval = c(-10, 10), price =
>> price,  :
>>    ung?ltiger Funktionswert in 'zeroin'
>> Zus?tzlich: Warnmeldungen:
>> 1: In if (is.na(f.lower)) stop("f.lower = f(lower) is NA") :
>>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
>> 2: In if (is.na(f.upper)) stop("f.upper = f(upper) is NA") :
>>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
>> 3: In if (f.lower * f.upper > 0) stop("f() values at end points not of
>> opposite sign") :
>>    Bedingung hat L?nge > 1 und nur das erste Element wird benutzt
>>
>>
>> ## invoking with the first row of the mini-dataframe ###############
>>  > dtemp <- d[515:515,]
>>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp,
>> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
>> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>>  > dtemp
>>       strike cp   ask   bid     c ntd      rb       iva
>> 1081     50  c 16.17 15.37 65.79  32 0.00384 0.5340467
>>
>> ## invoking with the 2nd row of the mini-dataframe ###############
>>  > dtemp <- d[516:516,]
>>  > dtemp$iva  <- GBSVolatility(price = dtemp$ask, TypeFlag = dtemp$cp, S
>> = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8, r =
>> pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>>  > dtemp
>>       strike cp   ask   bid     c ntd      rb       iva
>> 1083     51  c 15.17 14.37 65.79  32 0.00384 0.5030617
>>
>>
>> Can somebody please help? I am going crazy...
>>
>> Joachim
>>
>
> Joachim
>
>
> Try something like this.  I have this in an automated task calculating
> Energy IV's every day.  res is a dataframe of option characteristics.  I
> use a Try statement for basic error trap.  This is rough but works.
>
>    # need to error trap options that will not return a valid Vol.  This
> occurs at
>    # option  strikes close to zero and short time to expiraton.
>    done = F;
>    idx = as.logical(matrix(1, nrow=dim(res)[1],ncol=1)) ;
>    res$IV = NaN; #initialize all IV's to NaNs
>    while( !done){
>      try({
>        cat('impliedVolatilityCurve: calculator trying\n')
>        res$IV[idx] = mapply(GBSVolatility,price=res$Settle[idx],
> TypeFlag=lowerCase(res$Type[idx]),
>           S=res$Underlying[idx], X=res$Strike[idx],
> Time=as.numeric(res$Texp[idx]), r=res$RFRate[idx],
>           b=0, tol=10e-3, maxiter=300, USE.NAMES=T);
>        done = T;
>        cat('impliedVolatilityCurve: calculator completed try\n')
>        })#, silent=T)
>      if (!done){ idx = res$Strike>1.00; }
>
>    }
>
> This works for what I needed.  I set the tolerance to 10e-3 because
> prices are quotes in 3 decimal places and this is an estimated parameter
> so it is close enough.  The last if(!done) traps strikes less than a
> 1.00 for energy commodities.  This will need to be modified for other
> option markets.
>
> Good Luck
> Joe
>
>


From shivamsingh at gmail.com  Thu Sep 25 14:17:35 2014
From: shivamsingh at gmail.com (Shivam)
Date: Thu, 25 Sep 2014 17:47:35 +0530
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
Message-ID: <CAGaLYZoww76rHYd2nXF8=Hqv4r4WHqAscEL71HVVrQh=p9_aww@mail.gmail.com>

Hi Joachim,

Somehow I am not able to replicate your data in my workspace. But I
would like to suggest you to try the below:

> dtemp$iva  <- Vectorize(GBSVolatility)(price = dtemp$ask, TypeFlag = dtemp$cp,
S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))

Hope it helps.

Regards,
Shivam

-- 
*Victoria Concordia Crescit*


From jbreit at nexgo.de  Thu Sep 25 14:32:21 2014
From: jbreit at nexgo.de (Joachim Breit)
Date: Thu, 25 Sep 2014 14:32:21 +0200
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
In-Reply-To: <CAGaLYZoww76rHYd2nXF8=Hqv4r4WHqAscEL71HVVrQh=p9_aww@mail.gmail.com>
References: <CAGaLYZoww76rHYd2nXF8=Hqv4r4WHqAscEL71HVVrQh=p9_aww@mail.gmail.com>
Message-ID: <54240B55.8070103@nexgo.de>

Cool, that works.
I'm a beginner (since a decade or so :-)
Did not know Vectorize()

Thank you so much!

Am 25.09.2014 14:17, schrieb Shivam:
>> dtemp$iva  <- Vectorize(GBSVolatility)(price = dtemp$ask, TypeFlag = dtemp$cp,
> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))


From jbreit at nexgo.de  Thu Sep 25 16:03:33 2014
From: jbreit at nexgo.de (Joachim Breit)
Date: Thu, 25 Sep 2014 16:03:33 +0200
Subject: [R-SIG-Finance] GBSVolatility not working on vectors?
In-Reply-To: <54240B55.8070103@nexgo.de>
References: <CAGaLYZoww76rHYd2nXF8=Hqv4r4WHqAscEL71HVVrQh=p9_aww@mail.gmail.com>
	<54240B55.8070103@nexgo.de>
Message-ID: <542420B5.5040602@nexgo.de>

Rejoiced too soon.

It worked with my mini-dataframe but when doing it with the big one I got:

Fehler in uniroot(.fGBSVolatility, interval = c(-10, 10), price = price,  :
   f() values at end points not of opposite sign



Am 25.09.2014 14:32, schrieb Joachim Breit:
> Cool, that works.
> I'm a beginner (since a decade or so :-)
> Did not know Vectorize()
>
> Thank you so much!
>
> Am 25.09.2014 14:17, schrieb Shivam:
>>> dtemp$iva  <- Vectorize(GBSVolatility)(price = dtemp$ask, TypeFlag =
>>> dtemp$cp,
>> S = dtemp$c , X = dtemp$strike, Time = dtemp$ntd / 253.8,
>> r = pmax(dtemp$rb, 0), b = pmax(dtemp$rb, 0))
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>


From markknecht at gmail.com  Thu Sep 25 19:47:28 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Thu, 25 Sep 2014 10:47:28 -0700
Subject: [R-SIG-Finance] tradeStats - Avg.Daily.PL/Med.Daily.PL question
Message-ID: <CAK2H+ee4Ha5Yza=UGOy-qTde3--UR2-2D20u-sYXhYfGFm7B9w@mail.gmail.com>

Hi,
   The help file for tradeStats asks for feedback so here I am.
Reproducible code is the macd.Rebalancing.R demo file with the symbol
changed to "SPY" and these lines added at the end:

oB = getOrders(portfolio.st, "SPY", status="closed")
tS = t(tradeStats(portfolio.st))
pTS = perTradeStats(portfolio.st, "SPY")

   The tradeStats function works correctly (as best I can tell) for
most values but I'm thinking either I don't understand the
Avg.Daily.PL value or there's a bug. Every time I run the function
Avg.Daily.PL & Med.Daily.PL is always equal to Avg.Trade.PL &
Med.Trade.PL respectively. (NOTE: I'm using daily & weekly data only.)

   From the help file I'm not exactly sure what this is intended to mean:

Avg.Daily.PL - mean daily realized P&L on days there were
transactions, see dailyStats for all days

   Is this supposed to be the total trading profit divided by the
number of days in trades, or the total profit divided by the number of
days from the first entry to the last exit, or something else?

   The code from quantstrat-0.8.2 that's involved seems to be this:

PL.ne0 <- txn$Net.Txn.Realized.PL[txn$Net.Txn.Realized.PL != 0]

DailyPL <- apply.daily(PL.ne0, sum)
AvgDailyPL <- mean(DailyPL)
MedDailyPL <- median(DailyPL)

and

AvgTradePL <- mean(PL.ne0)
MedTradePL <- median(PL.ne0

   If the intention is to say something about how much money the
strategy makes "per day" then I don't see anything that tallies the
number of days in the simulation run. I got a simplified version of
that using:

pTS = perTradeStats(portfolio.st, "SPY")
last(pTS$End)-first(pTS$Start)
Time difference of 2729 days

but I'm sure there are easier/better ways.

   Anyway, is it working correctly, or if not has it been fixed in a
more recent version of quantstrat?

Thanks,
Mark


From zadig_1 at excite.com  Thu Sep 25 20:45:32 2014
From: zadig_1 at excite.com (ce)
Date: Thu, 25 Sep 2014 14:45:32 -0400
Subject: [R-SIG-Finance] What happens to IBrokers package if overloaded ?
Message-ID: <20140925144532.2355@web003.roc2.bluetie.com>

Dear All,

If I use reqRealTimeBars for 100 symbols every 5 sec on an average PC,  would it cause performance issues ?
Any data loss is possible or they just queued up ? 

Thanks a lot for reading. 

From brian at braverock.com  Thu Sep 25 21:16:02 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Thu, 25 Sep 2014 14:16:02 -0500
Subject: [R-SIG-Finance] tradeStats - Avg.Daily.PL/Med.Daily.PL question
In-Reply-To: <CAK2H+ee4Ha5Yza=UGOy-qTde3--UR2-2D20u-sYXhYfGFm7B9w@mail.gmail.com>
References: <CAK2H+ee4Ha5Yza=UGOy-qTde3--UR2-2D20u-sYXhYfGFm7B9w@mail.gmail.com>
Message-ID: <542469F2.7010909@braverock.com>

Mark,

tradeStats does exactly what it says it is doing.  It gives you the 
number mean or median P&L for days on which you have trading P&L from 
(Net.Txn.Realized.PL).  So, on days in which you realize a gain or loss 
of any sort, (position gets closer to zero), they will be counted for 
the mean daily number in tradeStats.

dailyStats uses days with non=-zero P&L, which isn't quite right, but 
should be much closer to what you're looking for. (it requires a change 
in price or position, so that the mark will differ).  The potential 
error here is if you have days of marked P&L that have no change, e.g. 
days on which you are flat.  I'm not sure it makes sense to count these 
days most of the time anyway, but it is a difference worth describing.

Regards,

Brian

On 09/25/2014 12:47 PM, Mark Knecht wrote:
> Hi,
>     The help file for tradeStats asks for feedback so here I am.
> Reproducible code is the macd.Rebalancing.R demo file with the symbol
> changed to "SPY" and these lines added at the end:
>
> oB = getOrders(portfolio.st, "SPY", status="closed")
> tS = t(tradeStats(portfolio.st))
> pTS = perTradeStats(portfolio.st, "SPY")
>
>     The tradeStats function works correctly (as best I can tell) for
> most values but I'm thinking either I don't understand the
> Avg.Daily.PL value or there's a bug. Every time I run the function
> Avg.Daily.PL & Med.Daily.PL is always equal to Avg.Trade.PL &
> Med.Trade.PL respectively. (NOTE: I'm using daily & weekly data only.)
>
>     From the help file I'm not exactly sure what this is intended to mean:
>
> Avg.Daily.PL - mean daily realized P&L on days there were
> transactions, see dailyStats for all days
>
>     Is this supposed to be the total trading profit divided by the
> number of days in trades, or the total profit divided by the number of
> days from the first entry to the last exit, or something else?
>
>     The code from quantstrat-0.8.2 that's involved seems to be this:
>
> PL.ne0 <- txn$Net.Txn.Realized.PL[txn$Net.Txn.Realized.PL != 0]
>
> DailyPL <- apply.daily(PL.ne0, sum)
> AvgDailyPL <- mean(DailyPL)
> MedDailyPL <- median(DailyPL)
>
> and
>
> AvgTradePL <- mean(PL.ne0)
> MedTradePL <- median(PL.ne0
>
>     If the intention is to say something about how much money the
> strategy makes "per day" then I don't see anything that tallies the
> number of days in the simulation run. I got a simplified version of
> that using:
>
> pTS = perTradeStats(portfolio.st, "SPY")
> last(pTS$End)-first(pTS$Start)
> Time difference of 2729 days
>
> but I'm sure there are easier/better ways.
>
>     Anyway, is it working correctly, or if not has it been fixed in a
> more recent version of quantstrat?
>
> Thanks,
> Mark
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From a.chandhial at btinternet.com  Thu Sep 25 21:48:56 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Thu, 25 Sep 2014 20:48:56 +0100 (BST)
Subject: [R-SIG-Finance] Fwd:  questions about adaptive indicator,
 intra-day trading and package 'parallel'
In-Reply-To: <1410679458840-4696923.post@n4.nabble.com>
References: <1409934716272-4696562.post@n4.nabble.com>
	<1410605867039-4696908.post@n4.nabble.com>
	<541440BE.3080700@braverock.com>
	<1410677155781-4696922.post@n4.nabble.com>
	<1410679458840-4696923.post@n4.nabble.com>
Message-ID: <27052310.65237.1411674536184.JavaMail.defaultUser@defaultHost>


Has anybody managed to recreate this stratgey using quantstrat ?


Amarjit



----Original message----
>From : 1111938 at qq.com
Date : 14/09/2014 - 08:24 (GMTST)
To : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] questions about adaptive indicator, intra-day trading and package 'parallel'

braverock, I'm trying to code a hans123-like strategy, be unfamiliar with
fine control in R and quantstrat, it's hard for me to code the rules below.
could you help to give me an example ?

1. market opens at 9:00, closes at 15:00, and the trading period is 1-min
2. determine hband = highest high of the day at 9:30 (that's, the highest
high of the recent 30 min at 9:30 )
3. determine lband = lowest low of the day at 9:30 (that's, the lowest low
of the recent 30 min at 9:30 )
4. from 9:31 to 14:55, if close of the 1-min bar cross above hband, enter
long; if close cross under lband, enter short;
5. if positon is long,and close cross under hband/2+lband/2, exit long; if
position is short,and close cross above hband/2+lband/2, exit short;
6. exit all position at 14:55
7. having 2 loss trades, stop trading today.

regards,



--
View this message in context: http://r.789695.n4.nabble.com/questions-about-adaptive-indicator-intra-day-trading-and-package-parallel-tp4696562p4696923.html
Sent from the Rmetrics mailing list archive at Nabble.com.

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From markknecht at gmail.com  Thu Sep 25 22:09:26 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Thu, 25 Sep 2014 13:09:26 -0700
Subject: [R-SIG-Finance] tradeStats - Avg.Daily.PL/Med.Daily.PL question
In-Reply-To: <542469F2.7010909@braverock.com>
References: <CAK2H+ee4Ha5Yza=UGOy-qTde3--UR2-2D20u-sYXhYfGFm7B9w@mail.gmail.com>
	<542469F2.7010909@braverock.com>
Message-ID: <CAK2H+ed5ExOZvUfmuZRV_-JEH36a-p8mjsJ8XEq8mQivw6gW0g@mail.gmail.com>

Hi Brian,

On Thu, Sep 25, 2014 at 12:16 PM, Brian G. Peterson <brian at braverock.com> wrote:
> Mark,
>
> tradeStats does exactly what it says it is doing.  It gives you the number
> mean or median P&L for days on which you have trading P&L from
> (Net.Txn.Realized.PL).  So, on days in which you realize a gain or loss of
> any sort, (position gets closer to zero), they will be counted for the mean
> daily number in tradeStats.
>

OK, your description helps. I guess there's a follow-on question as to when
Avg.Daily.PL & Avg.Trade.PL are ever different (as I've not run across that)
but don't respond on that alone. I'll just do some work and see if I can get
there.

> dailyStats uses days with non=-zero P&L, which isn't quite right, but should
> be much closer to what you're looking for. (it requires a change in price or
> position, so that the mark will differ).  The potential error here is if you
> have days of marked P&L that have no change, e.g. days on which you are
> flat.  I'm not sure it makes sense to count these days most of the time
> anyway, but it is a difference worth describing.
>

OK. I tried running dailyStats a day or two ago and got nowhere with it but
I'll see if I can't figure that out. A quick search shows that Ilya
uses it in his
IKTrading and DSTrading files so that should be enough to get me going.

Thanks for the quick response.

Cheers,
Mark



> Regards,
>
> Brian
>
>
> On 09/25/2014 12:47 PM, Mark Knecht wrote:
>>
>> Hi,
>>     The help file for tradeStats asks for feedback so here I am.
>> Reproducible code is the macd.Rebalancing.R demo file with the symbol
>> changed to "SPY" and these lines added at the end:
>>
>> oB = getOrders(portfolio.st, "SPY", status="closed")
>> tS = t(tradeStats(portfolio.st))
>> pTS = perTradeStats(portfolio.st, "SPY")
>>
>>     The tradeStats function works correctly (as best I can tell) for
>> most values but I'm thinking either I don't understand the
>> Avg.Daily.PL value or there's a bug. Every time I run the function
>> Avg.Daily.PL & Med.Daily.PL is always equal to Avg.Trade.PL &
>> Med.Trade.PL respectively. (NOTE: I'm using daily & weekly data only.)
>>
>>     From the help file I'm not exactly sure what this is intended to mean:
>>
>> Avg.Daily.PL - mean daily realized P&L on days there were
>> transactions, see dailyStats for all days
>>
>>     Is this supposed to be the total trading profit divided by the
>> number of days in trades, or the total profit divided by the number of
>> days from the first entry to the last exit, or something else?
>>
>>     The code from quantstrat-0.8.2 that's involved seems to be this:
>>
>> PL.ne0 <- txn$Net.Txn.Realized.PL[txn$Net.Txn.Realized.PL != 0]
>>
>> DailyPL <- apply.daily(PL.ne0, sum)
>> AvgDailyPL <- mean(DailyPL)
>> MedDailyPL <- median(DailyPL)
>>
>> and
>>
>> AvgTradePL <- mean(PL.ne0)
>> MedTradePL <- median(PL.ne0
>>
>>     If the intention is to say something about how much money the
>> strategy makes "per day" then I don't see anything that tallies the
>> number of days in the simulation run. I got a simplified version of
>> that using:
>>
>> pTS = perTradeStats(portfolio.st, "SPY")
>> last(pTS$End)-first(pTS$Start)
>> Time difference of 2729 days
>>
>> but I'm sure there are easier/better ways.
>>
>>     Anyway, is it working correctly, or if not has it been fixed in a
>> more recent version of quantstrat?
>>
>> Thanks,
>> Mark
>>
>> _______________________________________________
>> R-SIG-Finance at r-project.org mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> -- Subscriber-posting only. If you want to post, subscribe first.
>> -- Also note that this is not the r-help list where general R questions
>> should go.
>>
>
> --
> Brian G. Peterson
> http://braverock.com/brian/
> Ph: 773-459-4973
> IM: bgpbraverock
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.


From ilya.kipnis at gmail.com  Thu Sep 25 23:03:11 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Thu, 25 Sep 2014 17:03:11 -0400
Subject: [R-SIG-Finance] tradeStats - Avg.Daily.PL/Med.Daily.PL question
In-Reply-To: <CAK2H+ed5ExOZvUfmuZRV_-JEH36a-p8mjsJ8XEq8mQivw6gW0g@mail.gmail.com>
References: <CAK2H+ee4Ha5Yza=UGOy-qTde3--UR2-2D20u-sYXhYfGFm7B9w@mail.gmail.com>
	<542469F2.7010909@braverock.com>
	<CAK2H+ed5ExOZvUfmuZRV_-JEH36a-p8mjsJ8XEq8mQivw6gW0g@mail.gmail.com>
Message-ID: <CA+oJuEERB8dcyck8f7kd=6oN644xE-=Ytq-E81DXv5VXxQaKWQ@mail.gmail.com>

For the record, dailyStats is not something that's exclusive to my
packages. It's a blotter function. Also, I highly recommend upgrading to
the latest R-forge TTR and blotter. A lot of the times that people can't
get my code to run usually involves the CRAN version of TTR. For the
record, the way I use dailyStats is like this:

dStats <- dailyStats(Portfolios = portfolio.st, use="Equity")

My version of blotter is  blotter_0.8.19

On Thu, Sep 25, 2014 at 4:09 PM, Mark Knecht <markknecht at gmail.com> wrote:

> Hi Brian,
>
> On Thu, Sep 25, 2014 at 12:16 PM, Brian G. Peterson <brian at braverock.com>
> wrote:
> > Mark,
> >
> > tradeStats does exactly what it says it is doing.  It gives you the
> number
> > mean or median P&L for days on which you have trading P&L from
> > (Net.Txn.Realized.PL).  So, on days in which you realize a gain or loss
> of
> > any sort, (position gets closer to zero), they will be counted for the
> mean
> > daily number in tradeStats.
> >
>
> OK, your description helps. I guess there's a follow-on question as to when
> Avg.Daily.PL & Avg.Trade.PL are ever different (as I've not run across
> that)
> but don't respond on that alone. I'll just do some work and see if I can
> get
> there.
>
> > dailyStats uses days with non=-zero P&L, which isn't quite right, but
> should
> > be much closer to what you're looking for. (it requires a change in
> price or
> > position, so that the mark will differ).  The potential error here is if
> you
> > have days of marked P&L that have no change, e.g. days on which you are
> > flat.  I'm not sure it makes sense to count these days most of the time
> > anyway, but it is a difference worth describing.
> >
>
> OK. I tried running dailyStats a day or two ago and got nowhere with it but
> I'll see if I can't figure that out. A quick search shows that Ilya
> uses it in his
> IKTrading and DSTrading files so that should be enough to get me going.
>
> Thanks for the quick response.
>
> Cheers,
> Mark
>
>
>
> > Regards,
> >
> > Brian
> >
> >
> > On 09/25/2014 12:47 PM, Mark Knecht wrote:
> >>
> >> Hi,
> >>     The help file for tradeStats asks for feedback so here I am.
> >> Reproducible code is the macd.Rebalancing.R demo file with the symbol
> >> changed to "SPY" and these lines added at the end:
> >>
> >> oB = getOrders(portfolio.st, "SPY", status="closed")
> >> tS = t(tradeStats(portfolio.st))
> >> pTS = perTradeStats(portfolio.st, "SPY")
> >>
> >>     The tradeStats function works correctly (as best I can tell) for
> >> most values but I'm thinking either I don't understand the
> >> Avg.Daily.PL value or there's a bug. Every time I run the function
> >> Avg.Daily.PL & Med.Daily.PL is always equal to Avg.Trade.PL &
> >> Med.Trade.PL respectively. (NOTE: I'm using daily & weekly data only.)
> >>
> >>     From the help file I'm not exactly sure what this is intended to
> mean:
> >>
> >> Avg.Daily.PL - mean daily realized P&L on days there were
> >> transactions, see dailyStats for all days
> >>
> >>     Is this supposed to be the total trading profit divided by the
> >> number of days in trades, or the total profit divided by the number of
> >> days from the first entry to the last exit, or something else?
> >>
> >>     The code from quantstrat-0.8.2 that's involved seems to be this:
> >>
> >> PL.ne0 <- txn$Net.Txn.Realized.PL[txn$Net.Txn.Realized.PL != 0]
> >>
> >> DailyPL <- apply.daily(PL.ne0, sum)
> >> AvgDailyPL <- mean(DailyPL)
> >> MedDailyPL <- median(DailyPL)
> >>
> >> and
> >>
> >> AvgTradePL <- mean(PL.ne0)
> >> MedTradePL <- median(PL.ne0
> >>
> >>     If the intention is to say something about how much money the
> >> strategy makes "per day" then I don't see anything that tallies the
> >> number of days in the simulation run. I got a simplified version of
> >> that using:
> >>
> >> pTS = perTradeStats(portfolio.st, "SPY")
> >> last(pTS$End)-first(pTS$Start)
> >> Time difference of 2729 days
> >>
> >> but I'm sure there are easier/better ways.
> >>
> >>     Anyway, is it working correctly, or if not has it been fixed in a
> >> more recent version of quantstrat?
> >>
> >> Thanks,
> >> Mark
> >>
> >> _______________________________________________
> >> R-SIG-Finance at r-project.org mailing list
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> >> -- Subscriber-posting only. If you want to post, subscribe first.
> >> -- Also note that this is not the r-help list where general R questions
> >> should go.
> >>
> >
> > --
> > Brian G. Peterson
> > http://braverock.com/brian/
> > Ph: 773-459-4973
> > IM: bgpbraverock
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> > should go.
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From markknecht at gmail.com  Thu Sep 25 23:06:38 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Thu, 25 Sep 2014 14:06:38 -0700
Subject: [R-SIG-Finance] tradeStats - Avg.Daily.PL/Med.Daily.PL question
In-Reply-To: <CA+oJuEERB8dcyck8f7kd=6oN644xE-=Ytq-E81DXv5VXxQaKWQ@mail.gmail.com>
References: <CAK2H+ee4Ha5Yza=UGOy-qTde3--UR2-2D20u-sYXhYfGFm7B9w@mail.gmail.com>
	<542469F2.7010909@braverock.com>
	<CAK2H+ed5ExOZvUfmuZRV_-JEH36a-p8mjsJ8XEq8mQivw6gW0g@mail.gmail.com>
	<CA+oJuEERB8dcyck8f7kd=6oN644xE-=Ytq-E81DXv5VXxQaKWQ@mail.gmail.com>
Message-ID: <CAK2H+edyQL=Mfex05QvYHqHQosmiqOOf-CU-Giz0tshEavDUPw@mail.gmail.com>

On Thu, Sep 25, 2014 at 2:03 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> For the record, dailyStats is not something that's exclusive to my packages.
> It's a blotter function. Also, I highly recommend upgrading to the latest
> R-forge TTR and blotter. A lot of the times that people can't get my code to
> run usually involves the CRAN version of TTR. For the record, the way I use
> dailyStats is like this:
>
> dStats <- dailyStats(Portfolios = portfolio.st, use="Equity")
>

Thanks Ilya.
Cheers,
Mark


From wouter at morannon.org  Sat Sep 27 13:47:29 2014
From: wouter at morannon.org (Wouter Thielen)
Date: Sat, 27 Sep 2014 20:47:29 +0900
Subject: [R-SIG-Finance] RFinanceYJ and getSymbols for Yahoo Japan
Message-ID: <CACySJQURBdu52pZLj9QjUgHSngu8eR4Pi1ECYJyWmz2kY-AtLQ@mail.gmail.com>

Hello all,

First of all, let me introduce myself as I am new here. I am Wouter
Thielen, from the Netherlands, and living and working in Tokyo, Japan. I
have recently enrolled as an online master's student at the University of
Washington for the CFRM program.

I have been trading stocks on the Japanese market for a year now, and have
always wanted to be able to analyze them in R. I tried the RFinanceYJ
package, but it did not work, and still does not as of yesterday, when I
updated. They seem to be inactive for over a year.

So with the newly acquired R skills (thanks prof. Yollin!) I set out to
implement a getSymbols.yahooj function that would scrape HTML pages of
price history from Yahoo Japan, and create an xts object. The code so far
can be found on my Github account:

https://github.com/wthielen/YJStocks/blob/master/getSymbols.yahooj.R

It is based on getSymbols.yahoo.R from the quantmod package, and the only
thing I changed are lines 46-108. So far it works for:
- pricing data of stocks including volumes and adjusted closes
- pricing data of indices (e.g. NI225) which does not have volumes or
adjusted closes. The code for these indices end with ".O" from what I have
seen. Please correct me if I'm wrong.
- account for stock splits

If there is anything else that this function should be able to do, please
let me know.

Hope to hear feedback from you!

Wouter

	[[alternative HTML version deleted]]


From kevin.j.owens at gmail.com  Sat Sep 27 20:38:44 2014
From: kevin.j.owens at gmail.com (Kevin Owens)
Date: Sat, 27 Sep 2014 13:38:44 -0500
Subject: [R-SIG-Finance] what is the best fixed income platform?
Message-ID: <54270434.4060606@gmail.com>

I'd like to play with something like quantstrat, but it doesn't seem to 
support much fixed income securities, i.e. bonds, ABS/MBS, interest rate 
derivatives, swaps.

In general I'd like a package to model fixed income securities over 
time. maRketSim seems closest to what I'm looking for
http://cran.r-project.org/web/packages/maRketSim/index.html

but it doesn't look very sophisticated and it doesn't look like it's 
being actively developed. RQuantlib seems more sophisticated, but 
doesn't have much support for managing with portfolios, and I can't 
figure out what Quantlib is really doing under the hood.

I'd like a package that could take a portfolio of securities and 
interest rate paths over time, and calculate market values and cash flows.

If anyone has any advice about what packages might be best for this kind 
of thing I'd appreciate it.

Thank you,

Kevin


From ilya.kipnis at gmail.com  Sat Sep 27 20:45:29 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Sat, 27 Sep 2014 14:45:29 -0400
Subject: [R-SIG-Finance] what is the best fixed income platform?
In-Reply-To: <54270434.4060606@gmail.com>
References: <54270434.4060606@gmail.com>
Message-ID: <CA+oJuEFuZmEyux8a3H6=kNh29L7Ah5Wd3f2AhyfgyB-CmSfPzQ@mail.gmail.com>

It sounds like what you're looking for is a way to do valuation for bonds
via simulation. Quantstrat is a strategy creation platform, not a pricing
platform. Apples and oranges in this case.

Regarding portfolio management, what is it you're trying to do? If you have
returns for an instrument, then PortfolioAnalytics will do everything you
can possibly want, provided you know how to use it (non-trivial).

Sounds like you're looking for simulation libraries (MCMC? Bootstrapping?)
for which there are probably quite a few to choose from.

I'd recommend looking in the direction of MCMC, Bayesian analysis,
bootstrapping libraries, and other simulation-type libraries. Once you have
the desired simulation data, you can probably more accurately do bond
pricing, at which point, you can get your data into price or return space,
which would allow you to create trading strategies (quantstrat) or do
portfolio management (PortfolioAnalytics).

Hope this helps.



On Sat, Sep 27, 2014 at 2:38 PM, Kevin Owens <kevin.j.owens at gmail.com>
wrote:

> I'd like to play with something like quantstrat, but it doesn't seem to
> support much fixed income securities, i.e. bonds, ABS/MBS, interest rate
> derivatives, swaps.
>
> In general I'd like a package to model fixed income securities over time.
> maRketSim seems closest to what I'm looking for
> http://cran.r-project.org/web/packages/maRketSim/index.html
>
> but it doesn't look very sophisticated and it doesn't look like it's being
> actively developed. RQuantlib seems more sophisticated, but doesn't have
> much support for managing with portfolios, and I can't figure out what
> Quantlib is really doing under the hood.
>
> I'd like a package that could take a portfolio of securities and interest
> rate paths over time, and calculate market values and cash flows.
>
> If anyone has any advice about what packages might be best for this kind
> of thing I'd appreciate it.
>
> Thank you,
>
> Kevin
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From censix0 at gmail.com  Sun Sep 28 17:16:00 2014
From: censix0 at gmail.com (cen six)
Date: Sun, 28 Sep 2014 17:16:00 +0200
Subject: [R-SIG-Finance] What happens to IBrokers package if overloaded ?
In-Reply-To: <20140925144532.2355@web003.roc2.bluetie.com>
References: <20140925144532.2355@web003.roc2.bluetie.com>
Message-ID: <CAOGDGTYa_RTKjbw20x6Hz2g-AeSe1-16fvtaErLJcVEH=U+JbA@mail.gmail.com>

Reading 100 symbols every 5 secs with reqRealTimeBars() does not cause
performance problems.  What *may* cause performance trouble is the
processing you do AFTER receiving the data, e.g. calculate indicators,
refit-models,etc. But that entirely depends on how computationally
expensive   your decision-making process (=strategy) is.  If it takes
longer than 5 secs then you have a problem.

On Thu, Sep 25, 2014 at 8:45 PM, ce <zadig_1 at excite.com> wrote:

> Dear All,
>
> If I use reqRealTimeBars for 100 symbols every 5 sec on an average PC,
> would it cause performance issues ?
> Any data loss is possible or they just queued up ?
>
> Thanks a lot for reading.
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From a.chandhial at btinternet.com  Sun Sep 28 18:01:02 2014
From: a.chandhial at btinternet.com (amarjit chandhial)
Date: Sun, 28 Sep 2014 17:01:02 +0100 (BST)
Subject: [R-SIG-Finance] What happens to IBrokers package if overloaded ?
In-Reply-To: <CAOGDGTYa_RTKjbw20x6Hz2g-AeSe1-16fvtaErLJcVEH=U+JbA@mail.gmail.com>
References: <20140925144532.2355@web003.roc2.bluetie.com>
	<CAOGDGTYa_RTKjbw20x6Hz2g-AeSe1-16fvtaErLJcVEH=U+JbA@mail.gmail.com>
Message-ID: <23041230.28844.1411920062624.JavaMail.defaultUser@defaultHost>


Are there any simple examples in R for viewing real-time scrolling charts, updating real-time technical indicators, generating real-time alerts when MA's crossover/oscillators reach thresholds, etc ?


Amarjit




----Original message----
>From : censix0 at gmail.com
Date : 28/09/2014 - 16:16 (GMTST)
To : zadig_1 at excite.com
Cc : r-sig-finance at r-project.org
Subject : Re: [R-SIG-Finance] What happens to IBrokers package if overloaded ?

Reading 100 symbols every 5 secs with reqRealTimeBars() does not cause
performance problems.  What *may* cause performance trouble is the
processing you do AFTER receiving the data, e.g. calculate indicators,
refit-models,etc. But that entirely depends on how computationally
expensive   your decision-making process (=strategy) is.  If it takes
longer than 5 secs then you have a problem.

On Thu, Sep 25, 2014 at 8:45 PM, ce <zadig_1 at excite.com> wrote:

> Dear All,
>
> If I use reqRealTimeBars for 100 symbols every 5 sec on an average PC,
> would it cause performance issues ?
> Any data loss is possible or they just queued up ?
>
> Thanks a lot for reading.
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]

_______________________________________________
R-SIG-Finance at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-sig-finance
-- Subscriber-posting only. If you want to post, subscribe first.
-- Also note that this is not the r-help list where general R questions should go.


From carloslewlew at gmail.com  Mon Sep 29 03:11:10 2014
From: carloslewlew at gmail.com (Liu)
Date: Sun, 28 Sep 2014 21:11:10 -0400
Subject: [R-SIG-Finance] How to download options data in R from a csv list
	of underlying stock symbols?
Message-ID: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>

Hello everyone,


I've recently joined this mailing list for quantstrat. I hope not to ask
repetitive question but I haven't googled any effective solutions yet.


I have a csv file containing 100 stock symbols. I want to download the
option chains of each underlying including price, volume, IV, HV etc.
Hopefully with greeks too. EOD data from yahoo finance would be adequate
for now. I?m using R 3.1.1 on Windows 8, 64 bit.



At first, I tried ?quantmod? using ?getSymbols?, as a result I have got a
vector of stock symbols.



    ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")

    getSymbols(ticker, from=?2014-09-01?, to=Sys.date())



But it is not numerical options data, but just character symbols. (I might
understand it wrongly, please correct if I misuse "getSymbols" or other
functions)



Then I tried ?yahoo_opt? <
http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but this
script requires ?fCalander? which is no longer available in CRAN. I
downloaded the achive from here <
http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I couldn?t
install it. The last version of ?fCalander? seemed to be compatible with R
2.2, therefore I was unable to run the R file.



Please help with using quantmod/quantstrat more effectively, or other
available methods to download those options data. By the way how can I
search the old posts in this mailing list? Thank you.


Carlos

	[[alternative HTML version deleted]]


From ilya.kipnis at gmail.com  Mon Sep 29 03:40:36 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Sun, 28 Sep 2014 21:40:36 -0400
Subject: [R-SIG-Finance] Converting to weekly timestamps removes years from
 chart.TimeSeries (and its extensions)
Message-ID: <CA+oJuEFumTrraOFqwm1sidA7H1gJKmZPQfbzBf4iOMNHyQyLeQ@mail.gmail.com>

So something that just irritated me is this:

I'm replicating a strategy that uses weekly rebalancing, but when I go to
plot the equity curve, the years cut off on the x axis, which looks weird.

Here's my code:

require(quantstrat)

#long TLT 60%, leverage 3x to 180%, rebalance weekly, short VIX 40%
getSymbols("^VIX", from="1990-01-01")
getSymbols("TLT", from="1990-01-01")
VIX <- to.weekly(OHLC(VIX), OHLC=TRUE)
TLT <- to.weekly(OHLC(TLT), OHLC=TRUE)
vixRets <- Cl(VIX)/Op(VIX)-1
tltRets <- Cl(TLT)/Op(TLT)-1
both <- merge(vixRets, tltRets, join='inner')
colnames(both) <- c("VIX", "TLT")
portfRets <- -.4*both$VIX+1.8*both$TLT
colnames(portfRets) <- "VIXTLT"
charts.PerformanceSummary(portfRets)

Along with the attached picture.

Any tips on how to get the years back into the x axis would be appreciated.

Thanks.

-Ilya
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140928/fb364775/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: StructArb.png
Type: image/png
Size: 29654 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-finance/attachments/20140928/fb364775/attachment.png>

From markknecht at gmail.com  Mon Sep 29 04:01:25 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Sun, 28 Sep 2014 19:01:25 -0700
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
Message-ID: <CAK2H+eex7Yj-T6dOYeCw8GhXKezottnFW3xBpfWWyyKMV6VTGQ@mail.gmail.com>

Start looking at getOptionChain

On 9/28/14, Liu <carloslewlew at gmail.com> wrote:
> Hello everyone,
>
>
> I've recently joined this mailing list for quantstrat. I hope not to ask
> repetitive question but I haven't googled any effective solutions yet.
>
>
> I have a csv file containing 100 stock symbols. I want to download the
> option chains of each underlying including price, volume, IV, HV etc.
> Hopefully with greeks too. EOD data from yahoo finance would be adequate
> for now. I?m using R 3.1.1 on Windows 8, 64 bit.
>
>
>
> At first, I tried ?quantmod? using ?getSymbols?, as a result I have got a
> vector of stock symbols.
>
>
>
>     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
>
>     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
>
>
>
> But it is not numerical options data, but just character symbols. (I might
> understand it wrongly, please correct if I misuse "getSymbols" or other
> functions)
>
>
>
> Then I tried ?yahoo_opt? <
> http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but this
> script requires ?fCalander? which is no longer available in CRAN. I
> downloaded the achive from here <
> http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I couldn?t
> install it. The last version of ?fCalander? seemed to be compatible with R
> 2.2, therefore I was unable to run the R file.
>
>
>
> Please help with using quantmod/quantstrat more effectively, or other
> available methods to download those options data. By the way how can I
> search the old posts in this mailing list? Thank you.
>
>
> Carlos
>
> 	[[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.


From brian at braverock.com  Mon Sep 29 04:05:18 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Sun, 28 Sep 2014 21:05:18 -0500
Subject: [R-SIG-Finance] Converting to weekly timestamps removes years
 from chart.TimeSeries (and its extensions)
In-Reply-To: <CA+oJuEFumTrraOFqwm1sidA7H1gJKmZPQfbzBf4iOMNHyQyLeQ@mail.gmail.com>
References: <CA+oJuEFumTrraOFqwm1sidA7H1gJKmZPQfbzBf4iOMNHyQyLeQ@mail.gmail.com>
Message-ID: <5428BE5E.6020807@braverock.com>

maybe RTFM?

if you follow the seeAlso links in the pdf or online help, you'll find

?chart.TimeSeries

see

data.format


charts.PerformanceSummary(portfRets,date.format="%m/%y")




On 09/28/2014 08:40 PM, Ilya Kipnis wrote:
> So something that just irritated me is this:
>
> I'm replicating a strategy that uses weekly rebalancing, but when I go
> to plot the equity curve, the years cut off on the x axis, which looks
> weird.
>
> Here's my code:
>
> require(quantstrat)
>
> #long TLT 60%, leverage 3x to 180%, rebalance weekly, short VIX 40%
> getSymbols("^VIX", from="1990-01-01")
> getSymbols("TLT", from="1990-01-01")
> VIX <- to.weekly(OHLC(VIX), OHLC=TRUE)
> TLT <- to.weekly(OHLC(TLT), OHLC=TRUE)
> vixRets <- Cl(VIX)/Op(VIX)-1
> tltRets <- Cl(TLT)/Op(TLT)-1
> both <- merge(vixRets, tltRets, join='inner')
> colnames(both) <- c("VIX", "TLT")
> portfRets <- -.4*both$VIX+1.8*both$TLT
> colnames(portfRets) <- "VIXTLT"
> charts.PerformanceSummary(portfRets)
>
> Along with the attached picture.
>
> Any tips on how to get the years back into the x axis would be appreciated.
>
> Thanks.
>
> -Ilya


From gsee000 at gmail.com  Mon Sep 29 04:05:54 2014
From: gsee000 at gmail.com (G See)
Date: Sun, 28 Sep 2014 21:05:54 -0500
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
Message-ID: <CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>

Please don't cross post:
http://stackoverflow.com/questions/26091219/how-to-download-options-data-in-r-from-a-csv-list-of-underlying-stock-symbols

On Sun, Sep 28, 2014 at 8:11 PM, Liu <carloslewlew at gmail.com> wrote:
> Hello everyone,
>
>
> I've recently joined this mailing list for quantstrat. I hope not to ask
> repetitive question but I haven't googled any effective solutions yet.
>
>
> I have a csv file containing 100 stock symbols. I want to download the
> option chains of each underlying including price, volume, IV, HV etc.
> Hopefully with greeks too. EOD data from yahoo finance would be adequate
> for now. I?m using R 3.1.1 on Windows 8, 64 bit.
>
>
>
> At first, I tried ?quantmod? using ?getSymbols?, as a result I have got a
> vector of stock symbols.
>
>
>
>     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
>
>     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
>
>
>
> But it is not numerical options data, but just character symbols. (I might
> understand it wrongly, please correct if I misuse "getSymbols" or other
> functions)
>
>
>
> Then I tried ?yahoo_opt? <
> http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but this
> script requires ?fCalander? which is no longer available in CRAN. I
> downloaded the achive from here <
> http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I couldn?t
> install it. The last version of ?fCalander? seemed to be compatible with R
> 2.2, therefore I was unable to run the R file.
>
>
>
> Please help with using quantmod/quantstrat more effectively, or other
> available methods to download those options data. By the way how can I
> search the old posts in this mailing list? Thank you.
>
>
> Carlos
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


From carloslewlew at gmail.com  Mon Sep 29 04:09:58 2014
From: carloslewlew at gmail.com (Liu)
Date: Sun, 28 Sep 2014 22:09:58 -0400
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
	<CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
Message-ID: <CAMLM=SAR_=aOczLD9L0DH=QLCTVX3C4AxrR1noh-mz=yntpWHA@mail.gmail.com>

Great! Thanks Mark and Gsee. getOptionChain worked out. I'll close the
question on SO. :-)

On Sun, Sep 28, 2014 at 10:05 PM, G See <gsee000 at gmail.com> wrote:

> Please don't cross post:
>
> http://stackoverflow.com/questions/26091219/how-to-download-options-data-in-r-from-a-csv-list-of-underlying-stock-symbols
>
> On Sun, Sep 28, 2014 at 8:11 PM, Liu <carloslewlew at gmail.com> wrote:
> > Hello everyone,
> >
> >
> > I've recently joined this mailing list for quantstrat. I hope not to ask
> > repetitive question but I haven't googled any effective solutions yet.
> >
> >
> > I have a csv file containing 100 stock symbols. I want to download the
> > option chains of each underlying including price, volume, IV, HV etc.
> > Hopefully with greeks too. EOD data from yahoo finance would be adequate
> > for now. I?m using R 3.1.1 on Windows 8, 64 bit.
> >
> >
> >
> > At first, I tried ?quantmod? using ?getSymbols?, as a result I have got a
> > vector of stock symbols.
> >
> >
> >
> >     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
> >
> >     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
> >
> >
> >
> > But it is not numerical options data, but just character symbols. (I
> might
> > understand it wrongly, please correct if I misuse "getSymbols" or other
> > functions)
> >
> >
> >
> > Then I tried ?yahoo_opt? <
> > http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but this
> > script requires ?fCalander? which is no longer available in CRAN. I
> > downloaded the achive from here <
> > http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I
> couldn?t
> > install it. The last version of ?fCalander? seemed to be compatible with
> R
> > 2.2, therefore I was unable to run the R file.
> >
> >
> >
> > Please help with using quantmod/quantstrat more effectively, or other
> > available methods to download those options data. By the way how can I
> > search the old posts in this mailing list? Thank you.
> >
> >
> > Carlos
> >
> >         [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From josh.m.ulrich at gmail.com  Mon Sep 29 04:22:16 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Sun, 28 Sep 2014 21:22:16 -0500
Subject: [R-SIG-Finance] Converting to weekly timestamps removes years
 from chart.TimeSeries (and its extensions)
In-Reply-To: <CA+oJuEFumTrraOFqwm1sidA7H1gJKmZPQfbzBf4iOMNHyQyLeQ@mail.gmail.com>
References: <CA+oJuEFumTrraOFqwm1sidA7H1gJKmZPQfbzBf4iOMNHyQyLeQ@mail.gmail.com>
Message-ID: <CAPPM_gT8oz6v28fuvS1r+7D45OhhNStyHRNiS8KE+QBMUM+xvA@mail.gmail.com>

I get a very reasonable chart and axis when I run your code in a clean
session.  The years aren't simply cut off the x-axis labels, all the
"months" are "Aug" and the grid lines extend beyond the edges of the
plots.  I think something is funky with your R session.
--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


On Sun, Sep 28, 2014 at 8:40 PM, Ilya Kipnis <ilya.kipnis at gmail.com> wrote:
> So something that just irritated me is this:
>
> I'm replicating a strategy that uses weekly rebalancing, but when I go to
> plot the equity curve, the years cut off on the x axis, which looks weird.
>
> Here's my code:
>
> require(quantstrat)
>
> #long TLT 60%, leverage 3x to 180%, rebalance weekly, short VIX 40%
> getSymbols("^VIX", from="1990-01-01")
> getSymbols("TLT", from="1990-01-01")
> VIX <- to.weekly(OHLC(VIX), OHLC=TRUE)
> TLT <- to.weekly(OHLC(TLT), OHLC=TRUE)
> vixRets <- Cl(VIX)/Op(VIX)-1
> tltRets <- Cl(TLT)/Op(TLT)-1
> both <- merge(vixRets, tltRets, join='inner')
> colnames(both) <- c("VIX", "TLT")
> portfRets <- -.4*both$VIX+1.8*both$TLT
> colnames(portfRets) <- "VIXTLT"
> charts.PerformanceSummary(portfRets)
>
> Along with the attached picture.
>
> Any tips on how to get the years back into the x axis would be appreciated.
>
> Thanks.
>
> -Ilya
>
>
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions
> should go.


From ilya.kipnis at gmail.com  Mon Sep 29 04:25:49 2014
From: ilya.kipnis at gmail.com (Ilya Kipnis)
Date: Sun, 28 Sep 2014 22:25:49 -0400
Subject: [R-SIG-Finance] Converting to weekly timestamps removes years
 from chart.TimeSeries (and its extensions)
In-Reply-To: <CAPPM_gT8oz6v28fuvS1r+7D45OhhNStyHRNiS8KE+QBMUM+xvA@mail.gmail.com>
References: <CA+oJuEFumTrraOFqwm1sidA7H1gJKmZPQfbzBf4iOMNHyQyLeQ@mail.gmail.com>
	<CAPPM_gT8oz6v28fuvS1r+7D45OhhNStyHRNiS8KE+QBMUM+xvA@mail.gmail.com>
Message-ID: <CA+oJuEHN+SURtdfywQ83R6XBskdNbHTj5C-V08u555zD2EExfw@mail.gmail.com>

Well, this is really irritating. I just loaded up dplyr and suddenly got
those same issues, but when I didn't have it loaded, everything went
smoothly.

Very strange.

On Sun, Sep 28, 2014 at 10:22 PM, Joshua Ulrich <josh.m.ulrich at gmail.com>
wrote:

> I get a very reasonable chart and axis when I run your code in a clean
> session.  The years aren't simply cut off the x-axis labels, all the
> "months" are "Aug" and the grid lines extend beyond the edges of the
> plots.  I think something is funky with your R session.
> --
> Joshua Ulrich  |  about.me/joshuaulrich
> FOSS Trading  |  www.fosstrading.com
>
>
> On Sun, Sep 28, 2014 at 8:40 PM, Ilya Kipnis <ilya.kipnis at gmail.com>
> wrote:
> > So something that just irritated me is this:
> >
> > I'm replicating a strategy that uses weekly rebalancing, but when I go to
> > plot the equity curve, the years cut off on the x axis, which looks
> weird.
> >
> > Here's my code:
> >
> > require(quantstrat)
> >
> > #long TLT 60%, leverage 3x to 180%, rebalance weekly, short VIX 40%
> > getSymbols("^VIX", from="1990-01-01")
> > getSymbols("TLT", from="1990-01-01")
> > VIX <- to.weekly(OHLC(VIX), OHLC=TRUE)
> > TLT <- to.weekly(OHLC(TLT), OHLC=TRUE)
> > vixRets <- Cl(VIX)/Op(VIX)-1
> > tltRets <- Cl(TLT)/Op(TLT)-1
> > both <- merge(vixRets, tltRets, join='inner')
> > colnames(both) <- c("VIX", "TLT")
> > portfRets <- -.4*both$VIX+1.8*both$TLT
> > colnames(portfRets) <- "VIXTLT"
> > charts.PerformanceSummary(portfRets)
> >
> > Along with the attached picture.
> >
> > Any tips on how to get the years back into the x axis would be
> appreciated.
> >
> > Thanks.
> >
> > -Ilya
> >
> >
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> > should go.
>

	[[alternative HTML version deleted]]


From carloslewlew at gmail.com  Mon Sep 29 04:27:20 2014
From: carloslewlew at gmail.com (Liu)
Date: Sun, 28 Sep 2014 22:27:20 -0400
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
	<CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
Message-ID: <CAMLM=SCJo4db=FSJ4HiMEDM8wGJnEUx1JR9cK2POSbJgb6Tj7w@mail.gmail.com>

Hello G See,
May I ask about the usage of getOptionChain? If I want to download a whole
month options EOD data, what do I do? I tried:
AA<-getOptionChain(tick[1],from="2014-09-01",to="2014-09-28")
but it only returns 1 day option chain data, which is same as:
AA<-getOptionChain(tick[1])

Thank you
Carlos

On Sun, Sep 28, 2014 at 10:05 PM, G See <gsee000 at gmail.com> wrote:

> Please don't cross post:
>
> http://stackoverflow.com/questions/26091219/how-to-download-options-data-in-r-from-a-csv-list-of-underlying-stock-symbols
>
> On Sun, Sep 28, 2014 at 8:11 PM, Liu <carloslewlew at gmail.com> wrote:
> > Hello everyone,
> >
> >
> > I've recently joined this mailing list for quantstrat. I hope not to ask
> > repetitive question but I haven't googled any effective solutions yet.
> >
> >
> > I have a csv file containing 100 stock symbols. I want to download the
> > option chains of each underlying including price, volume, IV, HV etc.
> > Hopefully with greeks too. EOD data from yahoo finance would be adequate
> > for now. I?m using R 3.1.1 on Windows 8, 64 bit.
> >
> >
> >
> > At first, I tried ?quantmod? using ?getSymbols?, as a result I have got a
> > vector of stock symbols.
> >
> >
> >
> >     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
> >
> >     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
> >
> >
> >
> > But it is not numerical options data, but just character symbols. (I
> might
> > understand it wrongly, please correct if I misuse "getSymbols" or other
> > functions)
> >
> >
> >
> > Then I tried ?yahoo_opt? <
> > http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but this
> > script requires ?fCalander? which is no longer available in CRAN. I
> > downloaded the achive from here <
> > http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I
> couldn?t
> > install it. The last version of ?fCalander? seemed to be compatible with
> R
> > 2.2, therefore I was unable to run the R file.
> >
> >
> >
> > Please help with using quantmod/quantstrat more effectively, or other
> > available methods to download those options data. By the way how can I
> > search the old posts in this mailing list? Thank you.
> >
> >
> > Carlos
> >
> >         [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-SIG-Finance at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> > -- Subscriber-posting only. If you want to post, subscribe first.
> > -- Also note that this is not the r-help list where general R questions
> should go.
>

	[[alternative HTML version deleted]]


From gsee000 at gmail.com  Mon Sep 29 04:33:06 2014
From: gsee000 at gmail.com (G See)
Date: Sun, 28 Sep 2014 21:33:06 -0500
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CAMLM=SCJo4db=FSJ4HiMEDM8wGJnEUx1JR9cK2POSbJgb6Tj7w@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
	<CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
	<CAMLM=SCJo4db=FSJ4HiMEDM8wGJnEUx1JR9cK2POSbJgb6Tj7w@mail.gmail.com>
Message-ID: <CA+xi=qaj-3tYQeN83aVUpWnuKzovuMZReZUAkunRYK2yd6qZKw@mail.gmail.com>

getOptionChain() only provides the most recent quote, not historical
time series data.  That's why I didn't answer your question on SO. ;-)

Sorry,
Garrett

On Sun, Sep 28, 2014 at 9:27 PM, Liu <carloslewlew at gmail.com> wrote:
> Hello G See,
> May I ask about the usage of getOptionChain? If I want to download a whole
> month options EOD data, what do I do? I tried:
> AA<-getOptionChain(tick[1],from="2014-09-01",to="2014-09-28")
> but it only returns 1 day option chain data, which is same as:
> AA<-getOptionChain(tick[1])
>
> Thank you
> Carlos
>
> On Sun, Sep 28, 2014 at 10:05 PM, G See <gsee000 at gmail.com> wrote:
>>
>> Please don't cross post:
>>
>> http://stackoverflow.com/questions/26091219/how-to-download-options-data-in-r-from-a-csv-list-of-underlying-stock-symbols
>>
>> On Sun, Sep 28, 2014 at 8:11 PM, Liu <carloslewlew at gmail.com> wrote:
>> > Hello everyone,
>> >
>> >
>> > I've recently joined this mailing list for quantstrat. I hope not to ask
>> > repetitive question but I haven't googled any effective solutions yet.
>> >
>> >
>> > I have a csv file containing 100 stock symbols. I want to download the
>> > option chains of each underlying including price, volume, IV, HV etc.
>> > Hopefully with greeks too. EOD data from yahoo finance would be adequate
>> > for now. I?m using R 3.1.1 on Windows 8, 64 bit.
>> >
>> >
>> >
>> > At first, I tried ?quantmod? using ?getSymbols?, as a result I have got
>> > a
>> > vector of stock symbols.
>> >
>> >
>> >
>> >     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
>> >
>> >     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
>> >
>> >
>> >
>> > But it is not numerical options data, but just character symbols. (I
>> > might
>> > understand it wrongly, please correct if I misuse "getSymbols" or other
>> > functions)
>> >
>> >
>> >
>> > Then I tried ?yahoo_opt? <
>> > http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but this
>> > script requires ?fCalander? which is no longer available in CRAN. I
>> > downloaded the achive from here <
>> > http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I
>> > couldn?t
>> > install it. The last version of ?fCalander? seemed to be compatible with
>> > R
>> > 2.2, therefore I was unable to run the R file.
>> >
>> >
>> >
>> > Please help with using quantmod/quantstrat more effectively, or other
>> > available methods to download those options data. By the way how can I
>> > search the old posts in this mailing list? Thank you.
>> >
>> >
>> > Carlos
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > _______________________________________________
>> > R-SIG-Finance at r-project.org mailing list
>> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> > -- Subscriber-posting only. If you want to post, subscribe first.
>> > -- Also note that this is not the r-help list where general R questions
>> > should go.
>
>


From carloslewlew at gmail.com  Mon Sep 29 04:35:27 2014
From: carloslewlew at gmail.com (Liu)
Date: Sun, 28 Sep 2014 22:35:27 -0400
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CA+xi=qaj-3tYQeN83aVUpWnuKzovuMZReZUAkunRYK2yd6qZKw@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
	<CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
	<CAMLM=SCJo4db=FSJ4HiMEDM8wGJnEUx1JR9cK2POSbJgb6Tj7w@mail.gmail.com>
	<CA+xi=qaj-3tYQeN83aVUpWnuKzovuMZReZUAkunRYK2yd6qZKw@mail.gmail.com>
Message-ID: <CAMLM=SDqC7s9MFB0JUAh--5i1RadHh=M+EmBRJjhZJGbU5mwGw@mail.gmail.com>

That's a pity. Do you know any alternative tools/methods to get the
historical data?
Thanks

On Sunday, September 28, 2014, G See <gsee000 at gmail.com> wrote:

> getOptionChain() only provides the most recent quote, not historical
> time series data.  That's why I didn't answer your question on SO. ;-)
>
> Sorry,
> Garrett
>
> On Sun, Sep 28, 2014 at 9:27 PM, Liu <carloslewlew at gmail.com
> <javascript:;>> wrote:
> > Hello G See,
> > May I ask about the usage of getOptionChain? If I want to download a
> whole
> > month options EOD data, what do I do? I tried:
> > AA<-getOptionChain(tick[1],from="2014-09-01",to="2014-09-28")
> > but it only returns 1 day option chain data, which is same as:
> > AA<-getOptionChain(tick[1])
> >
> > Thank you
> > Carlos
> >
> > On Sun, Sep 28, 2014 at 10:05 PM, G See <gsee000 at gmail.com
> <javascript:;>> wrote:
> >>
> >> Please don't cross post:
> >>
> >>
> http://stackoverflow.com/questions/26091219/how-to-download-options-data-in-r-from-a-csv-list-of-underlying-stock-symbols
> >>
> >> On Sun, Sep 28, 2014 at 8:11 PM, Liu <carloslewlew at gmail.com
> <javascript:;>> wrote:
> >> > Hello everyone,
> >> >
> >> >
> >> > I've recently joined this mailing list for quantstrat. I hope not to
> ask
> >> > repetitive question but I haven't googled any effective solutions yet.
> >> >
> >> >
> >> > I have a csv file containing 100 stock symbols. I want to download the
> >> > option chains of each underlying including price, volume, IV, HV etc.
> >> > Hopefully with greeks too. EOD data from yahoo finance would be
> adequate
> >> > for now. I?m using R 3.1.1 on Windows 8, 64 bit.
> >> >
> >> >
> >> >
> >> > At first, I tried ?quantmod? using ?getSymbols?, as a result I have
> got
> >> > a
> >> > vector of stock symbols.
> >> >
> >> >
> >> >
> >> >     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
> >> >
> >> >     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
> >> >
> >> >
> >> >
> >> > But it is not numerical options data, but just character symbols. (I
> >> > might
> >> > understand it wrongly, please correct if I misuse "getSymbols" or
> other
> >> > functions)
> >> >
> >> >
> >> >
> >> > Then I tried ?yahoo_opt? <
> >> > http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but
> this
> >> > script requires ?fCalander? which is no longer available in CRAN. I
> >> > downloaded the achive from here <
> >> > http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I
> >> > couldn?t
> >> > install it. The last version of ?fCalander? seemed to be compatible
> with
> >> > R
> >> > 2.2, therefore I was unable to run the R file.
> >> >
> >> >
> >> >
> >> > Please help with using quantmod/quantstrat more effectively, or other
> >> > available methods to download those options data. By the way how can I
> >> > search the old posts in this mailing list? Thank you.
> >> >
> >> >
> >> > Carlos
> >> >
> >> >         [[alternative HTML version deleted]]
> >> >
> >> > _______________________________________________
> >> > R-SIG-Finance at r-project.org <javascript:;> mailing list
> >> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> >> > -- Subscriber-posting only. If you want to post, subscribe first.
> >> > -- Also note that this is not the r-help list where general R
> questions
> >> > should go.
> >
> >
>

	[[alternative HTML version deleted]]


From gsee000 at gmail.com  Mon Sep 29 05:03:31 2014
From: gsee000 at gmail.com (G See)
Date: Sun, 28 Sep 2014 22:03:31 -0500
Subject: [R-SIG-Finance] How to download options data in R from a csv
 list of underlying stock symbols?
In-Reply-To: <CAMLM=SDqC7s9MFB0JUAh--5i1RadHh=M+EmBRJjhZJGbU5mwGw@mail.gmail.com>
References: <CAMLM=SAw13tp3iXOkQjjjFxPQutoU_BLAKnfP+5WWxu36SCAtA@mail.gmail.com>
	<CA+xi=qaZra7q3cN3ptWnitCfPcsbOvaCL59x+74=chmtd54a+A@mail.gmail.com>
	<CAMLM=SCJo4db=FSJ4HiMEDM8wGJnEUx1JR9cK2POSbJgb6Tj7w@mail.gmail.com>
	<CA+xi=qaj-3tYQeN83aVUpWnuKzovuMZReZUAkunRYK2yd6qZKw@mail.gmail.com>
	<CAMLM=SDqC7s9MFB0JUAh--5i1RadHh=M+EmBRJjhZJGbU5mwGw@mail.gmail.com>
Message-ID: <CA+xi=qaA+DnSU2hQdap84hcLRHX2+ctLz-zCKbuNc0VxhAgihw@mail.gmail.com>

That's not really an R question, but you could get historical options
prices with the IBrokers package if you have an Interactive Brokers
account, or with the Rbbg package if you have a Bloomberg.

Garrett

On Sun, Sep 28, 2014 at 9:35 PM, Liu <carloslewlew at gmail.com> wrote:
> That's a pity. Do you know any alternative tools/methods to get the
> historical data?
> Thanks
>
>
> On Sunday, September 28, 2014, G See <gsee000 at gmail.com> wrote:
>>
>> getOptionChain() only provides the most recent quote, not historical
>> time series data.  That's why I didn't answer your question on SO. ;-)
>>
>> Sorry,
>> Garrett
>>
>> On Sun, Sep 28, 2014 at 9:27 PM, Liu <carloslewlew at gmail.com> wrote:
>> > Hello G See,
>> > May I ask about the usage of getOptionChain? If I want to download a
>> > whole
>> > month options EOD data, what do I do? I tried:
>> > AA<-getOptionChain(tick[1],from="2014-09-01",to="2014-09-28")
>> > but it only returns 1 day option chain data, which is same as:
>> > AA<-getOptionChain(tick[1])
>> >
>> > Thank you
>> > Carlos
>> >
>> > On Sun, Sep 28, 2014 at 10:05 PM, G See <gsee000 at gmail.com> wrote:
>> >>
>> >> Please don't cross post:
>> >>
>> >>
>> >> http://stackoverflow.com/questions/26091219/how-to-download-options-data-in-r-from-a-csv-list-of-underlying-stock-symbols
>> >>
>> >> On Sun, Sep 28, 2014 at 8:11 PM, Liu <carloslewlew at gmail.com> wrote:
>> >> > Hello everyone,
>> >> >
>> >> >
>> >> > I've recently joined this mailing list for quantstrat. I hope not to
>> >> > ask
>> >> > repetitive question but I haven't googled any effective solutions
>> >> > yet.
>> >> >
>> >> >
>> >> > I have a csv file containing 100 stock symbols. I want to download
>> >> > the
>> >> > option chains of each underlying including price, volume, IV, HV etc.
>> >> > Hopefully with greeks too. EOD data from yahoo finance would be
>> >> > adequate
>> >> > for now. I?m using R 3.1.1 on Windows 8, 64 bit.
>> >> >
>> >> >
>> >> >
>> >> > At first, I tried ?quantmod? using ?getSymbols?, as a result I have
>> >> > got
>> >> > a
>> >> > vector of stock symbols.
>> >> >
>> >> >
>> >> >
>> >> >     ticker<-read.csv("C:/User/User/Documents/equity ticker.csv")
>> >> >
>> >> >     getSymbols(ticker, from=?2014-09-01?, to=Sys.date())
>> >> >
>> >> >
>> >> >
>> >> > But it is not numerical options data, but just character symbols. (I
>> >> > might
>> >> > understand it wrongly, please correct if I misuse "getSymbols" or
>> >> > other
>> >> > functions)
>> >> >
>> >> >
>> >> >
>> >> > Then I tried ?yahoo_opt? <
>> >> > http://page.math.tu-berlin.de/~mkeller/index.php?target=rcode>, but
>> >> > this
>> >> > script requires ?fCalander? which is no longer available in CRAN. I
>> >> > downloaded the achive from here <
>> >> > http://cran.r-project.org/src/contrib/Archive/fCalendar/ > But I
>> >> > couldn?t
>> >> > install it. The last version of ?fCalander? seemed to be compatible
>> >> > with
>> >> > R
>> >> > 2.2, therefore I was unable to run the R file.
>> >> >
>> >> >
>> >> >
>> >> > Please help with using quantmod/quantstrat more effectively, or other
>> >> > available methods to download those options data. By the way how can
>> >> > I
>> >> > search the old posts in this mailing list? Thank you.
>> >> >
>> >> >
>> >> > Carlos
>> >> >
>> >> >         [[alternative HTML version deleted]]
>> >> >
>> >> > _______________________________________________
>> >> > R-SIG-Finance at r-project.org mailing list
>> >> > https://stat.ethz.ch/mailman/listinfo/r-sig-finance
>> >> > -- Subscriber-posting only. If you want to post, subscribe first.
>> >> > -- Also note that this is not the r-help list where general R
>> >> > questions
>> >> > should go.
>> >
>> >


From junluke at gmail.com  Mon Sep 29 05:48:54 2014
From: junluke at gmail.com (jun wang)
Date: Sun, 28 Sep 2014 23:48:54 -0400
Subject: [R-SIG-Finance] time format convert
Message-ID: <CAPD4hGAyxwmZLN1ctEXFU=kx05-vTOuvRp09D4COf7DutHL_kg@mail.gmail.com>

Dear all,

I have the following data format:

                                          x
2012-02-24 10:10:00 1.267113e-05
2012-02-27 10:10:00 2.397383e-05
2012-02-28 10:10:00 2.576296e-05
2012-02-29 10:10:00 4.171427e-05
2012-03-01 10:10:00 3.855354e-05
2012-03-02 10:10:00 2.446517e-05
2012-03-05 10:10:00 2.565693e-05
2012-03-06 10:10:00 2.137300e-05
2012-03-07 10:10:00 1.953491e-05
2012-03-08 10:10:00 1.425474e-05

I was wondering if there is any way to convert this into the following
format,basically get rid of the time,just keep the data.

                                         x
2012-02-24  1.267113e-05
2012-02-27  2.397383e-05
2012-02-28  2.576296e-05
2012-02-29  4.171427e-05
2012-03-01  3.855354e-05
2012-03-02  2.446517e-05
2012-03-05  2.565693e-05
2012-03-06  2.137300e-05
2012-03-07  1.953491e-05
2012-03-08  1.425474e-05

Many thanks!

Jun

	[[alternative HTML version deleted]]


From anand.chirag at gmail.com  Mon Sep 29 07:30:21 2014
From: anand.chirag at gmail.com (Chirag Anand)
Date: Mon, 29 Sep 2014 11:00:21 +0530
Subject: [R-SIG-Finance] time format convert
In-Reply-To: <CAPD4hGAyxwmZLN1ctEXFU=kx05-vTOuvRp09D4COf7DutHL_kg@mail.gmail.com>
References: <CAPD4hGAyxwmZLN1ctEXFU=kx05-vTOuvRp09D4COf7DutHL_kg@mail.gmail.com>
Message-ID: <CAOS9=__Noki1v203Rva+NLG1ObXXWTYymaUxW+Q3vex5b4_oiA@mail.gmail.com>

On 29 September 2014 09:18, jun wang <junluke at gmail.com> wrote:
> Dear all,
>
> I have the following data format:
>
>                                           x
> 2012-02-24 10:10:00 1.267113e-05
> 2012-02-27 10:10:00 2.397383e-05
> 2012-02-28 10:10:00 2.576296e-05
> 2012-02-29 10:10:00 4.171427e-05
> 2012-03-01 10:10:00 3.855354e-05
> 2012-03-02 10:10:00 2.446517e-05
> 2012-03-05 10:10:00 2.565693e-05
> 2012-03-06 10:10:00 2.137300e-05
> 2012-03-07 10:10:00 1.953491e-05
> 2012-03-08 10:10:00 1.425474e-05
>
> I was wondering if there is any way to convert this into the following
> format,basically get rid of the time,just keep the data.

Convert timestamps to a time based object if they are not already and
use format() to only pull out the dates.

-- 
Chirag Anand
http://atvariance.in/chiraganand


From treydog999 at gmail.com  Tue Sep 30 09:34:24 2014
From: treydog999 at gmail.com (Derek Wong)
Date: Tue, 30 Sep 2014 02:34:24 -0500
Subject: [R-SIG-Finance] quantstrat help - simple combine error using
	windows and walk.forward
In-Reply-To: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>
References: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>
Message-ID: <CALQudT9az9UtqdvhkeH0HrLSh5-mcnaUdm2stZW_BuB6+mDXuA@mail.gmail.com>

Hello,

I have been able to reproduce this error in Ubuntu based system as well not
just on windows. I was wondering if anyone had any insights or ways to to
solve this or create a work around.  If there is any additional information
you require let me know. Please I would really appreciate help on this. It
is totally out of my depth and I am hoping that this fine community can
help.

On Wed, Sep 24, 2014 at 9:36 PM, Derek Wong <treydog999 at gmail.com> wrote:

> Hello,
>
> I am having a lot of trouble with using walk.forward.in windows. i get
> the following error. This may be related to bug #5814. If someone could
> please help me i would really appreciate it. The reproducible code below is
> based on the pair_trade example. Thanks.
>
> error calling combine function:
> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
> result.6,     result.7, result.8, result.9, result.10, result.11,
> result.12,     result.13, result.14, result.15, result.16, result.17,
> result.18,     result.19, result.20, result.21, result.22, result.23,
> result.24,     result.25, result.26, result.27, result.28, result.29,
> result.30,     result.31, result.32, result.33, result.34, result.35,
> result.36,     result.37, result.38, result.39, result.40, result.41,
> result.42,     result.43, result.44, result.45, result.46, result.47,
> result.48,     result.49, result.50, result.51, result.52, result.53,
> result.54,     result.55, result.56, result.57, result.58, result.59,
> result.60,     result.61, result.62, result.63, result.64, result.65,
> result.66,     result.67, result.68, result.69, result.70, result.71,
> result.72,     result.73, result.74, result.75, result.76, result.77,
> result.78,     result.79, result.80, result.81, result.82, result.83,
> result.84,     result.85, result.86, result.87, result.88, result.89,
> result.90,     result.91, result.92, result.93, result.94, result.95,
> result.96,     result.97, result.98, result.99, result.100, result.101,
> result.102, result.103, result.104, result.105, result.106,     result.107,
> result.108, result.109, result.110, result.111,     result.112, result.113,
> result.114, result.115, result.116,     result.117, result.118, result.119,
> result.120, result.121,     result.122, result.123, result.124, result.125,
> result.126,     result.127, result.128, result.129, result.130, result.131,
>     result.132, result.133, result.134, result.135, result.136,
> result.137, result.138, result.139, result.140, result.141,     result.142,
> result.143, result.144, result.145, result.146,     result.147, result.148,
> result.149, result.150, result.151,     result.152, result.153, result.154,
> result.155, result.156,     result.157, result.158, result.159, result.160,
> result.161,     result.162, result.163, result.164, result.165, result.166,
>     result.167, result.168, result.169, result.170, result.171,
> result.172, result.173, result.174, result.175, result.176,     result.177,
> result.178, result.179, result.180): attempt to select less than one
> element>
> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st =
> portfolio1.st,  :
>   obj.func() returned empty result
> In addition: Warning message:
> In max(x$tradeStats$Net.Trading.PL <http://net.trading.pl/>) :
>   no non-missing arguments to max; returning -Inf
>
>
> Reproducable code below:
> ------------------------------------------------------------
>
>
> #Kindly contributed to quantstrat by Garrett See
> #code borrowed heavily from existing quantstrat demos
>
> # This is a simple pairs trading example intended to illustrate how you can
> # extend existing quantstrat functionality.  It uses addPosLimits to specify
> # levels and position limits, and shows how to pass a custom order sizing
> # function to osFUN
>
> # Note that it would be easier to build a spread first and treat it as a single
> # instrument instead of dealing with a portfolio of stocks.
>
> ## given 2 stocks, calculate the ratio of their notional values.  If the ratio
> # falls below it's 2 stdev band, then when it crosses back above it, buy stock 1
> # and sell stock 2.  If the ratio rises above it's 2 stdev band, then when it
> # crosses back below it, sell stock 1 and buy stock 2.  If the ratio crosses
> # its moving average, then flatten any open positions.
>
> # The Qty of Stock A that it buys (sells) = MaxPos / lvls
> # The Qty of Stock B that is sells (buys) = MaxPos * Ratio / lvls
>
> require(quantstrat)
>
> suppressWarnings(rm("order_book.pair1",pos=.strategy))
> suppressWarnings(rm("account.pairs", "portfolio.pair1", pos=.blotter))
> suppressWarnings(rm("initDate", "endDate", "startDate", "initEq", "SD", "N",
>                     "symb1", "symb2", "portfolio1.st", "account.st",
>                     "pairStrat", "out1"))
>
> ##### PLACE DEMO AND TEST DATES HERE #################
> #
> #if(isTRUE(options('in_test')$in_test))
> #  # use test dates
> #  {initDate="2011-01-01"
> #  endDate="2012-12-31"
> #  } else
> #  # use demo defaults
> #  {initDate="1999-12-31"
> #  endDate=Sys.Date()}
>
> initDate <- '2009-01-01'
> endDate <- '2011-05-01'
> startDate <- '2009-01-02'
> initEq <- 100000
> SD <- 2
> N <- 20
>
> MaxPos <- 1500  #max position in stockA;
> # max position in stock B will be max * ratio, i.e. no hard position limit in
> # Stock B
> lvls <- 3  #how many times to fade; Each order's qty will = MaxPos/lvls
>
> symb1 <- 'SPY' #change these to try other pairs
> symb2 <- 'DIA' #if you change them, make sure position limits still make sense
> portfolio1.st <- 'pair1'account.st <- 'pairs'
>
> getSymbols(c(symb1, symb2), from=startDate, to=endDate, adjust=TRUE)
>
> # The following function is used to make sure the timestamps of all symbols are
> # the same deletes rows where one of the stocks is missing data
> alignSymbols <- function(symbols, env=.GlobalEnv) {
>   # This is a simplified version of qmao::alignSymbols()
>   if (length(symbols) < 2)
>     stop("Must provide at least 2 symbols")
>   if (any(!is.character(symbols)))
>     stop("Symbols must be vector of character strings.")
>   ff <- get(symbols[1],env=env)
>   for (sym in symbols[-1]) {
>     tmp.sym <- get(sym,env=env)
>     ff <- merge(ff, tmp.sym, all=FALSE)
>   }
>   for (sym in symbols) {
>     assign(sym,ff[,grep(sym, colnames(ff))], env=env)
>   }
>   symbols
> }
> alignSymbols(c(symb1, symb2))
>
> # Define Instruments
> currency("USD")
> stock(symb1, currency="USD", multiplier=1)
> stock(symb2, currency="USD", multiplier=1)
>
> # Initialize Portfolio, Account, and Orders
> initPortf(name=portfolio1.st, c(symb1,symb2), initDate=initDate)
> initAcct(account.st, portfolios=portfolio1.st, initDate=initDate, initEq=initEq)
> initOrders(portfolio=portfolio1.st, initDate=initDate)
>
> # osFUN will need to know which symbol is leg 1 and which is leg 2 as well as
> # what the values are for MaxPos and lvls.  So, create a slot in portfolio to
> # hold this info.
> pair <- c(1, 2, MaxPos, lvls)
> names(pair) <- c(symb1, symb2, "MaxPos", "lvls")
> .blotter[[paste('portfolio', portfolio1.st, sep='.')]]$pair <- pair
>
> # Create initial position limits and levels by symbol
> # allow 3 entries for long and short if lvls=3.
> addPosLimit(portfolio=portfolio1.st, timestamp=initDate, symbol=symb1,
>             maxpos=MaxPos, longlevels=lvls, minpos=-MaxPos, shortlevels=lvls)
> addPosLimit(portfolio=portfolio1.st, timestamp=initDate, symbol=symb2,
>             maxpos=MaxPos, longlevels=lvls, minpos=-MaxPos, shortlevels=lvls)
>
> # Create a strategy object
> pairStrat <- strategy('pairStrat')
>
> # Indicator function
> calcRatio <- function(x) {
>   #returns the ratio of notional close prices for 2 symbols
>   x1 <- get(x[1])
>   x2 <- get(x[2])
>   mult1 <- getInstrument(x[1])$multiplier
>   mult2 <- getInstrument(x[2])$multiplier
>   rat <- (mult1 * Cl(x1)) / (mult2 * Cl(x2))
>   colnames(rat) <- 'Ratio'
>   rat
> }
> # Indicator used for determining entry/exits
> Ratio <- calcRatio(c(symb1[1], symb2[1]))
>
> # Store hedge ratio in portfolio so that it's available for order sizing
> # function. In this example, the hedge ratio happens to be the same as the
> # Ratio indicator.
> .blotter[[paste('portfolio',portfolio1.st,sep='.')]]$HedgeRatio <- Ratio
> #and make a function to get the most recent HedgeRatio
> getHedgeRatio <- function(portfolio, timestamp) {
>   portf <- getPortfolio(portfolio)
>   timestamp <- format(timestamp,"%Y-%m-%d %H:%M:%S")
>   # above line ensures you don't get last value of next day if using intraday
>   # data and timestamp=midnight
>   toDate <- paste("::", timestamp, sep="")
>   Ratio <- last(portf$HedgeRatio[toDate])
>   as.numeric(Ratio)
> }
>
> # Create an indicator - BBands on the Ratio
> pairStrat <- add.indicator(strategy=pairStrat, name = "calcRatio",
>                            arguments=list(x=c(symb1,symb2)))
> pairStrat <- add.indicator(strategy=pairStrat, name = "BBands",
>                            arguments=list(HLC=quote(Ratio), sd=SD, n=N,
>                                           maType='SMA'),
>                            label = "BBands")
>
> #applyIndicators(strategy=pairStrat,mktdata=get(symb1[1])) #for debugging
>
> # Create signals - buy when crossing lower band from below, sell when crossing
> # upper band from above, flatten when crossing mavg from above or from below
> pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
>                         arguments=list(columns=c("Ratio","up"),
>                                        relationship="lt"),
>                         label="cross.up")
> pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
>                         arguments=list(columns=c("Ratio","dn"),
>                                        relationship="gt"),
>                         label="cross.dn")
> pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
>                         arguments=list(columns=c("Ratio","mavg"),
>                                        relationship="lt"),
>                         label="cross.mid.fa")
> pairStrat <- add.signal(strategy=pairStrat, name="sigCrossover",
>                         arguments=list(columns=c("Ratio","mavg"),
>                                        relationship="gt"),
>                         label="cross.mid.fb")
>
> # make an order sizing function
> #######################_ORDER SIZING FUNCTION_##################################
> # check to see which stock it is. If it's the second stock, reverse orderqty and
> # orderside
> osSpreadMaxPos <- function (data, timestamp, orderqty, ordertype, orderside,
>                             portfolio, symbol, ruletype, ..., orderprice) {
>   portf <- getPortfolio(portfolio)
>   #check to make sure pair slot has the things needed for this function
>   if (!any(portf$pair == 1) && !(any(portf$pair == 2)))
>     stop('pair must contain both values 1 and 2')
>   if (!any(names(portf$pair) == "MaxPos") || !any(names(portf$pair) == "lvls"))
>     stop('pair must contain MaxPos and lvls')
>
>   if (portf$pair[symbol] == 1) legside <- "long"
>   if (portf$pair[symbol] == 2) legside <- "short"
>   MaxPos <- portf$pair["MaxPos"]
>   lvls <- portf$pair["lvls"]
>   ratio <- getHedgeRatio(portfolio, timestamp)
>   pos <- getPosQty(portfolio, symbol, timestamp)
>   PosLimit <- getPosLimit(portfolio, symbol, timestamp)
>   qty <- orderqty
>   if (legside == "short") {#symbol is 2nd leg
>     ## Comment out next line to use equal ordersizes for each stock.
>     addPosLimit(portfolio=portfolio, timestamp=timestamp, symbol=symbol,
>                 maxpos=round(MaxPos*ratio,0), longlevels=lvls,
>                 minpos=round(-MaxPos*ratio,0), shortlevels=lvls)
>     ##
>     qty <- -orderqty #switch orderqty for Stock B
>   }
>
>   if (qty > 0) orderside = 'long'
>   if (qty < 0) orderside = 'short'
>
>   orderqty <- osMaxPos(data=data,timestamp=timestamp, orderqty=qty,
>                        ordertype=ordertype, orderside=orderside,
>                        portfolio=portfolio, symbol=symbol, ruletype=ruletype,
>                        ...)
>
>   #Add the order here instead of in the ruleSignal function
>   if (!is.null(orderqty) & !orderqty == 0 & !is.null(orderprice)) {
>     addOrder(portfolio=portfolio, symbol=symbol,
>              timestamp=timestamp, qty=orderqty, price=as.numeric(orderprice),
>              ordertype=ordertype, side=orderside, replace=FALSE,
>              status="open", ...=...)
>   }
>   return(0) #so that ruleSignal function doesn't also try to place an order
> }
> ################################################################################
>
> # Create entry and exit rules for longs  and for shorts. Both symbols will get
> # the same buy/sell signals, but osMaxPos will reverse those for the second
> # symbol.
> # orderqty's are bigger than PosLimits allow. osMaxPos will adjust the orderqty
> # down to 1/3 the max allowed. (1/3 is because we are using 3 levels in
> # PosLimit)
> pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
>                       arguments=list(sigcol="cross.dn", sigval=TRUE,
>                                      orderqty=1e6, ordertype='market',
>                                      orderside=NULL, osFUN='osSpreadMaxPos'),
>                       type='enter')
> pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
>                       arguments=list(sigcol="cross.up", sigval=TRUE,
>                                      orderqty=-1e6, ordertype='market',
>                                      orderside=NULL, osFUN='osSpreadMaxPos'),
>                       type='enter')
> pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
>                       arguments=list(sigcol="cross.mid.fb", sigval=TRUE,
>                                      orderqty='all', ordertype='market',
>                                      orderside=NULL),
>                       type='exit')
> pairStrat <- add.rule(strategy=pairStrat, name='ruleSignal',
>                       arguments=list(sigcol="cross.mid.fa", sigval=TRUE,
>                                      orderqty='all', ordertype='market',
>                                      orderside=NULL),
>                       type='exit')
>
>
> ## for debugging
> # applySignals(strategy=pairStrat,
> #              mktdata=applyIndicators(strategy=pairStrat, mktdata=get(symb1)))
> ##
>
> out1<-applyStrategy(strategy=pairStrat, portfolios=portfolio1.st)
>
> updatePortf(Portfolio=portfolio1.st,
>             Dates=paste("::", as.Date(Sys.time()), sep=''))
> updateAcct(account.st, Dates=paste(startDate, endDate, sep="::"))
> updateEndEq(account.st, Dates=paste(startDate, endDate, sep="::"))
> getEndEq(account.st, Sys.time())
>
> dev.new()
> chart.Posn(Portfolio=portfolio1.st, Symbol=symb1)
> dev.new()
> chart.Posn(Portfolio=portfolio1.st, Symbol=symb2)
> dev.new()
> chartSeries(Cl(get(symb1))/Cl(get(symb2)), TA="addBBands(n=N,sd=SD)")
>
> ret1 <- PortfReturns(account.st)
> ret1$total <- rowSums(ret1)
> #ret1
>
> if("package:PerformanceAnalytics" %in% search() ||
>      require("PerformanceAnalytics",quietly=TRUE)) {
>   #  getSymbols("SPY", from='1999-01-01')
>   #  SPY.ret <- Return.calculate(SPY$SPY.Close)
>   #  tmp <- merge(SPY.ret,ret1$total,all=FALSE)
>   dev.new()
>   charts.PerformanceSummary(ret1$total, geometric=FALSE, wealth.index=TRUE)
> }
>
>
> ###############################################################################
> # R (http://r-project.org/) Quantitative Strategy Model Framework
> #
> # Package Copyright (c) 2009-2012
> # Peter Carl, Dirk Eddelbuettel, Brian G. Peterson, Jeffrey Ryan, and Joshua Ulrich
> #
> # This library is distributed under the terms of the GNU Public License (GPL)
> # for full details see the file COPYING
> #
> # $Id$
> #
> ###############################################################################
>
> ##### PLACE THIS BLOCK AT END OF DEMO SCRIPT ###################
> # book  = getOrderBook(port)
> # stats = tradeStats(port)
> # rets  = PortfReturns(acct)
> ################################################################
>
> #Distribution Initialization
> pairStrat <- add.distribution(strategy = pairStrat,
>                  paramset.label ="BBOPT",
>                  component.type = "indicator",
>                  component.label = "BBands",
>                  variable = list(n = seq(10,200, by = 10)),
>                  label = "n")
>
> pairStrat <- add.distribution(strategy = pairStrat,
>                  paramset.label ="BBOPT",
>                  component.type = "indicator",
>                  component.label = "BBands",
>                  variable = list(sd = seq(1,5,by = 0.5)),
>                  label = "sd")
>
>
> # Objective Function
> my.obj.func <- function(x)
> {
>   # pick one of the following objective functions (uncomment)
>
>   #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
>
>   return(max(x$tradeStats$Net.Trading.PL <http://net.trading.pl/>) == x$tradeStats$Net.Trading.PL <http://net.trading.pl/>)
>
> }
>
> #WFA
> require(doParallel)
> cl <- makePSOCKcluster(2)
> registerDoParallel(cl)
>
> result <- walk.forward(pairStrat,
>                        paramset.label = "BBOPT",
>                        portfolio.st = portfolio1.st,
>                        account.st = account.st,
>                        period = "months",
>                        k.training = 6,
>                        k.testing = 3,
>                        obj.func = my.obj.func,
>                        obj.args = list(x=quote(result$apply.paramset)),
>                        audit.prefix = "wfa",
>                        anchored = FALSE,
>                        verbose = TRUE)
>
>
>
>
>
>

	[[alternative HTML version deleted]]


From markknecht at gmail.com  Tue Sep 30 15:20:42 2014
From: markknecht at gmail.com (Mark Knecht)
Date: Tue, 30 Sep 2014 06:20:42 -0700
Subject: [R-SIG-Finance] quantstrat help - simple combine error using
 windows and walk.forward
In-Reply-To: <CALQudT9az9UtqdvhkeH0HrLSh5-mcnaUdm2stZW_BuB6+mDXuA@mail.gmail.com>
References: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>
	<CALQudT9az9UtqdvhkeH0HrLSh5-mcnaUdm2stZW_BuB6+mDXuA@mail.gmail.com>
Message-ID: <CAK2H+ecJV49j9st69nsGr5pck9=0FYTac9scTdXb90j1kktfdQ@mail.gmail.com>

On Tue, Sep 30, 2014 at 12:34 AM, Derek Wong <treydog999 at gmail.com> wrote:
> Hello,
>
> I have been able to reproduce this error in Ubuntu based system as well not
> just on windows. I was wondering if anyone had any insights or ways to to
> solve this or create a work around.  If there is any additional information
> you require let me know. Please I would really appreciate help on this. It
> is totally out of my depth and I am hoping that this fine community can
> help.
>

Derek,
   I have no time to do any debugging of this but the first error on my
Gentoo system running RStudio and R-3.1.1 is actually this line:

portfolio1.st <- 'pair1'account.st <- 'pairs'

which does look like bad code to me.

   One 'problem' with a number of demos that are out there is that the demo
author may be using the development version of a specific package which
then results in end user types (like me) having problems.

   I suggest you run this code line-by-line and then post back a few lines
preceding the breakdown. Maybe someone can give better input than
I can. Also, please edit/snip your responses to add focus to the exact
issue.

Good luck,
Mark

> On Wed, Sep 24, 2014 at 9:36 PM, Derek Wong <treydog999 at gmail.com> wrote:
>
>> Hello,
>>
>> I am having a lot of trouble with using walk.forward.in windows. i get
>> the following error. This may be related to bug #5814. If someone could
>> please help me i would really appreciate it. The reproducible code below is
>> based on the pair_trade example. Thanks.
>>
>> error calling combine function:
>> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
>> result.6,     result.7, result.8, result.9, result.10, result.11,
<SNIP>
>> result.172, result.173, result.174, result.175, result.176,     result.177,
>> result.178, result.179, result.180): attempt to select less than one
>> element>
>> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st =


From treydog999 at gmail.com  Tue Sep 30 17:25:34 2014
From: treydog999 at gmail.com (Derek Wong)
Date: Tue, 30 Sep 2014 10:25:34 -0500
Subject: [R-SIG-Finance] quantstrat help - simple combine error using
 windows and walk.forward
In-Reply-To: <CAK2H+ecJV49j9st69nsGr5pck9=0FYTac9scTdXb90j1kktfdQ@mail.gmail.com>
References: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>
	<CALQudT9az9UtqdvhkeH0HrLSh5-mcnaUdm2stZW_BuB6+mDXuA@mail.gmail.com>
	<CAK2H+ecJV49j9st69nsGr5pck9=0FYTac9scTdXb90j1kktfdQ@mail.gmail.com>
Message-ID: <CALQudT-zjBJMnz9jFDyY=R79gWTN=khT-C-EA1kuu+0veLtSUg@mail.gmail.com>

Mark,

Thank you for the reply. I really appreciate you taking the time to look at
it. However in my previous email/post and my current code I do not see a
line that shows

portfolio1.st <- 'pair1'account.st <- 'pairs'

they should be two separate lines. Either way I have run the entire code
and will show the area I am focusing on. Which is the end using the
walk.forward() function, as everything else in the code runs perfectly for
me using R 3.1.1 in windows or ubuntu.

Code I am focusing on:

# Objective Function
my.obj.func <- function(x)
{
  # pick one of the following objective functions (uncomment)

  #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)

  return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)

}

#WFA
require(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)

result <- walk.forward(pairStrat,
                       paramset.label = "BBOPT",
                       portfolio.st = portfolio1.st,
                       account.st = account.st,
                       period = "months",
                       k.training = 6,
                       k.testing = 3,
                       obj.func = my.obj.func,
                       obj.args = list(x=quote(result$apply.paramset)),
                       audit.prefix = "wfa",
                       anchored = FALSE,
                       verbose = TRUE)


Output below:
> # Objective Function
> my.obj.func <- function(x)
+ {
+   # pick one of the following objective functions (uncomment)
+
+   #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
+
+   return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
+
+ }
>
> #WFA
> require(doParallel)
> cl <- makePSOCKcluster(2)
> registerDoParallel(cl)
>
> result <- walk.forward(pairStrat,
+                        paramset.label = "BBOPT",
+                        portfolio.st = portfolio1.st,
+                        account.st = account.st,
+                        period = "months",
+                        k.training = 6,
+                        k.testing = 3,
+                        obj.func = my.obj.func,
+                        obj.args = list(x=quote(result$apply.paramset)),
+                        audit.prefix = "wfa",
+                        anchored = FALSE,
+                        verbose = TRUE)
[1] "=== training BBOPT on 2009-01-02/2009-06-30"
automatically exporting the following variables from the local environment:
  account, account.st, calc, env.instrument, mktdata, orderbook,
paramset.label, portfolio, portfolio.st, strategy, user.args, user.func
explicitly exporting variables(s): clone.portfolio, clone.orderbook,
install.param.combo
numValues: 180, numResults: 0, stopped: TRUE
got results for task 1
numValues: 180, numResults: 1, stopped: TRUE
returning status FALSE
got results for task 2
<SNIP>
got results for task 180
numValues: 180, numResults: 180, stopped: TRUE
first call to combine function
evaluating call object to combine results:
  fun(result.1, result.2, result.3, result.4, result.5, result.6,
   <SNIP>
    result.177, result.178, result.179, result.180)
error calling combine function:
<simpleError in fun(result.1, result.2, result.3, result.4, result.5,
result.6,     result.7, result.8, result.9, result.10, result.11,
result.12,     result.13, result.14, result.15, result.16, result.17,
result.18,     result.19, result.20, result.21, result.22,
<SNIP>
result.171,     result.172, result.173, result.174, result.175, result.176,
    result.177, result.178, result.179, result.180): attempt to select less
than one element>
Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st =
portfolio1.st,  :
  obj.func() returned empty result
In addition: Warning messages:
1: In e$fun(obj, substitute(ex), parent.frame(), e$data) :
  already exporting variable(s): env.instrument
2: In max(x$tradeStats$Net.Trading.PL) :
  no non-missing arguments to max; returning -Inf



Thanks again

Derek

On Tue, Sep 30, 2014 at 8:20 AM, Mark Knecht <markknecht at gmail.com> wrote:

> On Tue, Sep 30, 2014 at 12:34 AM, Derek Wong <treydog999 at gmail.com> wrote:
> > Hello,
> >
> > I have been able to reproduce this error in Ubuntu based system as well
> not
> > just on windows. I was wondering if anyone had any insights or ways to to
> > solve this or create a work around.  If there is any additional
> information
> > you require let me know. Please I would really appreciate help on this.
> It
> > is totally out of my depth and I am hoping that this fine community can
> > help.
> >
>
> Derek,
>    I have no time to do any debugging of this but the first error on my
> Gentoo system running RStudio and R-3.1.1 is actually this line:
>
> portfolio1.st <- 'pair1'account.st <- 'pairs'
>
> which does look like bad code to me.
>
>    One 'problem' with a number of demos that are out there is that the demo
> author may be using the development version of a specific package which
> then results in end user types (like me) having problems.
>
>    I suggest you run this code line-by-line and then post back a few lines
> preceding the breakdown. Maybe someone can give better input than
> I can. Also, please edit/snip your responses to add focus to the exact
> issue.
>
> Good luck,
> Mark
>
> > On Wed, Sep 24, 2014 at 9:36 PM, Derek Wong <treydog999 at gmail.com>
> wrote:
> >
> >> Hello,
> >>
> >> I am having a lot of trouble with using walk.forward.in windows. i get
> >> the following error. This may be related to bug #5814. If someone could
> >> please help me i would really appreciate it. The reproducible code
> below is
> >> based on the pair_trade example. Thanks.
> >>
> >> error calling combine function:
> >> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
> >> result.6,     result.7, result.8, result.9, result.10, result.11,
> <SNIP>
> >> result.172, result.173, result.174, result.175, result.176,
>  result.177,
> >> result.178, result.179, result.180): attempt to select less than one
> >> element>
> >> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st
> =
>

	[[alternative HTML version deleted]]


From brian at braverock.com  Tue Sep 30 17:33:05 2014
From: brian at braverock.com (Brian G. Peterson)
Date: Tue, 30 Sep 2014 10:33:05 -0500
Subject: [R-SIG-Finance] quantstrat help - simple combine error using
 windows and walk.forward
In-Reply-To: <CALQudT-zjBJMnz9jFDyY=R79gWTN=khT-C-EA1kuu+0veLtSUg@mail.gmail.com>
References: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>	<CALQudT9az9UtqdvhkeH0HrLSh5-mcnaUdm2stZW_BuB6+mDXuA@mail.gmail.com>	<CAK2H+ecJV49j9st69nsGr5pck9=0FYTac9scTdXb90j1kktfdQ@mail.gmail.com>
	<CALQudT-zjBJMnz9jFDyY=R79gWTN=khT-C-EA1kuu+0veLtSUg@mail.gmail.com>
Message-ID: <542ACD31.40305@braverock.com>

The core problem here is related to custom functions in the .GlobalEnv 
and using certain parallel backends in walk.forward.

We're working on evaluating a patch provided by Jonathan Owen, and hope 
to have a fix in svn on R-Forge soon.

Regards,

Brian

On 09/30/2014 10:25 AM, Derek Wong wrote:
> Mark,
>
> Thank you for the reply. I really appreciate you taking the time to look at
> it. However in my previous email/post and my current code I do not see a
> line that shows
>
> portfolio1.st <- 'pair1'account.st <- 'pairs'
>
> they should be two separate lines. Either way I have run the entire code
> and will show the area I am focusing on. Which is the end using the
> walk.forward() function, as everything else in the code runs perfectly for
> me using R 3.1.1 in windows or ubuntu.
>
> Code I am focusing on:
>
> # Objective Function
> my.obj.func <- function(x)
> {
>    # pick one of the following objective functions (uncomment)
>
>    #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
>
>    return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
>
> }
>
> #WFA
> require(doParallel)
> cl <- makePSOCKcluster(2)
> registerDoParallel(cl)
>
> result <- walk.forward(pairStrat,
>                         paramset.label = "BBOPT",
>                         portfolio.st = portfolio1.st,
>                         account.st = account.st,
>                         period = "months",
>                         k.training = 6,
>                         k.testing = 3,
>                         obj.func = my.obj.func,
>                         obj.args = list(x=quote(result$apply.paramset)),
>                         audit.prefix = "wfa",
>                         anchored = FALSE,
>                         verbose = TRUE)
>
>
> Output below:
>> # Objective Function
>> my.obj.func <- function(x)
> + {
> +   # pick one of the following objective functions (uncomment)
> +
> +   #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
> +
> +   return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
> +
> + }
>>
>> #WFA
>> require(doParallel)
>> cl <- makePSOCKcluster(2)
>> registerDoParallel(cl)
>>
>> result <- walk.forward(pairStrat,
> +                        paramset.label = "BBOPT",
> +                        portfolio.st = portfolio1.st,
> +                        account.st = account.st,
> +                        period = "months",
> +                        k.training = 6,
> +                        k.testing = 3,
> +                        obj.func = my.obj.func,
> +                        obj.args = list(x=quote(result$apply.paramset)),
> +                        audit.prefix = "wfa",
> +                        anchored = FALSE,
> +                        verbose = TRUE)
> [1] "=== training BBOPT on 2009-01-02/2009-06-30"
> automatically exporting the following variables from the local environment:
>    account, account.st, calc, env.instrument, mktdata, orderbook,
> paramset.label, portfolio, portfolio.st, strategy, user.args, user.func
> explicitly exporting variables(s): clone.portfolio, clone.orderbook,
> install.param.combo
> numValues: 180, numResults: 0, stopped: TRUE
> got results for task 1
> numValues: 180, numResults: 1, stopped: TRUE
> returning status FALSE
> got results for task 2
> <SNIP>
> got results for task 180
> numValues: 180, numResults: 180, stopped: TRUE
> first call to combine function
> evaluating call object to combine results:
>    fun(result.1, result.2, result.3, result.4, result.5, result.6,
>     <SNIP>
>      result.177, result.178, result.179, result.180)
> error calling combine function:
> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
> result.6,     result.7, result.8, result.9, result.10, result.11,
> result.12,     result.13, result.14, result.15, result.16, result.17,
> result.18,     result.19, result.20, result.21, result.22,
> <SNIP>
> result.171,     result.172, result.173, result.174, result.175, result.176,
>      result.177, result.178, result.179, result.180): attempt to select less
> than one element>
> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st =
> portfolio1.st,  :
>    obj.func() returned empty result
> In addition: Warning messages:
> 1: In e$fun(obj, substitute(ex), parent.frame(), e$data) :
>    already exporting variable(s): env.instrument
> 2: In max(x$tradeStats$Net.Trading.PL) :
>    no non-missing arguments to max; returning -Inf
>
>
>
> Thanks again
>
> Derek
>
> On Tue, Sep 30, 2014 at 8:20 AM, Mark Knecht <markknecht at gmail.com> wrote:
>
>> On Tue, Sep 30, 2014 at 12:34 AM, Derek Wong <treydog999 at gmail.com> wrote:
>>> Hello,
>>>
>>> I have been able to reproduce this error in Ubuntu based system as well
>> not
>>> just on windows. I was wondering if anyone had any insights or ways to to
>>> solve this or create a work around.  If there is any additional
>> information
>>> you require let me know. Please I would really appreciate help on this.
>> It
>>> is totally out of my depth and I am hoping that this fine community can
>>> help.
>>>
>>
>> Derek,
>>     I have no time to do any debugging of this but the first error on my
>> Gentoo system running RStudio and R-3.1.1 is actually this line:
>>
>> portfolio1.st <- 'pair1'account.st <- 'pairs'
>>
>> which does look like bad code to me.
>>
>>     One 'problem' with a number of demos that are out there is that the demo
>> author may be using the development version of a specific package which
>> then results in end user types (like me) having problems.
>>
>>     I suggest you run this code line-by-line and then post back a few lines
>> preceding the breakdown. Maybe someone can give better input than
>> I can. Also, please edit/snip your responses to add focus to the exact
>> issue.
>>
>> Good luck,
>> Mark
>>
>>> On Wed, Sep 24, 2014 at 9:36 PM, Derek Wong <treydog999 at gmail.com>
>> wrote:
>>>
>>>> Hello,
>>>>
>>>> I am having a lot of trouble with using walk.forward.in windows. i get
>>>> the following error. This may be related to bug #5814. If someone could
>>>> please help me i would really appreciate it. The reproducible code
>> below is
>>>> based on the pair_trade example. Thanks.
>>>>
>>>> error calling combine function:
>>>> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
>>>> result.6,     result.7, result.8, result.9, result.10, result.11,
>> <SNIP>
>>>> result.172, result.173, result.174, result.175, result.176,
>>   result.177,
>>>> result.178, result.179, result.180): attempt to select less than one
>>>> element>
>>>> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st
>> =
>>
>
> 	[[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.
>

-- 
Brian G. Peterson
http://braverock.com/brian/
Ph: 773-459-4973
IM: bgpbraverock


From josh.m.ulrich at gmail.com  Tue Sep 30 17:34:36 2014
From: josh.m.ulrich at gmail.com (Joshua Ulrich)
Date: Tue, 30 Sep 2014 10:34:36 -0500
Subject: [R-SIG-Finance] quantstrat help - simple combine error using
 windows and walk.forward
In-Reply-To: <CALQudT-zjBJMnz9jFDyY=R79gWTN=khT-C-EA1kuu+0veLtSUg@mail.gmail.com>
References: <CALQudT9u8Fa++0u+di_ibjV9FuFGqdRoWLtQq4V6LhAVNyKSRA@mail.gmail.com>
	<CALQudT9az9UtqdvhkeH0HrLSh5-mcnaUdm2stZW_BuB6+mDXuA@mail.gmail.com>
	<CAK2H+ecJV49j9st69nsGr5pck9=0FYTac9scTdXb90j1kktfdQ@mail.gmail.com>
	<CALQudT-zjBJMnz9jFDyY=R79gWTN=khT-C-EA1kuu+0veLtSUg@mail.gmail.com>
Message-ID: <CAPPM_gTBryA5oBkhtN7nbJd+WnG-wFje_Q2KQ=rXM4YJg3XvMQ@mail.gmail.com>

 Tue, Sep 30, 2014 at 10:25 AM, Derek Wong <treydog999 at gmail.com> wrote:
> Mark,
>
> Thank you for the reply. I really appreciate you taking the time to look at
> it. However in my previous email/post and my current code I do not see a
> line that shows
>
> portfolio1.st <- 'pair1'account.st <- 'pairs'
>
You're posting in HTML, which the posting guild tells you not to do.
The list server must convert your HTML into plain text, which often
mangles your original message.  For example, look at how your message
was received at Nabble:
http://r.789695.n4.nabble.com/quantstrat-help-simple-combine-error-using-windows-and-walk-forward-td4697468.html

> they should be two separate lines. Either way I have run the entire code
> and will show the area I am focusing on. Which is the end using the
> walk.forward() function, as everything else in the code runs perfectly for
> me using R 3.1.1 in windows or ubuntu.
>
As I said in our personal correspondence, "the problem is that the
calcRatio function is not being exported to the nodes.  This is
probably related to bug #5814
(https://r-forge.r-project.org/tracker/index.php?func=detail&aid=5814&group_id=316&atid=1269)."

This is going to be a problem with a socket cluster on any operating
system.  It will work if you don't run in parallel, or if you run on
almost anything other than a socket cluster (e.g. redis, fork
[multicore], etc).

Best,
Josh


> Code I am focusing on:
>
> # Objective Function
> my.obj.func <- function(x)
> {
>   # pick one of the following objective functions (uncomment)
>
>   #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
>
>   return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
>
> }
>
> #WFA
> require(doParallel)
> cl <- makePSOCKcluster(2)
> registerDoParallel(cl)
>
> result <- walk.forward(pairStrat,
>                        paramset.label = "BBOPT",
>                        portfolio.st = portfolio1.st,
>                        account.st = account.st,
>                        period = "months",
>                        k.training = 6,
>                        k.testing = 3,
>                        obj.func = my.obj.func,
>                        obj.args = list(x=quote(result$apply.paramset)),
>                        audit.prefix = "wfa",
>                        anchored = FALSE,
>                        verbose = TRUE)
>
>
> Output below:
>> # Objective Function
>> my.obj.func <- function(x)
> + {
> +   # pick one of the following objective functions (uncomment)
> +
> +   #return(max(x$tradeStats$Max.Drawdown) == x$tradeStats$Max.Drawdown)
> +
> +   return(max(x$tradeStats$Net.Trading.PL) == x$tradeStats$Net.Trading.PL)
> +
> + }
>>
>> #WFA
>> require(doParallel)
>> cl <- makePSOCKcluster(2)
>> registerDoParallel(cl)
>>
>> result <- walk.forward(pairStrat,
> +                        paramset.label = "BBOPT",
> +                        portfolio.st = portfolio1.st,
> +                        account.st = account.st,
> +                        period = "months",
> +                        k.training = 6,
> +                        k.testing = 3,
> +                        obj.func = my.obj.func,
> +                        obj.args = list(x=quote(result$apply.paramset)),
> +                        audit.prefix = "wfa",
> +                        anchored = FALSE,
> +                        verbose = TRUE)
> [1] "=== training BBOPT on 2009-01-02/2009-06-30"
> automatically exporting the following variables from the local environment:
>   account, account.st, calc, env.instrument, mktdata, orderbook,
> paramset.label, portfolio, portfolio.st, strategy, user.args, user.func
> explicitly exporting variables(s): clone.portfolio, clone.orderbook,
> install.param.combo
> numValues: 180, numResults: 0, stopped: TRUE
> got results for task 1
> numValues: 180, numResults: 1, stopped: TRUE
> returning status FALSE
> got results for task 2
> <SNIP>
> got results for task 180
> numValues: 180, numResults: 180, stopped: TRUE
> first call to combine function
> evaluating call object to combine results:
>   fun(result.1, result.2, result.3, result.4, result.5, result.6,
>    <SNIP>
>     result.177, result.178, result.179, result.180)
> error calling combine function:
> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
> result.6,     result.7, result.8, result.9, result.10, result.11,
> result.12,     result.13, result.14, result.15, result.16, result.17,
> result.18,     result.19, result.20, result.21, result.22,
> <SNIP>
> result.171,     result.172, result.173, result.174, result.175, result.176,
>     result.177, result.178, result.179, result.180): attempt to select less
> than one element>
> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st =
> portfolio1.st,  :
>   obj.func() returned empty result
> In addition: Warning messages:
> 1: In e$fun(obj, substitute(ex), parent.frame(), e$data) :
>   already exporting variable(s): env.instrument
> 2: In max(x$tradeStats$Net.Trading.PL) :
>   no non-missing arguments to max; returning -Inf
>
>
>
> Thanks again
>
> Derek
>
> On Tue, Sep 30, 2014 at 8:20 AM, Mark Knecht <markknecht at gmail.com> wrote:
>
>> On Tue, Sep 30, 2014 at 12:34 AM, Derek Wong <treydog999 at gmail.com> wrote:
>> > Hello,
>> >
>> > I have been able to reproduce this error in Ubuntu based system as well
>> not
>> > just on windows. I was wondering if anyone had any insights or ways to to
>> > solve this or create a work around.  If there is any additional
>> information
>> > you require let me know. Please I would really appreciate help on this.
>> It
>> > is totally out of my depth and I am hoping that this fine community can
>> > help.
>> >
>>
>> Derek,
>>    I have no time to do any debugging of this but the first error on my
>> Gentoo system running RStudio and R-3.1.1 is actually this line:
>>
>> portfolio1.st <- 'pair1'account.st <- 'pairs'
>>
>> which does look like bad code to me.
>>
>>    One 'problem' with a number of demos that are out there is that the demo
>> author may be using the development version of a specific package which
>> then results in end user types (like me) having problems.
>>
>>    I suggest you run this code line-by-line and then post back a few lines
>> preceding the breakdown. Maybe someone can give better input than
>> I can. Also, please edit/snip your responses to add focus to the exact
>> issue.
>>
>> Good luck,
>> Mark
>>
>> > On Wed, Sep 24, 2014 at 9:36 PM, Derek Wong <treydog999 at gmail.com>
>> wrote:
>> >
>> >> Hello,
>> >>
>> >> I am having a lot of trouble with using walk.forward.in windows. i get
>> >> the following error. This may be related to bug #5814. If someone could
>> >> please help me i would really appreciate it. The reproducible code
>> below is
>> >> based on the pair_trade example. Thanks.
>> >>
>> >> error calling combine function:
>> >> <simpleError in fun(result.1, result.2, result.3, result.4, result.5,
>> >> result.6,     result.7, result.8, result.9, result.10, result.11,
>> <SNIP>
>> >> result.172, result.173, result.174, result.175, result.176,
>>  result.177,
>> >> result.178, result.179, result.180): attempt to select less than one
>> >> element>
>> >> Error in walk.forward(pairStrat, paramset.label = "BBOPT", portfolio.st
>> =
>>
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-SIG-Finance at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> -- Subscriber-posting only. If you want to post, subscribe first.
> -- Also note that this is not the r-help list where general R questions should go.


--
Joshua Ulrich  |  about.me/joshuaulrich
FOSS Trading  |  www.fosstrading.com


From aschmid1 at stevens.edu  Tue Sep 30 21:11:55 2014
From: aschmid1 at stevens.edu (aschmid1)
Date: Tue, 30 Sep 2014 15:11:55 -0400
Subject: [R-SIG-Finance] seasonality in rugarch
Message-ID: <f41074db013659fb23b3ab33de61ce8d@stevens.edu>

Hi,
I'm working with a sample that has a strong weekly seasonality and 
wonder if rugarch can handle a multiplicative ARIMA(p,d,q)P,D,Q)s. I 
tried additive seasonal model for which I simply put 51 dummy variables 
as external regressors into the mean but, alas, the model does not 
converge (rugarch-->warning: failed to invert hessian) with or without 
dummies.
Here is my script:

spec1111 = ugarchspec(variance.model = list(model = "sGARCH", garchOrder 
= c(1,1)), mean.model = list(armaOrder = c(1,1), include.mean = T, 
external.regressors = X), distribution.model = "sged")

fit1111<-ugarchfit(data=inp[,2], spec=spec1111, solver = "hybrid", 
solver.control = list(trace = TRUE, tol=1e-4, delta=1e-6))


Thanks! Alec



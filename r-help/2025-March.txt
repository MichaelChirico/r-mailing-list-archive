From n@re@h_gurbux@n| @end|ng |rom hotm@||@com  Sun Mar  2 15:56:29 2025
From: n@re@h_gurbux@n| @end|ng |rom hotm@||@com (Naresh Gurbuxani)
Date: Sun, 2 Mar 2025 14:56:29 +0000
Subject: [R] expression in lattice panel strip
Message-ID: <IA1P223MB04997BF88B4F3ECDFB5FA8ECFACE2@IA1P223MB0499.NAMP223.PROD.OUTLOOK.COM>

Is it possible to include expression in lattice panel strip?
Thanks,
Naresh

cs <- 2 * cos(2 * pi * (1:500) / 50 + 0.6 * pi)
w <- rnorm(500)
xyplot(ts(cbind(x1 = cs, x2 = cs + w)), screens = list(x1 = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)), x2 = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi) + N(0, 1))), type = c("l", "g"), main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))

# Greek letter pi is shown in main title, but not in panel strips

From bgunter@4567 @end|ng |rom gm@||@com  Mon Mar  3 02:07:51 2025
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sun, 2 Mar 2025 17:07:51 -0800
Subject: [R] expression in lattice panel strip
In-Reply-To: <IA1P223MB04997BF88B4F3ECDFB5FA8ECFACE2@IA1P223MB0499.NAMP223.PROD.OUTLOOK.COM>
References: <IA1P223MB04997BF88B4F3ECDFB5FA8ECFACE2@IA1P223MB0499.NAMP223.PROD.OUTLOOK.COM>
Message-ID: <CAGxFJbRuXsPDPdhV7Ob3Fv_uxgxi71H1ubNjCRGf=1egf=wbiQ@mail.gmail.com>

Full disclosure: I have never plotted time series using this xyplot method.

However, ?xyplot.ts says:

"screens

factor (or coerced to factor) whose levels specify which panel each
series is to be plotted in. screens = c(1, 2, 1) would plot series 1,
2 and 3 in panels 1, 2 and 1. May also be a named list, see Details
below."

>From that I would infer the answer to your query in no: factors, know
nothing about plotmath notation, and as.factor() just coerces your
expressions to character strings that are the factor labels.
strip.default() then uses these character strings as the labels for
the strips, giving what you got.

As you only want to use a "pi" character, ?, in your math expression,
I tried using a UTF-8 symbol for it, \U1D6D1, in quoted strings as the
argument for the screens parameter. That is:

striplabs <- factor(c("2cos(2\U1D6D1t/50 + 0.6\U1D6D1)",
                      "2cos(2\U1D6D1t /50 + 0.6\U1D6D1) + N(0, 1)"))
xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
       type = c("l", "g"),
       main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)),
       screens = striplabs
)

The RStudio graphics device was *not* able to interpret the UTF-8 in
the strip, but on my Mac, the Cairo_pdf() device (or just using the
export button to export the graphic as a pdf from RStudio) *did*
reproduce the characters nicely in the strip labels in the pdf.
Unfortunately, the main title expression symbol for pi (presumably
from the adobe font symbols) did not look nice. However, using the
quoted graphics string (the first level of the striplabs factor) does
fine, of course.

As I just sort of barely know what I'm doing here, there may be a much
better way to do this by using an appropriate font specification in a
strip = strip.custom(par.strip.text= ...) argument to xyplot, but that
exceeds my current abilities. Maybe you or one of the R cognescenti
can figure it  out.

Again, please note my full disclosure.

Cheers,
Bert

"An educated person is one who can entertain new ideas, entertain
others, and entertain herself."

"An educated person is one who can entertain new ideas, entertain
others, and entertain herself."



On Sun, Mar 2, 2025 at 6:56?AM Naresh Gurbuxani
<naresh_gurbuxani at hotmail.com> wrote:
>
> Is it possible to include expression in lattice panel strip?
> Thanks,
> Naresh
>
> cs <- 2 * cos(2 * pi * (1:500) / 50 + 0.6 * pi)
> w <- rnorm(500)
> xyplot(ts(cbind(x1 = cs, x2 = cs + w)), screens = list(x1 = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)), x2 = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi) + N(0, 1))), type = c("l", "g"), main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))
>
> # Greek letter pi is shown in main title, but not in panel strips
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Mon Mar  3 07:08:05 2025
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Mon, 3 Mar 2025 11:38:05 +0530
Subject: [R] expression in lattice panel strip
In-Reply-To: <CAGxFJbRuXsPDPdhV7Ob3Fv_uxgxi71H1ubNjCRGf=1egf=wbiQ@mail.gmail.com>
References: <IA1P223MB04997BF88B4F3ECDFB5FA8ECFACE2@IA1P223MB0499.NAMP223.PROD.OUTLOOK.COM>
 <CAGxFJbRuXsPDPdhV7Ob3Fv_uxgxi71H1ubNjCRGf=1egf=wbiQ@mail.gmail.com>
Message-ID: <CADfFDC6bxDOfsDbVPi=pCRE1pGHCqQOokYVg+KKgpbKLu--puQ@mail.gmail.com>

This is possible but a little cumbersome. Bert is on the right track with
strip.custom:

xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
       strip = strip.custom(factor.levels =
                                expression(2 * cos(2 * pi * t / 50 + 0.6 *
pi),
                                           2 * cos(2 * pi * t / 50 + 0.6 *
pi) + N(0, 1))),
       type = c("l", "g"),
       main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))

where (from the docs):

factor.levels: vector of character strings or expressions giving the
          levels of the conditioning variable currently being drawn.
          For more than one conditioning variable, this will vary with
          'which.given'.

This is relatively straightforward with only one conditioning variable. A
more general solution for multiple conditioning variables would be

estrip <- function(..., factor.levels)
{
    strip.default(..., factor.levels = parse(text = factor.levels))
}

xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
       screens = list(x1 = "2 * cos(2 * pi * t / 50 + 0.6 * pi)",
                      x2 = "2 * cos(2 * pi * t / 50 + 0.6 * pi) + N(0, 1)"),
       strip = estrip,
       type = c("l", "g"),
       main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))

Best,
-Deepayan

On Mon, 3 Mar 2025 at 06:38, Bert Gunter <bgunter.4567 at gmail.com> wrote:

> Full disclosure: I have never plotted time series using this xyplot method.
>
> However, ?xyplot.ts says:
>
> "screens
>
> factor (or coerced to factor) whose levels specify which panel each
> series is to be plotted in. screens = c(1, 2, 1) would plot series 1,
> 2 and 3 in panels 1, 2 and 1. May also be a named list, see Details
> below."
>
> From that I would infer the answer to your query in no: factors, know
> nothing about plotmath notation, and as.factor() just coerces your
> expressions to character strings that are the factor labels.
> strip.default() then uses these character strings as the labels for
> the strips, giving what you got.
>
> As you only want to use a "pi" character, ?, in your math expression,
> I tried using a UTF-8 symbol for it, \U1D6D1, in quoted strings as the
> argument for the screens parameter. That is:
>
> striplabs <- factor(c("2cos(2\U1D6D1t/50 + 0.6\U1D6D1)",
>                       "2cos(2\U1D6D1t /50 + 0.6\U1D6D1) + N(0, 1)"))
> xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
>        type = c("l", "g"),
>        main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)),
>        screens = striplabs
> )
>
> The RStudio graphics device was *not* able to interpret the UTF-8 in
> the strip, but on my Mac, the Cairo_pdf() device (or just using the
> export button to export the graphic as a pdf from RStudio) *did*
> reproduce the characters nicely in the strip labels in the pdf.
> Unfortunately, the main title expression symbol for pi (presumably
> from the adobe font symbols) did not look nice. However, using the
> quoted graphics string (the first level of the striplabs factor) does
> fine, of course.
>
> As I just sort of barely know what I'm doing here, there may be a much
> better way to do this by using an appropriate font specification in a
> strip = strip.custom(par.strip.text= ...) argument to xyplot, but that
> exceeds my current abilities. Maybe you or one of the R cognescenti
> can figure it  out.
>
> Again, please note my full disclosure.
>
> Cheers,
> Bert
>
> "An educated person is one who can entertain new ideas, entertain
> others, and entertain herself."
>
> "An educated person is one who can entertain new ideas, entertain
> others, and entertain herself."
>
>
>
> On Sun, Mar 2, 2025 at 6:56?AM Naresh Gurbuxani
> <naresh_gurbuxani at hotmail.com> wrote:
> >
> > Is it possible to include expression in lattice panel strip?
> > Thanks,
> > Naresh
> >
> > cs <- 2 * cos(2 * pi * (1:500) / 50 + 0.6 * pi)
> > w <- rnorm(500)
> > xyplot(ts(cbind(x1 = cs, x2 = cs + w)), screens = list(x1 = expression(2
> * cos(2 * pi * t / 50 + 0.6 * pi)), x2 = expression(2 * cos(2 * pi * t / 50
> + 0.6 * pi) + N(0, 1))), type = c("l", "g"), main = expression(2 * cos(2 *
> pi * t / 50 + 0.6 * pi)))
> >
> > # Greek letter pi is shown in main title, but not in panel strips
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Mon Mar  3 07:38:43 2025
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Mon, 3 Mar 2025 12:08:43 +0530
Subject: [R] Failed to convert data to numeric
Message-ID: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>

Hi,

I have below data

dat2 = c("-24.437285333333300", "4.850695000000000", "-1.918495666666670",

"2.641818000000000", "6.777527666666670", "3.208084000000000",

"4.193287666666670", "0.378257666666667", "4.658955000000000",

"?-9.881474000000000")

Now when I try to convert this data to numeric, I got NA as below

> as.numeric(dat2)

 [1] -24.4372853   4.8506950  -1.9184957   2.6418180   6.7775277   3.2080840

 [7]   4.1932877   0.3782577   4.6589550          NA

Could you please help to understand why I get NA for the last value?

> sessionInfo()

R version 4.4.0 (2024-04-24)

Platform: aarch64-apple-darwin20

Running under: macOS 15.3.1


Matrix products: default

BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib

LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
 LAPACK version 3.12.0


locale:

[1] C/UTF-8/C/C/C/C


time zone: Asia

tzcode source: internal


attached base packages:

[1] stats     graphics  grDevices utils     datasets  methods   base


loaded via a namespace (and not attached):

[1] compiler_4.4.0


From |kry|ov @end|ng |rom d|@root@org  Mon Mar  3 07:48:37 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Mon, 3 Mar 2025 09:48:37 +0300
Subject: [R] Failed to convert data to numeric
In-Reply-To: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
Message-ID: <20250303094837.32820c87@Tarkus>

? Mon, 3 Mar 2025 12:08:43 +0530
Christofer Bogaso <bogaso.christofer at gmail.com> ?????:

> dat2 = c("-24.437285333333300", "4.850695000000000",
> "-1.918495666666670",
> 
> "2.641818000000000", "6.777527666666670", "3.208084000000000",
> 
> "4.193287666666670", "0.378257666666667", "4.658955000000000",
> 
> "?-9.881474000000000")
> 
> Now when I try to convert this data to numeric, I got NA as below
> 
> > as.numeric(dat2)  
> 
>  [1] -24.4372853   4.8506950  -1.9184957   2.6418180   6.7775277
> 3.2080840
> 
>  [7]   4.1932877   0.3782577   4.6589550          NA

There's an invisible Unicode character in there, U+FEFF ZERO WIDTH
NO-BREAK SPACE:

> dat2 |> tail(1) |> tools::showNonASCII()
1: <ef><bb><bf>-9.881474000000000

Try as.numeric(gsub('\ufeff', '', dat2)).

-- 
Best regards,
Ivan


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Mon Mar  3 08:51:31 2025
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Mon, 3 Mar 2025 13:21:31 +0530
Subject: [R] Failed to convert data to numeric
In-Reply-To: <20250303094837.32820c87@Tarkus>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
Message-ID: <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>

Hi Ivan,

Thanks for your solution.

Is there any way to remove all possible "Unicode character" that may
be present in the array at once?

On Mon, Mar 3, 2025 at 12:18?PM Ivan Krylov <ikrylov at disroot.org> wrote:
>
> ? Mon, 3 Mar 2025 12:08:43 +0530
> Christofer Bogaso <bogaso.christofer at gmail.com> ?????:
>
> > dat2 = c("-24.437285333333300", "4.850695000000000",
> > "-1.918495666666670",
> >
> > "2.641818000000000", "6.777527666666670", "3.208084000000000",
> >
> > "4.193287666666670", "0.378257666666667", "4.658955000000000",
> >
> > "?-9.881474000000000")
> >
> > Now when I try to convert this data to numeric, I got NA as below
> >
> > > as.numeric(dat2)
> >
> >  [1] -24.4372853   4.8506950  -1.9184957   2.6418180   6.7775277
> > 3.2080840
> >
> >  [7]   4.1932877   0.3782577   4.6589550          NA
>
> There's an invisible Unicode character in there, U+FEFF ZERO WIDTH
> NO-BREAK SPACE:
>
> > dat2 |> tail(1) |> tools::showNonASCII()
> 1: <ef><bb><bf>-9.881474000000000
>
> Try as.numeric(gsub('\ufeff', '', dat2)).
>
> --
> Best regards,
> Ivan


From |kry|ov @end|ng |rom d|@root@org  Mon Mar  3 09:09:22 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Mon, 3 Mar 2025 11:09:22 +0300
Subject: [R] Failed to convert data to numeric
In-Reply-To: <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
Message-ID: <20250303110922.1e9ecb49@Tarkus>

? Mon, 3 Mar 2025 13:21:31 +0530
Christofer Bogaso <bogaso.christofer at gmail.com> ?????:

> Is there any way to remove all possible "Unicode character" that may
> be present in the array at once?

Define a range of characters you consider acceptable, and you'll be
able to use regular expressions to remove everything else. For example,
the following expression should remove everything except ASCII digits,
dots, and hyphen-minus:

gsub('[^0-9.-]+', '', dat2)

There is a brief introduction to regular expressions in ?regex and
various online resources such as <https://regex101.com/>.

-- 
Best regards,
Ivan


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon Mar  3 09:33:40 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 03 Mar 2025 00:33:40 -0800
Subject: [R] [Tagged]  Re:  Failed to convert data to numeric
In-Reply-To: <20250303110922.1e9ecb49@Tarkus>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
 <20250303110922.1e9ecb49@Tarkus>
Message-ID: <E6FF9AA7-B4B2-43E1-94A3-EBE75CDF7E33@dcn.davis.ca.us>

?tools::showNonASCII

On March 3, 2025 12:09:22 AM PST, Ivan Krylov via R-help <r-help at r-project.org> wrote:
>? Mon, 3 Mar 2025 13:21:31 +0530
>Christofer Bogaso <bogaso.christofer at gmail.com> ?????:
>
>> Is there any way to remove all possible "Unicode character" that may
>> be present in the array at once?
>
>Define a range of characters you consider acceptable, and you'll be
>able to use regular expressions to remove everything else. For example,
>the following expression should remove everything except ASCII digits,
>dots, and hyphen-minus:
>
>gsub('[^0-9.-]+', '', dat2)
>
>There is a brief introduction to regular expressions in ?regex and
>various online resources such as <https://regex101.com/>.
>

-- 
Sent from my phone. Please excuse my brevity.


From n@re@h_gurbux@n| @end|ng |rom hotm@||@com  Mon Mar  3 11:54:37 2025
From: n@re@h_gurbux@n| @end|ng |rom hotm@||@com (Naresh Gurbuxani)
Date: Mon, 3 Mar 2025 10:54:37 +0000
Subject: [R] expression in lattice panel strip
In-Reply-To: <CADfFDC6bxDOfsDbVPi=pCRE1pGHCqQOokYVg+KKgpbKLu--puQ@mail.gmail.com>
References: <CADfFDC6bxDOfsDbVPi=pCRE1pGHCqQOokYVg+KKgpbKLu--puQ@mail.gmail.com>
Message-ID: <DM4P223MB0519AB58C5F791B2363181C1FAC92@DM4P223MB0519.NAMP223.PROD.OUTLOOK.COM>

Thanks all for your responses.  My problem is solved.

Sent from my iPhone

On Mar 3, 2025, at 1:08?AM, Deepayan Sarkar <deepayan.sarkar at gmail.com> wrote:

?
This is possible but a little cumbersome. Bert is on the right track with strip.custom:

xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
       strip = strip.custom(factor.levels =
                                expression(2 * cos(2 * pi * t / 50 + 0.6 * pi),
                                           2 * cos(2 * pi * t / 50 + 0.6 * pi) + N(0, 1))),
       type = c("l", "g"),
       main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))

where (from the docs):

factor.levels: vector of character strings or expressions giving the
          levels of the conditioning variable currently being drawn.
          For more than one conditioning variable, this will vary with
          'which.given'.

This is relatively straightforward with only one conditioning variable. A more general solution for multiple conditioning variables would be

estrip <- function(..., factor.levels)
{
    strip.default(..., factor.levels = parse(text = factor.levels))
}

xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
       screens = list(x1 = "2 * cos(2 * pi * t / 50 + 0.6 * pi)",
                      x2 = "2 * cos(2 * pi * t / 50 + 0.6 * pi) + N(0, 1)"),
       strip = estrip,
       type = c("l", "g"),
       main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))

Best,
-Deepayan

On Mon, 3 Mar 2025 at 06:38, Bert Gunter <bgunter.4567 at gmail.com<mailto:bgunter.4567 at gmail.com>> wrote:
Full disclosure: I have never plotted time series using this xyplot method.

However, ?xyplot.ts says:

"screens

factor (or coerced to factor) whose levels specify which panel each
series is to be plotted in. screens = c(1, 2, 1) would plot series 1,
2 and 3 in panels 1, 2 and 1. May also be a named list, see Details
below."

From that I would infer the answer to your query in no: factors, know
nothing about plotmath notation, and as.factor() just coerces your
expressions to character strings that are the factor labels.
strip.default() then uses these character strings as the labels for
the strips, giving what you got.

As you only want to use a "pi" character, ?, in your math expression,
I tried using a UTF-8 symbol for it, \U1D6D1, in quoted strings as the
argument for the screens parameter. That is:

striplabs <- factor(c("2cos(2\U1D6D1t/50 + 0.6\U1D6D1)",
                      "2cos(2\U1D6D1t /50 + 0.6\U1D6D1) + N(0, 1)"))
xyplot(ts(cbind(x1 = cs, x2 = cs + w)),
       type = c("l", "g"),
       main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)),
       screens = striplabs
)

The RStudio graphics device was *not* able to interpret the UTF-8 in
the strip, but on my Mac, the Cairo_pdf() device (or just using the
export button to export the graphic as a pdf from RStudio) *did*
reproduce the characters nicely in the strip labels in the pdf.
Unfortunately, the main title expression symbol for pi (presumably
from the adobe font symbols) did not look nice. However, using the
quoted graphics string (the first level of the striplabs factor) does
fine, of course.

As I just sort of barely know what I'm doing here, there may be a much
better way to do this by using an appropriate font specification in a
strip = strip.custom(par.strip.text= ...) argument to xyplot, but that
exceeds my current abilities. Maybe you or one of the R cognescenti
can figure it  out.

Again, please note my full disclosure.

Cheers,
Bert

"An educated person is one who can entertain new ideas, entertain
others, and entertain herself."

"An educated person is one who can entertain new ideas, entertain
others, and entertain herself."



On Sun, Mar 2, 2025 at 6:56?AM Naresh Gurbuxani
<naresh_gurbuxani at hotmail.com<mailto:naresh_gurbuxani at hotmail.com>> wrote:
>
> Is it possible to include expression in lattice panel strip?
> Thanks,
> Naresh
>
> cs <- 2 * cos(2 * pi * (1:500) / 50 + 0.6 * pi)
> w <- rnorm(500)
> xyplot(ts(cbind(x1 = cs, x2 = cs + w)), screens = list(x1 = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)), x2 = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi) + N(0, 1))), type = c("l", "g"), main = expression(2 * cos(2 * pi * t / 50 + 0.6 * pi)))
>
> # Greek letter pi is shown in main title, but not in panel strips
> ______________________________________________
> R-help at r-project.org<mailto:R-help at r-project.org> mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

______________________________________________
R-help at r-project.org<mailto:R-help at r-project.org> mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

	[[alternative HTML version deleted]]


From @vi@e@gross m@iii@g oii gm@ii@com  Mon Mar  3 18:19:02 2025
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Mon, 3 Mar 2025 12:19:02 -0500
Subject: [R] Failed to convert data to numeric
In-Reply-To: <20250303110922.1e9ecb49@Tarkus>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
 <20250303110922.1e9ecb49@Tarkus>
Message-ID: <007801db8c60$5c6df260$1549d720$@gmail.com>

The second solution Ivan offers looks good, and a bit more general than his first that simply removes one non-visible character.

It begs the question of why the data has that anomaly at all. Did the data come from a text-processing environment where it was going to wrap there and was protected?

As Ivan points out, there is a question of what format you expect numbers in and what "as.numeric"  should do when it does not see an integer or floating point number. 

If you test it, you can see that as.numeric ignores leading and/or trailing blanks and tabs and even newlines sometimes and some other irrelevant ASCII characters. In that spirit, the UNICODE character being mentioned should be one that any UNICODE-aware version of as.numeric should ignore.

But UNICODE supports a much wider vision of numeric so that there are numeric-equivalent symbols in other languages and groupings and even something like the symbols for numerals in light or dark circles count as numbers. Those can likely safely be excluded in this context but perhaps not in a more general function.

But I note as.numeric seems to handle scientific notation as in:

as.numeric("1.23e8")
[1] 1.23e+08

So a single instance of the letters "e" and "E" must be supported if your numbers in string form may contain them. Further, the E cannot be the first or last letter. It cannot have adjacent whitespace. Still, if you are OK with getting an NA in such situations, it should be OK.

It gets worse. Hexadecimal is supported:

> as.numeric("0X12")
[1] 18

You now need to support the letters x and X. But only if preceded by a zero! 

It gets still worse as any characters from [0-9A-F] are supported:

> as.numeric("0xAE")
[1] 174

There may be other scenarios it handles. The filter applied might remove valid numbers so you may want to carefully document it if your program only handles a restricted set.

A possible idea might be to make two passes and only  evaluate any resulting NA from as.numeric() by doing a substitution like Ivan suggests to try to fix any broken ones. But note it may fix too much as "1.2 e 5" might become "1.2e5" as spaces are removed.

-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Ivan Krylov via R-help
Sent: Monday, March 3, 2025 3:09 AM
To: Christofer Bogaso <bogaso.christofer at gmail.com>
Cc: r-help <r-help at r-project.org>
Subject: Re: [R] Failed to convert data to numeric

? Mon, 3 Mar 2025 13:21:31 +0530
Christofer Bogaso <bogaso.christofer at gmail.com> ?????:

> Is there any way to remove all possible "Unicode character" that may
> be present in the array at once?

Define a range of characters you consider acceptable, and you'll be
able to use regular expressions to remove everything else. For example,
the following expression should remove everything except ASCII digits,
dots, and hyphen-minus:

gsub('[^0-9.-]+', '', dat2)

There is a brief introduction to regular expressions in ?regex and
various online resources such as <https://regex101.com/>.

-- 
Best regards,
Ivan

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From ro||turner @end|ng |rom po@teo@net  Mon Mar  3 22:45:14 2025
From: ro||turner @end|ng |rom po@teo@net (Rolf Turner)
Date: Mon,  3 Mar 2025 21:45:14 +0000
Subject: [R] Failed to convert data to numeric
In-Reply-To: <007801db8c60$5c6df260$1549d720$@gmail.com>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
 <20250303110922.1e9ecb49@Tarkus>
 <007801db8c60$5c6df260$1549d720$@gmail.com>
Message-ID: <20250304104514.691929c1@new-hp>


This issue looks like grist for the R Inferno.

cheers,

Rolf


On Mon, 3 Mar 2025 12:19:02 -0500
<avi.e.gross at gmail.com> wrote:

> The second solution Ivan offers looks good, and a bit more general
> than his first that simply removes one non-visible character.
> 
> It begs the question of why the data has that anomaly at all. Did the
> data come from a text-processing environment where it was going to
> wrap there and was protected?
> 
> As Ivan points out, there is a question of what format you expect
> numbers in and what "as.numeric"  should do when it does not see an
> integer or floating point number. 
> 
> If you test it, you can see that as.numeric ignores leading and/or
> trailing blanks and tabs and even newlines sometimes and some other
> irrelevant ASCII characters. In that spirit, the UNICODE character
> being mentioned should be one that any UNICODE-aware version of
> as.numeric should ignore.
> 
> But UNICODE supports a much wider vision of numeric so that there are
> numeric-equivalent symbols in other languages and groupings and even
> something like the symbols for numerals in light or dark circles
> count as numbers. Those can likely safely be excluded in this context
> but perhaps not in a more general function.
> 
> But I note as.numeric seems to handle scientific notation as in:
> 
> as.numeric("1.23e8")
> [1] 1.23e+08
> 
> So a single instance of the letters "e" and "E" must be supported if
> your numbers in string form may contain them. Further, the E cannot
> be the first or last letter. It cannot have adjacent whitespace.
> Still, if you are OK with getting an NA in such situations, it should
> be OK.
> 
> It gets worse. Hexadecimal is supported:
> 
> > as.numeric("0X12")
> [1] 18
> 
> You now need to support the letters x and X. But only if preceded by
> a zero! 
> 
> It gets still worse as any characters from [0-9A-F] are supported:
> 
> > as.numeric("0xAE")
> [1] 174
> 
> There may be other scenarios it handles. The filter applied might
> remove valid numbers so you may want to carefully document it if your
> program only handles a restricted set.
> 
> A possible idea might be to make two passes and only  evaluate any
> resulting NA from as.numeric() by doing a substitution like Ivan
> suggests to try to fix any broken ones. But note it may fix too much
> as "1.2 e 5" might become "1.2e5" as spaces are removed.
> 
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Ivan Krylov
> via R-help Sent: Monday, March 3, 2025 3:09 AM
> To: Christofer Bogaso <bogaso.christofer at gmail.com>
> Cc: r-help <r-help at r-project.org>
> Subject: Re: [R] Failed to convert data to numeric
> 
> ? Mon, 3 Mar 2025 13:21:31 +0530
> Christofer Bogaso <bogaso.christofer at gmail.com> ?????:
> 
> > Is there any way to remove all possible "Unicode character" that may
> > be present in the array at once?
> 
> Define a range of characters you consider acceptable, and you'll be
> able to use regular expressions to remove everything else. For
> example, the following expression should remove everything except
> ASCII digits, dots, and hyphen-minus:
> 
> gsub('[^0-9.-]+', '', dat2)
> 
> There is a brief introduction to regular expressions in ?regex and
> various online resources such as <https://regex101.com/>.
> 



-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Stats. Dep't. (secretaries) phone:
         +64-9-373-7599 ext. 89622
Home phone: +64-9-480-4619


From r@oknz @end|ng |rom gm@||@com  Mon Mar  3 23:33:51 2025
From: r@oknz @end|ng |rom gm@||@com (Richard O'Keefe)
Date: Tue, 4 Mar 2025 11:33:51 +1300
Subject: [R] Failed to convert data to numeric
In-Reply-To: <007801db8c60$5c6df260$1549d720$@gmail.com>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
 <20250303110922.1e9ecb49@Tarkus> <007801db8c60$5c6df260$1549d720$@gmail.com>
Message-ID: <CABcYAdKTKJaRcN9u-uU0FPPC79WJ48VkjmLszjjjA01TWqQoPA@mail.gmail.com>

The zero-width no-break space character is used as the Byte Order
Mark.  That is, an official function for it at the beginning of a
character sequence
is to indicate whether you have 2-byte or 4-byte big-endian or
little-endian encoding.  It was not intended for use in UTF-8, where
there is nothing for
it to tell you, but Microsoft jumped in with all six feet and said
"hey, we'll use this to indicate that it's Unicode in UTF-8 and not
one of the hundreds
of other 8-bit coded character sets."  I've lost count of the number
of programs that have choked because they were given a BOM where they
didn't expect one.

So there is no great mystery about why there is a BOM at the beginning
of this particular string.
The real mystery is why it was there and NOT at the beginning of all the others.

I suggest that it is a good idea to remove the BOM character from the
beginning of microsofted strings,
but a bad idea to remove any other character.  If you are given bad
data like "Bond-007" when you
expect a number, you want to know about it, and not mistake it for
-007.  Still less do you want a
phone number like "+61 3 555 1234 x77" to be mistaken for a plain
number "613555123477".

On Tue, 4 Mar 2025 at 06:24, <avi.e.gross at gmail.com> wrote:
>
> The second solution Ivan offers looks good, and a bit more general than his first that simply removes one non-visible character.
>
> It begs the question of why the data has that anomaly at all. Did the data come from a text-processing environment where it was going to wrap there and was protected?
>
> As Ivan points out, there is a question of what format you expect numbers in and what "as.numeric"  should do when it does not see an integer or floating point number.
>
> If you test it, you can see that as.numeric ignores leading and/or trailing blanks and tabs and even newlines sometimes and some other irrelevant ASCII characters. In that spirit, the UNICODE character being mentioned should be one that any UNICODE-aware version of as.numeric should ignore.
>
> But UNICODE supports a much wider vision of numeric so that there are numeric-equivalent symbols in other languages and groupings and even something like the symbols for numerals in light or dark circles count as numbers. Those can likely safely be excluded in this context but perhaps not in a more general function.
>
> But I note as.numeric seems to handle scientific notation as in:
>
> as.numeric("1.23e8")
> [1] 1.23e+08
>
> So a single instance of the letters "e" and "E" must be supported if your numbers in string form may contain them. Further, the E cannot be the first or last letter. It cannot have adjacent whitespace. Still, if you are OK with getting an NA in such situations, it should be OK.
>
> It gets worse. Hexadecimal is supported:
>
> > as.numeric("0X12")
> [1] 18
>
> You now need to support the letters x and X. But only if preceded by a zero!
>
> It gets still worse as any characters from [0-9A-F] are supported:
>
> > as.numeric("0xAE")
> [1] 174
>
> There may be other scenarios it handles. The filter applied might remove valid numbers so you may want to carefully document it if your program only handles a restricted set.
>
> A possible idea might be to make two passes and only  evaluate any resulting NA from as.numeric() by doing a substitution like Ivan suggests to try to fix any broken ones. But note it may fix too much as "1.2 e 5" might become "1.2e5" as spaces are removed.
>
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Ivan Krylov via R-help
> Sent: Monday, March 3, 2025 3:09 AM
> To: Christofer Bogaso <bogaso.christofer at gmail.com>
> Cc: r-help <r-help at r-project.org>
> Subject: Re: [R] Failed to convert data to numeric
>
> ? Mon, 3 Mar 2025 13:21:31 +0530
> Christofer Bogaso <bogaso.christofer at gmail.com> ?????:
>
> > Is there any way to remove all possible "Unicode character" that may
> > be present in the array at once?
>
> Define a range of characters you consider acceptable, and you'll be
> able to use regular expressions to remove everything else. For example,
> the following expression should remove everything except ASCII digits,
> dots, and hyphen-minus:
>
> gsub('[^0-9.-]+', '', dat2)
>
> There is a brief introduction to regular expressions in ?regex and
> various online resources such as <https://regex101.com/>.
>
> --
> Best regards,
> Ivan
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From r@oknz @end|ng |rom gm@||@com  Mon Mar  3 23:42:30 2025
From: r@oknz @end|ng |rom gm@||@com (Richard O'Keefe)
Date: Tue, 4 Mar 2025 11:42:30 +1300
Subject: [R] Failed to convert data to numeric
In-Reply-To: <20250304104514.691929c1@new-hp>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
 <20250303110922.1e9ecb49@Tarkus> <007801db8c60$5c6df260$1549d720$@gmail.com>
 <20250304104514.691929c1@new-hp>
Message-ID: <CABcYAd+stZ5zbXV_svwGNVn8hddyPRU1aU41C70czL7cA3NsXw@mail.gmail.com>

This is not for the R inferno.
This is for the Microsoft interno, or perhaps the Unicode inferno.
The Byte Order Mark is supposed to appear at the beginning of UTF-32
or UTF-16 *external* data, like a file
or data coming over a socket.
In the Microsoft world, it also tends to appear at the beginning of
UTF-8 files, where strictly speaking, it shouldn't.
ONLY at the beginning does ZWNBSP have this function.

I use a lot of programming languages, and I don't know any that
routinely ignores ZWNBSP.


Hmm.  I wonder if the strings in this example are fields of a data
file but were originally in a different
order, with the last string first?

What *would* make sense would be an option, when opening a connection,
to skip a leading BOM.


On Tue, 4 Mar 2025 at 10:45, Rolf Turner <rolfturner at posteo.net> wrote:
>
>
> This issue looks like grist for the R Inferno.
>
> cheers,
>
> Rolf
>
>
> On Mon, 3 Mar 2025 12:19:02 -0500
> <avi.e.gross at gmail.com> wrote:
>
> > The second solution Ivan offers looks good, and a bit more general
> > than his first that simply removes one non-visible character.
> >
> > It begs the question of why the data has that anomaly at all. Did the
> > data come from a text-processing environment where it was going to
> > wrap there and was protected?
> >
> > As Ivan points out, there is a question of what format you expect
> > numbers in and what "as.numeric"  should do when it does not see an
> > integer or floating point number.
> >
> > If you test it, you can see that as.numeric ignores leading and/or
> > trailing blanks and tabs and even newlines sometimes and some other
> > irrelevant ASCII characters. In that spirit, the UNICODE character
> > being mentioned should be one that any UNICODE-aware version of
> > as.numeric should ignore.
> >
> > But UNICODE supports a much wider vision of numeric so that there are
> > numeric-equivalent symbols in other languages and groupings and even
> > something like the symbols for numerals in light or dark circles
> > count as numbers. Those can likely safely be excluded in this context
> > but perhaps not in a more general function.
> >
> > But I note as.numeric seems to handle scientific notation as in:
> >
> > as.numeric("1.23e8")
> > [1] 1.23e+08
> >
> > So a single instance of the letters "e" and "E" must be supported if
> > your numbers in string form may contain them. Further, the E cannot
> > be the first or last letter. It cannot have adjacent whitespace.
> > Still, if you are OK with getting an NA in such situations, it should
> > be OK.
> >
> > It gets worse. Hexadecimal is supported:
> >
> > > as.numeric("0X12")
> > [1] 18
> >
> > You now need to support the letters x and X. But only if preceded by
> > a zero!
> >
> > It gets still worse as any characters from [0-9A-F] are supported:
> >
> > > as.numeric("0xAE")
> > [1] 174
> >
> > There may be other scenarios it handles. The filter applied might
> > remove valid numbers so you may want to carefully document it if your
> > program only handles a restricted set.
> >
> > A possible idea might be to make two passes and only  evaluate any
> > resulting NA from as.numeric() by doing a substitution like Ivan
> > suggests to try to fix any broken ones. But note it may fix too much
> > as "1.2 e 5" might become "1.2e5" as spaces are removed.
> >
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Ivan Krylov
> > via R-help Sent: Monday, March 3, 2025 3:09 AM
> > To: Christofer Bogaso <bogaso.christofer at gmail.com>
> > Cc: r-help <r-help at r-project.org>
> > Subject: Re: [R] Failed to convert data to numeric
> >
> > ? Mon, 3 Mar 2025 13:21:31 +0530
> > Christofer Bogaso <bogaso.christofer at gmail.com> ?????:
> >
> > > Is there any way to remove all possible "Unicode character" that may
> > > be present in the array at once?
> >
> > Define a range of characters you consider acceptable, and you'll be
> > able to use regular expressions to remove everything else. For
> > example, the following expression should remove everything except
> > ASCII digits, dots, and hyphen-minus:
> >
> > gsub('[^0-9.-]+', '', dat2)
> >
> > There is a brief introduction to regular expressions in ?regex and
> > various online resources such as <https://regex101.com/>.
> >
>
>
>
> --
> Honorary Research Fellow
> Department of Statistics
> University of Auckland
> Stats. Dep't. (secretaries) phone:
>          +64-9-373-7599 ext. 89622
> Home phone: +64-9-480-4619
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @vi@e@gross m@iii@g oii gm@ii@com  Mon Mar  3 23:51:21 2025
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Mon, 3 Mar 2025 17:51:21 -0500
Subject: [R] Failed to convert data to numeric
In-Reply-To: <CABcYAdKTKJaRcN9u-uU0FPPC79WJ48VkjmLszjjjA01TWqQoPA@mail.gmail.com>
References: <CA+dpOJmdNDT6Y2n5UDZgUj8c1E77TupPfT5MhgbRNZW5XSgjFg@mail.gmail.com>
 <20250303094837.32820c87@Tarkus>
 <CA+dpOJnHQOj+rbOJXhSNxHGerqNCaiAfARtkvo_=87jiD93OTw@mail.gmail.com>
 <20250303110922.1e9ecb49@Tarkus> <007801db8c60$5c6df260$1549d720$@gmail.com>
 <CABcYAdKTKJaRcN9u-uU0FPPC79WJ48VkjmLszjjjA01TWqQoPA@mail.gmail.com>
Message-ID: <00aa01db8c8e$c9058b30$5b10a190$@gmail.com>

I like your examples, Richard, of strings that should not be considered as numbers. There are times you want to recognize something like "221B Baker Street" and extract the 221 or perhaps the 221B as a part of a full address and ignore the rest. But one goal of a function like as.numeric() is to handle fully-formed numbers ready to be converted to another storage format. 

People with special uses and needs generally need to roll their own. A Bank may want to be able to handle this:

as.currency("five hundred twenty eight dollars and thirty two cents")

And someone else may want to handle Roman numerals, or calculate the value of text in a form of numerology like:
gematria("???") generates 18.

But what you describe with ?soft is quite inconsiderate and I wonder if it should be automatically handled by an enhanced version of the as.numeric family. There is indeed a general problem with different character sets and how to know what you have. But breaking lots of software this way is not ...

-----Original Message-----
From: Richard O'Keefe <raoknz at gmail.com> 
Sent: Monday, March 3, 2025 5:34 PM
To: avi.e.gross at gmail.com
Cc: Ivan Krylov <ikrylov at disroot.org>; Christofer Bogaso <bogaso.christofer at gmail.com>; r-help <r-help at r-project.org>
Subject: Re: [R] Failed to convert data to numeric

The zero-width no-break space character is used as the Byte Order
Mark.  That is, an official function for it at the beginning of a
character sequence
is to indicate whether you have 2-byte or 4-byte big-endian or
little-endian encoding.  It was not intended for use in UTF-8, where
there is nothing for
it to tell you, but Microsoft jumped in with all six feet and said
"hey, we'll use this to indicate that it's Unicode in UTF-8 and not
one of the hundreds
of other 8-bit coded character sets."  I've lost count of the number
of programs that have choked because they were given a BOM where they
didn't expect one.

So there is no great mystery about why there is a BOM at the beginning
of this particular string.
The real mystery is why it was there and NOT at the beginning of all the others.

I suggest that it is a good idea to remove the BOM character from the
beginning of microsofted strings,
but a bad idea to remove any other character.  If you are given bad
data like "Bond-007" when you
expect a number, you want to know about it, and not mistake it for
-007.  Still less do you want a
phone number like "+61 3 555 1234 x77" to be mistaken for a plain
number "613555123477".

On Tue, 4 Mar 2025 at 06:24, <avi.e.gross at gmail.com> wrote:
>
> The second solution Ivan offers looks good, and a bit more general than his first that simply removes one non-visible character.
>
> It begs the question of why the data has that anomaly at all. Did the data come from a text-processing environment where it was going to wrap there and was protected?
>
> As Ivan points out, there is a question of what format you expect numbers in and what "as.numeric"  should do when it does not see an integer or floating point number.
>
> If you test it, you can see that as.numeric ignores leading and/or trailing blanks and tabs and even newlines sometimes and some other irrelevant ASCII characters. In that spirit, the UNICODE character being mentioned should be one that any UNICODE-aware version of as.numeric should ignore.
>
> But UNICODE supports a much wider vision of numeric so that there are numeric-equivalent symbols in other languages and groupings and even something like the symbols for numerals in light or dark circles count as numbers. Those can likely safely be excluded in this context but perhaps not in a more general function.
>
> But I note as.numeric seems to handle scientific notation as in:
>
> as.numeric("1.23e8")
> [1] 1.23e+08
>
> So a single instance of the letters "e" and "E" must be supported if your numbers in string form may contain them. Further, the E cannot be the first or last letter. It cannot have adjacent whitespace. Still, if you are OK with getting an NA in such situations, it should be OK.
>
> It gets worse. Hexadecimal is supported:
>
> > as.numeric("0X12")
> [1] 18
>
> You now need to support the letters x and X. But only if preceded by a zero!
>
> It gets still worse as any characters from [0-9A-F] are supported:
>
> > as.numeric("0xAE")
> [1] 174
>
> There may be other scenarios it handles. The filter applied might remove valid numbers so you may want to carefully document it if your program only handles a restricted set.
>
> A possible idea might be to make two passes and only  evaluate any resulting NA from as.numeric() by doing a substitution like Ivan suggests to try to fix any broken ones. But note it may fix too much as "1.2 e 5" might become "1.2e5" as spaces are removed.
>
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Ivan Krylov via R-help
> Sent: Monday, March 3, 2025 3:09 AM
> To: Christofer Bogaso <bogaso.christofer at gmail.com>
> Cc: r-help <r-help at r-project.org>
> Subject: Re: [R] Failed to convert data to numeric
>
> ? Mon, 3 Mar 2025 13:21:31 +0530
> Christofer Bogaso <bogaso.christofer at gmail.com> ?????:
>
> > Is there any way to remove all possible "Unicode character" that may
> > be present in the array at once?
>
> Define a range of characters you consider acceptable, and you'll be
> able to use regular expressions to remove everything else. For example,
> the following expression should remove everything except ASCII digits,
> dots, and hyphen-minus:
>
> gsub('[^0-9.-]+', '', dat2)
>
> There is a brief introduction to regular expressions in ?regex and
> various online resources such as <https://regex101.com/>.
>
> --
> Best regards,
> Ivan
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From pro|jcn@@h @end|ng |rom gm@||@com  Fri Mar  7 16:45:59 2025
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Fri, 7 Mar 2025 10:45:59 -0500
Subject: [R] Issue with littler vs. R and source()
Message-ID: <b2f132fd-5fd0-4ec0-86fe-cb2548c365bc@gmail.com>

I want to use littler (i.e. "r -i ") to run an R script so I can
set up a clickable icon for a program which uses package staplr.
Actually to use staplr to consolidate two files and remove some unwanted
pages before printout.

A minimal example program is FailBill.R, which has the single line

   library("staplr")

staplr is installed, as is rJava. System is Linux Mint 22.1 Xia,
and I had to install default-jre and default-jdk to get rJava
installed. Same error came up in a virtual Linux Mint 22 Wilma,
as I thought recent upgrade to Mint might be the problem.

Starting R and then doing
  source("FailBill.R")
works fine.

But in a terminal

   r -i FailBill.R

gives

   Error: package or namespace load failed for ?staplr?:
   .onLoad failed in loadNamespace() for 'staplr', details:
     call: NULL
     error: .onLoad failed in loadNamespace() for 'rJava', details:
     call: dyn.load(file, DLLpath = DLLpath, ...)
     error: unable to load shared object '/home/john/R/x86_64-pc-linux-gnu-library/4.4/rJava/libs/rJava.so':
     libjvm.so: cannot open shared object file: No such file or directory

Almost certainly some setting/pointer is incorrect, but I've yet to find it, and see a
lot of posts about rJava, offering plenty of confusion.

Suggestions welcome. Note that the program is interactive, and RScript or similar
charge ahead and ignore the interactive dialogs that use package svDialogs in the
program I'm trying to develop. Since I can run in R or RStudio by starting them and
then source()ing, the situation is not critical, but it would be good to work out
what is failing.

John Nash


From m@rbert@ @end|ng |rom protonm@||@com  Sat Mar  8 05:02:10 2025
From: m@rbert@ @end|ng |rom protonm@||@com (Steve Martin)
Date: Sat, 08 Mar 2025 04:02:10 +0000
Subject: [R] Issue with littler vs. R and source()
In-Reply-To: <b2f132fd-5fd0-4ec0-86fe-cb2548c365bc@gmail.com>
References: <b2f132fd-5fd0-4ec0-86fe-cb2548c365bc@gmail.com>
Message-ID: <2Qw7UFaTb91XKTPAMQeIx1SUe3zV0KU31oz4HeoAnaWk688GFjon_jOAMETQcF2W4hBJw170oSp8nXKA2gHpfcDJypPlj8GYwpkDBseB84s=@protonmail.com>

Hi John,

Does it work if you run R CMD r -i FailBill.R?

Steve


-------- Original Message --------
On 3/7/25 10:45, J C Nash <profjcnash at gmail.com> wrote:

>  I want to use littler (i.e. "r -i ") to run an R script so I can
>  set up a clickable icon for a program which uses package staplr.
>  Actually to use staplr to consolidate two files and remove some unwanted
>  pages before printout.
>  
>  A minimal example program is FailBill.R, which has the single line
>  
>     library("staplr")
>  
>  staplr is installed, as is rJava. System is Linux Mint 22.1 Xia,
>  and I had to install default-jre and default-jdk to get rJava
>  installed. Same error came up in a virtual Linux Mint 22 Wilma,
>  as I thought recent upgrade to Mint might be the problem.
>  
>  Starting R and then doing
>    source("FailBill.R")
>  works fine.
>  
>  But in a terminal
>  
>     r -i FailBill.R
>  
>  gives
>  
>     Error: package or namespace load failed for ?staplr?:
>     .onLoad failed in loadNamespace() for 'staplr', details:
>       call: NULL
>       error: .onLoad failed in loadNamespace() for 'rJava', details:
>       call: dyn.load(file, DLLpath = DLLpath, ...)
>       error: unable to load shared object '/home/john/R/x86_64-pc-linux-gnu-library/4.4/rJava/libs/rJava.so':
>       libjvm.so: cannot open shared object file: No such file or directory
>  
>  Almost certainly some setting/pointer is incorrect, but I've yet to find it, and see a
>  lot of posts about rJava, offering plenty of confusion.
>  
>  Suggestions welcome. Note that the program is interactive, and RScript or similar
>  charge ahead and ignore the interactive dialogs that use package svDialogs in the
>  program I'm trying to develop. Since I can run in R or RStudio by starting them and
>  then source()ing, the situation is not critical, but it would be good to work out
>  what is failing.
>  
>  John Nash
>  
>  ______________________________________________
>  R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>  https://stat.ethz.ch/mailman/listinfo/r-help
>  PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>  and provide commented, minimal, self-contained, reproducible code.
>


From pd@|gd @end|ng |rom gm@||@com  Sat Mar  8 11:15:10 2025
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Sat, 8 Mar 2025 11:15:10 +0100
Subject: [R] Issue with littler vs. R and source()
In-Reply-To: <b2f132fd-5fd0-4ec0-86fe-cb2548c365bc@gmail.com>
References: <b2f132fd-5fd0-4ec0-86fe-cb2548c365bc@gmail.com>
Message-ID: <BB1EB94A-28F0-4085-89DB-6CAEA912F499@gmail.com>

Does Rscript work for you? Seems happy enough here:

Peters-MacBook-Air:~ pd$ Rscript -e 'library(stapler)'
Peters-MacBook-Air:~ pd$ cat > tmp/FailBill.R
library(stapler)
Peters-MacBook-Air:~ pd$ Rscript tmp/FailBill.R 

-pd

> On 7 Mar 2025, at 16.45, J C Nash <profjcnash at gmail.com> wrote:
> 
> I want to use littler (i.e. "r -i ") to run an R script so I can
> set up a clickable icon for a program which uses package staplr.
> Actually to use staplr to consolidate two files and remove some unwanted
> pages before printout.
> 
> A minimal example program is FailBill.R, which has the single line
> 
>  library("staplr")
> 
> staplr is installed, as is rJava. System is Linux Mint 22.1 Xia,
> and I had to install default-jre and default-jdk to get rJava
> installed. Same error came up in a virtual Linux Mint 22 Wilma,
> as I thought recent upgrade to Mint might be the problem.
> 
> Starting R and then doing
> source("FailBill.R")
> works fine.
> 
> But in a terminal
> 
>  r -i FailBill.R
> 
> gives
> 
>  Error: package or namespace load failed for ?staplr?:
>  .onLoad failed in loadNamespace() for 'staplr', details:
>    call: NULL
>    error: .onLoad failed in loadNamespace() for 'rJava', details:
>    call: dyn.load(file, DLLpath = DLLpath, ...)
>    error: unable to load shared object '/home/john/R/x86_64-pc-linux-gnu-library/4.4/rJava/libs/rJava.so':
>    libjvm.so: cannot open shared object file: No such file or directory
> 
> Almost certainly some setting/pointer is incorrect, but I've yet to find it, and see a
> lot of posts about rJava, offering plenty of confusion.
> 
> Suggestions welcome. Note that the program is interactive, and RScript or similar
> charge ahead and ignore the interactive dialogs that use package svDialogs in the
> program I'm trying to develop. Since I can run in R or RStudio by starting them and
> then source()ing, the situation is not critical, but it would be good to work out
> what is failing.
> 
> John Nash
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business SchoolSolbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From pro|jcn@@h @end|ng |rom gm@||@com  Sat Mar  8 13:24:07 2025
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sat, 8 Mar 2025 07:24:07 -0500
Subject: [R] Issue with littler vs. R and source()
In-Reply-To: <2Qw7UFaTb91XKTPAMQeIx1SUe3zV0KU31oz4HeoAnaWk688GFjon_jOAMETQcF2W4hBJw170oSp8nXKA2gHpfcDJypPlj8GYwpkDBseB84s=@protonmail.com>
References: <b2f132fd-5fd0-4ec0-86fe-cb2548c365bc@gmail.com>
 <2Qw7UFaTb91XKTPAMQeIx1SUe3zV0KU31oz4HeoAnaWk688GFjon_jOAMETQcF2W4hBJw170oSp8nXKA2gHpfcDJypPlj8GYwpkDBseB84s=@protonmail.com>
Message-ID: <d5be48a2-daea-4a0e-b410-f2cea5121c43@gmail.com>

Thanks for responses.

R CMD r -i ./FailBill.R

And, better, the approach seems to allow the full program to run the
dialogs (from svDialogs package) I need for interaction. I'll have to
see how well I can make that work in a clickable icon.

Rscript ./FailBill.R

does avoid the "error" in not finding the java VM. However, and
unfortunately for me, Rscript on the full program ignores the dialogs, but
keeps going taking whatever is first option in the dialog call. I've not
sorted out why that is, but believe it is why littler was set up. Despite
quite a lot of R programming, I've not much experience in interactive programs
that go beyond simple 'readline' statements.

In any event, Steve's suggestion has got me moving forward. I suspect there'll
be other glitches to work around, especially as my intent was to obtain a
program that was cross platform. I had been using YAD in Linux, which is nice,
but leaves out Windows and Mac users.

Thanks again.

JN

On 2025-03-07 23:02, Steve Martin wrote:
> Hi John,
> 
> Does it work if you run R CMD r -i FailBill.R?
> 
> Steve
> 
> 
> -------- Original Message --------
> On 3/7/25 10:45, J C Nash <profjcnash at gmail.com> wrote:
> 
>>   I want to use littler (i.e. "r -i ") to run an R script so I can
>>   set up a clickable icon for a program which uses package staplr.
>>   Actually to use staplr to consolidate two files and remove some unwanted
>>   pages before printout.
>>   
>>   A minimal example program is FailBill.R, which has the single line
>>   
>>      library("staplr")
>>   
>>   staplr is installed, as is rJava. System is Linux Mint 22.1 Xia,
>>   and I had to install default-jre and default-jdk to get rJava
>>   installed. Same error came up in a virtual Linux Mint 22 Wilma,
>>   as I thought recent upgrade to Mint might be the problem.
>>   
>>   Starting R and then doing
>>     source("FailBill.R")
>>   works fine.
>>   
>>   But in a terminal
>>   
>>      r -i FailBill.R
>>   
>>   gives
>>   
>>      Error: package or namespace load failed for ?staplr?:
>>      .onLoad failed in loadNamespace() for 'staplr', details:
>>        call: NULL
>>        error: .onLoad failed in loadNamespace() for 'rJava', details:
>>        call: dyn.load(file, DLLpath = DLLpath, ...)
>>        error: unable to load shared object '/home/john/R/x86_64-pc-linux-gnu-library/4.4/rJava/libs/rJava.so':
>>        libjvm.so: cannot open shared object file: No such file or directory
>>   
>>   Almost certainly some setting/pointer is incorrect, but I've yet to find it, and see a
>>   lot of posts about rJava, offering plenty of confusion.
>>   
>>   Suggestions welcome. Note that the program is interactive, and RScript or similar
>>   charge ahead and ignore the interactive dialogs that use package svDialogs in the
>>   program I'm trying to develop. Since I can run in R or RStudio by starting them and
>>   then source()ing, the situation is not critical, but it would be good to work out
>>   what is failing.
>>   
>>   John Nash
>>   
>>   ______________________________________________
>>   R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>   https://stat.ethz.ch/mailman/listinfo/r-help
>>   PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>>   and provide commented, minimal, self-contained, reproducible code.
>>


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Sun Mar  9 18:12:47 2025
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Sun, 9 Mar 2025 22:42:47 +0530
Subject: [R] Number changed weirdly when converting to numeric
Message-ID: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>

Hi,

I have below simple conversion

> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))

[1] "-177253333.333333373069763"

I could not figure out why the input and output is different?

Clearly this conversion is incorrect. Is there any way to convert to
numerical properly?

> sessionInfo()

R version 4.4.0 (2024-04-24)

Platform: aarch64-apple-darwin20

Running under: macOS 15.3.1


Matrix products: default

BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib

LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
 LAPACK version 3.12.0


locale:

[1] C/UTF-8/C/C/C/C


time zone: Asia

tzcode source: internal


attached base packages:

[1] stats     graphics  grDevices utils     datasets  methods   base


loaded via a namespace (and not attached):

[1] compiler_4.4.0


From bbo|ker @end|ng |rom gm@||@com  Sun Mar  9 18:44:48 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 9 Mar 2025 13:44:48 -0400
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
Message-ID: <0f1a538b-135d-434c-81bd-15fde9338575@gmail.com>

   I can't reproduce this locally.


sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
[1] "-177253333.333333343267441"

R Under development (unstable) (2025-03-08 r87909)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 24.04.2 LTS


On 3/9/25 13:12, Christofer Bogaso wrote:
> Hi,
> 
> I have below simple conversion
> 
>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
> 
> [1] "-177253333.333333373069763"
> 
> I could not figure out why the input and output is different?
> 
> Clearly this conversion is incorrect. Is there any way to convert to
> numerical properly?
> 
>> sessionInfo()
> 
> R version 4.4.0 (2024-04-24)
> 
> Platform: aarch64-apple-darwin20
> 
> Running under: macOS 15.3.1
> 
> 
> Matrix products: default
> 
> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
> 
> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>   LAPACK version 3.12.0
> 
> 
> locale:
> 
> [1] C/UTF-8/C/C/C/C
> 
> 
> time zone: Asia
> 
> tzcode source: internal
> 
> 
> attached base packages:
> 
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
> 
> loaded via a namespace (and not attached):
> 
> [1] compiler_4.4.0
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
* E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sun Mar  9 18:46:25 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sun, 09 Mar 2025 10:46:25 -0700
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
Message-ID: <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>

https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f

https://0.30000000000000004.com/

On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
>Hi,
>
>I have below simple conversion
>
>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>
>[1] "-177253333.333333373069763"
>
>I could not figure out why the input and output is different?
>
>Clearly this conversion is incorrect. Is there any way to convert to
>numerical properly?
>
>> sessionInfo()
>
>R version 4.4.0 (2024-04-24)
>
>Platform: aarch64-apple-darwin20
>
>Running under: macOS 15.3.1
>
>
>Matrix products: default
>
>BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
>
>LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
> LAPACK version 3.12.0
>
>
>locale:
>
>[1] C/UTF-8/C/C/C/C
>
>
>time zone: Asia
>
>tzcode source: internal
>
>
>attached base packages:
>
>[1] stats     graphics  grDevices utils     datasets  methods   base
>
>
>loaded via a namespace (and not attached):
>
>[1] compiler_4.4.0
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From @te|@nML @end|ng |rom co||oc@t|on@@de  Sun Mar  9 19:06:17 2025
From: @te|@nML @end|ng |rom co||oc@t|on@@de (Stephanie Evert)
Date: Sun, 9 Mar 2025 19:06:17 +0100
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
Message-ID: <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>

For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.

> x <- as.numeric("-177253333.333333343267441")
> sprintf("%.15f", x)
[1] "-177253333.333333373069763"

This is the number adjacent to -177253333.333333343267441 in IEEE 754.

> writeBin(x, raw(8))
[1] ac aa aa aa 57 21 a5 c1

If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).

Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with 

> x <- -177253333.333333343267441

so it's not specific to as.numeric().

Best,
Stephanie




> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
> 
> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
> 
> https://0.30000000000000004.com/
> 
> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
>> Hi,
>> 
>> I have below simple conversion
>> 
>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>> 
>> [1] "-177253333.333333373069763"
>> 
>> I could not figure out why the input and output is different?
>> 
>> Clearly this conversion is incorrect. Is there any way to convert to
>> numerical properly?
>> 
>>> sessionInfo()
>> 
>> R version 4.4.0 (2024-04-24)
>> 
>> Platform: aarch64-apple-darwin20
>> 
>> Running under: macOS 15.3.1
>> 
>> 
>> Matrix products: default
>> 
>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
>> 
>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>> LAPACK version 3.12.0
>> 
>> 
>> locale:
>> 
>> [1] C/UTF-8/C/C/C/C
>> 
>> 
>> time zone: Asia
>> 
>> tzcode source: internal
>> 
>> 
>> attached base packages:
>> 
>> [1] stats     graphics  grDevices utils     datasets  methods   base
>> 
>> 
>> loaded via a namespace (and not attached):
>> 
>> [1] compiler_4.4.0
>> 
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> -- 
> Sent from my phone. Please excuse my brevity.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


	[[alternative HTML version deleted]]


From pro|jcn@@h @end|ng |rom gm@||@com  Sun Mar  9 19:19:00 2025
From: pro|jcn@@h @end|ng |rom gm@||@com (J C Nash)
Date: Sun, 9 Mar 2025 14:19:00 -0400
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
Message-ID: <d15df42b-ccff-4d9f-a650-1c5920cff105@gmail.com>

This may be way off the mark, but is it possible that the ARM machine is using
the "new" IEEE-754 arithmetic that does not have 80 bit extended? The standard
was changed (in ways to allow non-compliant systems to be compliant) because
ARM does not have the hardware registers. There are reasons why this might be
sensible, but we need more awareness of the consequences to avoid some of the
resulting changes in results. I've had to "fix" things that weren't broken because
M1 and later Macs gave different outputs, actually not in my code but in vignettes
where I compared to other packages.

Cheers,

John Nash
(who actually was part of 1985 IEEE 754 committee, though a VERY minor player)

On 2025-03-09 14:06, Stephanie Evert wrote:
> For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
> 
>> x <- as.numeric("-177253333.333333343267441")
>> sprintf("%.15f", x)
> [1] "-177253333.333333373069763"
> 
> This is the number adjacent to -177253333.333333343267441 in IEEE 754.
> 
>> writeBin(x, raw(8))
> [1] ac aa aa aa 57 21 a5 c1
> 
> If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
> 
> Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with
> 
>> x <- -177253333.333333343267441
> 
> so it's not specific to as.numeric().
> 
> Best,
> Stephanie
> 
> 
> 
> 
>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
>>
>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
>>
>> https://0.30000000000000004.com/
>>
>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
>>> Hi,
>>>
>>> I have below simple conversion
>>>
>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>>>
>>> [1] "-177253333.333333373069763"
>>>
>>> I could not figure out why the input and output is different?
>>>
>>> Clearly this conversion is incorrect. Is there any way to convert to
>>> numerical properly?
>>>
>>>> sessionInfo()
>>>
>>> R version 4.4.0 (2024-04-24)
>>>
>>> Platform: aarch64-apple-darwin20
>>>
>>> Running under: macOS 15.3.1
>>>
>>>
>>> Matrix products: default
>>>
>>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
>>>
>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>>> LAPACK version 3.12.0
>>>
>>>
>>> locale:
>>>
>>> [1] C/UTF-8/C/C/C/C
>>>
>>>
>>> time zone: Asia
>>>
>>> tzcode source: internal
>>>
>>>
>>> attached base packages:
>>>
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>>
>>> loaded via a namespace (and not attached):
>>>
>>> [1] compiler_4.4.0
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>
>> -- 
>> Sent from my phone. Please excuse my brevity.
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bbo|ker @end|ng |rom gm@||@com  Sun Mar  9 19:24:33 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 9 Mar 2025 14:24:33 -0400
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
Message-ID: <d565b28e-a601-49d4-be24-1aba2e0646be@gmail.com>

    Out of curiosity, what does atof() do on that platform? What does 
the following C program do on arm64? (I don't know exactly what R does 
to coerce character to double, but this is what I would guess ...)

#include <stdio.h>
#include <stdlib.h>
int main(void) {
   const char *str = "-177253333.333333343267441";
   double x = atof(str);
   printf("%0.15f\n", x);
   return 0;
}

   To my surprise, apparently R doesn't use stdlib to convert.

 From 
https://github.com/r-devel/r-svn/blob/bb64b28d8cc2e2863eb664e7f83b0a7206b4b1d4/src/main/util.c#L2087C1-L2107:

/* ...

        use our own strtod/atof to mitigate effects of setting LC_NUMERIC

    Also allows complete control of which non-numeric strings are
    accepted; e.g. glibc allows NANxxxx, macOS NAN(s), this accepts "NA".

... */

   Should this be escalated to r-devel (or r-bugzilla)?  Nothing pops 
out at me from the recent NEWS ...

   Ben Bolker

On 3/9/25 14:06, Stephanie Evert wrote:
> For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
> 
>> x <- as.numeric("-177253333.333333343267441")
>> sprintf("%.15f", x)
> [1] "-177253333.333333373069763"
> 
> This is the number adjacent to -177253333.333333343267441 in IEEE 754.
> 
>> writeBin(x, raw(8))
> [1] ac aa aa aa 57 21 a5 c1
> 
> If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
> 
> Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with
> 
>> x <- -177253333.333333343267441
> 
> so it's not specific to as.numeric().
> 
> Best,
> Stephanie
> 
> 
> 
> 
>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
>>
>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
>>
>> https://0.30000000000000004.com/
>>
>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
>>> Hi,
>>>
>>> I have below simple conversion
>>>
>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>>>
>>> [1] "-177253333.333333373069763"
>>>
>>> I could not figure out why the input and output is different?
>>>
>>> Clearly this conversion is incorrect. Is there any way to convert to
>>> numerical properly?
>>>
>>>> sessionInfo()
>>>
>>> R version 4.4.0 (2024-04-24)
>>>
>>> Platform: aarch64-apple-darwin20
>>>
>>> Running under: macOS 15.3.1
>>>
>>>
>>> Matrix products: default
>>>
>>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
>>>
>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>>> LAPACK version 3.12.0
>>>
>>>
>>> locale:
>>>
>>> [1] C/UTF-8/C/C/C/C
>>>
>>>
>>> time zone: Asia
>>>
>>> tzcode source: internal
>>>
>>>
>>> attached base packages:
>>>
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>
>>>
>>> loaded via a namespace (and not attached):
>>>
>>> [1] compiler_4.4.0
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>
>> -- 
>> Sent from my phone. Please excuse my brevity.
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
* E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sun Mar  9 20:31:56 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sun, 09 Mar 2025 12:31:56 -0700
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
Message-ID: <F1E7054C-5ADC-40C8-8921-6CC6E04E97C3@dcn.davis.ca.us>

I now see more clearly what the complaint is.

That said, you should ALWAYS be prepared for the round trip between binary and string forms of floating point to accrue rounding error because floating point is intrinsically approximate. While there are examples of floating point numbers that can reliably do that round trip exactly (e.g. integers shorter than the mantissa), in general you should be prepared for such "inexact" results.

John Nash's point that IEEE754 has been relaxed is reinforcement that they want users to be prepared for differences around the least significant bits... but the principle is mathematically intrinsic to the scope of floating point numbers whether the standard says so or not.

On March 9, 2025 11:06:17 AM PDT, Stephanie Evert <stefanML at collocations.de> wrote:
>For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
>
>> x <- as.numeric("-177253333.333333343267441")
>> sprintf("%.15f", x)
>[1] "-177253333.333333373069763"
>
>This is the number adjacent to -177253333.333333343267441 in IEEE 754.
>
>> writeBin(x, raw(8))
>[1] ac aa aa aa 57 21 a5 c1
>
>If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
>
>Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with 
>
>> x <- -177253333.333333343267441
>
>so it's not specific to as.numeric().
>
>Best,
>Stephanie
>
>
>
>
>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
>> 
>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
>> 
>> https://0.30000000000000004.com/
>> 
>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
>>> Hi,
>>> 
>>> I have below simple conversion
>>> 
>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>>> 
>>> [1] "-177253333.333333373069763"
>>> 
>>> I could not figure out why the input and output is different?
>>> 
>>> Clearly this conversion is incorrect. Is there any way to convert to
>>> numerical properly?
>>> 
>>>> sessionInfo()
>>> 
>>> R version 4.4.0 (2024-04-24)
>>> 
>>> Platform: aarch64-apple-darwin20
>>> 
>>> Running under: macOS 15.3.1
>>> 
>>> 
>>> Matrix products: default
>>> 
>>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
>>> 
>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>>> LAPACK version 3.12.0
>>> 
>>> 
>>> locale:
>>> 
>>> [1] C/UTF-8/C/C/C/C
>>> 
>>> 
>>> time zone: Asia
>>> 
>>> tzcode source: internal
>>> 
>>> 
>>> attached base packages:
>>> 
>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>> 
>>> 
>>> loaded via a namespace (and not attached):
>>> 
>>> [1] compiler_4.4.0
>>> 
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>> 
>> -- 
>> Sent from my phone. Please excuse my brevity.
>> 
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>

-- 
Sent from my phone. Please excuse my brevity.


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Sun Mar  9 22:55:42 2025
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Mon, 10 Mar 2025 03:25:42 +0530
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <F1E7054C-5ADC-40C8-8921-6CC6E04E97C3@dcn.davis.ca.us>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
 <F1E7054C-5ADC-40C8-8921-6CC6E04E97C3@dcn.davis.ca.us>
Message-ID: <CA+dpOJmGGqYgAzrG0qye5_=fg7A0gR2dWTk2z3iiymz-xC9A2Q@mail.gmail.com>

So, based on the discussion points from the experts here, I understand
that this is an ARM specific problem.

However, what should I do for a solution?

I use ARM+R in my office workstation, so it may not be prudent to me
to just say ignore this problem and let Apple's Tim Cook take care of
it...

On Mon, Mar 10, 2025 at 1:01?AM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
>
> I now see more clearly what the complaint is.
>
> That said, you should ALWAYS be prepared for the round trip between binary and string forms of floating point to accrue rounding error because floating point is intrinsically approximate. While there are examples of floating point numbers that can reliably do that round trip exactly (e.g. integers shorter than the mantissa), in general you should be prepared for such "inexact" results.
>
> John Nash's point that IEEE754 has been relaxed is reinforcement that they want users to be prepared for differences around the least significant bits... but the principle is mathematically intrinsic to the scope of floating point numbers whether the standard says so or not.
>
> On March 9, 2025 11:06:17 AM PDT, Stephanie Evert <stefanML at collocations.de> wrote:
> >For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
> >
> >> x <- as.numeric("-177253333.333333343267441")
> >> sprintf("%.15f", x)
> >[1] "-177253333.333333373069763"
> >
> >This is the number adjacent to -177253333.333333343267441 in IEEE 754.
> >
> >> writeBin(x, raw(8))
> >[1] ac aa aa aa 57 21 a5 c1
> >
> >If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
> >
> >Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with
> >
> >> x <- -177253333.333333343267441
> >
> >so it's not specific to as.numeric().
> >
> >Best,
> >Stephanie
> >
> >
> >
> >
> >> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
> >>
> >> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
> >>
> >> https://0.30000000000000004.com/
> >>
> >> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
> >>> Hi,
> >>>
> >>> I have below simple conversion
> >>>
> >>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
> >>>
> >>> [1] "-177253333.333333373069763"
> >>>
> >>> I could not figure out why the input and output is different?
> >>>
> >>> Clearly this conversion is incorrect. Is there any way to convert to
> >>> numerical properly?
> >>>
> >>>> sessionInfo()
> >>>
> >>> R version 4.4.0 (2024-04-24)
> >>>
> >>> Platform: aarch64-apple-darwin20
> >>>
> >>> Running under: macOS 15.3.1
> >>>
> >>>
> >>> Matrix products: default
> >>>
> >>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
> >>>
> >>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
> >>> LAPACK version 3.12.0
> >>>
> >>>
> >>> locale:
> >>>
> >>> [1] C/UTF-8/C/C/C/C
> >>>
> >>>
> >>> time zone: Asia
> >>>
> >>> tzcode source: internal
> >>>
> >>>
> >>> attached base packages:
> >>>
> >>> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>>
> >>>
> >>> loaded via a namespace (and not attached):
> >>>
> >>> [1] compiler_4.4.0
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >>
> >> --
> >> Sent from my phone. Please excuse my brevity.
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >
>
> --
> Sent from my phone. Please excuse my brevity.


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Mar  9 23:31:25 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 9 Mar 2025 18:31:25 -0400
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <CA+dpOJmGGqYgAzrG0qye5_=fg7A0gR2dWTk2z3iiymz-xC9A2Q@mail.gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
 <F1E7054C-5ADC-40C8-8921-6CC6E04E97C3@dcn.davis.ca.us>
 <CA+dpOJmGGqYgAzrG0qye5_=fg7A0gR2dWTk2z3iiymz-xC9A2Q@mail.gmail.com>
Message-ID: <755f7612-6e0f-462f-aaf7-f13e272eaa28@gmail.com>

On 2025-03-09 5:55 p.m., Christofer Bogaso wrote:
> So, based on the discussion points from the experts here, I understand
> that this is an ARM specific problem.
> 
> However, what should I do for a solution?
> 
> I use ARM+R in my office workstation, so it may not be prudent to me
> to just say ignore this problem and let Apple's Tim Cook take care of
> it...

No, the problem is much deeper than that.  If your work depends on 
things that are way out in the limit of floating point precision, then 
your work is unavoidably unstable already.  The easiest way to fix this 
is to avoid doing anything that depends on the 15th or 16th or higher 
significant digit of what you are working with.

If you really need 20 or 30 digit precision, then you can do it in R, 
but you need to be extra careful with every single calculation you're 
doing.  Base R calculations won't be good enough.

Duncan Murdoch

> 
> On Mon, Mar 10, 2025 at 1:01?AM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
>>
>> I now see more clearly what the complaint is.
>>
>> That said, you should ALWAYS be prepared for the round trip between binary and string forms of floating point to accrue rounding error because floating point is intrinsically approximate. While there are examples of floating point numbers that can reliably do that round trip exactly (e.g. integers shorter than the mantissa), in general you should be prepared for such "inexact" results.
>>
>> John Nash's point that IEEE754 has been relaxed is reinforcement that they want users to be prepared for differences around the least significant bits... but the principle is mathematically intrinsic to the scope of floating point numbers whether the standard says so or not.
>>
>> On March 9, 2025 11:06:17 AM PDT, Stephanie Evert <stefanML at collocations.de> wrote:
>>> For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
>>>
>>>> x <- as.numeric("-177253333.333333343267441")
>>>> sprintf("%.15f", x)
>>> [1] "-177253333.333333373069763"
>>>
>>> This is the number adjacent to -177253333.333333343267441 in IEEE 754.
>>>
>>>> writeBin(x, raw(8))
>>> [1] ac aa aa aa 57 21 a5 c1
>>>
>>> If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
>>>
>>> Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with
>>>
>>>> x <- -177253333.333333343267441
>>>
>>> so it's not specific to as.numeric().
>>>
>>> Best,
>>> Stephanie
>>>
>>>
>>>
>>>
>>>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
>>>>
>>>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
>>>>
>>>> https://0.30000000000000004.com/
>>>>
>>>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
>>>>> Hi,
>>>>>
>>>>> I have below simple conversion
>>>>>
>>>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>>>>>
>>>>> [1] "-177253333.333333373069763"
>>>>>
>>>>> I could not figure out why the input and output is different?
>>>>>
>>>>> Clearly this conversion is incorrect. Is there any way to convert to
>>>>> numerical properly?
>>>>>
>>>>>> sessionInfo()
>>>>>
>>>>> R version 4.4.0 (2024-04-24)
>>>>>
>>>>> Platform: aarch64-apple-darwin20
>>>>>
>>>>> Running under: macOS 15.3.1
>>>>>
>>>>>
>>>>> Matrix products: default
>>>>>
>>>>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
>>>>>
>>>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
>>>>> LAPACK version 3.12.0
>>>>>
>>>>>
>>>>> locale:
>>>>>
>>>>> [1] C/UTF-8/C/C/C/C
>>>>>
>>>>>
>>>>> time zone: Asia
>>>>>
>>>>> tzcode source: internal
>>>>>
>>>>>
>>>>> attached base packages:
>>>>>
>>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
>>>>>
>>>>>
>>>>> loaded via a namespace (and not attached):
>>>>>
>>>>> [1] compiler_4.4.0
>>>>>
>>>>> ______________________________________________
>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>>>>> and provide commented, minimal, self-contained, reproducible code.
>>>>
>>>> --
>>>> Sent from my phone. Please excuse my brevity.
>>>>
>>>> ______________________________________________
>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>>>> and provide commented, minimal, self-contained, reproducible code.
>>>
>>
>> --
>> Sent from my phone. Please excuse my brevity.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bgunter@4567 @end|ng |rom gm@||@com  Mon Mar 10 00:15:52 2025
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sun, 9 Mar 2025 16:15:52 -0700
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <755f7612-6e0f-462f-aaf7-f13e272eaa28@gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
 <F1E7054C-5ADC-40C8-8921-6CC6E04E97C3@dcn.davis.ca.us>
 <CA+dpOJmGGqYgAzrG0qye5_=fg7A0gR2dWTk2z3iiymz-xC9A2Q@mail.gmail.com>
 <755f7612-6e0f-462f-aaf7-f13e272eaa28@gmail.com>
Message-ID: <CAGxFJbQSnVTEikcTTF9_1oVuEfoawr3UtyBwkDoQrYfiXttpxw@mail.gmail.com>

As has now been explained, there is a lot going on under the hood
here. I would just note that the Rmpfr package can do arbitrary
precision arithmetic; and so can the Ryacas package, which extends
these capabilities to e.g. arbitrary precision linear algebra.

(I am just parroting what I found via search and know nothing about
details or use cases.)

Cheers,
Bert

"An educated person is one who can entertain new ideas, entertain
others, and entertain herself."

"An educated person is one who can entertain new ideas, entertain
others, and entertain herself."



On Sun, Mar 9, 2025 at 3:31?PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 2025-03-09 5:55 p.m., Christofer Bogaso wrote:
> > So, based on the discussion points from the experts here, I understand
> > that this is an ARM specific problem.
> >
> > However, what should I do for a solution?
> >
> > I use ARM+R in my office workstation, so it may not be prudent to me
> > to just say ignore this problem and let Apple's Tim Cook take care of
> > it...
>
> No, the problem is much deeper than that.  If your work depends on
> things that are way out in the limit of floating point precision, then
> your work is unavoidably unstable already.  The easiest way to fix this
> is to avoid doing anything that depends on the 15th or 16th or higher
> significant digit of what you are working with.
>
> If you really need 20 or 30 digit precision, then you can do it in R,
> but you need to be extra careful with every single calculation you're
> doing.  Base R calculations won't be good enough.
>
> Duncan Murdoch
>
> >
> > On Mon, Mar 10, 2025 at 1:01?AM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
> >>
> >> I now see more clearly what the complaint is.
> >>
> >> That said, you should ALWAYS be prepared for the round trip between binary and string forms of floating point to accrue rounding error because floating point is intrinsically approximate. While there are examples of floating point numbers that can reliably do that round trip exactly (e.g. integers shorter than the mantissa), in general you should be prepared for such "inexact" results.
> >>
> >> John Nash's point that IEEE754 has been relaxed is reinforcement that they want users to be prepared for differences around the least significant bits... but the principle is mathematically intrinsic to the scope of floating point numbers whether the standard says so or not.
> >>
> >> On March 9, 2025 11:06:17 AM PDT, Stephanie Evert <stefanML at collocations.de> wrote:
> >>> For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
> >>>
> >>>> x <- as.numeric("-177253333.333333343267441")
> >>>> sprintf("%.15f", x)
> >>> [1] "-177253333.333333373069763"
> >>>
> >>> This is the number adjacent to -177253333.333333343267441 in IEEE 754.
> >>>
> >>>> writeBin(x, raw(8))
> >>> [1] ac aa aa aa 57 21 a5 c1
> >>>
> >>> If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
> >>>
> >>> Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with
> >>>
> >>>> x <- -177253333.333333343267441
> >>>
> >>> so it's not specific to as.numeric().
> >>>
> >>> Best,
> >>> Stephanie
> >>>
> >>>
> >>>
> >>>
> >>>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
> >>>>
> >>>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
> >>>>
> >>>> https://0.30000000000000004.com/
> >>>>
> >>>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
> >>>>> Hi,
> >>>>>
> >>>>> I have below simple conversion
> >>>>>
> >>>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
> >>>>>
> >>>>> [1] "-177253333.333333373069763"
> >>>>>
> >>>>> I could not figure out why the input and output is different?
> >>>>>
> >>>>> Clearly this conversion is incorrect. Is there any way to convert to
> >>>>> numerical properly?
> >>>>>
> >>>>>> sessionInfo()
> >>>>>
> >>>>> R version 4.4.0 (2024-04-24)
> >>>>>
> >>>>> Platform: aarch64-apple-darwin20
> >>>>>
> >>>>> Running under: macOS 15.3.1
> >>>>>
> >>>>>
> >>>>> Matrix products: default
> >>>>>
> >>>>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
> >>>>>
> >>>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
> >>>>> LAPACK version 3.12.0
> >>>>>
> >>>>>
> >>>>> locale:
> >>>>>
> >>>>> [1] C/UTF-8/C/C/C/C
> >>>>>
> >>>>>
> >>>>> time zone: Asia
> >>>>>
> >>>>> tzcode source: internal
> >>>>>
> >>>>>
> >>>>> attached base packages:
> >>>>>
> >>>>> [1] stats     graphics  grDevices utils     datasets  methods   base
> >>>>>
> >>>>>
> >>>>> loaded via a namespace (and not attached):
> >>>>>
> >>>>> [1] compiler_4.4.0
> >>>>>
> >>>>> ______________________________________________
> >>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>>>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> >>>>> and provide commented, minimal, self-contained, reproducible code.
> >>>>
> >>>> --
> >>>> Sent from my phone. Please excuse my brevity.
> >>>>
> >>>> ______________________________________________
> >>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> >>>> and provide commented, minimal, self-contained, reproducible code.
> >>>
> >>
> >> --
> >> Sent from my phone. Please excuse my brevity.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bbo|ker @end|ng |rom gm@||@com  Mon Mar 10 00:31:41 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Sun, 9 Mar 2025 19:31:41 -0400
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <755f7612-6e0f-462f-aaf7-f13e272eaa28@gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
 <F1E7054C-5ADC-40C8-8921-6CC6E04E97C3@dcn.davis.ca.us>
 <CA+dpOJmGGqYgAzrG0qye5_=fg7A0gR2dWTk2z3iiymz-xC9A2Q@mail.gmail.com>
 <755f7612-6e0f-462f-aaf7-f13e272eaa28@gmail.com>
Message-ID: <3806ed31-a284-4746-aeea-94667c82fd28@gmail.com>

   I agree with Duncan.  From an abstract point of view it would be 
interesting, and possibly useful, to analyze exactly what is going 
'wrong' (in some sense) with R's built-in string-to-double function in 
this case, and might lead to some marginal improvements.  But if you are 
doing anything but the simplest floating-point operations you will see 
many other unavoidable differences of similar magnitudes across platforms.

    If you feel like taking a deep dive, this is the classic article 
from 1991: https://www.itu.dk/~sestoft/bachelor/IEEE754_article.pdf (and 
the corresponding R-centric Stack Overflow post 
https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal/ 
)

On 3/9/25 18:31, Duncan Murdoch wrote:
> On 2025-03-09 5:55 p.m., Christofer Bogaso wrote:
>> So, based on the discussion points from the experts here, I understand
>> that this is an ARM specific problem.
>>
>> However, what should I do for a solution?
>>
>> I use ARM+R in my office workstation, so it may not be prudent to me
>> to just say ignore this problem and let Apple's Tim Cook take care of
>> it...
> 
> No, the problem is much deeper than that.? If your work depends on 
> things that are way out in the limit of floating point precision, then 
> your work is unavoidably unstable already.? The easiest way to fix this 
> is to avoid doing anything that depends on the 15th or 16th or higher 
> significant digit of what you are working with.
> 
> If you really need 20 or 30 digit precision, then you can do it in R, 
> but you need to be extra careful with every single calculation you're 
> doing.? Base R calculations won't be good enough.
> 
> Duncan Murdoch
> 
>>
>> On Mon, Mar 10, 2025 at 1:01?AM Jeff Newmiller 
>> <jdnewmil at dcn.davis.ca.us> wrote:
>>>
>>> I now see more clearly what the complaint is.
>>>
>>> That said, you should ALWAYS be prepared for the round trip between 
>>> binary and string forms of floating point to accrue rounding error 
>>> because floating point is intrinsically approximate. While there are 
>>> examples of floating point numbers that can reliably do that round 
>>> trip exactly (e.g. integers shorter than the mantissa), in general 
>>> you should be prepared for such "inexact" results.
>>>
>>> John Nash's point that IEEE754 has been relaxed is reinforcement that 
>>> they want users to be prepared for differences around the least 
>>> significant bits... but the principle is mathematically intrinsic to 
>>> the scope of floating point numbers whether the standard says so or not.
>>>
>>> On March 9, 2025 11:06:17 AM PDT, Stephanie Evert 
>>> <stefanML at collocations.de> wrote:
>>>> For once, that doesn't seem to be the issue here. The bug only seems 
>>>> to happen on arm64 and doesn't reproduce on x86_64 hardware.
>>>>
>>>>> x <- as.numeric("-177253333.333333343267441")
>>>>> sprintf("%.15f", x)
>>>> [1] "-177253333.333333373069763"
>>>>
>>>> This is the number adjacent to -177253333.333333343267441 in IEEE 754.
>>>>
>>>>> writeBin(x, raw(8))
>>>> [1] ac aa aa aa 57 21 a5 c1
>>>>
>>>> If you look at the hexadecimal representation, the least significant 
>>>> bit appears to be off by one: the first byte should be 0xAB rather 
>>>> than 0xAC (according to online calculators such as https://numeral- 
>>>> systems.com/ieee-754-converter/).
>>>>
>>>> Seems that decimal-to-float conversion has a bug on arm64. Note that 
>>>> I get the same result with
>>>>
>>>>> x <- -177253333.333333343267441
>>>>
>>>> so it's not specific to as.numeric().
>>>>
>>>> Best,
>>>> Stephanie
>>>>
>>>>
>>>>
>>>>
>>>>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r- 
>>>>> project.org> wrote:
>>>>>
>>>>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R- 
>>>>> think-these-numbers-are-equal_003f
>>>>>
>>>>> https://0.30000000000000004.com/
>>>>>
>>>>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso 
>>>>> <bogaso.christofer at gmail.com> wrote:
>>>>>> Hi,
>>>>>>
>>>>>> I have below simple conversion
>>>>>>
>>>>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
>>>>>>
>>>>>> [1] "-177253333.333333373069763"
>>>>>>
>>>>>> I could not figure out why the input and output is different?
>>>>>>
>>>>>> Clearly this conversion is incorrect. Is there any way to convert to
>>>>>> numerical properly?
>>>>>>
>>>>>>> sessionInfo()
>>>>>>
>>>>>> R version 4.4.0 (2024-04-24)
>>>>>>
>>>>>> Platform: aarch64-apple-darwin20
>>>>>>
>>>>>> Running under: macOS 15.3.1
>>>>>>
>>>>>>
>>>>>> Matrix products: default
>>>>>>
>>>>>> BLAS:?? /Library/Frameworks/R.framework/Versions/4.4-arm64/ 
>>>>>> Resources/lib/libRblas.0.dylib
>>>>>>
>>>>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/ 
>>>>>> Resources/lib/libRlapack.dylib;
>>>>>> LAPACK version 3.12.0
>>>>>>
>>>>>>
>>>>>> locale:
>>>>>>
>>>>>> [1] C/UTF-8/C/C/C/C
>>>>>>
>>>>>>
>>>>>> time zone: Asia
>>>>>>
>>>>>> tzcode source: internal
>>>>>>
>>>>>>
>>>>>> attached base packages:
>>>>>>
>>>>>> [1] stats???? graphics? grDevices utils???? datasets? methods?? base
>>>>>>
>>>>>>
>>>>>> loaded via a namespace (and not attached):
>>>>>>
>>>>>> [1] compiler_4.4.0
>>>>>>
>>>>>> ______________________________________________
>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>> PLEASE do read the posting guide https://www.R-project.org/ 
>>>>>> posting-guide.html
>>>>>> and provide commented, minimal, self-contained, reproducible code.
>>>>>
>>>>> -- 
>>>>> Sent from my phone. Please excuse my brevity.
>>>>>
>>>>> ______________________________________________
>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>> PLEASE do read the posting guide https://www.R-project.org/posting- 
>>>>> guide.html
>>>>> and provide commented, minimal, self-contained, reproducible code.
>>>>
>>>
>>> -- 
>>> Sent from my phone. Please excuse my brevity.
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide https://www.R-project.org/posting- 
>> guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting- 
> guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
* E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From tebert @end|ng |rom u||@edu  Mon Mar 10 03:24:05 2025
From: tebert @end|ng |rom u||@edu (Ebert,Timothy Aaron)
Date: Mon, 10 Mar 2025 02:24:05 +0000
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
Message-ID: <CH3PR22MB4514D7C6FD5AE27B34B3850ACFD62@CH3PR22MB4514.namprd22.prod.outlook.com>

This is a general problem across all software. A computer has finite memory but a floating-point value can have an infinite number of digits. Consider trying to store the exact value of pi. All computer software has a limit to available precision, and that value is specific to each piece of software. You can play games to find that limit. Ask the computer what is 1 + 0.1?
Then keep going
1 + 0.01
1 + 0.001
And so forth, until the answer is 1. In this game be careful in what the computer displays (as a default) and what it calculates. My version of Excel will display a result of 1 after 1 + 0.0000001. However by changing the display you can see that Excel continues out to 1E-15 before everything equals 1. Keep in mind that this is significant digits. So if I change the problem to 1000 + 0.1 then Excel will display everything equals 1000 after 1000.001, and keep calculating until 1E-11.

You can correctly process the string. This is one solution:

install.packages("Rmpfr")
library(Rmpfr)

x <- "-177253333.333333343267441"
mpfr_x <- mpfr(x, precBits = 128)  # Increase precision

sprintf("%0.15f", as.numeric(mpfr_x))

Mathematical operations on mpfr_x give an answer -354506666.6666666865348819999999999999992 if I multiply by 2.

If I increase precBits=256 then I get -354506666.666666686534882

This approach will let you read the numbers in correctly. You will need to revisit this issue if you use these numbers in data analyses or even simple calculations. Also consider how much memory is being consumed by the increase in precision versus the available memory. This will become more problematic in using these values in matrix algebra necessary in many data analyses.


Tim


-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Christofer Bogaso
Sent: Sunday, March 9, 2025 1:13 PM
To: r-help <r-help at r-project.org>
Subject: [R] Number changed weirdly when converting to numeric

[External Email]

Hi,

I have below simple conversion

> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))

[1] "-177253333.333333373069763"

I could not figure out why the input and output is different?

Clearly this conversion is incorrect. Is there any way to convert to numerical properly?

> sessionInfo()

R version 4.4.0 (2024-04-24)

Platform: aarch64-apple-darwin20

Running under: macOS 15.3.1


Matrix products: default

BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib

LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
 LAPACK version 3.12.0


locale:

[1] C/UTF-8/C/C/C/C


time zone: Asia

tzcode source: internal


attached base packages:

[1] stats     graphics  grDevices utils     datasets  methods   base


loaded via a namespace (and not attached):

[1] compiler_4.4.0

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide https://www.r-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Mon Mar 10 11:27:31 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Mon, 10 Mar 2025 11:27:31 +0100
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <d15df42b-ccff-4d9f-a650-1c5920cff105@gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
 <d15df42b-ccff-4d9f-a650-1c5920cff105@gmail.com>
Message-ID: <26574.48787.187485.773401@stat.math.ethz.ch>

>>>>> J C Nash 
>>>>>     on Sun, 9 Mar 2025 14:19:00 -0400 writes:

    > This may be way off the mark, but is it possible that the ARM machine is using
    > the "new" IEEE-754 arithmetic that does not have 80 bit extended? The standard
    > was changed (in ways to allow non-compliant systems to be compliant) because
    > ARM does not have the hardware registers. There are reasons why this might be
    > sensible, but we need more awareness of the consequences to avoid some of the
    > resulting changes in results. I've had to "fix" things that weren't broken because
    > M1 and later Macs gave different outputs, actually not in my code but in vignettes
    > where I compared to other packages.

Yes, indeed; very much the same here, thank you, John.
and yes, the consequences I've seen (in the R world) have been
considerably larger than many would have expected.

OTOH, I agree (with people saying) that I (and others) had
become too much dependent on assuming quite specific floating
point arithmetic behavior (basically something like "x86_64 everywhere")
which has not been a good long term behaviour.

and "yes" (nr. 3): I tell everybody that indeed, the speed of
the M{1,2,3,4,..} chips is amazing and beating all competition
at the moment, *BUT* the cost is decreased accuracy in amazingly
many situations.

Martin

    > Cheers,

    > John Nash
    > (who actually was part of 1985 IEEE 754 committee, though a VERY minor player)

    > On 2025-03-09 14:06, Stephanie Evert wrote:
    >> For once, that doesn't seem to be the issue here. The bug only seems to happen on arm64 and doesn't reproduce on x86_64 hardware.
    >> 
    >>> x <- as.numeric("-177253333.333333343267441")
    >>> sprintf("%.15f", x)
    >> [1] "-177253333.333333373069763"
    >> 
    >> This is the number adjacent to -177253333.333333343267441 in IEEE 754.
    >> 
    >>> writeBin(x, raw(8))
    >> [1] ac aa aa aa 57 21 a5 c1
    >> 
    >> If you look at the hexadecimal representation, the least significant bit appears to be off by one: the first byte should be 0xAB rather than 0xAC (according to online calculators such as https://numeral-systems.com/ieee-754-converter/).
    >> 
    >> Seems that decimal-to-float conversion has a bug on arm64. Note that I get the same result with
    >> 
    >>> x <- -177253333.333333343267441
    >> 
    >> so it's not specific to as.numeric().
    >> 
    >> Best,
    >> Stephanie
    >> 
    >> 
    >> 
    >> 
    >>> On 9 Mar 2025, at 18:46, Jeff Newmiller via R-help <r-help at r-project.org> wrote:
    >>> 
    >>> https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f
    >>> 
    >>> https://0.30000000000000004.com/
    >>> 
    >>> On March 9, 2025 10:12:47 AM PDT, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
    >>>> Hi,
    >>>> 
    >>>> I have below simple conversion
    >>>> 
    >>>>> sprintf("%0.15f", as.numeric("-177253333.333333343267441"))
    >>>> 
    >>>> [1] "-177253333.333333373069763"
    >>>> 
    >>>> I could not figure out why the input and output is different?
    >>>> 
    >>>> Clearly this conversion is incorrect. Is there any way to convert to
    >>>> numerical properly?
    >>>> 
    >>>>> sessionInfo()
    >>>> 
    >>>> R version 4.4.0 (2024-04-24)
    >>>> 
    >>>> Platform: aarch64-apple-darwin20
    >>>> 
    >>>> Running under: macOS 15.3.1
    >>>> 
    >>>> 
    >>>> Matrix products: default
    >>>> 
    >>>> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib
    >>>> 
    >>>> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;
    >>>> LAPACK version 3.12.0
    >>>> 
    >>>> 
    >>>> locale:
    >>>> 
    >>>> [1] C/UTF-8/C/C/C/C
    >>>> 
    >>>> 
    >>>> time zone: Asia
    >>>> 
    >>>> tzcode source: internal
    >>>> 
    >>>> 
    >>>> attached base packages:
    >>>> 
    >>>> [1] stats     graphics  grDevices utils     datasets  methods   base
    >>>> 
    >>>> 
    >>>> loaded via a namespace (and not attached):
    >>>> 
    >>>> [1] compiler_4.4.0
    >>>> 
    >>>> ______________________________________________
    >>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    >>>> https://stat.ethz.ch/mailman/listinfo/r-help
    >>>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
    >>>> and provide commented, minimal, self-contained, reproducible code.
    >>> 
    >>> -- 
    >>> Sent from my phone. Please excuse my brevity.
    >>> 
    >>> ______________________________________________
    >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    >>> https://stat.ethz.ch/mailman/listinfo/r-help
    >>> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
    >>> and provide commented, minimal, self-contained, reproducible code.
    >> 
    >> 
    >> [[alternative HTML version deleted]]
    >> 
    >> ______________________________________________
    >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    >> https://stat.ethz.ch/mailman/listinfo/r-help
    >> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
    >> and provide commented, minimal, self-contained, reproducible code.

    > ______________________________________________
    > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    > https://stat.ethz.ch/mailman/listinfo/r-help
    > PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
    > and provide commented, minimal, self-contained, reproducible code.


From @te|@nML @end|ng |rom co||oc@t|on@@de  Mon Mar 10 13:51:02 2025
From: @te|@nML @end|ng |rom co||oc@t|on@@de (Stephanie Evert)
Date: Mon, 10 Mar 2025 13:51:02 +0100
Subject: [R] Number changed weirdly when converting to numeric
In-Reply-To: <d565b28e-a601-49d4-be24-1aba2e0646be@gmail.com>
References: <CA+dpOJm_biYUo80HF3UG=tu2LggK9pidk2nBUD2NbKsskE9ujA@mail.gmail.com>
 <4908AE38-EA36-41F1-B899-FBA17569E2B5@dcn.davis.ca.us>
 <A16FBCC8-9FFD-41EE-ACE7-B6DE9B62B988@collocations.de>
 <d565b28e-a601-49d4-be24-1aba2e0646be@gmail.com>
Message-ID: <0DE187BC-F252-42F9-9ED8-19C3CF0F2597@collocations.de>

Both atof() and strtod() give the correct result on my M1 MacBook. So it looks to me like a bug in R_strtod5(), possibly something that requires extended 80-bit precision to get the conversion right.

Doesn't seem to be the fault of the ARM chip, so I'd say it warrants a bug report.

Perhaps we can learn from SQLite, which has recently put some work into making decimal / double conversion more reliable IIRC (possibly even triggered by similar problems on arm64).

	https://github.com/sqlite/sqlite/blob/eed4e1d2df599952f191182cf51646de11b110a6/src/util.c#L577

A key difference seems to be that SQLite accumulates the significand in an uint64_t in order to get 18 or 19 digits of precision before conversion to double.

Best,
Stephanie


> On 9 Mar 2025, at 19:24, Ben Bolker <bbolker at gmail.com> wrote:
> 
>   Out of curiosity, what does atof() do on that platform? What does the following C program do on arm64? (I don't know exactly what R does to coerce character to double, but this is what I would guess ...)
> 
> #include <stdio.h>
> #include <stdlib.h>
> int main(void) {
>  const char *str = "-177253333.333333343267441";
>  double x = atof(str);
>  printf("%0.15f\n", x);
>  return 0;
> }
> 
>  To my surprise, apparently R doesn't use stdlib to convert.
> 
> From https://github.com/r-devel/r-svn/blob/bb64b28d8cc2e2863eb664e7f83b0a7206b4b1d4/src/main/util.c#L2087C1-L2107:
> 
> /* ...
> 
>       use our own strtod/atof to mitigate effects of setting LC_NUMERIC
> 
>   Also allows complete control of which non-numeric strings are
>   accepted; e.g. glibc allows NANxxxx, macOS NAN(s), this accepts "NA".
> 
> ... */
> 
>  Should this be escalated to r-devel (or r-bugzilla)?  Nothing pops out at me from the recent NEWS ...
> 


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Mon Mar 10 14:19:50 2025
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Mon, 10 Mar 2025 14:19:50 +0100
Subject: [R] [Rd] R 4.5.0 scheduled for April 11
Message-ID: <983AEC97-BB06-46E4-8691-4C0F90F76F7B@gmail.com>

Full schedule is available on developer.r-project.org (pending update from SVN).

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

______________________________________________
R-devel at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-devel

_______________________________________________
R-announce at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-announce



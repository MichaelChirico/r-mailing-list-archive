From rhe|p @end|ng |rom eoo@@dd@@n|  Thu Oct  2 08:26:22 2025
From: rhe|p @end|ng |rom eoo@@dd@@n| (Jan van der Laan)
Date: Thu, 2 Oct 2025 08:26:22 +0200
Subject: [R] `install.packages()` and https proxy with R 4.5
In-Reply-To: <CABFfbXv2gF-F_HvNLg9XGs4fXjYX6G3BUORY2dpZxtYwqLiaxA@mail.gmail.com>
References: <CAHETjtZ=Pi=4V=A2YNKnNNFsOL8LTXtqWo-3OEFeZSQhzZsC_A@mail.gmail.com>
 <CABFfbXv2gF-F_HvNLg9XGs4fXjYX6G3BUORY2dpZxtYwqLiaxA@mail.gmail.com>
Message-ID: <dda68dfa-45cf-4b41-9384-f130e3beddd5@eoos.dds.nl>



On 30-09-2025 17:49, Jeroen Ooms wrote:
> On Sun, Sep 28, 2025 at 10:45?AM Lukas Schneiderbauer
> <lukas.schneiderbauer at gmail.com> wrote:
>>
>> Hi all,
>>
>> I work from a Windows 11 environment behind a firewall, and I require proxy
>> settings to reach the (private) R package repository I work with.
>> Using R 4.4 I used to set the environment variable "https_proxy" which led
>> to e.g. "install.packages()" to work just fine.
> 
> 
> Maybe also try some of the other variables mentioned in
> https://curl.se/libcurl/c/libcurl-env.html


That documentation mentions that 'http_proxy' is used for 'https://' 
addresses. Is that variable also set?


I could also be that the proxy requires authentication with wininet this 
is often automatically done (I believe that was de default before R4.5). 
However, that doesn't explain why `method="curl"` would work. In that 
case you could try to set the proxy to `http_proxy=":@yourproxy"`.

HTH,
Jan



> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From tgs77m m@iii@g oii y@hoo@com  Thu Oct  2 17:55:58 2025
From: tgs77m m@iii@g oii y@hoo@com (tgs77m m@iii@g oii y@hoo@com)
Date: Thu, 2 Oct 2025 08:55:58 -0700
Subject: [R] polyroot
References: <001201dc33b5$0c7825d0$25687170$.ref@yahoo.com>
Message-ID: <001201dc33b5$0c7825d0$25687170$@yahoo.com>

Colleagues,

f <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 ) ^0.01
coeffs <- c(1, rep(0, 8), 500, 1000, 1)
roots <- polyroot(coeffs)

# output

[1]    0.25770068+3.958197e-01i
 [2]   -0.34615184+3.782848e-01i
 [3]   -0.04089779-4.838134e-01i
 [4]    0.44124314-1.517731e-01i
 [5]   -0.04089779+4.838134e-01i
 [6]   -0.56201931-1.282822e-01i
 [7]   -0.34615184-3.782848e-01i
 [8]    0.44124314+1.517731e-01i
 [9]   -0.56201931+1.282822e-01i
[10]    0.25770068-3.958197e-01i
[11] -999.49974975+1.110223e-16i

[11] -999.49974975+1.110223e-16i makes no sense since f is always greater
than 0

why does polyroot output [11] -999.49974975+1.110223e-16i ?

Thanks,

Thomas Subia


From tgs77m m@iii@g oii y@hoo@com  Thu Oct  2 18:14:17 2025
From: tgs77m m@iii@g oii y@hoo@com (tgs77m m@iii@g oii y@hoo@com)
Date: Thu, 2 Oct 2025 09:14:17 -0700
Subject: [R] polyroot behaviour
References: <001b01dc33b7$9b97c980$d2c75c80$.ref@yahoo.com>
Message-ID: <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>

Colleagues,

g <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 )
coeffs <- c(1, rep(0, 8), 500, 1000, 1)
roots <- polyroot(coeffs)

Output

[1]    0.25770068+3.958197e-01i
 [2]   -0.34615184+3.782848e-01i
 [3]   -0.04089779-4.838134e-01i
 [4]    0.44124314-1.517731e-01i
 [5]   -0.04089779+4.838134e-01i
 [6]   -0.56201931-1.282822e-01i
 [7]   -0.34615184-3.782848e-01i
 [8]    0.44124314+1.517731e-01i
 [9]   -0.56201931+1.282822e-01i
[10]    0.25770068-3.958197e-01i
[11] -999.49974975+1.110223e-16i

[11] -999.49974975+1.110223e-16i  makes  no sense since f>0 for all x

Why does polyroot do this?

Thomas Subia


From bbo|ker @end|ng |rom gm@||@com  Thu Oct  2 19:35:56 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Thu, 2 Oct 2025 13:35:56 -0400
Subject: [R] polyroot behaviour
In-Reply-To: <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
References: <001b01dc33b7$9b97c980$d2c75c80$.ref@yahoo.com>
 <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
Message-ID: <3752ddd3-b23c-4b31-b902-d4d01fe5d3a2@gmail.com>

   I haven't thought about this at all, but for what it's worth, sympy 
gives the same answer (minus the tiny imaginary part):

from sympy import nroots
from sympy.abc import x
g = x**11 + 1000*x**10 + 500 *x**9 + 1
nroots(g)[0]

-999.499749749687

   The documentation for 
https://docs.sympy.org/latest/guides/solving/find-roots-polynomial.html 
mentions that

nroots() can fail sometimes for polynomials that are numerically ill 
conditioned, for example Wilkinson?s polynomial. Using RootOf() and 
evalf() as described in Numerically Evaluate CRootOf Roots can avoid 
both ill-conditioning and returning spurious complex parts because it 
uses a more exact, but much slower, numerical algorithm based on 
isolating intervals.


   FWIW the slow/more exact method described here still gives the large 
root.

from sympy import solve
g_solved = solve(g, x, dict=True);
for root in g_solved:
     print(root[x].n(10))

   Given the convergence of different methods, this is very unlikely to 
be a bug in R or the underlying algorithm.  Either there's a thinko and 
-999.499... is actually a root, or this is a badly conditioned problem 
for which it's extremely hard to get accurate numerical solutions ...


On 2025-10-02 12:14 p.m., tgs77m--- via R-help wrote:
> Colleagues,
> 
> g <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 )
> coeffs <- c(1, rep(0, 8), 500, 1000, 1)
> roots <- polyroot(coeffs)
> 
> Output
> 
> [1]    0.25770068+3.958197e-01i
>   [2]   -0.34615184+3.782848e-01i
>   [3]   -0.04089779-4.838134e-01i
>   [4]    0.44124314-1.517731e-01i
>   [5]   -0.04089779+4.838134e-01i
>   [6]   -0.56201931-1.282822e-01i
>   [7]   -0.34615184-3.782848e-01i
>   [8]    0.44124314+1.517731e-01i
>   [9]   -0.56201931+1.282822e-01i
> [10]    0.25770068-3.958197e-01i
> [11] -999.49974975+1.110223e-16i
> 
> [11] -999.49974975+1.110223e-16i  makes  no sense since f>0 for all x
> 
> Why does polyroot do this?
> 
> Thomas Subia
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Thu Oct  2 19:49:06 2025
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Thu, 2 Oct 2025 19:49:06 +0200
Subject: [R] polyroot behaviour
In-Reply-To: <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
References: <001b01dc33b7$9b97c980$d2c75c80$.ref@yahoo.com>
 <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
Message-ID: <CADfFDC66vKuPpq_JKHjCj093aVGdEjZ-3ZxDzewLtU96aH_==w@mail.gmail.com>

How can an odd degree polynomial be positive for all x?


Deepayan

On Thu, 2 Oct, 2025, 6:14 pm tgs77m--- via R-help, <r-help at r-project.org>
wrote:

> Colleagues,
>
> g <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 )
> coeffs <- c(1, rep(0, 8), 500, 1000, 1)
> roots <- polyroot(coeffs)
>
> Output
>
> [1]    0.25770068+3.958197e-01i
>  [2]   -0.34615184+3.782848e-01i
>  [3]   -0.04089779-4.838134e-01i
>  [4]    0.44124314-1.517731e-01i
>  [5]   -0.04089779+4.838134e-01i
>  [6]   -0.56201931-1.282822e-01i
>  [7]   -0.34615184-3.782848e-01i
>  [8]    0.44124314+1.517731e-01i
>  [9]   -0.56201931+1.282822e-01i
> [10]    0.25770068-3.958197e-01i
> [11] -999.49974975+1.110223e-16i
>
> [11] -999.49974975+1.110223e-16i  makes  no sense since f>0 for all x
>
> Why does polyroot do this?
>
> Thomas Subia
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org  Fri Oct  3 04:25:45 2025
From: @pencer@gr@ve@ @end|ng |rom e||ect|vede|en@e@org (Spencer Graves)
Date: Thu, 2 Oct 2025 21:25:45 -0500
Subject: [R] polyroot behaviour
In-Reply-To: <CADfFDC66vKuPpq_JKHjCj093aVGdEjZ-3ZxDzewLtU96aH_==w@mail.gmail.com>
References: <001b01dc33b7$9b97c980$d2c75c80$.ref@yahoo.com>
 <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
 <CADfFDC66vKuPpq_JKHjCj093aVGdEjZ-3ZxDzewLtU96aH_==w@mail.gmail.com>
Message-ID: <28ff80a3-126c-453c-8b5b-09de3a67efd9@effectivedefense.org>

I agree with Deepayan.


This example reveals an opportunity for improving the polyroot algorithm:


** Any polynomial of odd degree with real coefficients must have at 
least one real root. This example has only one, which is reported as 
-999.49974975+1.110223e-16i: The imaginary part is clearly round-off.


** Moreover, any complex roots must come in complex conjugate pairs. In 
this example, roots [1] and [10] are complex conjugates, as are roots 
[2] and [7], etc. It's interesting to me that the roots are not sorted 
to put complex conjugates together.


However, improving this algorithm is probably not worth the time of 
anyone who might know enough to actually do it with a reasonable effort ;-)


Spencer Graves


On 10/2/25 12:49, Deepayan Sarkar wrote:
> How can an odd degree polynomial be positive for all x?
> 
> 
> Deepayan
> 
> On Thu, 2 Oct, 2025, 6:14 pm tgs77m--- via R-help, <r-help at r-project.org>
> wrote:
> 
>> Colleagues,
>>
>> g <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 )
>> coeffs <- c(1, rep(0, 8), 500, 1000, 1)
>> roots <- polyroot(coeffs)
>>
>> Output
>>
>> [1]    0.25770068+3.958197e-01i
>>   [2]   -0.34615184+3.782848e-01i
>>   [3]   -0.04089779-4.838134e-01i
>>   [4]    0.44124314-1.517731e-01i
>>   [5]   -0.04089779+4.838134e-01i
>>   [6]   -0.56201931-1.282822e-01i
>>   [7]   -0.34615184-3.782848e-01i
>>   [8]    0.44124314+1.517731e-01i
>>   [9]   -0.56201931+1.282822e-01i
>> [10]    0.25770068-3.958197e-01i
>> [11] -999.49974975+1.110223e-16i
>>
>> [11] -999.49974975+1.110223e-16i  makes  no sense since f>0 for all x
>>
>> Why does polyroot do this?
>>
>> Thomas Subia
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From |uk@@@@chne|derb@uer @end|ng |rom gm@||@com  Thu Oct  2 18:56:34 2025
From: |uk@@@@chne|derb@uer @end|ng |rom gm@||@com (Lukas Schneiderbauer)
Date: Thu, 2 Oct 2025 18:56:34 +0200
Subject: [R] polyroot behaviour
In-Reply-To: <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
References: <001b01dc33b7$9b97c980$d2c75c80$.ref@yahoo.com>
 <001b01dc33b7$9b97c980$d2c75c80$@yahoo.com>
Message-ID: <CAHETjta_FqNddJqfX-ufJD1PtUBGH+A0c6KPnHp4WabzWfaC7Q@mail.gmail.com>

Dear Thomas,

How can f be strictly positive if the leading term is an odd power of x?
For large negative x, x^11 will dominate, and f should become quite
negative. This argument is also supported by a graphical plot of f.
Assuming that f can indeed be negative, my suspicion is that the 11th root
is still a reasonable approximation to the actual root, but the gradient in
this region is high and so f(x) evaluated numerically is too sensitive to
small errors (that is why f(roots[[11]]) evaluates to a seemingly huge
number).

Best,
Lukas


On Thu, Oct 2, 2025 at 6:14?PM tgs77m--- via R-help <r-help at r-project.org>
wrote:

> Colleagues,
>
> g <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 )
> coeffs <- c(1, rep(0, 8), 500, 1000, 1)
> roots <- polyroot(coeffs)
>
> Output
>
> [1]    0.25770068+3.958197e-01i
>  [2]   -0.34615184+3.782848e-01i
>  [3]   -0.04089779-4.838134e-01i
>  [4]    0.44124314-1.517731e-01i
>  [5]   -0.04089779+4.838134e-01i
>  [6]   -0.56201931-1.282822e-01i
>  [7]   -0.34615184-3.782848e-01i
>  [8]    0.44124314+1.517731e-01i
>  [9]   -0.56201931+1.282822e-01i
> [10]    0.25770068-3.958197e-01i
> [11] -999.49974975+1.110223e-16i
>
> [11] -999.49974975+1.110223e-16i  makes  no sense since f>0 for all x
>
> Why does polyroot do this?
>
> Thomas Subia
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From |uk@@@@chne|derb@uer @end|ng |rom gm@||@com  Fri Oct  3 08:07:24 2025
From: |uk@@@@chne|derb@uer @end|ng |rom gm@||@com (Lukas Schneiderbauer)
Date: Fri, 3 Oct 2025 08:07:24 +0200
Subject: [R] `install.packages()` and https proxy with R 4.5
In-Reply-To: <dda68dfa-45cf-4b41-9384-f130e3beddd5@eoos.dds.nl>
References: <CAHETjtZ=Pi=4V=A2YNKnNNFsOL8LTXtqWo-3OEFeZSQhzZsC_A@mail.gmail.com>
 <CABFfbXv2gF-F_HvNLg9XGs4fXjYX6G3BUORY2dpZxtYwqLiaxA@mail.gmail.com>
 <dda68dfa-45cf-4b41-9384-f130e3beddd5@eoos.dds.nl>
Message-ID: <CAHETjtYpP8hUbT=c-0sz-U=DknWhKrKP9zguqKdFi60s94Y5_Q@mail.gmail.com>

Thanks for the suggestions.

I tried "http_proxy", "https_proxy" and "all_proxy". All to no avail.

A colleague of mine still has the 4.4 version of R where everything works,
and she reports that getOption("download.file.method") reports "libcurl"
which leads me to believe that wininet was never used. Also "libcurl" is
reported now.

The package {pak} works and {pak} uses the package {curl} (which uses
libcurl) to download things as far as I can tell. When using
"curl::curl_download()" directly on the repository PACKAGES file, it also
works.
"download.file()" does give me an error. It really seems there is something
wrong with "download.file()". Or they are bundling/using different versions
of libcurl and libcurl has a bug in one of those?

On Thu, Oct 2, 2025, 08:24 Jan van der Laan <rhelp at eoos.dds.nl> wrote:

>
>
> On 30-09-2025 17:49, Jeroen Ooms wrote:
> > On Sun, Sep 28, 2025 at 10:45?AM Lukas Schneiderbauer
> > <lukas.schneiderbauer at gmail.com> wrote:
> >>
> >> Hi all,
> >>
> >> I work from a Windows 11 environment behind a firewall, and I require
> proxy
> >> settings to reach the (private) R package repository I work with.
> >> Using R 4.4 I used to set the environment variable "https_proxy" which
> led
> >> to e.g. "install.packages()" to work just fine.
> >
> >
> > Maybe also try some of the other variables mentioned in
> > https://curl.se/libcurl/c/libcurl-env.html
>
>
> That documentation mentions that 'http_proxy' is used for 'https://'
> addresses. Is that variable also set?
>
>
> I could also be that the proxy requires authentication with wininet this
> is often automatically done (I believe that was de default before R4.5).
> However, that doesn't explain why `method="curl"` would work. In that
> case you could try to set the proxy to `http_proxy=":@yourproxy"`.
>
> HTH,
> Jan
>
>
>
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From more@uje@nne02 @end|ng |rom gm@||@com  Fri Oct  3 11:57:46 2025
From: more@uje@nne02 @end|ng |rom gm@||@com (Jeanne Moreau)
Date: Fri, 3 Oct 2025 11:57:46 +0200
Subject: [R] Non-reproducible LDA results across machines
Message-ID: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>

Good Morning,

I am working with LDA models in R (using both topicmodels::LDA and
quanteda::textmodel_lda) and noticed that the results differ slightly
across different machines, even when I use set.seed(1234) and the same
dataset.

So, I have a few questions:
Is this expected due to BLAS/LAPACK or low-level random number generation
differences?
Is there a recommended way to enforce bit-for-bit reproducibility of LDA
results across machines in R?
Would you recommend always saving fitted models with saveRDS() to ensure
reproducible outputs instead of re-fitting?

Thanks a lot for your guidance.

Best regards,

Jeanne Moreau

	[[alternative HTML version deleted]]


From r@oknz @end|ng |rom gm@||@com  Fri Oct  3 13:28:12 2025
From: r@oknz @end|ng |rom gm@||@com (Richard O'Keefe)
Date: Sat, 4 Oct 2025 00:28:12 +1300
Subject: [R] polyroot
In-Reply-To: <001201dc33b5$0c7825d0$25687170$@yahoo.com>
References: <001201dc33b5$0c7825d0$25687170$.ref@yahoo.com>
 <001201dc33b5$0c7825d0$25687170$@yahoo.com>
Message-ID: <CABcYAd+0YDOr=njOu_bhObA45zRo=1W4GrgVnpOPeYjZe3P9dg@mail.gmail.com>

Take the leading terms: x^11 + 1000*x^10.  Set that equal to zero.
The roots are 0 and -1000.
The 1.1e-16 is clearly rounding error.  -999 looks like a good
approximation to a root.
Take the leading terms x^11 + 1000*x^10 + 500*x^9.  This is x^9*(x^2 +
1000x + 500)..
We get quadratic roots -999.499749749687 -and 0.5002502503129382
Root [11] is looking better and better.
For x close to -1000, the "1" in the polynomial is 1e-33 of x^11, so
this is ill-conditioned.


On Fri, 3 Oct 2025 at 04:56, tgs77m--- via R-help <r-help at r-project.org> wrote:
>
> Colleagues,
>
> f <- function(x) ( x^11 + 1000*x^10 + 500 *x^9 + 1 ) ^0.01
> coeffs <- c(1, rep(0, 8), 500, 1000, 1)
> roots <- polyroot(coeffs)
>
> # output
>
> [1]    0.25770068+3.958197e-01i
>  [2]   -0.34615184+3.782848e-01i
>  [3]   -0.04089779-4.838134e-01i
>  [4]    0.44124314-1.517731e-01i
>  [5]   -0.04089779+4.838134e-01i
>  [6]   -0.56201931-1.282822e-01i
>  [7]   -0.34615184-3.782848e-01i
>  [8]    0.44124314+1.517731e-01i
>  [9]   -0.56201931+1.282822e-01i
> [10]    0.25770068-3.958197e-01i
> [11] -999.49974975+1.110223e-16i
>
> [11] -999.49974975+1.110223e-16i makes no sense since f is always greater
> than 0
>
> why does polyroot output [11] -999.49974975+1.110223e-16i ?
>
> Thanks,
>
> Thomas Subia
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Fri Oct  3 14:44:54 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Fri, 03 Oct 2025 05:44:54 -0700
Subject: [R] Non-reproducible LDA results across machines
In-Reply-To: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>
References: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>
Message-ID: <59E1B3B5-364D-418B-A506-4B20969D375B@dcn.davis.ca.us>

There was a change in the default R RNG a few years ago. Are you using the same version of R in all cases?

On October 3, 2025 2:57:46 AM PDT, Jeanne Moreau <moreaujeanne02 at gmail.com> wrote:
>Good Morning,
>
>I am working with LDA models in R (using both topicmodels::LDA and
>quanteda::textmodel_lda) and noticed that the results differ slightly
>across different machines, even when I use set.seed(1234) and the same
>dataset.
>
>So, I have a few questions:
>Is this expected due to BLAS/LAPACK or low-level random number generation
>differences?
>Is there a recommended way to enforce bit-for-bit reproducibility of LDA
>results across machines in R?
>Would you recommend always saving fitted models with saveRDS() to ensure
>reproducible outputs instead of re-fitting?
>
>Thanks a lot for your guidance.
>
>Best regards,
>
>Jeanne Moreau
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Fri Oct  3 14:50:41 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Fri, 03 Oct 2025 05:50:41 -0700
Subject: [R] Non-reproducible LDA results across machines
In-Reply-To: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>
References: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>
Message-ID: <487F295E-5DF1-43E6-A67C-F2B6D555A424@dcn.davis.ca.us>

Also, it is a bad idea to make your randomized analyses dependent on bit-for-bit reproducibility... first, different computer architectures handle floating point intermediate calculations differently, and second the whole point of a randomized trial is that it converges to some quantifiable mean result regardless of the path taken to get there.

On October 3, 2025 2:57:46 AM PDT, Jeanne Moreau <moreaujeanne02 at gmail.com> wrote:
>Good Morning,
>
>I am working with LDA models in R (using both topicmodels::LDA and
>quanteda::textmodel_lda) and noticed that the results differ slightly
>across different machines, even when I use set.seed(1234) and the same
>dataset.
>
>So, I have a few questions:
>Is this expected due to BLAS/LAPACK or low-level random number generation
>differences?
>Is there a recommended way to enforce bit-for-bit reproducibility of LDA
>results across machines in R?
>Would you recommend always saving fitted models with saveRDS() to ensure
>reproducible outputs instead of re-fitting?
>
>Thanks a lot for your guidance.
>
>Best regards,
>
>Jeanne Moreau
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From bbo|ker @end|ng |rom gm@||@com  Fri Oct  3 18:41:37 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Fri, 3 Oct 2025 12:41:37 -0400
Subject: [R] Non-reproducible LDA results across machines
In-Reply-To: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>
References: <CADdkn=U3N+W5QpZ53MDQy11vM88TvpSVT_E1tez-3hZpMJfLyQ@mail.gmail.com>
Message-ID: <45e88a2e-3f4e-4c42-aeda-3f0a39d4a5e4@gmail.com>

     To add a little bit of detail to what others have said:

  If you are using the same version of R, on the same operating system, 
with the same processor (e.g. there will be differences between 
Intel/M1/M2 Macs), then as far as I know the only source of 
non-determinism, which could even affect successive runs on the same 
machine, would be parallel operations in BLAS/LAPACK resulting in 
mathematically equivalent operations being done in a different order 
(floating point arithmetic is not associative, so (a+b)+c != a + (b+c) 
in general).

On 10/3/25 05:57, Jeanne Moreau wrote:
> Good Morning,
> 
> I am working with LDA models in R (using both topicmodels::LDA and
> quanteda::textmodel_lda) and noticed that the results differ slightly
> across different machines, even when I use set.seed(1234) and the same
> dataset.
> 
> So, I have a few questions:
> Is this expected due to BLAS/LAPACK or low-level random number generation
> differences?
> Is there a recommended way to enforce bit-for-bit reproducibility of LDA
> results across machines in R?
> Would you recommend always saving fitted models with saveRDS() to ensure
> reproducible outputs instead of re-fitting?
> 
> Thanks a lot for your guidance.
> 
> Best regards,
> 
> Jeanne Moreau
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Associate chair (graduate), Mathematics & Statistics
Director, School of Computational Science and Engineering
* E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From rjerome@@nder@on @end|ng |rom gm@||@com  Sat Oct  4 01:54:42 2025
From: rjerome@@nder@on @end|ng |rom gm@||@com (R Jerome Anderson)
Date: Fri, 3 Oct 2025 19:54:42 -0400
Subject: [R] data =
Message-ID: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>

I can code summary(midterm_df$hv109) and I get the summary of variable
hv109. No problem.

Yet when I write the code:

summary(hv109, data = midterm_df)

I get this error:

Error in h(simpleError(msg, call)) : error in evaluating the argument
'object' in selecting a method for function 'summary': object 'hv109' not
found

If I write the code summary('hv109', data = midterm_df), R treats hv109 as
if it were a character variable. It is not.

Page 521 in Andrews *Doing Data Science in R* shows the data = [df]
command. I thought it was straightforward. Why doesn't my code work?

Any help w/ this would be appreciated.

-- Jerome Anderson

	[[alternative HTML version deleted]]


From o||v|er@crouzet @end|ng |rom un|v-n@nte@@|r  Sat Oct  4 09:24:46 2025
From: o||v|er@crouzet @end|ng |rom un|v-n@nte@@|r (Olivier Crouzet)
Date: Sat, 4 Oct 2025 09:24:46 +0200
Subject: [R] data =
In-Reply-To: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
References: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
Message-ID: <20251004092446.cb6f2657ff689db12f2f634f@univ-nantes.fr>

Hi,

As far as I can tell, I don't think the function 'summary()'
will accept the 'data=' argument: see help(summary). Probably the
reference you're mentionning (Andrews *Doing Data Science in R*) is
about another function but not summary().

Olivier.


On Fri, 3 Oct 2025 19:54:42 -0400 R
Jerome Anderson <rjerome.anderson at gmail.com> wrote:

> I can code summary(midterm_df$hv109) and I get the summary of variable
> hv109. No problem.
> 
> Yet when I write the code:
> 
> summary(hv109, data = midterm_df)
> 
> I get this error:
> 
> Error in h(simpleError(msg, call)) : error in evaluating the argument
> 'object' in selecting a method for function 'summary': object 'hv109'
> not found
> 
> If I write the code summary('hv109', data = midterm_df), R treats
> hv109 as if it were a character variable. It is not.
> 
> Page 521 in Andrews *Doing Data Science in R* shows the data = [df]
> command. I thought it was straightforward. Why doesn't my code work?
> 
> Any help w/ this would be appreciated.
> 
> -- Jerome Anderson
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html and provide commented,
> minimal, self-contained, reproducible code.


-- 
  Olivier Crouzet, PhD
  http://olivier.ghostinthemachine.space
  /Ma?tre de Conf?rences/
  @LLING - Laboratoire de Linguistique de Nantes
    UMR6310 CNRS / Universit? de Nantes


From o||v|er@crouzet @end|ng |rom un|v-n@nte@@|r  Sat Oct  4 09:30:14 2025
From: o||v|er@crouzet @end|ng |rom un|v-n@nte@@|r (Olivier Crouzet)
Date: Sat, 4 Oct 2025 09:30:14 +0200
Subject: [R] data =
In-Reply-To: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
References: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
Message-ID: <20251004093014.8b2be6f6e7b88ffd8d3f28f9@univ-nantes.fr>

Oups, I think the answer is more complex than my previous one.
summary() is a method that will apply differently depending on the
object it's applied to. So it may not behave similarly depending on
whether it's applied on a model-fitting object or on a data frame.

You're trying to apply it on a data frame and the 'data=' argument is
not part of the summary's data frame method (which conforms to my
previous answer), though it may be available for model fitting objects
(which may be how Andrews uses it in the referenced book).

Olivier.

On Fri, 3 Oct 2025 19:54:42 -0400 R Jerome
Anderson <rjerome.anderson at gmail.com> wrote:

> I can code summary(midterm_df$hv109) and I get the summary of variable
> hv109. No problem.
> 
> Yet when I write the code:
> 
> summary(hv109, data = midterm_df)
> 
> I get this error:
> 
> Error in h(simpleError(msg, call)) : error in evaluating the argument
> 'object' in selecting a method for function 'summary': object 'hv109'
> not found
> 
> If I write the code summary('hv109', data = midterm_df), R treats
> hv109 as if it were a character variable. It is not.
> 
> Page 521 in Andrews *Doing Data Science in R* shows the data = [df]
> command. I thought it was straightforward. Why doesn't my code work?
> 
> Any help w/ this would be appreciated.
> 
> -- Jerome Anderson
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html and provide commented,
> minimal, self-contained, reproducible code.


-- 
  Olivier Crouzet, PhD
  http://olivier.ghostinthemachine.space
  /Ma?tre de Conf?rences/
  @LLING - Laboratoire de Linguistique de Nantes
    UMR6310 CNRS / Universit? de Nantes


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sat Oct  4 09:39:35 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sat, 04 Oct 2025 00:39:35 -0700
Subject: [R] data =
In-Reply-To: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
References: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
Message-ID: <5201B7CF-012E-40C2-8AF7-8172FD530E61@dcn.davis.ca.us>

You desperately need to study your reference material more carefully or talk to your instructor... h109 is clearly something part of midterm_df and not an object on its own in your working environment. Also, read the help for sample.default and sample.lm... they work with different arguments when the first argument is a different kind of object.

I don't expect the latter point to be obvious at first, but I am also not really supposed go into more detail... do please read the Posting Guide mentioned at the bottom of every message on this email list... there is a warning that this list does not permit answering homework because there is no way for us invisible remote people to know what the ground rules are for an educational institution or an educator who is being paid to educate and is responsible for doing so.

On October 3, 2025 4:54:42 PM PDT, R Jerome Anderson <rjerome.anderson at gmail.com> wrote:
>I can code summary(midterm_df$hv109) and I get the summary of variable
>hv109. No problem.
>
>Yet when I write the code:
>
>summary(hv109, data = midterm_df)
>
>I get this error:
>
>Error in h(simpleError(msg, call)) : error in evaluating the argument
>'object' in selecting a method for function 'summary': object 'hv109' not
>found
>
>If I write the code summary('hv109', data = midterm_df), R treats hv109 as
>if it were a character variable. It is not.
>
>Page 521 in Andrews *Doing Data Science in R* shows the data = [df]
>command. I thought it was straightforward. Why doesn't my code work?
>
>Any help w/ this would be appreciated.
>
>-- Jerome Anderson
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Oct  4 12:39:37 2025
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 4 Oct 2025 11:39:37 +0100
Subject: [R] data =
In-Reply-To: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
References: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
Message-ID: <f9866ad4-4369-4f7e-8655-176f8c6509f1@sapo.pt>

On 10/4/2025 12:54 AM, R Jerome Anderson wrote:
> I can code summary(midterm_df$hv109) and I get the summary of variable
> hv109. No problem.
> 
> Yet when I write the code:
> 
> summary(hv109, data = midterm_df)
> 
> I get this error:
> 
> Error in h(simpleError(msg, call)) : error in evaluating the argument
> 'object' in selecting a method for function 'summary': object 'hv109' not
> found
> 
> If I write the code summary('hv109', data = midterm_df), R treats hv109 as
> if it were a character variable. It is not.
> 
> Page 521 in Andrews *Doing Data Science in R* shows the data = [df]
> command. I thought it was straightforward. Why doesn't my code work?
> 
> Any help w/ this would be appreciated.
> 
> -- Jerome Anderson
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
Hello,

?summary has no argument 'data'. You must use the first form.

Hope this helps,

Rui Barradas


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Oct  4 15:31:26 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sat, 4 Oct 2025 09:31:26 -0400
Subject: [R] data =
In-Reply-To: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
References: <CAO0oteDHmdNF4fDpR8f=weBDDzKrSouH13XYrjuOtYRBRRPF1g@mail.gmail.com>
Message-ID: <ff0542e3-09b6-473a-92f4-a4b04e4d46bf@gmail.com>

On 2025-10-03 7:54 p.m., R Jerome Anderson wrote:
> I can code summary(midterm_df$hv109) and I get the summary of variable
> hv109. No problem.
> 
> Yet when I write the code:
> 
> summary(hv109, data = midterm_df)
> 
> I get this error:
> 
> Error in h(simpleError(msg, call)) : error in evaluating the argument
> 'object' in selecting a method for function 'summary': object 'hv109' not
> found
> 
> If I write the code summary('hv109', data = midterm_df), R treats hv109 as
> if it were a character variable. It is not.
> 
> Page 521 in Andrews *Doing Data Science in R* shows the data = [df]
> command. I thought it was straightforward. Why doesn't my code work?
> 
> Any help w/ this would be appreciated.

Not all functions support a `data` argument.  You can read about the 
`summary()` function using `?summary`, and none of the variations shown 
there have `data` as an argument.

For cases like this, you can use the `with()` function, e.g.

   with(midterm_df, summary(hv109))

`with()` temporarily attaches the columns of the dataframe as separate 
variables.

Duncan Murdoch


From tgs77m m@iii@g oii y@hoo@com  Sat Oct  4 20:40:56 2025
From: tgs77m m@iii@g oii y@hoo@com (tgs77m m@iii@g oii y@hoo@com)
Date: Sat, 4 Oct 2025 11:40:56 -0700
Subject: [R] Help with implementing asymptotic expansion for
 fractional-power polynomials in R
References: <008001dc355e$6cbbd7c0$46338740$.ref@yahoo.com>
Message-ID: <008001dc355e$6cbbd7c0$46338740$@yahoo.com>

I've been developing an R script to compute asymptotic expansions of a
polynomial raised to a fractional power in order to approximate that
integral.

he implementation is my own, but I'm encountering issues with higher-order
terms and fractional exponents. I'd like guidance on making the code:

Robust for any polynomial degree
Accurate with fractional powers
Efficient for high-degree polynomials

library(partitions)

asymptotic_expansion <- function(coeffs, alpha, max_order = 4) {
  degree <- length(coeffs) - 1
  r_lead <- coeffs[1]
  lower_coeffs <- coeffs[-1] / r_lead
  n <- length(lower_coeffs)
  
  result <- numeric(max_order + 1)
  result[1] <- 1
  names(result) <- paste0("x^", degree*alpha - 0:max_order)
  
  for (k in 1:max_order) {
    combos <- compositions(k, n)
    for (col in 1:ncol(combos)) {
      j <- combos[, col]
      power_y <- sum(j * (1:n))
      if (power_y <= max_order) {
        multinom_coef <- factorial(k) / prod(factorial(j))
        term <- multinom_coef * prod(lower_coeffs^j)
        result[power_y + 1] <- result[power_y + 1] + choose(alpha, k) * term
      }
    }
  }
  
  result <- result * r_lead^alpha
  return(result)
}

# Example polynomial and parameters
coeffs <- c(1, -17, 80, -100)
alpha <- 0.01
max_order <- 4

# Compute expansion
coefs <- asymptotic_expansion(coeffs, alpha, max_order)
print(coefs)

x^0.03   x^-0.97   x^-1.97   x^-2.97   x^-3.97 
1.0         -0.17         0.798    -3.667    ...

The coefficient for the fourth term (-3.667) seems inconsistent with
expected results from higher-precision calculations or reference tools
(should be roughly -1.656). I suspect this may be related to fractional
exponents or truncation of higher-order terms.

I'd appreciate guidance on:

Correctly handling fractional exponents in the expansion
Improving accuracy for higher-order terms
Making the code general for any polynomial degree

Thank you for your help!

Thomas Subia


From bruno@@||v@@m@rt|n@ @end|ng |rom hotm@||@com  Mon Oct 13 20:31:23 2025
From: bruno@@||v@@m@rt|n@ @end|ng |rom hotm@||@com (Bruno Martins)
Date: Mon, 13 Oct 2025 19:31:23 +0100
Subject: [R] {stats} package source code - Help in finding repo
Message-ID: <AM0PR03MB6129B15E303639A5C9B9E4CDB4EAA@AM0PR03MB6129.eurprd03.prod.outlook.com>

Hello, R team!

My name is Bruno and I am a Data Scientist from Portugal.

An internal package of mine is making use of stats::cov.wt(), which I 
inspected source code for, but would like to know if the {stats} package 
source code is available on GitHub? I've looked throughout repos, but 
can't seem to find it.

I am looking to rewrite my own version in Rcpp, but would like to have 
more context on the module to implement things right.

Any help here would be greatly appreciated.

Thank you!

Bruno MArtins


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Tue Oct 14 08:52:49 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 13 Oct 2025 23:52:49 -0700
Subject: [R] {stats} package source code - Help in finding repo
In-Reply-To: <AM0PR03MB6129B15E303639A5C9B9E4CDB4EAA@AM0PR03MB6129.eurprd03.prod.outlook.com>
References: <AM0PR03MB6129B15E303639A5C9B9E4CDB4EAA@AM0PR03MB6129.eurprd03.prod.outlook.com>
Message-ID: <6B8781AB-D6D3-49CA-A6D1-5746B10F1F79@dcn.davis.ca.us>

The official source of R is not on Github, but there is a read-only mirror there: https://github.com/wch/r-source/blob/trunk/src%2Flibrary%2Fstats%2FR%2Fcov.wt.R#L19

On October 13, 2025 11:31:23 AM PDT, Bruno Martins <bruno.silva.martins at hotmail.com> wrote:
>Hello, R team!
>
>My name is Bruno and I am a Data Scientist from Portugal.
>
>An internal package of mine is making use of stats::cov.wt(), which I inspected source code for, but would like to know if the {stats} package source code is available on GitHub? I've looked throughout repos, but can't seem to find it.
>
>I am looking to rewrite my own version in Rcpp, but would like to have more context on the module to implement things right.
>
>Any help here would be greatly appreciated.
>
>Thank you!
>
>Bruno MArtins
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.



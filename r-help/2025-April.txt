From @rn@ud@g@boury @end|ng |rom gm@||@com  Wed Apr  2 12:20:29 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Wed, 02 Apr 2025 12:20:29 +0200
Subject: [R] join/merge two data frames
Message-ID: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>

I work on a trading journal for a portfolio of crypto currencies. The
goal is to fetch from my account (binance exchange) the trades I have
done and daily closing prices of my assets.
The first part (getting the data from exchange) are in two parts.

1- get the daily closing prices of my assets. Here is a sample of my
data frame:
token_close_sample <- structure(list(time = structure(c(1734371999.999,
1734458399.999, 
1734544799.999, 1734631199.999), tzone = "", class = c("POSIXct", 
"POSIXt")), BTCUSDC = c(107112.36, 107517.25, 104630.49, 98692.01
), SUIUSDC = c(4.7252, 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 
1.1412, 1.0928, 1.0256), AAVEUSDC = c(388, 365.68, 373.15, 316.69
), ETHUSDC = c(4034.74, 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 
1.3596, 1.2222, 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", 
"tbl", "data.frame"))

the tibble looks like this:
time                BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC FTMUSDC 
<dttm>                <dbl>   <dbl>   <dbl>    <dbl>   <dbl>   <dbl>  
1 2024-12-16 18:59:59 107112.    4.73    1.19     388    4035.    1.38
2 2024-12-17 18:59:59 107517.    4.69    1.14     366.   3975.    1.36
3 2024-12-18 18:59:59 104630.    4.70    1.09     373.   3879.    1.22
4 2024-12-19 18:59:59  98692.    4.24    1.03     317.   3475.    1.04

2- get my trades. Here is a sample:
all_trade_sample <- structure(list(time = structure(c(1737335082.949,
1737336735.697, 
1738059550.671, 1738142709.422, 1738142709.422, 1738169351.788
), tzone = "UTC", class = c("POSIXct", "POSIXt")), symbol =
c("AAVEUSDC", 
"AAVEUSDC", "SUIUSDC", "AAVEUSDC", "AAVEUSDC", "ETHUSDC"), executed_qty
= c(866.666, 
-834.998, 67649.3, -0.393, -0.393, 36.1158), price = c(0.003005, 
0.003131, 0.000038, 294.738321, 294.738321, 0.03027),
cummulative_quote_qty = c(262699.317950113, 
-263696.723173419, 263987.20719179, -115.83216, -115.83216,
111456.491386979
), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117
), class = "Date")), row.names = c(NA, -6L), class = c("tbl_df", 
"tbl", "data.frame"))

the tibble looks like this:
time                symbol   executed_qty      price
cummulative_quote_qty day       
<dttm>              <chr>           <dbl>      <dbl>                
<dbl> <date>    
1 2025-01-20 01:04:42 AAVEUSDC      867.      0.00300               
262699. 2025-01-20
2 2025-01-20 01:32:15 AAVEUSDC     -835.      0.00313               -
263697. 2025-01-20
3 2025-01-28 10:19:10 SUIUSDC     67649.      0.000038              
263987. 2025-01-28
4 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.                      
-116. 2025-01-29
5 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.                      
-116. 2025-01-29
6 2025-01-29 16:49:11 ETHUSDC        36.1     0.0303                
111456. 2025-01-29

Now, to finalize, I want to get all the info in one data frame so I can
compute daily valuation (with potential trades, or in/out of asset).
The finalized tibble should look something like this:
result <- structure(list(time = structure(c(1734371999.999,
1734458399.999, 
1734544799.999, 1734631199.999, 1737335082.949, 1737336735.697, 
1738059550.671, 1734721199, 1734807599,
1734893999, 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
1735498799), tzone = "", class = c("POSIXct", 
"POSIXt")), BTCUSDC = c(107112.36, 107517.25, 104630.49,
98692.01,NA_real_, NA_real_,
102000, 101500, 101700,100300,100400,102300,102300,103100, NA_real_,
99800, NA_real_, NA_real_,NA_real_, 99900
), SUIUSDC = c(4.7252, 4.6923, 4.7017, 4.2422, NA_real_, NA_real_,
4.25, 4.26, 4.7, 4.65, 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52,
NA_real_, NA_real_,NA_real_, 4.44), ENAUSDC = c(1.1862, 
1.1412, 1.0928, 1.0256, NA_real_, NA_real_, 1.176, 1.16, 1.163, 1.183,
1.196, 1.165, 1.158, 1.142, NA_real_, 1.196, 
NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC = c(388, 365.68, 373.15,
316.69, NA_real_, NA_real_,
102000, 101500, 101700,100300,100400,102300,102300,103100, NA_real_,
99800, NA_real_, NA_real_,NA_real_, 99900
), ETHUSDC = c(4034.74, 3975.39, 3879.06, 3474.91, NA_real_,NA_real_,
3420, 3410, 3412, 3367, 3388,
3355, 3374, 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), 
FTMUSDC = c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36,
1.368, 1.342, 1.339, 1.436,
1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_, NA_real_,NA_real_, 1.58),
executed_qty = c(NA_real_, NA_real_, NA_real_, NA_real_, 230, 559,
NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_,
NA_real_, 200, NA_real_, 700, 200, 350, NA_real_), price = c(
NA_real_, NA_real_, NA_real_, NA_real_, 2, 3, NA_real_,
NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,
10, NA_real_, 3, 4, 5, NA_real_)
), row.names = c(NA, -20L), class = c("tbl_df", "tbl", "data.frame"))

The idea is to have:
- one line each day with closing price of my portfolio assets at
18:59:59
- one line for each trade where I shall write 'asset', 'price' and
'executed_qty'. 

I spent quite some time trying to figure out how to do it, but
couldn't. I don't even know if it is possible. Of course, I don't want
to add anything (price, date, asset...) by hand. 
Thank you for any help. 



-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250402/55341c60/attachment.sig>

From tebert @end|ng |rom u||@edu  Wed Apr  2 18:55:12 2025
From: tebert @end|ng |rom u||@edu (Ebert,Timothy Aaron)
Date: Wed, 2 Apr 2025 16:55:12 +0000
Subject: [R] join/merge two data frames
In-Reply-To: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
Message-ID: <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>

Your result data frame example makes no sense to me. The price and executed_qty are the same for all symbols?

To get it all into one data frame you need a common variable that is used to join the data frames.
My guess is that all_trade_sample$symbol has equivalents to the variables in token_close_sample.

You need to pivot one of the tables, and then full join them.
Please look at the join functions. In base R it is "merge()" and in dyply it is full_join(), left_join() and similar.

I will pivot all_trade_sample to make all of the elements in "symbol" into variables.

I will do this in tidyverse. There are some parts of this that I really like. However, it can as easily be done using base R.
Library(tidyr)
Library(dplyr)
token_close_long <- token_close_sample %>%
  pivot_longer(cols = -time, names_to = "symbol", values_to = "close_price")
#I rename time in token_close_long so that it will be preserved
colnames(token_close_long) <- c("time_close", "symbol", "close_price")
combined <- full_join(all_trade_sample,token_close_long, by="symbol")

This generates errors. This is ok, but I need to know more about all_trade_sample. Each symbol appears multiple times in all_trade_sample. Each instance of "AAVEUSIX" has a different time stamp. So maybe filter to eliminate all but the first (earliest) time?

The program looks something like this:
token_close_long <- token_close_sample %>%
  pivot_longer(cols = -time, names_to = "symbol", values_to = "close_price")

#I will rename time in token_close_long so that it will be preserved
colnames(token_close_long) <- c("time_close", "symbol", "close_price")
combined <- full_join(all_trade_sample,token_close_long, by="symbol")

filtered_trades <- all_trade_sample |>
  group_by(symbol) |>
  slice_min(time, n = 1)|>
  ungroup()

combined <- full_join(filtered_trades,token_close_long, by="symbol")

I did not do something right, as there are four closing prices for each symbol. However, the general approach should work even if it needs a little modification to give the correct result. Your closing price is only relevant based on some other price (probably buying price, but could be opening price).

Tim

-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud Gaboury
Sent: Wednesday, April 2, 2025 6:20 AM
To: r-help at r-project.org
Subject: [R] join/merge two data frames

[External Email]

I work on a trading journal for a portfolio of crypto currencies. The goal is to fetch from my account (binance exchange) the trades I have done and daily closing prices of my assets.
The first part (getting the data from exchange) are in two parts.

1- get the daily closing prices of my assets. Here is a sample of my data frame:
token_close_sample <- structure(list(time = structure(c(1734371999.999, 1734458399.999, 1734544799.999, 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC = c(4.7252, 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256), AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC = c(4034.74, 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222, 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl", "data.frame"))

the tibble looks like this:
time                BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC FTMUSDC
<dttm>                <dbl>   <dbl>   <dbl>    <dbl>   <dbl>   <dbl>
1 2024-12-16 18:59:59 107112.    4.73    1.19     388    4035.    1.38
2 2024-12-17 18:59:59 107517.    4.69    1.14     366.   3975.    1.36
3 2024-12-18 18:59:59 104630.    4.70    1.09     373.   3879.    1.22
4 2024-12-19 18:59:59  98692.    4.24    1.03     317.   3475.    1.04

2- get my trades. Here is a sample:
all_trade_sample <- structure(list(time = structure(c(1737335082.949, 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422, 1738169351.788 ), tzone = "UTC", class = c("POSIXct", "POSIXt")), symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC", "AAVEUSDC", "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -0.393, -0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038, 294.738321, 294.738321, 0.03027), cummulative_quote_qty = c(262699.317950113, -263696.723173419, 263987.20719179, -115.83216, -115.83216,
111456.491386979
), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117 ), class = "Date")), row.names = c(NA, -6L), class = c("tbl_df", "tbl", "data.frame"))

the tibble looks like this:
time                symbol   executed_qty      price
cummulative_quote_qty day
<dttm>              <chr>           <dbl>      <dbl>
<dbl> <date>
1 2025-01-20 01:04:42 AAVEUSDC      867.      0.00300
262699. 2025-01-20
2 2025-01-20 01:32:15 AAVEUSDC     -835.      0.00313               -
263697. 2025-01-20
3 2025-01-28 10:19:10 SUIUSDC     67649.      0.000038
263987. 2025-01-28
4 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.
-116. 2025-01-29
5 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.
-116. 2025-01-29
6 2025-01-29 16:49:11 ETHUSDC        36.1     0.0303
111456. 2025-01-29

Now, to finalize, I want to get all the info in one data frame so I can compute daily valuation (with potential trades, or in/out of asset).
The finalized tibble should look something like this:
result <- structure(list(time = structure(c(1734371999.999, 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949, 1737336735.697, 1738059550.671, 1734721199, 1734807599, 1734893999, 1734980399, 1735066799, 1735153199, 1735239599, 1735325999, 1738142709.422, 1735412399, 1738142709.422, 1738169351.788, 1735498799), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC = c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_, 102000, 101500, 101700,100300,100400,102300,102300,103100, NA_real_, 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC = c(4.7252, 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7, 4.65, 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_, NA_real_,NA_real_, 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_, NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158, 1.142, NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC = c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000, 101500, 101700,100300,100400,102300,102300,103100, NA_real_, 99800, NA_real_, NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39, 3879.06, 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355, 3374, 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), FTMUSDC = c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368, 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_, NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_, NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200, 350, NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_, 2, 3, NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_, NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA, -20L), class = c("tbl_df", "tbl", "data.frame"))

The idea is to have:
- one line each day with closing price of my portfolio assets at
18:59:59
- one line for each trade where I shall write 'asset', 'price' and 'executed_qty'.

I spent quite some time trying to figure out how to do it, but couldn't. I don't even know if it is possible. Of course, I don't want to add anything (price, date, asset...) by hand.
Thank you for any help.



From @rn@ud@g@boury @end|ng |rom gm@||@com  Wed Apr  2 20:10:24 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Wed, 02 Apr 2025 20:10:24 +0200
Subject: [R] join/merge two data frames
In-Reply-To: <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
 <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
Message-ID: <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>



On Wed, 2025-04-02 at 16:55 +0000, Ebert,Timothy Aaron wrote:
> Your result data frame example makes no sense to me. The price and
> executed_qty are the same for all symbols?
> 
> To get it all into one data frame you need a common variable that is
> used to join the data frames.
> My guess is that all_trade_sample$symbol has equivalents to the
> variables in token_close_sample.
> 
> You need to pivot one of the tables, and then full join them.
> Please look at the join functions. In base R it is "merge()" and in
> dyply it is full_join(), left_join() and similar.
> 
> I will pivot all_trade_sample to make all of the elements in "symbol"
> into variables.
> 
> I will do this in tidyverse. There are some parts of this that I
> really like. However, it can as easily be done using base R.
> Library(tidyr)
> Library(dplyr)
> token_close_long <- token_close_sample %>%
> ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> "close_price")
> #I rename time in token_close_long so that it will be preserved
> colnames(token_close_long) <- c("time_close", "symbol",
> "close_price")
> combined <- full_join(all_trade_sample,token_close_long, by="symbol")
> 
> This generates errors. This is ok, but I need to know more about
> all_trade_sample. Each symbol appears multiple times in
> all_trade_sample. Each instance of "AAVEUSIX" has a different time
> stamp. So maybe filter to eliminate all but the first (earliest)
> time?
> 
> The program looks something like this:
> token_close_long <- token_close_sample %>%
> ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> "close_price")
> 
> #I will rename time in token_close_long so that it will be preserved
> colnames(token_close_long) <- c("time_close", "symbol",
> "close_price")
> combined <- full_join(all_trade_sample,token_close_long, by="symbol")
> 
> filtered_trades <- all_trade_sample |>
> ? group_by(symbol) |>
> ? slice_min(time, n = 1)|>
> ? ungroup()
> 
> combined <- full_join(filtered_trades,token_close_long, by="symbol")
> 
> I did not do something right, as there are four closing prices for
> each symbol. However, the general approach should work even if it
> needs a little modification to give the correct result. Your closing
> price is only relevant based on some other price (probably buying
> price, but could be opening price).
> 
> Tim

Thank you Tim for your answer. I will have a close look at it later
today. But in short:
- I will do some work on my data later in the script. The tibble I want
is far from being the result.
- Time of closing price is everyday the same: 18:59:59. I will compute
returns, volatility, correlations etc so I need a common reference.
Prices for the trades change and are given by the exchange. I don't
need them, won't do anything.
- Yes, symbols may be the common variable. 
- I feel comfortable with tibbles and tidyverse
- All_trade_sample has the goal to fetch price (price of asset when the
trade is done) and executed_qty. btc_price is needed at one point of my
calculation, but will not be shown in the very final table.
- Multiple lines for one only symbol means I made multiple trades of
this asset during the same day.

I will test your suggestions.
Thank you again.


> 
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> Gaboury
> Sent: Wednesday, April 2, 2025 6:20 AM
> To: r-help at r-project.org
> Subject: [R] join/merge two data frames
> 
> [External Email]
> 
> I work on a trading journal for a portfolio of crypto currencies. The
> goal is to fetch from my account (binance exchange) the trades I have
> done and daily closing prices of my assets.
> The first part (getting the data from exchange) are in two parts.
> 
> 1- get the daily closing prices of my assets. Here is a sample of my
> data frame:
> token_close_sample <- structure(list(time =
> structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC
> = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC = c(4.7252,
> 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256),
> AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC = c(4034.74,
> 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222,
> 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl",
> "data.frame"))
> 
> the tibble looks like this:
> time??????????????? BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC FTMUSDC
> <dttm>??????????????? <dbl>?? <dbl>?? <dbl>??? <dbl>?? <dbl>?? <dbl>
> 1 2024-12-16 18:59:59 107112.??? 4.73??? 1.19???? 388??? 4035.???
> 1.38
> 2 2024-12-17 18:59:59 107517.??? 4.69??? 1.14???? 366.?? 3975.???
> 1.36
> 3 2024-12-18 18:59:59 104630.??? 4.70??? 1.09???? 373.?? 3879.???
> 1.22
> 4 2024-12-19 18:59:59? 98692.??? 4.24??? 1.03???? 317.?? 3475.???
> 1.04
> 
> 2- get my trades. Here is a sample:
> all_trade_sample <- structure(list(time = structure(c(1737335082.949,
> 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422,
> 1738169351.788 ), tzone = "UTC", class = c("POSIXct", "POSIXt")),
> symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC", "AAVEUSDC",
> "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -0.393, -
> 0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038, 294.738321,
> 294.738321, 0.03027), cummulative_quote_qty = c(262699.317950113, -
> 263696.723173419, 263987.20719179, -115.83216, -115.83216,
> 111456.491386979
> ), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117 ),
> class = "Date")), row.names = c(NA, -6L), class = c("tbl_df", "tbl",
> "data.frame"))
> 
> the tibble looks like this:
> time??????????????? symbol?? executed_qty????? price
> cummulative_quote_qty day
> <dttm>????????????? <chr>?????????? <dbl>????? <dbl>
> <dbl> <date>
> 1 2025-01-20 01:04:42 AAVEUSDC????? 867.????? 0.00300
> 262699. 2025-01-20
> 2 2025-01-20 01:32:15 AAVEUSDC???? -835.????? 0.00313?????????????? -
> 263697. 2025-01-20
> 3 2025-01-28 10:19:10 SUIUSDC???? 67649.????? 0.000038
> 263987. 2025-01-28
> 4 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> -116. 2025-01-29
> 5 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> -116. 2025-01-29
> 6 2025-01-29 16:49:11 ETHUSDC??????? 36.1???? 0.0303
> 111456. 2025-01-29
> 
> Now, to finalize, I want to get all the info in one data frame so I
> can compute daily valuation (with potential trades, or in/out of
> asset).
> The finalized tibble should look something like this:
> result <- structure(list(time = structure(c(1734371999.999,
> 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949,
> 1737336735.697, 1738059550.671, 1734721199, 1734807599, 1734893999,
> 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
> 1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
> 1735498799), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC =
> c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_,
> 102000, 101500, 101700,100300,100400,102300,102300,103100, NA_real_,
> 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC = c(4.7252,
> 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7, 4.65,
> 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_, NA_real_,NA_real_,
> 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_,
> NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158, 1.142,
> NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC =
> c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000, 101500,
> 101700,100300,100400,102300,102300,103100, NA_real_, 99800, NA_real_,
> NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39, 3879.06,
> 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355, 3374,
> 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), FTMUSDC =
> c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368,
> 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_,
> NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_,
> NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_, NA_real_,
> NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200, 350,
> NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_, 2, 3,
> NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_,
> NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA, -
> 20L), class = c("tbl_df", "tbl", "data.frame"))
> 
> The idea is to have:
> - one line each day with closing price of my portfolio assets at
> 18:59:59
> - one line for each trade where I shall write 'asset', 'price' and
> 'executed_qty'.
> 
> I spent quite some time trying to figure out how to do it, but
> couldn't. I don't even know if it is possible. Of course, I don't
> want to add anything (price, date, asset...) by hand.
> Thank you for any help.
> 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250402/3a1d0d24/attachment.sig>

From @vi@e@gross m@iii@g oii gm@ii@com  Wed Apr  2 21:41:55 2025
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Wed, 2 Apr 2025 15:41:55 -0400
Subject: [R] join/merge two data frames
In-Reply-To: <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
 <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
 <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>
Message-ID: <00bb01dba407$4a706d90$df5148b0$@gmail.com>

Arnaud,

I won't comment on other aspects but want to ask how sure you are that your data is guaranteed to have a single row reflecting a closing price at 18:59:59 exactly?

It may be true for your data source. I note that markets technically close at 4:00 PM, New York time, but many have after-hours trading, and there are days it closes early (such as 1 PM) and times when trading is halted.

Generally, you can get closing prices (or other data) from other reliable sources and you could choose to merge data from such a source in rather than calculating them from your data. If you do want to use your data, one suggestion is to use the LAST record in each grouping for a day. I find that easy to do in dplyr by having a column containing the date info except for the time, and another containing the time in a sortable format. You can then sort the data.frame by the date and then time and then  group your data.frame  by the date and  and select only last record in each group and you have the last time, whatever that may be.

Again, this may not apply in your case. As you note, you are planning on doing many things, one step at a time, and early stages can set up your data.frames in ways that make later stages easier to do. As one example, you could create a column in early stages that marks if the current row is a closing row or not.

-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud Gaboury
Sent: Wednesday, April 2, 2025 2:10 PM
To: Ebert,Timothy Aaron <tebert at ufl.edu>; r-help at r-project.org
Subject: Re: [R] join/merge two data frames



On Wed, 2025-04-02 at 16:55 +0000, Ebert,Timothy Aaron wrote:
> Your result data frame example makes no sense to me. The price and
> executed_qty are the same for all symbols?
> 
> To get it all into one data frame you need a common variable that is
> used to join the data frames.
> My guess is that all_trade_sample$symbol has equivalents to the
> variables in token_close_sample.
> 
> You need to pivot one of the tables, and then full join them.
> Please look at the join functions. In base R it is "merge()" and in
> dyply it is full_join(), left_join() and similar.
> 
> I will pivot all_trade_sample to make all of the elements in "symbol"
> into variables.
> 
> I will do this in tidyverse. There are some parts of this that I
> really like. However, it can as easily be done using base R.
> Library(tidyr)
> Library(dplyr)
> token_close_long <- token_close_sample %>%
>   pivot_longer(cols = -time, names_to = "symbol", values_to =
> "close_price")
> #I rename time in token_close_long so that it will be preserved
> colnames(token_close_long) <- c("time_close", "symbol",
> "close_price")
> combined <- full_join(all_trade_sample,token_close_long, by="symbol")
> 
> This generates errors. This is ok, but I need to know more about
> all_trade_sample. Each symbol appears multiple times in
> all_trade_sample. Each instance of "AAVEUSIX" has a different time
> stamp. So maybe filter to eliminate all but the first (earliest)
> time?
> 
> The program looks something like this:
> token_close_long <- token_close_sample %>%
>   pivot_longer(cols = -time, names_to = "symbol", values_to =
> "close_price")
> 
> #I will rename time in token_close_long so that it will be preserved
> colnames(token_close_long) <- c("time_close", "symbol",
> "close_price")
> combined <- full_join(all_trade_sample,token_close_long, by="symbol")
> 
> filtered_trades <- all_trade_sample |>
>   group_by(symbol) |>
>   slice_min(time, n = 1)|>
>   ungroup()
> 
> combined <- full_join(filtered_trades,token_close_long, by="symbol")
> 
> I did not do something right, as there are four closing prices for
> each symbol. However, the general approach should work even if it
> needs a little modification to give the correct result. Your closing
> price is only relevant based on some other price (probably buying
> price, but could be opening price).
> 
> Tim

Thank you Tim for your answer. I will have a close look at it later
today. But in short:
- I will do some work on my data later in the script. The tibble I want
is far from being the result.
- Time of closing price is everyday the same: 18:59:59. I will compute
returns, volatility, correlations etc so I need a common reference.
Prices for the trades change and are given by the exchange. I don't
need them, won't do anything.
- Yes, symbols may be the common variable. 
- I feel comfortable with tibbles and tidyverse
- All_trade_sample has the goal to fetch price (price of asset when the
trade is done) and executed_qty. btc_price is needed at one point of my
calculation, but will not be shown in the very final table.
- Multiple lines for one only symbol means I made multiple trades of
this asset during the same day.

I will test your suggestions.
Thank you again.


> 
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> Gaboury
> Sent: Wednesday, April 2, 2025 6:20 AM
> To: r-help at r-project.org
> Subject: [R] join/merge two data frames
> 
> [External Email]
> 
> I work on a trading journal for a portfolio of crypto currencies. The
> goal is to fetch from my account (binance exchange) the trades I have
> done and daily closing prices of my assets.
> The first part (getting the data from exchange) are in two parts.
> 
> 1- get the daily closing prices of my assets. Here is a sample of my
> data frame:
> token_close_sample <- structure(list(time =
> structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC
> = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC = c(4.7252,
> 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256),
> AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC = c(4034.74,
> 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222,
> 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl",
> "data.frame"))
> 
> the tibble looks like this:
> time                BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC FTMUSDC
> <dttm>                <dbl>   <dbl>   <dbl>    <dbl>   <dbl>   <dbl>
> 1 2024-12-16 18:59:59 107112.    4.73    1.19     388    4035.   
> 1.38
> 2 2024-12-17 18:59:59 107517.    4.69    1.14     366.   3975.   
> 1.36
> 3 2024-12-18 18:59:59 104630.    4.70    1.09     373.   3879.   
> 1.22
> 4 2024-12-19 18:59:59  98692.    4.24    1.03     317.   3475.   
> 1.04
> 
> 2- get my trades. Here is a sample:
> all_trade_sample <- structure(list(time = structure(c(1737335082.949,
> 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422,
> 1738169351.788 ), tzone = "UTC", class = c("POSIXct", "POSIXt")),
> symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC", "AAVEUSDC",
> "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -0.393, -
> 0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038, 294.738321,
> 294.738321, 0.03027), cummulative_quote_qty = c(262699.317950113, -
> 263696.723173419, 263987.20719179, -115.83216, -115.83216,
> 111456.491386979
> ), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117 ),
> class = "Date")), row.names = c(NA, -6L), class = c("tbl_df", "tbl",
> "data.frame"))
> 
> the tibble looks like this:
> time                symbol   executed_qty      price
> cummulative_quote_qty day
> <dttm>              <chr>           <dbl>      <dbl>
> <dbl> <date>
> 1 2025-01-20 01:04:42 AAVEUSDC      867.      0.00300
> 262699. 2025-01-20
> 2 2025-01-20 01:32:15 AAVEUSDC     -835.      0.00313               -
> 263697. 2025-01-20
> 3 2025-01-28 10:19:10 SUIUSDC     67649.      0.000038
> 263987. 2025-01-28
> 4 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.
> -116. 2025-01-29
> 5 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.
> -116. 2025-01-29
> 6 2025-01-29 16:49:11 ETHUSDC        36.1     0.0303
> 111456. 2025-01-29
> 
> Now, to finalize, I want to get all the info in one data frame so I
> can compute daily valuation (with potential trades, or in/out of
> asset).
> The finalized tibble should look something like this:
> result <- structure(list(time = structure(c(1734371999.999,
> 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949,
> 1737336735.697, 1738059550.671, 1734721199, 1734807599, 1734893999,
> 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
> 1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
> 1735498799), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC =
> c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_,
> 102000, 101500, 101700,100300,100400,102300,102300,103100, NA_real_,
> 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC = c(4.7252,
> 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7, 4.65,
> 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_, NA_real_,NA_real_,
> 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_,
> NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158, 1.142,
> NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC =
> c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000, 101500,
> 101700,100300,100400,102300,102300,103100, NA_real_, 99800, NA_real_,
> NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39, 3879.06,
> 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355, 3374,
> 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), FTMUSDC =
> c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368,
> 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_,
> NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_,
> NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_, NA_real_,
> NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200, 350,
> NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_, 2, 3,
> NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_,
> NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA, -
> 20L), class = c("tbl_df", "tbl", "data.frame"))
> 
> The idea is to have:
> - one line each day with closing price of my portfolio assets at
> 18:59:59
> - one line for each trade where I shall write 'asset', 'price' and
> 'executed_qty'.
> 
> I spent quite some time trying to figure out how to do it, but
> couldn't. I don't even know if it is possible. Of course, I don't
> want to add anything (price, date, asset...) by hand.
> Thank you for any help.
> 


From @rn@ud@g@boury @end|ng |rom gm@||@com  Wed Apr  2 22:30:22 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Wed, 02 Apr 2025 22:30:22 +0200
Subject: [R] join/merge two data frames
In-Reply-To: <00bb01dba407$4a706d90$df5148b0$@gmail.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
 <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
 <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>
 <00bb01dba407$4a706d90$df5148b0$@gmail.com>
Message-ID: <bb38d2d8edab7959555d1da059d56fa8ee2fb8c5.camel@gmail.com>

On Wed, 2025-04-02 at 15:41 -0400, avi.e.gross at gmail.com wrote:
> Arnaud,
> 
> I won't comment on other aspects but want to ask how sure you are
> that your data is guaranteed to have a single row reflecting a
> closing price at 18:59:59 exactly?
> 
> It may be true for your data source. I note that markets technically
> close at 4:00 PM, New York time, but many have after-hours trading,
> and there are days it closes early (such as 1 PM) and times when
> trading is halted.
> 
> Generally, you can get closing prices (or other data) from other
> reliable sources and you could choose to merge data from such a
> source in rather than calculating them from your data. If you do want
> to use your data, one suggestion is to use the LAST record in each
> grouping for a day. I find that easy to do in dplyr by having a
> column containing the date info except for the time, and another
> containing the time in a sortable format. You can then sort the
> data.frame by the date and then time and then? group your data.frame?
> by the date and? and select only last record in each group and you
> have the last time, whatever that may be.
> 
> Again, this may not apply in your case. As you note, you are planning
> on doing many things, one step at a time, and early stages can set up
> your data.frames in ways that make later stages easier to do. As one
> example, you could create a column in early stages that marks if the
> current row is a closing row or not.

I work on the crypto currency market which in fact never close, even on
weekends and Xmas. So each exchange fix its own closing time and there
is NO official price. I decided to fix it at 19:00 UTC. I don't compute
the closing price but fetch it from Binance exchange with the Binancer
package[1].
Here is the command to get BTCUSDT (Bitcoin against USD) on 2024-12-16:

klines <- binance_klines('BTCUSDT', interval = '6h', start_time =
as.POSIXct("2024-12-17", tz = 'UTC'), end_time = as.POSIXct("2024-12-
17", tz = 'UTC'))

Result is:

klines <- structure(list(open_time = structure(c(1734307200,
1734328800, 
1734350400, 1734372000, 1734393600), class = c("POSIXct", "POSIXt"
), tzone = ""), open = c(104463.99, 105028.01, 103758, 107078.55, 
106058.65), high = c(106648, 105420.76, 107195.58, 107793.07, 
107000), low = c(104259.48, 103625.78, 103333, 105480.02, 105657.34
), close = c(105028, 103757.99, 107078.55, 106058.66, 106817.43
), volume = c(10236.165136, 5623.21583, 14589.713338, 10853.308436, 
4992.89346), close_time = structure(c(1734328799.999, 1734350399.999, 
1734371999.999, 1734393599.999, 1734415199.999), class = c("POSIXct", 
"POSIXt"), tzone = ""), quote_asset_volume = c(1077588575.22963, 
588656892.646352, 1542338025.25396, 1156380907.50461, 531077258.225013
), trades = c(1914225L, 1110218L, 3148766L, 1874845L, 1208364L
), taker_buy_base_asset_volume = c(5181.465886, 2387.39941,
7576.364568, 
5203.869636, 2543.63848), taker_buy_quote_asset_volume =
c(545582484.666663, 
250042657.490346, 800715095.504901, 554210661.585612, 270539317.70439
), symbol = c("BTCUSDT", "BTCUSDT", "BTCUSDT", "BTCUSDT", "BTCUSDT"
)), row.names = c(NA, -5L), class = c("data.table", "data.frame"
), .internal.selfref = <pointer: 0x60ac8ea98850>)


[1]https://cran.r-project.org/web/packages/binancer/binancer.pdf
> 
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> Gaboury
> Sent: Wednesday, April 2, 2025 2:10 PM
> To: Ebert,Timothy Aaron <tebert at ufl.edu>; r-help at r-project.org
> Subject: Re: [R] join/merge two data frames
> 
> 
> 
> On Wed, 2025-04-02 at 16:55 +0000, Ebert,Timothy Aaron wrote:
> > Your result data frame example makes no sense to me. The price and
> > executed_qty are the same for all symbols?
> > 
> > To get it all into one data frame you need a common variable that
> > is
> > used to join the data frames.
> > My guess is that all_trade_sample$symbol has equivalents to the
> > variables in token_close_sample.
> > 
> > You need to pivot one of the tables, and then full join them.
> > Please look at the join functions. In base R it is "merge()" and in
> > dyply it is full_join(), left_join() and similar.
> > 
> > I will pivot all_trade_sample to make all of the elements in
> > "symbol"
> > into variables.
> > 
> > I will do this in tidyverse. There are some parts of this that I
> > really like. However, it can as easily be done using base R.
> > Library(tidyr)
> > Library(dplyr)
> > token_close_long <- token_close_sample %>%
> > ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> > "close_price")
> > #I rename time in token_close_long so that it will be preserved
> > colnames(token_close_long) <- c("time_close", "symbol",
> > "close_price")
> > combined <- full_join(all_trade_sample,token_close_long,
> > by="symbol")
> > 
> > This generates errors. This is ok, but I need to know more about
> > all_trade_sample. Each symbol appears multiple times in
> > all_trade_sample. Each instance of "AAVEUSIX" has a different time
> > stamp. So maybe filter to eliminate all but the first (earliest)
> > time?
> > 
> > The program looks something like this:
> > token_close_long <- token_close_sample %>%
> > ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> > "close_price")
> > 
> > #I will rename time in token_close_long so that it will be
> > preserved
> > colnames(token_close_long) <- c("time_close", "symbol",
> > "close_price")
> > combined <- full_join(all_trade_sample,token_close_long,
> > by="symbol")
> > 
> > filtered_trades <- all_trade_sample |>
> > ? group_by(symbol) |>
> > ? slice_min(time, n = 1)|>
> > ? ungroup()
> > 
> > combined <- full_join(filtered_trades,token_close_long,
> > by="symbol")
> > 
> > I did not do something right, as there are four closing prices for
> > each symbol. However, the general approach should work even if it
> > needs a little modification to give the correct result. Your
> > closing
> > price is only relevant based on some other price (probably buying
> > price, but could be opening price).
> > 
> > Tim
> 
> Thank you Tim for your answer. I will have a close look at it later
> today. But in short:
> - I will do some work on my data later in the script. The tibble I
> want
> is far from being the result.
> - Time of closing price is everyday the same: 18:59:59. I will
> compute
> returns, volatility, correlations etc so I need a common reference.
> Prices for the trades change and are given by the exchange. I don't
> need them, won't do anything.
> - Yes, symbols may be the common variable. 
> - I feel comfortable with tibbles and tidyverse
> - All_trade_sample has the goal to fetch price (price of asset when
> the
> trade is done) and executed_qty. btc_price is needed at one point of
> my
> calculation, but will not be shown in the very final table.
> - Multiple lines for one only symbol means I made multiple trades of
> this asset during the same day.
> 
> I will test your suggestions.
> Thank you again.
> 
> 
> > 
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> > Gaboury
> > Sent: Wednesday, April 2, 2025 6:20 AM
> > To: r-help at r-project.org
> > Subject: [R] join/merge two data frames
> > 
> > [External Email]
> > 
> > I work on a trading journal for a portfolio of crypto currencies.
> > The
> > goal is to fetch from my account (binance exchange) the trades I
> > have
> > done and daily closing prices of my assets.
> > The first part (getting the data from exchange) are in two parts.
> > 
> > 1- get the daily closing prices of my assets. Here is a sample of
> > my
> > data frame:
> > token_close_sample <- structure(list(time =
> > structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> > 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")),
> > BTCUSDC
> > = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC =
> > c(4.7252,
> > 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928,
> > 1.0256),
> > AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC = c(4034.74,
> > 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222,
> > 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl",
> > "data.frame"))
> > 
> > the tibble looks like this:
> > time??????????????? BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC
> > FTMUSDC
> > <dttm>??????????????? <dbl>?? <dbl>?? <dbl>??? <dbl>?? <dbl>??
> > <dbl>
> > 1 2024-12-16 18:59:59 107112.??? 4.73??? 1.19???? 388??? 4035.?? 
> > 1.38
> > 2 2024-12-17 18:59:59 107517.??? 4.69??? 1.14???? 366.?? 3975.?? 
> > 1.36
> > 3 2024-12-18 18:59:59 104630.??? 4.70??? 1.09???? 373.?? 3879.?? 
> > 1.22
> > 4 2024-12-19 18:59:59? 98692.??? 4.24??? 1.03???? 317.?? 3475.?? 
> > 1.04
> > 
> > 2- get my trades. Here is a sample:
> > all_trade_sample <- structure(list(time =
> > structure(c(1737335082.949,
> > 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422,
> > 1738169351.788 ), tzone = "UTC", class = c("POSIXct", "POSIXt")),
> > symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC",
> > "AAVEUSDC",
> > "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -0.393, -
> > 0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038,
> > 294.738321,
> > 294.738321, 0.03027), cummulative_quote_qty = c(262699.317950113, -
> > 263696.723173419, 263987.20719179, -115.83216, -115.83216,
> > 111456.491386979
> > ), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117 ),
> > class = "Date")), row.names = c(NA, -6L), class = c("tbl_df",
> > "tbl",
> > "data.frame"))
> > 
> > the tibble looks like this:
> > time??????????????? symbol?? executed_qty????? price
> > cummulative_quote_qty day
> > <dttm>????????????? <chr>?????????? <dbl>????? <dbl>
> > <dbl> <date>
> > 1 2025-01-20 01:04:42 AAVEUSDC????? 867.????? 0.00300
> > 262699. 2025-01-20
> > 2 2025-01-20 01:32:15 AAVEUSDC???? -835.????? 0.00313??????????????
> > -
> > 263697. 2025-01-20
> > 3 2025-01-28 10:19:10 SUIUSDC???? 67649.????? 0.000038
> > 263987. 2025-01-28
> > 4 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> > -116. 2025-01-29
> > 5 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> > -116. 2025-01-29
> > 6 2025-01-29 16:49:11 ETHUSDC??????? 36.1???? 0.0303
> > 111456. 2025-01-29
> > 
> > Now, to finalize, I want to get all the info in one data frame so I
> > can compute daily valuation (with potential trades, or in/out of
> > asset).
> > The finalized tibble should look something like this:
> > result <- structure(list(time = structure(c(1734371999.999,
> > 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949,
> > 1737336735.697, 1738059550.671, 1734721199, 1734807599, 1734893999,
> > 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
> > 1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
> > 1735498799), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC =
> > c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_,
> > 102000, 101500, 101700,100300,100400,102300,102300,103100,
> > NA_real_,
> > 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC = c(4.7252,
> > 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7, 4.65,
> > 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_,
> > NA_real_,NA_real_,
> > 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_,
> > NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158, 1.142,
> > NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC =
> > c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000, 101500,
> > 101700,100300,100400,102300,102300,103100, NA_real_, 99800,
> > NA_real_,
> > NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39, 3879.06,
> > 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355,
> > 3374,
> > 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), FTMUSDC =
> > c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368,
> > 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_,
> > NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_,
> > NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_,
> > NA_real_,
> > NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200,
> > 350,
> > NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_, 2, 3,
> > NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_,
> > NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA, -
> > 20L), class = c("tbl_df", "tbl", "data.frame"))
> > 
> > The idea is to have:
> > - one line each day with closing price of my portfolio assets at
> > 18:59:59
> > - one line for each trade where I shall write 'asset', 'price' and
> > 'executed_qty'.
> > 
> > I spent quite some time trying to figure out how to do it, but
> > couldn't. I don't even know if it is possible. Of course, I don't
> > want to add anything (price, date, asset...) by hand.
> > Thank you for any help.
> > 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250402/1c8210fd/attachment.sig>

From @rn@ud@g@boury @end|ng |rom gm@||@com  Thu Apr  3 01:38:59 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Thu, 03 Apr 2025 01:38:59 +0200
Subject: [R] join/merge two data frames
In-Reply-To: <00bb01dba407$4a706d90$df5148b0$@gmail.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
 <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
 <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>
 <00bb01dba407$4a706d90$df5148b0$@gmail.com>
Message-ID: <a26ad30dc71bc759b97d4873852a44e7b55c862f.camel@gmail.com>

I will try to be more precised. Here is the very final table I want:
portfolio_valuation <- structure(list(time = structure(c(1735153199,
1735239599), tzone = "", class = c("POSIXct", "POSIXt")),
BTCUSDC = c(107000, 106000), SUIUSDC = c(4.7, 4.5), USDT = c(0,
320000), BTCUSDC_qty = c(5, 2), SUIUSDC_qty = c(200, 250),
valuation = c(535940, 533125), return = c(NA_real_, -0.525)), row.names
= c(NA, -2L), class = c("tbl_df", "tbl", "data.frame"))

 portfolio_valuation
# A tibble: 2 ? 8
  time                BTCUSDC SUIUSDC   USDT BTCUSDC_qty SUIUSDC_qty
valuation return
  <dttm>                <dbl>   <dbl>  <dbl>       <dbl>       <dbl>  
<dbl>  <dbl>
1 2024-12-25 18:59:59  107000     4.7      0           5         200  
535940 NA    
2 2024-12-26 18:59:59  106000     4.5 320000           2         250  
533125 -0.525

As you can see, I will keep only a few things. I want one line per day,
@ 18:59:59. The line will show:
- the token I have in my portfolio (can be zero)?
- which quantity
- their closing price for the day
- valuation (sum of token_qty x token_price + USDT). Note: USDT is
numeric dollar (cash). 
- return: (diff ptf val day 1 - diff ptf val day 0)/ptf val day 0

The two tibbles I start with are:
- token_close_sample: daily closing price for each token. The token
list is > the token in my portfolio. I will fetch a regularly refreshed
list of token I usually trade. USDT value is 1
- all_trade_sample: a tibble with all my trades. One trade per line
with its timestamp, and some trade info (price, quantity etc).

I hope this details will help to clarify. 

On Wed, 2025-04-02 at 15:41 -0400, avi.e.gross at gmail.com wrote:
> Arnaud,
> 
> I won't comment on other aspects but want to ask how sure you are
> that your data is guaranteed to have a single row reflecting a
> closing price at 18:59:59 exactly?
> 
> It may be true for your data source. I note that markets technically
> close at 4:00 PM, New York time, but many have after-hours trading,
> and there are days it closes early (such as 1 PM) and times when
> trading is halted.
> 
> Generally, you can get closing prices (or other data) from other
> reliable sources and you could choose to merge data from such a
> source in rather than calculating them from your data. If you do want
> to use your data, one suggestion is to use the LAST record in each
> grouping for a day. I find that easy to do in dplyr by having a
> column containing the date info except for the time, and another
> containing the time in a sortable format. You can then sort the
> data.frame by the date and then time and then? group your data.frame?
> by the date and? and select only last record in each group and you
> have the last time, whatever that may be.
> 
> Again, this may not apply in your case. As you note, you are planning
> on doing many things, one step at a time, and early stages can set up
> your data.frames in ways that make later stages easier to do. As one
> example, you could create a column in early stages that marks if the
> current row is a closing row or not.
> 
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> Gaboury
> Sent: Wednesday, April 2, 2025 2:10 PM
> To: Ebert,Timothy Aaron <tebert at ufl.edu>; r-help at r-project.org
> Subject: Re: [R] join/merge two data frames
> 
> 
> 
> On Wed, 2025-04-02 at 16:55 +0000, Ebert,Timothy Aaron wrote:
> > Your result data frame example makes no sense to me. The price and
> > executed_qty are the same for all symbols?
> > 
> > To get it all into one data frame you need a common variable that
> > is
> > used to join the data frames.
> > My guess is that all_trade_sample$symbol has equivalents to the
> > variables in token_close_sample.
> > 
> > You need to pivot one of the tables, and then full join them.
> > Please look at the join functions. In base R it is "merge()" and in
> > dyply it is full_join(), left_join() and similar.
> > 
> > I will pivot all_trade_sample to make all of the elements in
> > "symbol"
> > into variables.
> > 
> > I will do this in tidyverse. There are some parts of this that I
> > really like. However, it can as easily be done using base R.
> > Library(tidyr)
> > Library(dplyr)
> > token_close_long <- token_close_sample %>%
> > ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> > "close_price")
> > #I rename time in token_close_long so that it will be preserved
> > colnames(token_close_long) <- c("time_close", "symbol",
> > "close_price")
> > combined <- full_join(all_trade_sample,token_close_long,
> > by="symbol")
> > 
> > This generates errors. This is ok, but I need to know more about
> > all_trade_sample. Each symbol appears multiple times in
> > all_trade_sample. Each instance of "AAVEUSIX" has a different time
> > stamp. So maybe filter to eliminate all but the first (earliest)
> > time?
> > 
> > The program looks something like this:
> > token_close_long <- token_close_sample %>%
> > ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> > "close_price")
> > 
> > #I will rename time in token_close_long so that it will be
> > preserved
> > colnames(token_close_long) <- c("time_close", "symbol",
> > "close_price")
> > combined <- full_join(all_trade_sample,token_close_long,
> > by="symbol")
> > 
> > filtered_trades <- all_trade_sample |>
> > ? group_by(symbol) |>
> > ? slice_min(time, n = 1)|>
> > ? ungroup()
> > 
> > combined <- full_join(filtered_trades,token_close_long,
> > by="symbol")
> > 
> > I did not do something right, as there are four closing prices for
> > each symbol. However, the general approach should work even if it
> > needs a little modification to give the correct result. Your
> > closing
> > price is only relevant based on some other price (probably buying
> > price, but could be opening price).
> > 
> > Tim
> 
> Thank you Tim for your answer. I will have a close look at it later
> today. But in short:
> - I will do some work on my data later in the script. The tibble I
> want
> is far from being the result.
> - Time of closing price is everyday the same: 18:59:59. I will
> compute
> returns, volatility, correlations etc so I need a common reference.
> Prices for the trades change and are given by the exchange. I don't
> need them, won't do anything.
> - Yes, symbols may be the common variable. 
> - I feel comfortable with tibbles and tidyverse
> - All_trade_sample has the goal to fetch price (price of asset when
> the
> trade is done) and executed_qty. btc_price is needed at one point of
> my
> calculation, but will not be shown in the very final table.
> - Multiple lines for one only symbol means I made multiple trades of
> this asset during the same day.
> 
> I will test your suggestions.
> Thank you again.
> 
> 
> > 
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> > Gaboury
> > Sent: Wednesday, April 2, 2025 6:20 AM
> > To: r-help at r-project.org
> > Subject: [R] join/merge two data frames
> > 
> > [External Email]
> > 
> > I work on a trading journal for a portfolio of crypto currencies.
> > The
> > goal is to fetch from my account (binance exchange) the trades I
> > have
> > done and daily closing prices of my assets.
> > The first part (getting the data from exchange) are in two parts.
> > 
> > 1- get the daily closing prices of my assets. Here is a sample of
> > my
> > data frame:
> > token_close_sample <- structure(list(time =
> > structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> > 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")),
> > BTCUSDC
> > = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC =
> > c(4.7252,
> > 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928,
> > 1.0256),
> > AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC = c(4034.74,
> > 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222,
> > 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl",
> > "data.frame"))
> > 
> > the tibble looks like this:
> > time??????????????? BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC
> > FTMUSDC
> > <dttm>??????????????? <dbl>?? <dbl>?? <dbl>??? <dbl>?? <dbl>??
> > <dbl>
> > 1 2024-12-16 18:59:59 107112.??? 4.73??? 1.19???? 388??? 4035.?? 
> > 1.38
> > 2 2024-12-17 18:59:59 107517.??? 4.69??? 1.14???? 366.?? 3975.?? 
> > 1.36
> > 3 2024-12-18 18:59:59 104630.??? 4.70??? 1.09???? 373.?? 3879.?? 
> > 1.22
> > 4 2024-12-19 18:59:59? 98692.??? 4.24??? 1.03???? 317.?? 3475.?? 
> > 1.04
> > 
> > 2- get my trades. Here is a sample:
> > all_trade_sample <- structure(list(time =
> > structure(c(1737335082.949,
> > 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422,
> > 1738169351.788 ), tzone = "UTC", class = c("POSIXct", "POSIXt")),
> > symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC",
> > "AAVEUSDC",
> > "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -0.393, -
> > 0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038,
> > 294.738321,
> > 294.738321, 0.03027), cummulative_quote_qty = c(262699.317950113, -
> > 263696.723173419, 263987.20719179, -115.83216, -115.83216,
> > 111456.491386979
> > ), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117 ),
> > class = "Date")), row.names = c(NA, -6L), class = c("tbl_df",
> > "tbl",
> > "data.frame"))
> > 
> > the tibble looks like this:
> > time??????????????? symbol?? executed_qty????? price
> > cummulative_quote_qty day
> > <dttm>????????????? <chr>?????????? <dbl>????? <dbl>
> > <dbl> <date>
> > 1 2025-01-20 01:04:42 AAVEUSDC????? 867.????? 0.00300
> > 262699. 2025-01-20
> > 2 2025-01-20 01:32:15 AAVEUSDC???? -835.????? 0.00313??????????????
> > -
> > 263697. 2025-01-20
> > 3 2025-01-28 10:19:10 SUIUSDC???? 67649.????? 0.000038
> > 263987. 2025-01-28
> > 4 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> > -116. 2025-01-29
> > 5 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> > -116. 2025-01-29
> > 6 2025-01-29 16:49:11 ETHUSDC??????? 36.1???? 0.0303
> > 111456. 2025-01-29
> > 
> > Now, to finalize, I want to get all the info in one data frame so I
> > can compute daily valuation (with potential trades, or in/out of
> > asset).
> > The finalized tibble should look something like this:
> > result <- structure(list(time = structure(c(1734371999.999,
> > 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949,
> > 1737336735.697, 1738059550.671, 1734721199, 1734807599, 1734893999,
> > 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
> > 1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
> > 1735498799), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC =
> > c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_,
> > 102000, 101500, 101700,100300,100400,102300,102300,103100,
> > NA_real_,
> > 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC = c(4.7252,
> > 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7, 4.65,
> > 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_,
> > NA_real_,NA_real_,
> > 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_,
> > NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158, 1.142,
> > NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC =
> > c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000, 101500,
> > 101700,100300,100400,102300,102300,103100, NA_real_, 99800,
> > NA_real_,
> > NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39, 3879.06,
> > 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355,
> > 3374,
> > 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), FTMUSDC =
> > c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368,
> > 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_,
> > NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_,
> > NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_,
> > NA_real_,
> > NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200,
> > 350,
> > NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_, 2, 3,
> > NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_,
> > NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA, -
> > 20L), class = c("tbl_df", "tbl", "data.frame"))
> > 
> > The idea is to have:
> > - one line each day with closing price of my portfolio assets at
> > 18:59:59
> > - one line for each trade where I shall write 'asset', 'price' and
> > 'executed_qty'.
> > 
> > I spent quite some time trying to figure out how to do it, but
> > couldn't. I don't even know if it is possible. Of course, I don't
> > want to add anything (price, date, asset...) by hand.
> > Thank you for any help.
> > 

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250403/2cc9d7a7/attachment.sig>

From bgunter@4567 @end|ng |rom gm@||@com  Thu Apr  3 02:39:12 2025
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Wed, 2 Apr 2025 17:39:12 -0700
Subject: [R] join/merge two data frames
In-Reply-To: <a26ad30dc71bc759b97d4873852a44e7b55c862f.camel@gmail.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
 <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
 <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>
 <00bb01dba407$4a706d90$df5148b0$@gmail.com>
 <a26ad30dc71bc759b97d4873852a44e7b55c862f.camel@gmail.com>
Message-ID: <CAGxFJbQ2yXrNYAOnvqHWDgYoJJ_uhnhs1KmhN8qq-M1X_0mjVQ@mail.gmail.com>

You might do better posting here:

https://stat.ethz.ch/mailman/listinfo/r-sig-finance

Cheers,
Bert

"An educated person is one who can entertain new ideas, entertain others,
and entertain herself."



On Wed, Apr 2, 2025 at 4:39?PM Arnaud Gaboury <arnaud.gaboury at gmail.com>
wrote:

> I will try to be more precised. Here is the very final table I want:
> portfolio_valuation <- structure(list(time = structure(c(1735153199,
> 1735239599), tzone = "", class = c("POSIXct", "POSIXt")),
> BTCUSDC = c(107000, 106000), SUIUSDC = c(4.7, 4.5), USDT = c(0,
> 320000), BTCUSDC_qty = c(5, 2), SUIUSDC_qty = c(200, 250),
> valuation = c(535940, 533125), return = c(NA_real_, -0.525)), row.names
> = c(NA, -2L), class = c("tbl_df", "tbl", "data.frame"))
>
>  portfolio_valuation
> # A tibble: 2 ? 8
>   time                BTCUSDC SUIUSDC   USDT BTCUSDC_qty SUIUSDC_qty
> valuation return
>   <dttm>                <dbl>   <dbl>  <dbl>       <dbl>       <dbl>
> <dbl>  <dbl>
> 1 2024-12-25 18:59:59  107000     4.7      0           5         200
> 535940 NA
> 2 2024-12-26 18:59:59  106000     4.5 320000           2         250
> 533125 -0.525
>
> As you can see, I will keep only a few things. I want one line per day,
> @ 18:59:59. The line will show:
> - the token I have in my portfolio (can be zero)
> - which quantity
> - their closing price for the day
> - valuation (sum of token_qty x token_price + USDT). Note: USDT is
> numeric dollar (cash).
> - return: (diff ptf val day 1 - diff ptf val day 0)/ptf val day 0
>
> The two tibbles I start with are:
> - token_close_sample: daily closing price for each token. The token
> list is > the token in my portfolio. I will fetch a regularly refreshed
> list of token I usually trade. USDT value is 1
> - all_trade_sample: a tibble with all my trades. One trade per line
> with its timestamp, and some trade info (price, quantity etc).
>
> I hope this details will help to clarify.
>
> On Wed, 2025-04-02 at 15:41 -0400, avi.e.gross at gmail.com wrote:
> > Arnaud,
> >
> > I won't comment on other aspects but want to ask how sure you are
> > that your data is guaranteed to have a single row reflecting a
> > closing price at 18:59:59 exactly?
> >
> > It may be true for your data source. I note that markets technically
> > close at 4:00 PM, New York time, but many have after-hours trading,
> > and there are days it closes early (such as 1 PM) and times when
> > trading is halted.
> >
> > Generally, you can get closing prices (or other data) from other
> > reliable sources and you could choose to merge data from such a
> > source in rather than calculating them from your data. If you do want
> > to use your data, one suggestion is to use the LAST record in each
> > grouping for a day. I find that easy to do in dplyr by having a
> > column containing the date info except for the time, and another
> > containing the time in a sortable format. You can then sort the
> > data.frame by the date and then time and then  group your data.frame
> > by the date and  and select only last record in each group and you
> > have the last time, whatever that may be.
> >
> > Again, this may not apply in your case. As you note, you are planning
> > on doing many things, one step at a time, and early stages can set up
> > your data.frames in ways that make later stages easier to do. As one
> > example, you could create a column in early stages that marks if the
> > current row is a closing row or not.
> >
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> > Gaboury
> > Sent: Wednesday, April 2, 2025 2:10 PM
> > To: Ebert,Timothy Aaron <tebert at ufl.edu>; r-help at r-project.org
> > Subject: Re: [R] join/merge two data frames
> >
> >
> >
> > On Wed, 2025-04-02 at 16:55 +0000, Ebert,Timothy Aaron wrote:
> > > Your result data frame example makes no sense to me. The price and
> > > executed_qty are the same for all symbols?
> > >
> > > To get it all into one data frame you need a common variable that
> > > is
> > > used to join the data frames.
> > > My guess is that all_trade_sample$symbol has equivalents to the
> > > variables in token_close_sample.
> > >
> > > You need to pivot one of the tables, and then full join them.
> > > Please look at the join functions. In base R it is "merge()" and in
> > > dyply it is full_join(), left_join() and similar.
> > >
> > > I will pivot all_trade_sample to make all of the elements in
> > > "symbol"
> > > into variables.
> > >
> > > I will do this in tidyverse. There are some parts of this that I
> > > really like. However, it can as easily be done using base R.
> > > Library(tidyr)
> > > Library(dplyr)
> > > token_close_long <- token_close_sample %>%
> > >   pivot_longer(cols = -time, names_to = "symbol", values_to =
> > > "close_price")
> > > #I rename time in token_close_long so that it will be preserved
> > > colnames(token_close_long) <- c("time_close", "symbol",
> > > "close_price")
> > > combined <- full_join(all_trade_sample,token_close_long,
> > > by="symbol")
> > >
> > > This generates errors. This is ok, but I need to know more about
> > > all_trade_sample. Each symbol appears multiple times in
> > > all_trade_sample. Each instance of "AAVEUSIX" has a different time
> > > stamp. So maybe filter to eliminate all but the first (earliest)
> > > time?
> > >
> > > The program looks something like this:
> > > token_close_long <- token_close_sample %>%
> > >   pivot_longer(cols = -time, names_to = "symbol", values_to =
> > > "close_price")
> > >
> > > #I will rename time in token_close_long so that it will be
> > > preserved
> > > colnames(token_close_long) <- c("time_close", "symbol",
> > > "close_price")
> > > combined <- full_join(all_trade_sample,token_close_long,
> > > by="symbol")
> > >
> > > filtered_trades <- all_trade_sample |>
> > >   group_by(symbol) |>
> > >   slice_min(time, n = 1)|>
> > >   ungroup()
> > >
> > > combined <- full_join(filtered_trades,token_close_long,
> > > by="symbol")
> > >
> > > I did not do something right, as there are four closing prices for
> > > each symbol. However, the general approach should work even if it
> > > needs a little modification to give the correct result. Your
> > > closing
> > > price is only relevant based on some other price (probably buying
> > > price, but could be opening price).
> > >
> > > Tim
> >
> > Thank you Tim for your answer. I will have a close look at it later
> > today. But in short:
> > - I will do some work on my data later in the script. The tibble I
> > want
> > is far from being the result.
> > - Time of closing price is everyday the same: 18:59:59. I will
> > compute
> > returns, volatility, correlations etc so I need a common reference.
> > Prices for the trades change and are given by the exchange. I don't
> > need them, won't do anything.
> > - Yes, symbols may be the common variable.
> > - I feel comfortable with tibbles and tidyverse
> > - All_trade_sample has the goal to fetch price (price of asset when
> > the
> > trade is done) and executed_qty. btc_price is needed at one point of
> > my
> > calculation, but will not be shown in the very final table.
> > - Multiple lines for one only symbol means I made multiple trades of
> > this asset during the same day.
> >
> > I will test your suggestions.
> > Thank you again.
> >
> >
> > >
> > > -----Original Message-----
> > > From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> > > Gaboury
> > > Sent: Wednesday, April 2, 2025 6:20 AM
> > > To: r-help at r-project.org
> > > Subject: [R] join/merge two data frames
> > >
> > > [External Email]
> > >
> > > I work on a trading journal for a portfolio of crypto currencies.
> > > The
> > > goal is to fetch from my account (binance exchange) the trades I
> > > have
> > > done and daily closing prices of my assets.
> > > The first part (getting the data from exchange) are in two parts.
> > >
> > > 1- get the daily closing prices of my assets. Here is a sample of
> > > my
> > > data frame:
> > > token_close_sample <- structure(list(time =
> > > structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> > > 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")),
> > > BTCUSDC
> > > = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC =
> > > c(4.7252,
> > > 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928,
> > > 1.0256),
> > > AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC = c(4034.74,
> > > 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222,
> > > 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl",
> > > "data.frame"))
> > >
> > > the tibble looks like this:
> > > time                BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC
> > > FTMUSDC
> > > <dttm>                <dbl>   <dbl>   <dbl>    <dbl>   <dbl>
> > > <dbl>
> > > 1 2024-12-16 18:59:59 107112.    4.73    1.19     388    4035.
> > > 1.38
> > > 2 2024-12-17 18:59:59 107517.    4.69    1.14     366.   3975.
> > > 1.36
> > > 3 2024-12-18 18:59:59 104630.    4.70    1.09     373.   3879.
> > > 1.22
> > > 4 2024-12-19 18:59:59  98692.    4.24    1.03     317.   3475.
> > > 1.04
> > >
> > > 2- get my trades. Here is a sample:
> > > all_trade_sample <- structure(list(time =
> > > structure(c(1737335082.949,
> > > 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422,
> > > 1738169351.788 ), tzone = "UTC", class = c("POSIXct", "POSIXt")),
> > > symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC",
> > > "AAVEUSDC",
> > > "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -0.393, -
> > > 0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038,
> > > 294.738321,
> > > 294.738321, 0.03027), cummulative_quote_qty = c(262699.317950113, -
> > > 263696.723173419, 263987.20719179, -115.83216, -115.83216,
> > > 111456.491386979
> > > ), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117 ),
> > > class = "Date")), row.names = c(NA, -6L), class = c("tbl_df",
> > > "tbl",
> > > "data.frame"))
> > >
> > > the tibble looks like this:
> > > time                symbol   executed_qty      price
> > > cummulative_quote_qty day
> > > <dttm>              <chr>           <dbl>      <dbl>
> > > <dbl> <date>
> > > 1 2025-01-20 01:04:42 AAVEUSDC      867.      0.00300
> > > 262699. 2025-01-20
> > > 2 2025-01-20 01:32:15 AAVEUSDC     -835.      0.00313
> > > -
> > > 263697. 2025-01-20
> > > 3 2025-01-28 10:19:10 SUIUSDC     67649.      0.000038
> > > 263987. 2025-01-28
> > > 4 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.
> > > -116. 2025-01-29
> > > 5 2025-01-29 09:25:09 AAVEUSDC       -0.393 295.
> > > -116. 2025-01-29
> > > 6 2025-01-29 16:49:11 ETHUSDC        36.1     0.0303
> > > 111456. 2025-01-29
> > >
> > > Now, to finalize, I want to get all the info in one data frame so I
> > > can compute daily valuation (with potential trades, or in/out of
> > > asset).
> > > The finalized tibble should look something like this:
> > > result <- structure(list(time = structure(c(1734371999.999,
> > > 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949,
> > > 1737336735.697, 1738059550.671, 1734721199, 1734807599, 1734893999,
> > > 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
> > > 1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
> > > 1735498799), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC =
> > > c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_,
> > > 102000, 101500, 101700,100300,100400,102300,102300,103100,
> > > NA_real_,
> > > 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC = c(4.7252,
> > > 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7, 4.65,
> > > 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_,
> > > NA_real_,NA_real_,
> > > 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_,
> > > NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158, 1.142,
> > > NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC =
> > > c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000, 101500,
> > > 101700,100300,100400,102300,102300,103100, NA_real_, 99800,
> > > NA_real_,
> > > NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39, 3879.06,
> > > 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355,
> > > 3374,
> > > 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411), FTMUSDC =
> > > c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368,
> > > 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31, NA_real_,
> > > NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_,
> > > NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_,
> > > NA_real_,
> > > NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200,
> > > 350,
> > > NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_, 2, 3,
> > > NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_, NA_real_,
> > > NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA, -
> > > 20L), class = c("tbl_df", "tbl", "data.frame"))
> > >
> > > The idea is to have:
> > > - one line each day with closing price of my portfolio assets at
> > > 18:59:59
> > > - one line for each trade where I shall write 'asset', 'price' and
> > > 'executed_qty'.
> > >
> > > I spent quite some time trying to figure out how to do it, but
> > > couldn't. I don't even know if it is possible. Of course, I don't
> > > want to add anything (price, date, asset...) by hand.
> > > Thank you for any help.
> > >
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @rn@ud@g@boury @end|ng |rom gm@||@com  Thu Apr  3 03:42:44 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Thu, 03 Apr 2025 03:42:44 +0200
Subject: [R] join/merge two data frames
In-Reply-To: <CAGxFJbQ2yXrNYAOnvqHWDgYoJJ_uhnhs1KmhN8qq-M1X_0mjVQ@mail.gmail.com>
References: <43c9b7071c0e82bb16be4f078a7374e096bceb81.camel@gmail.com>
 <LV8PR22MB4528E0C3C8F4A869D72EE0A3CFAF2@LV8PR22MB4528.namprd22.prod.outlook.com>
 <d9f0a740b548eb9565ad31e5fe10c8b539ec9789.camel@gmail.com>
 <00bb01dba407$4a706d90$df5148b0$@gmail.com>
 <a26ad30dc71bc759b97d4873852a44e7b55c862f.camel@gmail.com>
 <CAGxFJbQ2yXrNYAOnvqHWDgYoJJ_uhnhs1KmhN8qq-M1X_0mjVQ@mail.gmail.com>
Message-ID: <c7b22fe8b03eb84565abba79339d50ef83452ae6.camel@gmail.com>

On Wed, 2025-04-02 at 17:39 -0700, Bert Gunter wrote:
> You might do better posting here:
> 
> https://stat.ethz.ch/mailman/listinfo/r-sig-finance
> 
> Cheers,
> Bert

I will do, even if my last experience with this list was a little bit
annoying:
<Rather than flood the R-SIG with the step-by-step extended diagnosis
of your particular problem, could I perhaps ask you to continue your
exchanges without cc:'ing the entire list?>

Spam according to this user was 2 posts.
I thought the rule was to post to the whole list members and not start
private conversation.



> 
> "An educated person is one who can entertain new ideas, entertain
> others, and entertain herself."
> 
> 
> 
> On Wed, Apr 2, 2025 at 4:39?PM Arnaud Gaboury
> <arnaud.gaboury at gmail.com> wrote:
> > I will try to be more precised. Here is the very final table I
> > want:
> > portfolio_valuation <- structure(list(time =
> > structure(c(1735153199,
> > 1735239599), tzone = "", class = c("POSIXct", "POSIXt")),
> > BTCUSDC = c(107000, 106000), SUIUSDC = c(4.7, 4.5), USDT = c(0,
> > 320000), BTCUSDC_qty = c(5, 2), SUIUSDC_qty = c(200, 250),
> > valuation = c(535940, 533125), return = c(NA_real_, -0.525)),
> > row.names
> > = c(NA, -2L), class = c("tbl_df", "tbl", "data.frame"))
> > 
> > ?portfolio_valuation
> > # A tibble: 2 ? 8
> > ? time? ? ? ? ? ? ? ? BTCUSDC SUIUSDC? ?USDT BTCUSDC_qty
> > SUIUSDC_qty
> > valuation return
> > ? <dttm>? ? ? ? ? ? ? ? <dbl>? ?<dbl>? <dbl>? ? ? ?<dbl>? ? ?
> > ?<dbl>? 
> > <dbl>? <dbl>
> > 1 2024-12-25 18:59:59? 107000? ? ?4.7? ? ? 0? ? ? ? ? ?5? ? ? ?
> > ?200? 
> > 535940 NA? ? 
> > 2 2024-12-26 18:59:59? 106000? ? ?4.5 320000? ? ? ? ? ?2? ? ? ?
> > ?250? 
> > 533125 -0.525
> > 
> > As you can see, I will keep only a few things. I want one line per
> > day,
> > @ 18:59:59. The line will show:
> > - the token I have in my portfolio (can be zero)?
> > - which quantity
> > - their closing price for the day
> > - valuation (sum of token_qty x token_price + USDT). Note: USDT is
> > numeric dollar (cash). 
> > - return: (diff ptf val day 1 - diff ptf val day 0)/ptf val day 0
> > 
> > The two tibbles I start with are:
> > - token_close_sample: daily closing price for each token. The token
> > list is > the token in my portfolio. I will fetch a regularly
> > refreshed
> > list of token I usually trade. USDT value is 1
> > - all_trade_sample: a tibble with all my trades. One trade per line
> > with its timestamp, and some trade info (price, quantity etc).
> > 
> > I hope this details will help to clarify. 
> > 
> > On Wed, 2025-04-02 at 15:41 -0400, avi.e.gross at gmail.com wrote:
> > > Arnaud,
> > > 
> > > I won't comment on other aspects but want to ask how sure you are
> > > that your data is guaranteed to have a single row reflecting a
> > > closing price at 18:59:59 exactly?
> > > 
> > > It may be true for your data source. I note that markets
> > > technically
> > > close at 4:00 PM, New York time, but many have after-hours
> > > trading,
> > > and there are days it closes early (such as 1 PM) and times when
> > > trading is halted.
> > > 
> > > Generally, you can get closing prices (or other data) from other
> > > reliable sources and you could choose to merge data from such a
> > > source in rather than calculating them from your data. If you do
> > > want
> > > to use your data, one suggestion is to use the LAST record in
> > > each
> > > grouping for a day. I find that easy to do in dplyr by having a
> > > column containing the date info except for the time, and another
> > > containing the time in a sortable format. You can then sort the
> > > data.frame by the date and then time and then? group your
> > > data.frame?
> > > by the date and? and select only last record in each group and
> > > you
> > > have the last time, whatever that may be.
> > > 
> > > Again, this may not apply in your case. As you note, you are
> > > planning
> > > on doing many things, one step at a time, and early stages can
> > > set up
> > > your data.frames in ways that make later stages easier to do. As
> > > one
> > > example, you could create a column in early stages that marks if
> > > the
> > > current row is a closing row or not.
> > > 
> > > -----Original Message-----
> > > From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> > > Gaboury
> > > Sent: Wednesday, April 2, 2025 2:10 PM
> > > To: Ebert,Timothy Aaron <tebert at ufl.edu>; r-help at r-project.org
> > > Subject: Re: [R] join/merge two data frames
> > > 
> > > 
> > > 
> > > On Wed, 2025-04-02 at 16:55 +0000, Ebert,Timothy Aaron wrote:
> > > > Your result data frame example makes no sense to me. The price
> > > > and
> > > > executed_qty are the same for all symbols?
> > > > 
> > > > To get it all into one data frame you need a common variable
> > > > that
> > > > is
> > > > used to join the data frames.
> > > > My guess is that all_trade_sample$symbol has equivalents to the
> > > > variables in token_close_sample.
> > > > 
> > > > You need to pivot one of the tables, and then full join them.
> > > > Please look at the join functions. In base R it is "merge()"
> > > > and in
> > > > dyply it is full_join(), left_join() and similar.
> > > > 
> > > > I will pivot all_trade_sample to make all of the elements in
> > > > "symbol"
> > > > into variables.
> > > > 
> > > > I will do this in tidyverse. There are some parts of this that
> > > > I
> > > > really like. However, it can as easily be done using base R.
> > > > Library(tidyr)
> > > > Library(dplyr)
> > > > token_close_long <- token_close_sample %>%
> > > > ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> > > > "close_price")
> > > > #I rename time in token_close_long so that it will be preserved
> > > > colnames(token_close_long) <- c("time_close", "symbol",
> > > > "close_price")
> > > > combined <- full_join(all_trade_sample,token_close_long,
> > > > by="symbol")
> > > > 
> > > > This generates errors. This is ok, but I need to know more
> > > > about
> > > > all_trade_sample. Each symbol appears multiple times in
> > > > all_trade_sample. Each instance of "AAVEUSIX" has a different
> > > > time
> > > > stamp. So maybe filter to eliminate all but the first
> > > > (earliest)
> > > > time?
> > > > 
> > > > The program looks something like this:
> > > > token_close_long <- token_close_sample %>%
> > > > ? pivot_longer(cols = -time, names_to = "symbol", values_to =
> > > > "close_price")
> > > > 
> > > > #I will rename time in token_close_long so that it will be
> > > > preserved
> > > > colnames(token_close_long) <- c("time_close", "symbol",
> > > > "close_price")
> > > > combined <- full_join(all_trade_sample,token_close_long,
> > > > by="symbol")
> > > > 
> > > > filtered_trades <- all_trade_sample |>
> > > > ? group_by(symbol) |>
> > > > ? slice_min(time, n = 1)|>
> > > > ? ungroup()
> > > > 
> > > > combined <- full_join(filtered_trades,token_close_long,
> > > > by="symbol")
> > > > 
> > > > I did not do something right, as there are four closing prices
> > > > for
> > > > each symbol. However, the general approach should work even if
> > > > it
> > > > needs a little modification to give the correct result. Your
> > > > closing
> > > > price is only relevant based on some other price (probably
> > > > buying
> > > > price, but could be opening price).
> > > > 
> > > > Tim
> > > 
> > > Thank you Tim for your answer. I will have a close look at it
> > > later
> > > today. But in short:
> > > - I will do some work on my data later in the script. The tibble
> > > I
> > > want
> > > is far from being the result.
> > > - Time of closing price is everyday the same: 18:59:59. I will
> > > compute
> > > returns, volatility, correlations etc so I need a common
> > > reference.
> > > Prices for the trades change and are given by the exchange. I
> > > don't
> > > need them, won't do anything.
> > > - Yes, symbols may be the common variable. 
> > > - I feel comfortable with tibbles and tidyverse
> > > - All_trade_sample has the goal to fetch price (price of asset
> > > when
> > > the
> > > trade is done) and executed_qty. btc_price is needed at one point
> > > of
> > > my
> > > calculation, but will not be shown in the very final table.
> > > - Multiple lines for one only symbol means I made multiple trades
> > > of
> > > this asset during the same day.
> > > 
> > > I will test your suggestions.
> > > Thank you again.
> > > 
> > > 
> > > > 
> > > > -----Original Message-----
> > > > From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> > > > Gaboury
> > > > Sent: Wednesday, April 2, 2025 6:20 AM
> > > > To: r-help at r-project.org
> > > > Subject: [R] join/merge two data frames
> > > > 
> > > > [External Email]
> > > > 
> > > > I work on a trading journal for a portfolio of crypto
> > > > currencies.
> > > > The
> > > > goal is to fetch from my account (binance exchange) the trades
> > > > I
> > > > have
> > > > done and daily closing prices of my assets.
> > > > The first part (getting the data from exchange) are in two
> > > > parts.
> > > > 
> > > > 1- get the daily closing prices of my assets. Here is a sample
> > > > of
> > > > my
> > > > data frame:
> > > > token_close_sample <- structure(list(time =
> > > > structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> > > > 1734631199.999), tzone = "", class = c("POSIXct", "POSIXt")),
> > > > BTCUSDC
> > > > = c(107112.36, 107517.25, 104630.49, 98692.01 ), SUIUSDC =
> > > > c(4.7252,
> > > > 4.6923, 4.7017, 4.2422), ENAUSDC = c(1.1862, 1.1412, 1.0928,
> > > > 1.0256),
> > > > AAVEUSDC = c(388, 365.68, 373.15, 316.69 ), ETHUSDC =
> > > > c(4034.74,
> > > > 3975.39, 3879.06, 3474.91), FTMUSDC = c(1.381, 1.3596, 1.2222,
> > > > 1.0445)), row.names = c(NA, -4L), class = c("tbl_df", "tbl",
> > > > "data.frame"))
> > > > 
> > > > the tibble looks like this:
> > > > time??????????????? BTCUSDC SUIUSDC ENAUSDC AAVEUSDC ETHUSDC
> > > > FTMUSDC
> > > > <dttm>??????????????? <dbl>?? <dbl>?? <dbl>??? <dbl>?? <dbl>??
> > > > <dbl>
> > > > 1 2024-12-16 18:59:59 107112.??? 4.73??? 1.19???? 388???
> > > > 4035.?? 
> > > > 1.38
> > > > 2 2024-12-17 18:59:59 107517.??? 4.69??? 1.14???? 366.??
> > > > 3975.?? 
> > > > 1.36
> > > > 3 2024-12-18 18:59:59 104630.??? 4.70??? 1.09???? 373.??
> > > > 3879.?? 
> > > > 1.22
> > > > 4 2024-12-19 18:59:59? 98692.??? 4.24??? 1.03???? 317.??
> > > > 3475.?? 
> > > > 1.04
> > > > 
> > > > 2- get my trades. Here is a sample:
> > > > all_trade_sample <- structure(list(time =
> > > > structure(c(1737335082.949,
> > > > 1737336735.697, 1738059550.671, 1738142709.422, 1738142709.422,
> > > > 1738169351.788 ), tzone = "UTC", class = c("POSIXct",
> > > > "POSIXt")),
> > > > symbol = c("AAVEUSDC", "AAVEUSDC", "SUIUSDC", "AAVEUSDC",
> > > > "AAVEUSDC",
> > > > "ETHUSDC"), executed_qty = c(866.666, -834.998, 67649.3, -
> > > > 0.393, -
> > > > 0.393, 36.1158), price = c(0.003005, 0.003131, 0.000038,
> > > > 294.738321,
> > > > 294.738321, 0.03027), cummulative_quote_qty =
> > > > c(262699.317950113, -
> > > > 263696.723173419, 263987.20719179, -115.83216, -115.83216,
> > > > 111456.491386979
> > > > ), day = structure(c(20108, 20108, 20116, 20117, 20117, 20117
> > > > ),
> > > > class = "Date")), row.names = c(NA, -6L), class = c("tbl_df",
> > > > "tbl",
> > > > "data.frame"))
> > > > 
> > > > the tibble looks like this:
> > > > time??????????????? symbol?? executed_qty????? price
> > > > cummulative_quote_qty day
> > > > <dttm>????????????? <chr>?????????? <dbl>????? <dbl>
> > > > <dbl> <date>
> > > > 1 2025-01-20 01:04:42 AAVEUSDC????? 867.????? 0.00300
> > > > 262699. 2025-01-20
> > > > 2 2025-01-20 01:32:15 AAVEUSDC???? -835.?????
> > > > 0.00313??????????????
> > > > -
> > > > 263697. 2025-01-20
> > > > 3 2025-01-28 10:19:10 SUIUSDC???? 67649.????? 0.000038
> > > > 263987. 2025-01-28
> > > > 4 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> > > > -116. 2025-01-29
> > > > 5 2025-01-29 09:25:09 AAVEUSDC?????? -0.393 295.
> > > > -116. 2025-01-29
> > > > 6 2025-01-29 16:49:11 ETHUSDC??????? 36.1???? 0.0303
> > > > 111456. 2025-01-29
> > > > 
> > > > Now, to finalize, I want to get all the info in one data frame
> > > > so I
> > > > can compute daily valuation (with potential trades, or in/out
> > > > of
> > > > asset).
> > > > The finalized tibble should look something like this:
> > > > result <- structure(list(time = structure(c(1734371999.999,
> > > > 1734458399.999, 1734544799.999, 1734631199.999, 1737335082.949,
> > > > 1737336735.697, 1738059550.671, 1734721199, 1734807599,
> > > > 1734893999,
> > > > 1734980399, 1735066799, 1735153199, 1735239599, 1735325999,
> > > > 1738142709.422, 1735412399, 1738142709.422, 1738169351.788,
> > > > 1735498799), tzone = "", class = c("POSIXct", "POSIXt")),
> > > > BTCUSDC =
> > > > c(107112.36, 107517.25, 104630.49, 98692.01,NA_real_, NA_real_,
> > > > 102000, 101500, 101700,100300,100400,102300,102300,103100,
> > > > NA_real_,
> > > > 99800, NA_real_, NA_real_,NA_real_, 99900 ), SUIUSDC =
> > > > c(4.7252,
> > > > 4.6923, 4.7017, 4.2422, NA_real_, NA_real_, 4.25, 4.26, 4.7,
> > > > 4.65,
> > > > 4.52, 4.23, 4.17, 4.34, NA_real_, 4.52, NA_real_,
> > > > NA_real_,NA_real_,
> > > > 4.44), ENAUSDC = c(1.1862, 1.1412, 1.0928, 1.0256, NA_real_,
> > > > NA_real_, 1.176, 1.16, 1.163, 1.183, 1.196, 1.165, 1.158,
> > > > 1.142,
> > > > NA_real_, 1.196, NA_real_, NA_real_,NA_real_, 1.113), AAVEUSDC
> > > > =
> > > > c(388, 365.68, 373.15, 316.69, NA_real_, NA_real_, 102000,
> > > > 101500,
> > > > 101700,100300,100400,102300,102300,103100, NA_real_, 99800,
> > > > NA_real_,
> > > > NA_real_,NA_real_, 99900 ), ETHUSDC = c(4034.74, 3975.39,
> > > > 3879.06,
> > > > 3474.91, NA_real_,NA_real_, 3420, 3410, 3412, 3367, 3388, 3355,
> > > > 3374,
> > > > 3392, NA_real_, 3401, NA_real_, NA_real_,NA_real_, 3411),
> > > > FTMUSDC =
> > > > c(1.381,1.3596, 1.2222, 1.0445, NA_real_,NA_real_, 1.36, 1.368,
> > > > 1.342, 1.339, 1.436, 1.562, 1.53, 1.62, NA_real_, 1.31,
> > > > NA_real_,
> > > > NA_real_,NA_real_, 1.58), executed_qty = c(NA_real_, NA_real_,
> > > > NA_real_, NA_real_, 230, 559, NA_real_, NA_real_,NA_real_,
> > > > NA_real_,
> > > > NA_real_,NA_real_, NA_real_, NA_real_, 200, NA_real_, 700, 200,
> > > > 350,
> > > > NA_real_), price = c( NA_real_, NA_real_, NA_real_, NA_real_,
> > > > 2, 3,
> > > > NA_real_, NA_real_,NA_real_, NA_real_, NA_real_,NA_real_,
> > > > NA_real_,
> > > > NA_real_, 10, NA_real_, 3, 4, 5, NA_real_) ), row.names = c(NA,
> > > > -
> > > > 20L), class = c("tbl_df", "tbl", "data.frame"))
> > > > 
> > > > The idea is to have:
> > > > - one line each day with closing price of my portfolio assets
> > > > at
> > > > 18:59:59
> > > > - one line for each trade where I shall write 'asset', 'price'
> > > > and
> > > > 'executed_qty'.
> > > > 
> > > > I spent quite some time trying to figure out how to do it, but
> > > > couldn't. I don't even know if it is possible. Of course, I
> > > > don't
> > > > want to add anything (price, date, asset...) by hand.
> > > > Thank you for any help.
> > > > 
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250403/f648223e/attachment.sig>

From c@|||@te@dor|e@n@ @end|ng |rom gm@||@com  Thu Apr  3 14:24:35 2025
From: c@|||@te@dor|e@n@ @end|ng |rom gm@||@com (Calliste DORLEANS)
Date: Thu, 3 Apr 2025 14:24:35 +0200
Subject: [R] Problems with svg() exporting graphics with gradients
Message-ID: <CAAfBr6Eo3Z2SGRKE1tKei58PrsEizmhyZ3mETrYo52gSigPC8g@mail.gmail.com>

 Hello,

My name is Calliste, I am a postgraduate student in data analysis and I use
R and R Studio as a daily tool for my work and studies. I am used to
exporting my plots with the svg() function from the grDevices package. I
noticed since February 2025 that the ggplot graphics containing gradients
are not correctly vectorised (see below the difference between the graphics
from November 2024 and February 2025) when exported with the svg() function
and are thus of a lesser quality. However, it seems to not happen when
using a basic plot() function and it doesn't happen either with ggplot
graphics that don't contain a gradient variable. I looked for solutions on
the Internet, but I didn't find any information, that is why I contacted
you. I don't know if the package has had some recent updates, but it would
be of great help for me if you have any idea how to fix this.

Thanks in advance for your help,

Sincerely,

Calliste Dorl?ans

graph_doub.svg is from November 2024
graph_serie.svg is from February 2025

From bgunter@4567 @end|ng |rom gm@||@com  Thu Apr  3 20:11:51 2025
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Thu, 3 Apr 2025 11:11:51 -0700
Subject: [R] Problems with svg() exporting graphics with gradients
In-Reply-To: <CAAfBr6Eo3Z2SGRKE1tKei58PrsEizmhyZ3mETrYo52gSigPC8g@mail.gmail.com>
References: <CAAfBr6Eo3Z2SGRKE1tKei58PrsEizmhyZ3mETrYo52gSigPC8g@mail.gmail.com>
Message-ID: <CAGxFJbSraWRv722Zf7xW5PQNL32KyWQ2=00MQEBksvuDgidRHw@mail.gmail.com>

The R-help listserv deletes most attachments (as security risks) and your
attachments (I assume) did not come through. Provide code for a minimal
reprex or a site from which those interested in helping can get your plots
instead if no one who already knows about this issue responds. You might
also try posting on the Posit/ggplot Help site, as someone there may be
able to help.

Cheers,
Bert

"An educated person is one who can entertain new ideas, entertain others,
and entertain herself."



On Thu, Apr 3, 2025 at 11:00?AM Calliste DORLEANS <
calliste.dorleans at gmail.com> wrote:

>  Hello,
>
> My name is Calliste, I am a postgraduate student in data analysis and I use
> R and R Studio as a daily tool for my work and studies. I am used to
> exporting my plots with the svg() function from the grDevices package. I
> noticed since February 2025 that the ggplot graphics containing gradients
> are not correctly vectorised (see below the difference between the graphics
> from November 2024 and February 2025) when exported with the svg() function
> and are thus of a lesser quality. However, it seems to not happen when
> using a basic plot() function and it doesn't happen either with ggplot
> graphics that don't contain a gradient variable. I looked for solutions on
> the Internet, but I didn't find any information, that is why I contacted
> you. I don't know if the package has had some recent updates, but it would
> be of great help for me if you have any idea how to fix this.
>
> Thanks in advance for your help,
>
> Sincerely,
>
> Calliste Dorl?ans
>
> graph_doub.svg is from November 2024
> graph_serie.svg is from February 2025
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz  Thu Apr  3 21:40:44 2025
From: p@u| @end|ng |rom @t@t@@uck|@nd@@c@nz (Paul Murrell)
Date: Fri, 4 Apr 2025 08:40:44 +1300
Subject: [R] Problems with svg() exporting graphics with gradients
In-Reply-To: <CAGxFJbSraWRv722Zf7xW5PQNL32KyWQ2=00MQEBksvuDgidRHw@mail.gmail.com>
References: <CAAfBr6Eo3Z2SGRKE1tKei58PrsEizmhyZ3mETrYo52gSigPC8g@mail.gmail.com>
 <CAGxFJbSraWRv722Zf7xW5PQNL32KyWQ2=00MQEBksvuDgidRHw@mail.gmail.com>
Message-ID: <1a8a8f05-587c-4d88-95e2-6312b436a4aa@stat.auckland.ac.nz>

Hi Calliste

Please feel free to send me the SVG files directly if you like.

However, as Bert says, the R code that produces the files would be very 
helpful as well.

Thanks

Paul

On 4/04/2025 7:11 am, Bert Gunter wrote:
> The R-help listserv deletes most attachments (as security risks) and your
> attachments (I assume) did not come through. Provide code for a minimal
> reprex or a site from which those interested in helping can get your plots
> instead if no one who already knows about this issue responds. You might
> also try posting on the Posit/ggplot Help site, as someone there may be
> able to help.
> 
> Cheers,
> Bert
> 
> "An educated person is one who can entertain new ideas, entertain others,
> and entertain herself."
> 
> 
> 
> On Thu, Apr 3, 2025 at 11:00?AM Calliste DORLEANS <
> calliste.dorleans at gmail.com> wrote:
> 
>>   Hello,
>>
>> My name is Calliste, I am a postgraduate student in data analysis and I use
>> R and R Studio as a daily tool for my work and studies. I am used to
>> exporting my plots with the svg() function from the grDevices package. I
>> noticed since February 2025 that the ggplot graphics containing gradients
>> are not correctly vectorised (see below the difference between the graphics
>> from November 2024 and February 2025) when exported with the svg() function
>> and are thus of a lesser quality. However, it seems to not happen when
>> using a basic plot() function and it doesn't happen either with ggplot
>> graphics that don't contain a gradient variable. I looked for solutions on
>> the Internet, but I didn't find any information, that is why I contacted
>> you. I don't know if the package has had some recent updates, but it would
>> be of great help for me if you have any idea how to fix this.
>>
>> Thanks in advance for your help,
>>
>> Sincerely,
>>
>> Calliste Dorl?ans
>>
>> graph_doub.svg is from November 2024
>> graph_serie.svg is from February 2025
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr Paul Murrell
Te Kura Tatauranga | Department of Statistics
Waipapa Taumata Rau | The University of Auckland
Private Bag 92019, Auckland, New Zealand
64 9 3737599 x85392
paul at stat.auckland.ac.nz
www.stat.auckland.ac.nz/~paul/


From @rn@ud@g@boury @end|ng |rom gm@||@com  Mon Apr  7 05:47:59 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Mon, 07 Apr 2025 05:47:59 +0200
Subject: [R] Can't join/merge two tibbles with lots of variables the way I
 want
Message-ID: <ec6f04b141b6a254cb32543a6da3cf08de1e2a01.camel@gmail.com>

I work on writing a portfolio journal with a daily valuation of my
portfolio + the trades I have done on the day.
My "time" column is made of dates (day + time) which are either the
closing prices of my assets (each day @ 19:59:59 for convenience. I
work on crypto currencies and markets are open 24/24 7/7, so thete is
no real official closing time). 
To build this journal, I can rely on two tibbles:
- one is the data frame of daily closing prices of the assets I own in
my portfolio. Here it is:
daily_clsong_price <- structure(list(time = structure(c(1734371999.999,
1734458399.999, 
1734544799.999, 1734631199.999, 1734717599.999, 1734803999.999, 
1734890399.999, 1734976799.999, 1735063199.999, 1735149599.999, 
1735235999.999, 1735322399.999, 1735408799.999, 1735495199.999, 
1735581599.999, 1735667999.999, 1735754399.999, 1735840799.999, 
1735927199.999, 1736013599.999, 1736099999.999, 1736186399.999, 
1736272799.999, 1736359199.999, 1736445599.999, 1736531999.999, 
1736618399.999, 1736704799.999, 1736791199.999, 1736877599.999, 
1736963999.999, 1737050399.999, 1737136799.999, 1737223199.999, 
1737309599.999, 1737395999.999, 1737482399.999, 1737568799.999, 
1737655199.999, 1737741599.999, 1737827999.999, 1737914399.999, 
1738000799.999, 1738087199.999, 1738173599.999, 1738259999.999, 
1738346399.999, 1738432799.999, 1738519199.999, 1738605599.999, 
1738691999.999, 1738778399.999, 1738864799.999, 1738951199.999, 
1739037599.999, 1739123999.999, 1739210399.999, 1739296799.999, 
1739383199.999, 1739469599.999, 1739555999.999, 1739642399.999, 
1739728799.999, 1739815199.999, 1739901599.999, 1739987999.999, 
1740074399.999, 1740160799.999, 1740247199.999, 1740333599.999, 
1740419999.999, 1740506399.999, 1740592799.999, 1740679199.999, 
1740765599.999, 1740851999.999, 1740938399.999, 1741024799.999, 
1741111199.999, 1741197599.999, 1741283999.999, 1741370399.999, 
1741456799.999, 1741543199.999, 1741629599.999, 1741715999.999, 
1741802399.999, 1741888799.999, 1741975199.999, 1742061599.999, 
1742147999.999, 1742234399.999, 1742320799.999, 1742407199.999, 
1742493599.999, 1742579999.999, 1742666399.999, 1742752799.999, 
1742839199.999, 1742925599.999, 1743011999.999, 1743098399.999, 
1743184799.999, 1743271199.999), tzone = "", class = c("POSIXct", 
"POSIXt")), BTCUSDC_close = c(107112.36, 107517.25, 104630.49, 
98692.01, 97172, 97559.99, 95555.99, 93260, 98743.99, 98475.99, 
95740.01, 94156.03, 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 
96673.8, 97966.09, 98004.92, 97722.38, 101865.33, 97236.45, 94004.02, 
92686.72, 95786.01, 94113, 95097.6, 91933.25, 96481.8, 98651.62, 
99823.04, 104162, 103742.8, 104997.99, 102844.44, 106166, 104336, 
105945.99, 106516.81, 104880.02, 104927.47, 99111.87, 102587, 
102404, 105296.86, 104591.47, 102247.03, 97166.51, 99352, 99215.17, 
97570.44, 96738.02, 97462, 96363.99, 96190, 97523.98, 96164.78, 
97368.43, 95716.93, 98570.1, 97431.42, 96994, 95494.02, 94068, 
96394.6, 97991.02, 96982, 96635.96, 95664.1, 94650, 87156.01, 
85969.64, 84507.03, 83605.12, 85172, 94100.16, 90258.01, 85415.99, 
89683.45, 88625.27, 87676.78, 85929.38, 82358.02, 78414, 81291.59, 
81839.98, 80047.99, 84365.03, 84427.7, 83916.04, 84189.04, 81453.98, 
84236, 84048.03, 83983.62, 84232.07, 85008, 88482.01, 87958.04, 
86578.83, 86890.11, 83945.98, 82308), SUIUSDC_close = c(4.7252, 
4.6923, 4.7017, 4.2422, 4.4909, 4.5497, 4.3416, 4.293, 4.6079, 
4.5242, 4.1963, 4.2141, 4.1772, 4.123, 4.1906, 4.2085, 4.1817, 
4.3391, 4.708, 5.1388, 5.2029, 5.224, 4.8313, 4.5976, 4.7354, 
5.1894, 4.941, 4.8115, 4.4785, 4.5784, 4.6566, 4.9161, 4.7858, 
4.8951, 4.948, 4.3919, 4.6632, 4.6118, 4.3972, 4.4267, 4.1615, 
4.1407, 3.7285, 3.7674, 3.7116, 4.1375, 4.1282, 3.935, 3.3428, 
3.5558, 3.7017, 3.3519, 3.1784, 3.1207, 3.0176, 3.0415, 3.2668, 
3.3746, 3.38, 3.4623, 3.7018, 3.4095, 3.298, 3.1857, 2.9762, 
3.1934, 3.4429, 3.3604, 3.4162, 3.3258, 3.0418, 2.8179, 2.8598, 
2.8307, 2.7903, 2.8014, 3.1772, 2.8541, 2.416, 2.5384, 2.816, 
2.6891, 2.5263, 2.271, 2.1051, 2.1651, 2.2203, 2.1238, 2.3503, 
2.362, 2.2691, 2.3323, 2.2459, 2.3785, 2.3867, 2.2767, 2.2898, 
2.2543, 2.4363, 2.4686, 2.5708, 2.7651, 2.5222, 2.2825), ENAUSDC_close
= c(1.1862, 
1.1412, 1.0928, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255, 1.0493, 
1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192, 0.9212, 
1.0404, 1.2138, 1.2446, 1.2394, 1.1984, 1.0946, 0.9606, 0.916, 
0.9408, 0.8888, 0.8978, 0.7794, 0.8277, 0.9005, 0.9133, 0.9355, 
0.8662, 0.9445, 0.9112, 0.9168, 0.8951, 0.846, 0.9025, 0.8719, 
0.8238, 0.7188, 0.7147, 0.6877, 0.7732, 0.7878, 0.7231, 0.5993, 
0.6344, 0.6393, 0.5535, 0.5022, 0.5092, 0.5175, 0.4806, 0.4975, 
0.4564, 0.429, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411, 
0.401, 0.4058, 0.4348, 0.4575, 0.454, 0.4036, 0.4067, 0.4129, 
0.4285, 0.4164, 0.3944, 0.447, 0.395, 0.359, 0.3626, 0.38, 0.4372, 
0.4457, 0.4142, 0.4034, 0.3826, 0.366, 0.3394, 0.3549, 0.3696, 
0.3657, 0.3802, 0.356, 0.3815, 0.3791, 0.3612, 0.3547, 0.364, 
0.4019, 0.4252, 0.4156, 0.4196, 0.3882, 0.3672), AAVEUSDC_close =
c(388, 
365.68, 373.15, 316.69, 319.8, 306.06, 308.15, 352.45, 376.21, 
369.33, 334.15, 327.66, 334.95, 331.35, 331.56, 312.13, 313.71, 
332.95, 348.72, 353, 340.82, 342.41, 312.68, 284.99, 283.29, 
289.79, 285.09, 292.89, 267.83, 291.29, 311.21, 317.28, 324.28, 
309, 346.95, 332, 366.22, 353.36, 336.3, 352.42, 330.79, 332.13, 
296.62, 293.04, 290.18, 317.82, 338.3, 314.94, 265.25, 256.79, 
267.67, 263.11, 245.37, 244.15, 238.36, 243.35, 252.79, 247.54, 
248.14, 250.2, 268, 252.71, 255.93, 263.12, 243.33, 252.98, 259.4, 
247.46, 250.4, 247.17, 229.86, 198.12, 198.67, 204.25, 188.26, 
190.2, 221.87, 198.69, 206.74, 215.48, 212.08, 203.07, 192.45, 
180.05, 180.94, 174.26, 168.79, 164.29, 174.22, 174.76, 168.53, 
173.55, 165.31, 178.45, 174.11, 178.43, 180.33, 182.09, 192.97, 
187.89, 178.53, 182.08, 170.56, 169.11), ETHUSDC_close = c(4034.74, 
3975.39, 3879.06, 3474.91, 3436.86, 3380.71, 3313.11, 3332.66, 
3499.69, 3467.64, 3325.02, 3345.58, 3388.82, 3355.39, 3385.8, 
3358.42, 3336.65, 3447.37, 3573.18, 3633.24, 3627.35, 3674.61, 
3441.2, 3262.6, 3250.57, 3314.51, 3269.8, 3286.72, 3019.4, 3210.99, 
3326.21, 3343.59, 3415.67, 3255.79, 3438.6, 3289.19, 3350.5, 
3285.05, 3265.79, 3399.59, 3344.04, 3337.1, 3071.81, 3167.03, 
3111.09, 3272.72, 3376.27, 3261.2, 2970.48, 2711.8, 2816.61, 
2741.62, 2700.49, 2680.88, 2629.49, 2642.7, 2679.99, 2640.79, 
2673.27, 2631.72, 2775.09, 2686.11, 2688.91, 2733.38, 2618.98, 
2710.88, 2735.95, 2673.5, 2785.11, 2814.66, 2664.58, 2418.3, 
2364.72, 2319.9, 2209.36, 2196.1, 2481.43, 2276.12, 2118.01, 
2194, 2191, 2161.81, 2198.3, 2024.1, 1916.8, 1904.59, 1867.86, 
1826.58, 1935.1, 1940.6, 1910.21, 1930.4, 1876.44, 2027.93, 1970, 
1967.94, 1992.31, 1992.71, 2088.6, 2076.9, 2006.72, 1999.82, 
1882.6, 1817.51), FTMUSDC_close = c(1.381, 1.3596, 1.2222, 1.0445, 
0.9705, 1.0203, 0.9958, 0.9727, 0.9813, 0.9725, 0.8807, 0.8757, 
0.8086, 0.7783, 0.7531, 0.6871, 0.7899, 0.8195, 0.8206, 0.8372, 
0.819, 0.7973, 0.7142, 0.637, 0.6573, 0.6902, 0.7047, 0.7072, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), LINKUSDC_close =
c(29.81, 
28.04, 27.65, 23.1, 22.93, 22.65, 22.13, 22.57, 24.75, 24.58, 
22.69, 22.67, 22.08, 21.26, 20.84, 20.24, 20.79, 22.2, 23.58, 
23.4, 23.23, 23.94, 21.78, 20.25, 19.73, 20.45, 19.93, 20.12, 
18.47, 20.25, 21.26, 23.51, 24.24, 23.57, 26.55, 24.65, 26.61, 
25.63, 25.58, 26.11, 24.95, 25.93, 23.12, 23.73, 22.89, 24.92, 
25.39, 24.36, 20.71, 20.63, 20.59, 19.11, 18.59, 18.78, 18.26, 
18.7, 18.76, 18.77, 18.79, 18.33, 19.7, 18.86, 18.91, 19.07, 
17.5, 18.02, 18.21, 17.71, 17.95, 17.63, 16.36, 14.84, 15.05, 
15.3, 14.54, 14.61, 17.08, 16.21, 14.1, 16.09, 16.63, 16.47, 
15.33, 13.74, 12.88, 12.91, 13.06, 12.74, 14.54, 14.13, 13.68, 
13.95, 13.52, 14.34, 14.19, 13.98, 14.36, 14.32, 15.12, 15.46, 
15.19, 15.33, 14.13, 13.5), SUSDC_close = c(NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.7845, 0.7695, 0.6634, 
0.6347, 0.5203, 0.6205, 0.6091, 0.5908, 0.5589, 0.5404, 0.5382, 
0.4722, 0.4615, 0.463, 0.5246, 0.5934, 0.5227, 0.4553, 0.4634, 
0.4428, 0.4278, 0.436, 0.424, 0.403, 0.4082, 0.4274, 0.4568, 
0.5269, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 0.571, 0.7145, 
0.8272, 0.8685, 0.8384, 0.8258, 0.8386, 0.7306, 0.7, 0.7114, 
0.6713, 0.7287, 0.7645, 0.6435, 0.5438, 0.598, 0.5449, 0.5111, 
0.519, 0.4459, 0.4174, 0.4305, 0.4379, 0.4628, 0.5339, 0.5556, 
0.5116, 0.5051, 0.4768, 0.5134, 0.5135, 0.4959, 0.5128, 0.5276, 
0.6055, 0.6179, 0.6003, 0.6033, 0.5361, 0.4822), OMUSDC_close =
c(4.0706, 
4.025, 4.0875, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 
3.7536, 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 
3.8019, 3.8903, 3.9035, 3.9537, 3.9755, 3.862, 3.8991, 3.9685, 
4.0064, 3.9105, 3.8044, 3.7607, 3.693, 3.7698, 3.872, 3.872, 
3.7408, 3.8513, 3.6083, 3.726, 3.5371, 3.6244, 3.6144, 3.2608, 
4.5631, 4.4803, 4.602, 4.4968, 5.6786, 5.2307, 5.3276, 5.0127, 
5.6513, 5.8682, 5.7861, 5.6768, 6.1531, 5.8486, 5.8408, 6.0812, 
5.9543, 5.7494, 5.6397, 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 
7.6039, 7.5314, 7.5341, 7.6558, 8.4069, 8.268, 7.6702, 7.3587, 
7.4413, 7.4682, 7.4288, 7.8594, 7.3667, 7.1693, 7.1423, 6.9744, 
6.5149, 6.5599, 6.0548, 6.2294, 6.3179, 6.3857, 6.3399, 6.2524, 
6.566, 6.8212, 6.9633, 6.9234, 6.8089, 6.653, 6.3123, 6.3202, 
6.4494, 6.993, 6.726, 6.5015, 6.5134, 6.264, 6.2462)), class =
c("tbl_df", 
"tbl", "data.frame"), row.names = c(NA, -104L))

- one is a data frame with all my trades : qty x price, with dates
token_daily_close <- structure(list(time = structure(c(1734371999.999,
1734458399.999, 
1734544799.999, 1734631199.999, 1734717599.999, 1734803999.999, 
1734890399.999, 1734976799.999, 1735063199.999, 1735149599.999, 
1735235999.999, 1735322399.999, 1735408799.999, 1735495199.999, 
1735581599.999, 1735667999.999, 1735754399.999, 1735840799.999, 
1735927199.999, 1736013599.999, 1736099999.999, 1736186399.999, 
1736272799.999, 1736359199.999, 1736445599.999, 1736531999.999, 
1736618399.999, 1736704799.999, 1736791199.999, 1736877599.999, 
1736963999.999, 1737050399.999, 1737136799.999, 1737223199.999, 
1737309599.999, 1737395999.999, 1737482399.999, 1737568799.999, 
1737655199.999, 1737741599.999, 1737827999.999, 1737914399.999, 
1738000799.999, 1738087199.999, 1738173599.999, 1738259999.999, 
1738346399.999, 1738432799.999, 1738519199.999, 1738605599.999, 
1738691999.999, 1738778399.999, 1738864799.999, 1738951199.999, 
1739037599.999, 1739123999.999, 1739210399.999, 1739296799.999, 
1739383199.999, 1739469599.999, 1739555999.999, 1739642399.999, 
1739728799.999, 1739815199.999, 1739901599.999, 1739987999.999, 
1740074399.999, 1740160799.999, 1740247199.999, 1740333599.999, 
1740419999.999, 1740506399.999, 1740592799.999, 1740679199.999, 
1740765599.999, 1740851999.999, 1740938399.999, 1741024799.999, 
1741111199.999, 1741197599.999, 1741283999.999, 1741370399.999, 
1741456799.999, 1741543199.999, 1741629599.999, 1741715999.999, 
1741802399.999, 1741888799.999, 1741975199.999, 1742061599.999, 
1742147999.999, 1742234399.999, 1742320799.999, 1742407199.999, 
1742493599.999, 1742579999.999, 1742666399.999, 1742752799.999, 
1742839199.999, 1742925599.999, 1743011999.999, 1743098399.999, 
1743184799.999, 1743271199.999), tzone = "", class = c("POSIXct", 
"POSIXt")), BTCUSDC_close = c(107112.36, 107517.25, 104630.49, 
98692.01, 97172, 97559.99, 95555.99, 93260, 98743.99, 98475.99, 
95740.01, 94156.03, 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 
96673.8, 97966.09, 98004.92, 97722.38, 101865.33, 97236.45, 94004.02, 
92686.72, 95786.01, 94113, 95097.6, 91933.25, 96481.8, 98651.62, 
99823.04, 104162, 103742.8, 104997.99, 102844.44, 106166, 104336, 
105945.99, 106516.81, 104880.02, 104927.47, 99111.87, 102587, 
102404, 105296.86, 104591.47, 102247.03, 97166.51, 99352, 99215.17, 
97570.44, 96738.02, 97462, 96363.99, 96190, 97523.98, 96164.78, 
97368.43, 95716.93, 98570.1, 97431.42, 96994, 95494.02, 94068, 
96394.6, 97991.02, 96982, 96635.96, 95664.1, 94650, 87156.01, 
85969.64, 84507.03, 83605.12, 85172, 94100.16, 90258.01, 85415.99, 
89683.45, 88625.27, 87676.78, 85929.38, 82358.02, 78414, 81291.59, 
81839.98, 80047.99, 84365.03, 84427.7, 83916.04, 84189.04, 81453.98, 
84236, 84048.03, 83983.62, 84232.07, 85008, 88482.01, 87958.04, 
86578.83, 86890.11, 83945.98, 82308), SUIUSDC_close = c(4.7252, 
4.6923, 4.7017, 4.2422, 4.4909, 4.5497, 4.3416, 4.293, 4.6079, 
4.5242, 4.1963, 4.2141, 4.1772, 4.123, 4.1906, 4.2085, 4.1817, 
4.3391, 4.708, 5.1388, 5.2029, 5.224, 4.8313, 4.5976, 4.7354, 
5.1894, 4.941, 4.8115, 4.4785, 4.5784, 4.6566, 4.9161, 4.7858, 
4.8951, 4.948, 4.3919, 4.6632, 4.6118, 4.3972, 4.4267, 4.1615, 
4.1407, 3.7285, 3.7674, 3.7116, 4.1375, 4.1282, 3.935, 3.3428, 
3.5558, 3.7017, 3.3519, 3.1784, 3.1207, 3.0176, 3.0415, 3.2668, 
3.3746, 3.38, 3.4623, 3.7018, 3.4095, 3.298, 3.1857, 2.9762, 
3.1934, 3.4429, 3.3604, 3.4162, 3.3258, 3.0418, 2.8179, 2.8598, 
2.8307, 2.7903, 2.8014, 3.1772, 2.8541, 2.416, 2.5384, 2.816, 
2.6891, 2.5263, 2.271, 2.1051, 2.1651, 2.2203, 2.1238, 2.3503, 
2.362, 2.2691, 2.3323, 2.2459, 2.3785, 2.3867, 2.2767, 2.2898, 
2.2543, 2.4363, 2.4686, 2.5708, 2.7651, 2.5222, 2.2825), ENAUSDC_close
= c(1.1862, 
1.1412, 1.0928, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255, 1.0493, 
1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192, 0.9212, 
1.0404, 1.2138, 1.2446, 1.2394, 1.1984, 1.0946, 0.9606, 0.916, 
0.9408, 0.8888, 0.8978, 0.7794, 0.8277, 0.9005, 0.9133, 0.9355, 
0.8662, 0.9445, 0.9112, 0.9168, 0.8951, 0.846, 0.9025, 0.8719, 
0.8238, 0.7188, 0.7147, 0.6877, 0.7732, 0.7878, 0.7231, 0.5993, 
0.6344, 0.6393, 0.5535, 0.5022, 0.5092, 0.5175, 0.4806, 0.4975, 
0.4564, 0.429, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411, 
0.401, 0.4058, 0.4348, 0.4575, 0.454, 0.4036, 0.4067, 0.4129, 
0.4285, 0.4164, 0.3944, 0.447, 0.395, 0.359, 0.3626, 0.38, 0.4372, 
0.4457, 0.4142, 0.4034, 0.3826, 0.366, 0.3394, 0.3549, 0.3696, 
0.3657, 0.3802, 0.356, 0.3815, 0.3791, 0.3612, 0.3547, 0.364, 
0.4019, 0.4252, 0.4156, 0.4196, 0.3882, 0.3672), AAVEUSDC_close =
c(388, 
365.68, 373.15, 316.69, 319.8, 306.06, 308.15, 352.45, 376.21, 
369.33, 334.15, 327.66, 334.95, 331.35, 331.56, 312.13, 313.71, 
332.95, 348.72, 353, 340.82, 342.41, 312.68, 284.99, 283.29, 
289.79, 285.09, 292.89, 267.83, 291.29, 311.21, 317.28, 324.28, 
309, 346.95, 332, 366.22, 353.36, 336.3, 352.42, 330.79, 332.13, 
296.62, 293.04, 290.18, 317.82, 338.3, 314.94, 265.25, 256.79, 
267.67, 263.11, 245.37, 244.15, 238.36, 243.35, 252.79, 247.54, 
248.14, 250.2, 268, 252.71, 255.93, 263.12, 243.33, 252.98, 259.4, 
247.46, 250.4, 247.17, 229.86, 198.12, 198.67, 204.25, 188.26, 
190.2, 221.87, 198.69, 206.74, 215.48, 212.08, 203.07, 192.45, 
180.05, 180.94, 174.26, 168.79, 164.29, 174.22, 174.76, 168.53, 
173.55, 165.31, 178.45, 174.11, 178.43, 180.33, 182.09, 192.97, 
187.89, 178.53, 182.08, 170.56, 169.11), ETHUSDC_close = c(4034.74, 
3975.39, 3879.06, 3474.91, 3436.86, 3380.71, 3313.11, 3332.66, 
3499.69, 3467.64, 3325.02, 3345.58, 3388.82, 3355.39, 3385.8, 
3358.42, 3336.65, 3447.37, 3573.18, 3633.24, 3627.35, 3674.61, 
3441.2, 3262.6, 3250.57, 3314.51, 3269.8, 3286.72, 3019.4, 3210.99, 
3326.21, 3343.59, 3415.67, 3255.79, 3438.6, 3289.19, 3350.5, 
3285.05, 3265.79, 3399.59, 3344.04, 3337.1, 3071.81, 3167.03, 
3111.09, 3272.72, 3376.27, 3261.2, 2970.48, 2711.8, 2816.61, 
2741.62, 2700.49, 2680.88, 2629.49, 2642.7, 2679.99, 2640.79, 
2673.27, 2631.72, 2775.09, 2686.11, 2688.91, 2733.38, 2618.98, 
2710.88, 2735.95, 2673.5, 2785.11, 2814.66, 2664.58, 2418.3, 
2364.72, 2319.9, 2209.36, 2196.1, 2481.43, 2276.12, 2118.01, 
2194, 2191, 2161.81, 2198.3, 2024.1, 1916.8, 1904.59, 1867.86, 
1826.58, 1935.1, 1940.6, 1910.21, 1930.4, 1876.44, 2027.93, 1970, 
1967.94, 1992.31, 1992.71, 2088.6, 2076.9, 2006.72, 1999.82, 
1882.6, 1817.51), FTMUSDC_close = c(1.381, 1.3596, 1.2222, 1.0445, 
0.9705, 1.0203, 0.9958, 0.9727, 0.9813, 0.9725, 0.8807, 0.8757, 
0.8086, 0.7783, 0.7531, 0.6871, 0.7899, 0.8195, 0.8206, 0.8372, 
0.819, 0.7973, 0.7142, 0.637, 0.6573, 0.6902, 0.7047, 0.7072, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), LINKUSDC_close =
c(29.81, 
28.04, 27.65, 23.1, 22.93, 22.65, 22.13, 22.57, 24.75, 24.58, 
22.69, 22.67, 22.08, 21.26, 20.84, 20.24, 20.79, 22.2, 23.58, 
23.4, 23.23, 23.94, 21.78, 20.25, 19.73, 20.45, 19.93, 20.12, 
18.47, 20.25, 21.26, 23.51, 24.24, 23.57, 26.55, 24.65, 26.61, 
25.63, 25.58, 26.11, 24.95, 25.93, 23.12, 23.73, 22.89, 24.92, 
25.39, 24.36, 20.71, 20.63, 20.59, 19.11, 18.59, 18.78, 18.26, 
18.7, 18.76, 18.77, 18.79, 18.33, 19.7, 18.86, 18.91, 19.07, 
17.5, 18.02, 18.21, 17.71, 17.95, 17.63, 16.36, 14.84, 15.05, 
15.3, 14.54, 14.61, 17.08, 16.21, 14.1, 16.09, 16.63, 16.47, 
15.33, 13.74, 12.88, 12.91, 13.06, 12.74, 14.54, 14.13, 13.68, 
13.95, 13.52, 14.34, 14.19, 13.98, 14.36, 14.32, 15.12, 15.46, 
15.19, 15.33, 14.13, 13.5), SUSDC_close = c(NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.7845, 0.7695, 0.6634, 
0.6347, 0.5203, 0.6205, 0.6091, 0.5908, 0.5589, 0.5404, 0.5382, 
0.4722, 0.4615, 0.463, 0.5246, 0.5934, 0.5227, 0.4553, 0.4634, 
0.4428, 0.4278, 0.436, 0.424, 0.403, 0.4082, 0.4274, 0.4568, 
0.5269, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 0.571, 0.7145, 
0.8272, 0.8685, 0.8384, 0.8258, 0.8386, 0.7306, 0.7, 0.7114, 
0.6713, 0.7287, 0.7645, 0.6435, 0.5438, 0.598, 0.5449, 0.5111, 
0.519, 0.4459, 0.4174, 0.4305, 0.4379, 0.4628, 0.5339, 0.5556, 
0.5116, 0.5051, 0.4768, 0.5134, 0.5135, 0.4959, 0.5128, 0.5276, 
0.6055, 0.6179, 0.6003, 0.6033, 0.5361, 0.4822), OMUSDC_close =
c(4.0706, 
4.025, 4.0875, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 
3.7536, 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 
3.8019, 3.8903, 3.9035, 3.9537, 3.9755, 3.862, 3.8991, 3.9685, 
4.0064, 3.9105, 3.8044, 3.7607, 3.693, 3.7698, 3.872, 3.872, 
3.7408, 3.8513, 3.6083, 3.726, 3.5371, 3.6244, 3.6144, 3.2608, 
4.5631, 4.4803, 4.602, 4.4968, 5.6786, 5.2307, 5.3276, 5.0127, 
5.6513, 5.8682, 5.7861, 5.6768, 6.1531, 5.8486, 5.8408, 6.0812, 
5.9543, 5.7494, 5.6397, 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 
7.6039, 7.5314, 7.5341, 7.6558, 8.4069, 8.268, 7.6702, 7.3587, 
7.4413, 7.4682, 7.4288, 7.8594, 7.3667, 7.1693, 7.1423, 6.9744, 
6.5149, 6.5599, 6.0548, 6.2294, 6.3179, 6.3857, 6.3399, 6.2524, 
6.566, 6.8212, 6.9633, 6.9234, 6.8089, 6.653, 6.3123, 6.3202, 
6.4494, 6.993, 6.726, 6.5015, 6.5134, 6.264, 6.2462)), class =
c("tbl_df", 
"tbl", "data.frame"), row.names = c(NA, -104L))
gabx at magnolia [R] dout(all_trade_final)
Error in dout(all_trade_final) : could not find function "dout"
gabx at magnolia [R] dput(all_trade_final)
structure(list(time = structure(c(1734372120, 1734372240, 1734372360, 
1734372480, 1734372600, 1734372720, 1734426090.135, 1734553973.032, 
1735810398.277, 1735810489.902, 1735812883.798, 1735812912.427, 
1735812922.868, 1735812934.674, 1735812945.707, 1735812955.168, 
1736177563.787, 1736177649.381, 1736261991.422, 1736262093.964, 
1736779190.992, 1736854468.083, 1736865119.74, 1736865312.915, 
1736865453.951, 1736974766.64, 1736975085.933, 1736975211.156, 
1736975380.095, 1737041368.809, 1737295523.705, 1737295650.336, 
1737315384.148, 1737333105.442, 1737335082.949, 1737336735.697, 
1737625581.878, 1737625599.839, 1737967031.492, 1737969957.279, 
1737982296.161, 1737983492.087, 1737989818.863, 1737990022.153, 
1738058503.483, 1738059550.671, 1738076112.736, 1738142709.422, 
1738157053.345, 1738157206.539, 1738161507.243, 1738163335.254, 
1738169351.788, 1738169494.283, 1738169531.258, 1738171799.704, 
1738176968.536, 1738216843.704, 1738769416.056, 1738854703.218, 
1738856868.753, 1738936692.68, 1738937334.883, 1739296718.084, 
1739379482.659, 1739446986.289, 1739979238.947, 1739996323.332, 
1740115921.015, 1740491373.055, 1740596755.646, 1740667962.173, 
1740768770.074, 1740768953.683, 1740786989.548, 1741012632.874, 
1741100761.788, 1741109444.315, 1741185527.418, 1741208042.454, 
1741283447.971, 1741283872.186, 1741295325.927, 1741295477.314, 
1741295693.088, 1741342541.164, 1741629884.419, 1741635304.779, 
1741685200.989, 1741686554.221, 1741698998.622, 1741707118.96, 
1741802675.392, 1742141908.962, 1742257808.523, 1742289195.923, 
1742297055.385, 1742302133.885, 1742302466.715, 1742325681.41, 
1742325806.343, 1742325896.024, 1742325942.537, 1742378556.512, 
1742387323.985, 1742391238.519, 1742398133.361, 1742398190.194, 
1742398284.155, 1742398685.416, 1742403613.643, 1742404126.746, 
1742871155.426, 1742891897.907, 1742892224.948, 1742998171.435, 
1743000224.05, 1743001791.162, 1743011323.324, 1743017318.549, 
1743406396.586, 1743408729.623, 1743425658.334, 1743428419.647, 
1743429808.131, 1743430795.489, 1743431687.034, 1743439548.713, 
1743440894.393, 1743445384.52, 1743495501.973, 1743504926.243, 
1743519851.83, 1743520420.807, 1743530499.577, 1743531476.483, 
1743546009.677, 1743584674.851, 1743585101.461, 1743601492.33, 
1743601850.895, 1743672899.162, 1743679321.994, 1743679387.991, 
1743780565.767, 1743785970.297), tzone = "UTC", class = c("POSIXct", 
"POSIXt")), symbol = c("FTMUSDC", "SUIUSDC", "ETHUSDC", "ENAUSDC", 
"BTCUSDC", "AAVEUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "ETHUSDC", 
"AAVEUSDC", "BTCUSDC", "ENAUSDC", "ETHUSDC", "FTMUSDC", "SUIUSDC", 
"ETHUSDC", "ENAUSDC", "AAVEUSDC", "FTMUSDC", "SUIUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "AAVEUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", 
"AAVEUSDC", "AAVEUSDC", "BTCUSDC", "AAVEUSDC", "AAVEUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC", 
"BTCUSDC", "AAVEUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"ETHUSDC", "ETHUSDC", "ETHUSDC", "BTCUSDC", "SUIUSDC", "SUIUSDC", 
"BTCUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", "BTCUSDC", 
"SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"SUIUSDC", "SUIUSDC", "SUIUSDC", "SUIUSDC", "SUSDC", "BTCUSDC", 
"SUSDC", "SUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", 
"SUSDC", "OMUSDC", "SUIUSDC", "OMUSDC", "SUIUSDC", "BTCUSDC", 
"OMUSDC", "OMUSDC", "OMUSDC", "BTCUSDC", "ETHUSDC", "SUIUSDC", 
"OMUSDC", "OMUSDC", "OMUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", 
"SUSDC", "ENAUSDC", "ENAUSDC", "ETHUSDC", "BTCUSDC", "ETHUSDC", 
"BTCUSDC", "SUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", 
"BTCUSDC", "SUSDC", "BTCUSDC", "BTCUSDC"), executed_qty = c(284270, 
80024, 91.8981, 207836, 9.3372107, 1152.058, 0.04811, 0.12324, 
-0.06504, -32.0833, 94.408, 0.96557, 17708.79, 4.882, 22584, 
4641.4, -64.6968, 194251.85, -1246.466, -306854, -61748.4, 2.42992, 
2.42014, 4.78121, 0.04825, 0.29346, 835.68, -0.001, -0.01505, 
-0.125, -621.323, -214.357, 835, 15.472, 866.666, -834.998, 1.20446, 
54.943, -936.69, -1.76856, -1.73956, -1.71811, -0.72513, -0.98166, 
4.72757, 67649.3, 4.73485, -0.393, -67622, -1.7, -1.7, 8.98573, 
36.1158, -36.1158, -8.8583, -0.70622, -27.3, 73781.2, 0.84257, 
-73781.2, -3.50343, 6.34343, -0.45516, 84682, 0.26061, 0.254, 
-0.36895, 0.75773, 323689.3, -2.69675, 22917.9, 0.58439, 2.06429, 
-2.06429, 2.07134, -6.12345, -107599.9, 102163, -102163, 92527.9, 
-323689.3, -3.09273, 273454, -273454, 3.09273, 1.54911, 2.54393, 
2, 1.52842, 1.48698, 1.36813, -0.01848, 0.42519, 528333.3, -528333.3, 
37580, -43102.8, -37580, -49425.1, -3, 354, 502, 34532, -0.01435, 
124.7401, 106269.9, -2178, -586, -32624, 2.82199, 13326.3, 1.40107, 
447761.1, 142861.76, 490049.63, -0.3663, -0.07286, -140.3605, 
0.4878, 63813.8, -119596.2, 5.78271, -3.37969, -3.41518, 6.7704, 
-6.75106, 6.71609, -6.72629, 6.71421, -6.7396, 6.6851, -6.74, 
6.717, -0.17957, -6.59629, -3.30205, 10.01426, -0.03538, -6.5872, 
6.56085, -6.56, -359471.3, -6.56, -152437.4, 7, 7.40359), price =
c(1.382, 
4.7256, 4038, 1.1855, 107012, 386.55, 107358.81, 101422.93, 96408.23, 
3443.981937, 332.340557, 96606.12, 1.043348, 3460.4, 0.856681, 
4.411298, 3698.158383, 1.231695, 323.031195, 0.732393, 4.368867, 
96526.3, 96916.53115, 97133.32, 97228.23, 99651.73, 0.003195, 
99519.61, 99663.37, 98394.97, 0.00302, 0.00301, 0.003131, 0.003003, 
0.003005, 0.003131, 101941.107914, 333.943712, 293.405892,
98950.008481, 
100600, 101335.283692, 102050, 101868.208951, 102900, 0.000038, 
102741.596027, 294.738321, 3.649213, 101846.9, 101845.270978, 
102368.611214, 0.03027, 0.03026, 0.03027, 102384.062461, 3.757, 
0.000038, 98487.23, 3.274561, 97076.26334, 98853.757704, 99403.962752, 
0.000035, 96870.45, 96050, 96382, 96426.612765, 0.000009, 88900, 
2.791, 85558.02, 84977.109628, 84683.133951, 84394.870663,
92227.890836, 
2.306263, 2.428989, 2.447165, 2.701886, 0.543194, 88418.629504, 
0.5525, 0.5515, 89720.689866, 88856.101525, 78618.406955, 79413.144936,
81500, 80700, 80000, 81125.99, 81928.04, 0.000006, 0.000006, 
0.000085, 0.000028, 0.000083, 0.000027, 82025.99514, 6.946406, 
6.945675, 6.949552, 83618, 0.024, 0.000028, 6.732009, 6.733288, 
6.725032, 84392.65, 2.401251, 84686.879799, 0.000007, 0.000005, 
0.000005, 2033.5, 86605.99, 0.023223, 86100, 0.595482, 2.247826, 
82214.102411, 82936.397434, 82074.529897, 82801.529337, 83038.750762, 
83471.184268, 83344.568664, 83494.401651, 83179.906336, 83857.962478, 
84146.764724, 84460.185312, 84642.9, 84987.11819, 84795.687321, 
85376.758785, 84783.59, 85104.418136, 85446.292013, 85867.737502, 
0.000006, 83126.156483, 0.000005, 83255.75794, 83355.928936), 
    cummulative_quote_qty = c(392861.14, 378161.4144, 371084.5278, 
    246389.578, 999193.5914284, 445328.0199, 5165.0323491,
12499.3618932, 
    -6270.3912792, -110494.305684, 31375.60727, 93279.9712884, 
    18476.435418, 16893.6728, 19347.2739, 20474.59783, -239259.013301, 
    239258.996981, -402647.40174, -224737.6957, -269770.56434, 
    234551.186896, 234551.5736976, 464414.8009172, 4691.2620975, 
    29243.7966858, 266319.604811376, -99.51961, -1499.9337185, 
    -12299.37125, -197239.18517336, -67873.8886713888, 274484.30729385,
    4661.01711291216, 262699.317950113, -263696.723173419,
122783.9868375, 
    18347.86937, -274830.36532, -174999.0269994, -174999.736, 
    -174105.1642638, -73999.5165, -99999.9459993, 486466.953, 
    263987.20719179, 486466.0459494, -115.83216, -246767.10508, 
    -173139.73, -173136.9606632, 919856.7008428, 111456.491386979, 
    -111574.857313511, -27375.5581302466, -72305.6725914, -102.5661, 
    295672.253552752, 82982.3853811, -241601.07335, -340099.8932747, 
    627071.8922352, -45244.7076862, 285495.9929367, 25245.4079745, 
    24396.7, -35560.1389, 73065.3372901, 285857.093441205, -239741.075,
    63963.8589, 49999.2513078, 175417.3976347, -174810.5465838, 
    174810.4713998, -564752.8781372, -248153.65645, 248152.80384, 
    -250009.68949, 249999.80453, -175826.00598, -273454.9480248, 
    151083.27835, -150809.881, 277481.8691678, 137647.8754335, 
    199999.7240045, 158826.2898715, 124566.23, 119999.286, 109450.4, 
    -1499.2082952, 34834.9833276, 263584.405570068, -265801.376630196, 
    265446.361943, -99795.399054624, -257554.5326306, -110104.81917606,
    -246077.9854208, 2459.0276, 3486.7288, 239981.9146, -1199.9183, 
    250883.12695668, 249352.169449152, -14662.3161, -3945.707, 
    -219397.4406, 238155.2143735, 31999.78779, 118652.2466801, 
    273464.042572539, 61729.130735312, 211648.367785071, -744.87105, 
    -6310.1124314, -283927.208051972, 41999.58, 37999.95756, 
    -268831.48716, 475420.3121534, -280299.3130424, -280299.2930129, 
    560599.4742213, -560599.5887202, 560599.9859508, -560599.7387605, 
    560598.9465102, -560599.2967411, 560598.8649637, -567149.194237, 
    567319.0647382, -15199.325553, -560599.6778464, -279999.5993174, 
    854985.0604314, -2999.6434142, -560599.8231446, 560600.3049556, 
    -563292.3580137, -180282.355521318, -545307.5865265, -
63604.52039374, 
    582790.305582, 617133.121909), day = structure(c(20073, 20073, 
    20073, 20073, 20073, 20073, 20074, 20075, 20090, 20090, 20090, 
    20090, 20090, 20090, 20090, 20090, 20094, 20094, 20095, 20095, 
    20101, 20102, 20102, 20102, 20102, 20103, 20103, 20103, 20103, 
    20104, 20107, 20107, 20107, 20108, 20108, 20108, 20111, 20111, 
    20115, 20115, 20115, 20115, 20115, 20115, 20116, 20116, 20116, 
    20117, 20117, 20117, 20117, 20117, 20117, 20117, 20117, 20117, 
    20117, 20118, 20124, 20125, 20125, 20126, 20126, 20130, 20131, 
    20132, 20138, 20138, 20140, 20144, 20145, 20146, 20147, 20147, 
    20147, 20150, 20151, 20151, 20152, 20152, 20153, 20153, 20153, 
    20153, 20153, 20154, 20157, 20157, 20158, 20158, 20158, 20158, 
    20159, 20163, 20165, 20165, 20165, 20165, 20165, 20165, 20165, 
    20165, 20165, 20166, 20166, 20166, 20166, 20166, 20166, 20166, 
    20166, 20166, 20172, 20172, 20172, 20173, 20173, 20173, 20173, 
    20173, 20178, 20178, 20178, 20178, 20178, 20178, 20178, 20178, 
    20178, 20178, 20179, 20179, 20179, 20179, 20179, 20179, 20179, 
    20180, 20180, 20180, 20180, 20181, 20181, 20181, 20182, 20182
    ), class = "Date")), row.names = c(NA, -146L), class = c("tbl_df", 
"tbl", "data.frame"))


All prices, quantity, date/time etc are given by functions from
Binancer package which connect to Binance (the exchange) API and there
is no manual operations. 

Below is the first lines of the final tibble I would like:
result <- structure(list(time = structure(c(1734375599, 1734375720,
1734375840, 
1734375960, 1734376080, 1734376200, 1734376320, 1734461999), tzone =
"", class = c("POSIXct", 
"POSIXt")), BTCUSDC = c(NA, NA, NA, NA, NA, 107112.36, NA, NA ),
SUIUSDC = c(NA, NA, 4.6923, NA, NA, NA, NA, NA), ENAUSDC = c(NA, 
NA, NA, NA, 1.0256, NA, NA, NA), AAVEUSDC = c(NA, NA, NA, NA, 
NA, NA, 386.55, NA), ETHUSDC = c(NA, NA, NA, 3879.06, NA, NA, 
NA, NA), FTMUSDC = c(NA, 1.381, NA, NA, NA, NA, NA, NA), executed_qty =
c(NA, 
284270, 80024, 91.8981, 207836, 9.3372107, 1152.058, NA), price = c(NA,
NA, NA, NA, NA, NA, NA, NA), BTCUSDC_close = c(107112.36, NA, 
NA, NA, NA, NA, NA, 107517.25), SUIUSDC_close = c(4.7252, NA, 
NA, NA, NA, NA, NA, 4.6923), ENAUSDC_close = c(1.1862, NA, NA, 
NA, NA, NA, NA, 1.1412), AAVEUSDC_close = c(388, NA, NA, NA, 
NA, NA, NA, 365.68), ETHUSDC_close = c(4034.74, NA, NA, NA, NA, 
NA, NA, 3975.39), FTMUSDC_close = c(1.381, NA, NA, NA, NA, NA, 
NA, 1.3596), LINKUSDC_close = c(29.81, NA, NA, NA, NA, NA, NA, 
28.04), SUSDC_close = c(NA, NA, NA, NA, NA, NA, NA, NA), OMUSDC_close =
c(4.0706, 
NA, NA, NA, NA, NA, NA, 4.025)), row.names = c(NA, -8L), class =
c("tbl_df", "tbl", "data.frame"))

The idea is to have 
- date for closing price (everyday @ 19:59:59)
- date for trades
These two operations must be ordered by time, mix time of closing
prices and time of trades
- price of token for the daily closes (name TOKEN_close) and price when
the trade was executed .

I have tried many many way to build my final tibble "result", and I am
looking for help.
Thank you in advance.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250407/4f3b28d7/attachment.sig>

From |oopv|ny| @end|ng |rom gm@||@com  Mon Apr  7 12:20:43 2025
From: |oopv|ny| @end|ng |rom gm@||@com (Loop Vinyl)
Date: Mon, 7 Apr 2025 07:20:43 -0300
Subject: [R] Request to Unsubscribe from R Forum Replies
Message-ID: <CAF_u4OnFgo7vrUsk2DBMqZvc3Hs7t_mxdmLCPgtjh4ANVUYM8Q@mail.gmail.com>

Hello,

I would like to request the removal of my email address from the R forum
reply/update list. I no longer wish to receive notifications or messages
related to forum discussions.

Thank you for your attention and understanding.

Best regards,

	[[alternative HTML version deleted]]


From tebert @end|ng |rom u||@edu  Mon Apr  7 14:16:04 2025
From: tebert @end|ng |rom u||@edu (Ebert,Timothy Aaron)
Date: Mon, 7 Apr 2025 12:16:04 +0000
Subject: [R] 
 Can't join/merge two tibbles with lots of variables the way I want
In-Reply-To: <ec6f04b141b6a254cb32543a6da3cf08de1e2a01.camel@gmail.com>
References: <ec6f04b141b6a254cb32543a6da3cf08de1e2a01.camel@gmail.com>
Message-ID: <CH3PR22MB4514BC1846F5CEF37DEB902ECFAA2@CH3PR22MB4514.namprd22.prod.outlook.com>

The basic process is to make each tibble have one or more columns to merge by. Then merge the tibbles. Can you show us a couple of tries and describe why or how they failed? Note that you cannot merge using a row in one tibble and a column in the other tibble without first reshaping the first tibble.

-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud Gaboury
Sent: Sunday, April 6, 2025 11:48 PM
To: r-help at r-project.org
Subject: [R] Can't join/merge two tibbles with lots of variables the way I want

[External Email]

I work on writing a portfolio journal with a daily valuation of my portfolio + the trades I have done on the day.
My "time" column is made of dates (day + time) which are either the closing prices of my assets (each day @ 19:59:59 for convenience. I work on crypto currencies and markets are open 24/24 7/7, so thete is no real official closing time).
To build this journal, I can rely on two tibbles:
- one is the data frame of daily closing prices of the assets I own in my portfolio. Here it is:
daily_clsong_price <- structure(list(time = structure(c(1734371999.999, 1734458399.999, 1734544799.999, 1734631199.999, 1734717599.999, 1734803999.999, 1734890399.999, 1734976799.999, 1735063199.999, 1735149599.999, 1735235999.999, 1735322399.999, 1735408799.999, 1735495199.999, 1735581599.999, 1735667999.999, 1735754399.999, 1735840799.999, 1735927199.999, 1736013599.999, 1736099999.999, 1736186399.999, 1736272799.999, 1736359199.999, 1736445599.999, 1736531999.999, 1736618399.999, 1736704799.999, 1736791199.999, 1736877599.999, 1736963999.999, 1737050399.999, 1737136799.999, 1737223199.999, 1737309599.999, 1737395999.999, 1737482399.999, 1737568799.999, 1737655199.999, 1737741599.999, 1737827999.999, 1737914399.999, 1738000799.999, 1738087199.999, 1738173599.999, 1738259999.999, 1738346399.999, 1738432799.999, 1738519199.999, 1738605599.999, 1738691999.999, 1738778399.999, 1738864799.999, 1738951199.999, 1739037599.999, 1739123999.999, 1739210399.999, 1739296799.999, 1739383199.999, 1739469599.999, 1739555999.999, 1739642399.999, 1739728799.999, 1739815199.999, 1739901599.999, 1739987999.999, 1740074399.999, 1740160799.999, 1740247199.999, 1740333599.999, 1740419999.999, 1740506399.999, 1740592799.999, 1740679199.999, 1740765599.999, 1740851999.999, 1740938399.999, 1741024799.999, 1741111199.999, 1741197599.999, 1741283999.999, 1741370399.999, 1741456799.999, 1741543199.999, 1741629599.999, 1741715999.999, 1741802399.999, 1741888799.999, 1741975199.999, 1742061599.999, 1742147999.999, 1742234399.999, 1742320799.999, 1742407199.999, 1742493599.999, 1742579999.999, 1742666399.999, 1742752799.999, 1742839199.999, 1742925599.999, 1743011999.999, 1743098399.999, 1743184799.999, 1743271199.999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC_close = c(107112.36, 107517.25, 104630.49, 98692.01, 97172, 97559.99, 95555.99, 93260, 98743.99, 98475.99, 95740.01, 94156.03, 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 96673.8, 97966.09, 98004.92, 97722.38, 101865.33, 97236.45, 94004.02, 92686.72, 95786.01, 94113, 95097.6, 91933.25, 96481.8, 98651.62, 99823.04, 104162, 103742.8, 104997.99, 102844.44, 106166, 104336, 105945.99, 106516.81, 104880.02, 104927.47, 99111.87, 102587, 102404, 105296.86, 104591.47, 102247.03, 97166.51, 99352, 99215.17, 97570.44, 96738.02, 97462, 96363.99, 96190, 97523.98, 96164.78, 97368.43, 95716.93, 98570.1, 97431.42, 96994, 95494.02, 94068, 96394.6, 97991.02, 96982, 96635.96, 95664.1, 94650, 87156.01, 85969.64, 84507.03, 83605.12, 85172, 94100.16, 90258.01, 85415.99, 89683.45, 88625.27, 87676.78, 85929.38, 82358.02, 78414, 81291.59, 81839.98, 80047.99, 84365.03, 84427.7, 83916.04, 84189.04, 81453.98, 84236, 84048.03, 83983.62, 84232.07, 85008, 88482.01, 87958.04, 86578.83, 86890.11, 83945.98, 82308), SUIUSDC_close = c(4.7252, 4.6923, 4.7017, 4.2422, 4.4909, 4.5497, 4.3416, 4.293, 4.6079, 4.5242, 4.1963, 4.2141, 4.1772, 4.123, 4.1906, 4.2085, 4.1817, 4.3391, 4.708, 5.1388, 5.2029, 5.224, 4.8313, 4.5976, 4.7354, 5.1894, 4.941, 4.8115, 4.4785, 4.5784, 4.6566, 4.9161, 4.7858, 4.8951, 4.948, 4.3919, 4.6632, 4.6118, 4.3972, 4.4267, 4.1615, 4.1407, 3.7285, 3.7674, 3.7116, 4.1375, 4.1282, 3.935, 3.3428, 3.5558, 3.7017, 3.3519, 3.1784, 3.1207, 3.0176, 3.0415, 3.2668, 3.3746, 3.38, 3.4623, 3.7018, 3.4095, 3.298, 3.1857, 2.9762, 3.1934, 3.4429, 3.3604, 3.4162, 3.3258, 3.0418, 2.8179, 2.8598, 2.8307, 2.7903, 2.8014, 3.1772, 2.8541, 2.416, 2.5384, 2.816, 2.6891, 2.5263, 2.271, 2.1051, 2.1651, 2.2203, 2.1238, 2.3503, 2.362, 2.2691, 2.3323, 2.2459, 2.3785, 2.3867, 2.2767, 2.2898, 2.2543, 2.4363, 2.4686, 2.5708, 2.7651, 2.5222, 2.2825), ENAUSDC_close = c(1.1862, 1.1412, 1.0928, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255, 1.0493, 1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192, 0.9212, 1.0404, 1.2138, 1.2446, 1.2394, 1.1984, 1.0946, 0.9606, 0.916, 0.9408, 0.8888, 0.8978, 0.7794, 0.8277, 0.9005, 0.9133, 0.9355, 0.8662, 0.9445, 0.9112, 0.9168, 0.8951, 0.846, 0.9025, 0.8719, 0.8238, 0.7188, 0.7147, 0.6877, 0.7732, 0.7878, 0.7231, 0.5993, 0.6344, 0.6393, 0.5535, 0.5022, 0.5092, 0.5175, 0.4806, 0.4975, 0.4564, 0.429, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411, 0.401, 0.4058, 0.4348, 0.4575, 0.454, 0.4036, 0.4067, 0.4129, 0.4285, 0.4164, 0.3944, 0.447, 0.395, 0.359, 0.3626, 0.38, 0.4372, 0.4457, 0.4142, 0.4034, 0.3826, 0.366, 0.3394, 0.3549, 0.3696, 0.3657, 0.3802, 0.356, 0.3815, 0.3791, 0.3612, 0.3547, 0.364, 0.4019, 0.4252, 0.4156, 0.4196, 0.3882, 0.3672), AAVEUSDC_close = c(388, 365.68, 373.15, 316.69, 319.8, 306.06, 308.15, 352.45, 376.21, 369.33, 334.15, 327.66, 334.95, 331.35, 331.56, 312.13, 313.71, 332.95, 348.72, 353, 340.82, 342.41, 312.68, 284.99, 283.29, 289.79, 285.09, 292.89, 267.83, 291.29, 311.21, 317.28, 324.28, 309, 346.95, 332, 366.22, 353.36, 336.3, 352.42, 330.79, 332.13, 296.62, 293.04, 290.18, 317.82, 338.3, 314.94, 265.25, 256.79, 267.67, 263.11, 245.37, 244.15, 238.36, 243.35, 252.79, 247.54, 248.14, 250.2, 268, 252.71, 255.93, 263.12, 243.33, 252.98, 259.4, 247.46, 250.4, 247.17, 229.86, 198.12, 198.67, 204.25, 188.26, 190.2, 221.87, 198.69, 206.74, 215.48, 212.08, 203.07, 192.45, 180.05, 180.94, 174.26, 168.79, 164.29, 174.22, 174.76, 168.53, 173.55, 165.31, 178.45, 174.11, 178.43, 180.33, 182.09, 192.97, 187.89, 178.53, 182.08, 170.56, 169.11), ETHUSDC_close = c(4034.74, 3975.39, 3879.06, 3474.91, 3436.86, 3380.71, 3313.11, 3332.66, 3499.69, 3467.64, 3325.02, 3345.58, 3388.82, 3355.39, 3385.8, 3358.42, 3336.65, 3447.37, 3573.18, 3633.24, 3627.35, 3674.61, 3441.2, 3262.6, 3250.57, 3314.51, 3269.8, 3286.72, 3019.4, 3210.99, 3326.21, 3343.59, 3415.67, 3255.79, 3438.6, 3289.19, 3350.5, 3285.05, 3265.79, 3399.59, 3344.04, 3337.1, 3071.81, 3167.03, 3111.09, 3272.72, 3376.27, 3261.2, 2970.48, 2711.8, 2816.61, 2741.62, 2700.49, 2680.88, 2629.49, 2642.7, 2679.99, 2640.79, 2673.27, 2631.72, 2775.09, 2686.11, 2688.91, 2733.38, 2618.98, 2710.88, 2735.95, 2673.5, 2785.11, 2814.66, 2664.58, 2418.3, 2364.72, 2319.9, 2209.36, 2196.1, 2481.43, 2276.12, 2118.01, 2194, 2191, 2161.81, 2198.3, 2024.1, 1916.8, 1904.59, 1867.86, 1826.58, 1935.1, 1940.6, 1910.21, 1930.4, 1876.44, 2027.93, 1970, 1967.94, 1992.31, 1992.71, 2088.6, 2076.9, 2006.72, 1999.82, 1882.6, 1817.51), FTMUSDC_close = c(1.381, 1.3596, 1.2222, 1.0445, 0.9705, 1.0203, 0.9958, 0.9727, 0.9813, 0.9725, 0.8807, 0.8757, 0.8086, 0.7783, 0.7531, 0.6871, 0.7899, 0.8195, 0.8206, 0.8372, 0.819, 0.7973, 0.7142, 0.637, 0.6573, 0.6902, 0.7047, 0.7072, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), LINKUSDC_close = c(29.81, 28.04, 27.65, 23.1, 22.93, 22.65, 22.13, 22.57, 24.75, 24.58, 22.69, 22.67, 22.08, 21.26, 20.84, 20.24, 20.79, 22.2, 23.58, 23.4, 23.23, 23.94, 21.78, 20.25, 19.73, 20.45, 19.93, 20.12, 18.47, 20.25, 21.26, 23.51, 24.24, 23.57, 26.55, 24.65, 26.61, 25.63, 25.58, 26.11, 24.95, 25.93, 23.12, 23.73, 22.89, 24.92, 25.39, 24.36, 20.71, 20.63, 20.59, 19.11, 18.59, 18.78, 18.26, 18.7, 18.76, 18.77, 18.79, 18.33, 19.7, 18.86, 18.91, 19.07, 17.5, 18.02, 18.21, 17.71, 17.95, 17.63, 16.36, 14.84, 15.05, 15.3, 14.54, 14.61, 17.08, 16.21, 14.1, 16.09, 16.63, 16.47, 15.33, 13.74, 12.88, 12.91, 13.06, 12.74, 14.54, 14.13, 13.68, 13.95, 13.52, 14.34, 14.19, 13.98, 14.36, 14.32, 15.12, 15.46, 15.19, 15.33, 14.13, 13.5), SUSDC_close = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.7845, 0.7695, 0.6634, 0.6347, 0.5203, 0.6205, 0.6091, 0.5908, 0.5589, 0.5404, 0.5382, 0.4722, 0.4615, 0.463, 0.5246, 0.5934, 0.5227, 0.4553, 0.4634, 0.4428, 0.4278, 0.436, 0.424, 0.403, 0.4082, 0.4274, 0.4568, 0.5269, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 0.571, 0.7145, 0.8272, 0.8685, 0.8384, 0.8258, 0.8386, 0.7306, 0.7, 0.7114, 0.6713, 0.7287, 0.7645, 0.6435, 0.5438, 0.598, 0.5449, 0.5111, 0.519, 0.4459, 0.4174, 0.4305, 0.4379, 0.4628, 0.5339, 0.5556, 0.5116, 0.5051, 0.4768, 0.5134, 0.5135, 0.4959, 0.5128, 0.5276, 0.6055, 0.6179, 0.6003, 0.6033, 0.5361, 0.4822), OMUSDC_close = c(4.0706, 4.025, 4.0875, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 3.7536, 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 3.8019, 3.8903, 3.9035, 3.9537, 3.9755, 3.862, 3.8991, 3.9685, 4.0064, 3.9105, 3.8044, 3.7607, 3.693, 3.7698, 3.872, 3.872, 3.7408, 3.8513, 3.6083, 3.726, 3.5371, 3.6244, 3.6144, 3.2608, 4.5631, 4.4803, 4.602, 4.4968, 5.6786, 5.2307, 5.3276, 5.0127, 5.6513, 5.8682, 5.7861, 5.6768, 6.1531, 5.8486, 5.8408, 6.0812, 5.9543, 5.7494, 5.6397, 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 7.6039, 7.5314, 7.5341, 7.6558, 8.4069, 8.268, 7.6702, 7.3587, 7.4413, 7.4682, 7.4288, 7.8594, 7.3667, 7.1693, 7.1423, 6.9744, 6.5149, 6.5599, 6.0548, 6.2294, 6.3179, 6.3857, 6.3399, 6.2524, 6.566, 6.8212, 6.9633, 6.9234, 6.8089, 6.653, 6.3123, 6.3202, 6.4494, 6.993, 6.726, 6.5015, 6.5134, 6.264, 6.2462)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -104L))

- one is a data frame with all my trades : qty x price, with dates token_daily_close <- structure(list(time = structure(c(1734371999.999, 1734458399.999, 1734544799.999, 1734631199.999, 1734717599.999, 1734803999.999, 1734890399.999, 1734976799.999, 1735063199.999, 1735149599.999, 1735235999.999, 1735322399.999, 1735408799.999, 1735495199.999, 1735581599.999, 1735667999.999, 1735754399.999, 1735840799.999, 1735927199.999, 1736013599.999, 1736099999.999, 1736186399.999, 1736272799.999, 1736359199.999, 1736445599.999, 1736531999.999, 1736618399.999, 1736704799.999, 1736791199.999, 1736877599.999, 1736963999.999, 1737050399.999, 1737136799.999, 1737223199.999, 1737309599.999, 1737395999.999, 1737482399.999, 1737568799.999, 1737655199.999, 1737741599.999, 1737827999.999, 1737914399.999, 1738000799.999, 1738087199.999, 1738173599.999, 1738259999.999, 1738346399.999, 1738432799.999, 1738519199.999, 1738605599.999, 1738691999.999, 1738778399.999, 1738864799.999, 1738951199.999, 1739037599.999, 1739123999.999, 1739210399.999, 1739296799.999, 1739383199.999, 1739469599.999, 1739555999.999, 1739642399.999, 1739728799.999, 1739815199.999, 1739901599.999, 1739987999.999, 1740074399.999, 1740160799.999, 1740247199.999, 1740333599.999, 1740419999.999, 1740506399.999, 1740592799.999, 1740679199.999, 1740765599.999, 1740851999.999, 1740938399.999, 1741024799.999, 1741111199.999, 1741197599.999, 1741283999.999, 1741370399.999, 1741456799.999, 1741543199.999, 1741629599.999, 1741715999.999, 1741802399.999, 1741888799.999, 1741975199.999, 1742061599.999, 1742147999.999, 1742234399.999, 1742320799.999, 1742407199.999, 1742493599.999, 1742579999.999, 1742666399.999, 1742752799.999, 1742839199.999, 1742925599.999, 1743011999.999, 1743098399.999, 1743184799.999, 1743271199.999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC_close = c(107112.36, 107517.25, 104630.49, 98692.01, 97172, 97559.99, 95555.99, 93260, 98743.99, 98475.99, 95740.01, 94156.03, 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 96673.8, 97966.09, 98004.92, 97722.38, 101865.33, 97236.45, 94004.02, 92686.72, 95786.01, 94113, 95097.6, 91933.25, 96481.8, 98651.62, 99823.04, 104162, 103742.8, 104997.99, 102844.44, 106166, 104336, 105945.99, 106516.81, 104880.02, 104927.47, 99111.87, 102587, 102404, 105296.86, 104591.47, 102247.03, 97166.51, 99352, 99215.17, 97570.44, 96738.02, 97462, 96363.99, 96190, 97523.98, 96164.78, 97368.43, 95716.93, 98570.1, 97431.42, 96994, 95494.02, 94068, 96394.6, 97991.02, 96982, 96635.96, 95664.1, 94650, 87156.01, 85969.64, 84507.03, 83605.12, 85172, 94100.16, 90258.01, 85415.99, 89683.45, 88625.27, 87676.78, 85929.38, 82358.02, 78414, 81291.59, 81839.98, 80047.99, 84365.03, 84427.7, 83916.04, 84189.04, 81453.98, 84236, 84048.03, 83983.62, 84232.07, 85008, 88482.01, 87958.04, 86578.83, 86890.11, 83945.98, 82308), SUIUSDC_close = c(4.7252, 4.6923, 4.7017, 4.2422, 4.4909, 4.5497, 4.3416, 4.293, 4.6079, 4.5242, 4.1963, 4.2141, 4.1772, 4.123, 4.1906, 4.2085, 4.1817, 4.3391, 4.708, 5.1388, 5.2029, 5.224, 4.8313, 4.5976, 4.7354, 5.1894, 4.941, 4.8115, 4.4785, 4.5784, 4.6566, 4.9161, 4.7858, 4.8951, 4.948, 4.3919, 4.6632, 4.6118, 4.3972, 4.4267, 4.1615, 4.1407, 3.7285, 3.7674, 3.7116, 4.1375, 4.1282, 3.935, 3.3428, 3.5558, 3.7017, 3.3519, 3.1784, 3.1207, 3.0176, 3.0415, 3.2668, 3.3746, 3.38, 3.4623, 3.7018, 3.4095, 3.298, 3.1857, 2.9762, 3.1934, 3.4429, 3.3604, 3.4162, 3.3258, 3.0418, 2.8179, 2.8598, 2.8307, 2.7903, 2.8014, 3.1772, 2.8541, 2.416, 2.5384, 2.816, 2.6891, 2.5263, 2.271, 2.1051, 2.1651, 2.2203, 2.1238, 2.3503, 2.362, 2.2691, 2.3323, 2.2459, 2.3785, 2.3867, 2.2767, 2.2898, 2.2543, 2.4363, 2.4686, 2.5708, 2.7651, 2.5222, 2.2825), ENAUSDC_close = c(1.1862, 1.1412, 1.0928, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255, 1.0493, 1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192, 0.9212, 1.0404, 1.2138, 1.2446, 1.2394, 1.1984, 1.0946, 0.9606, 0.916, 0.9408, 0.8888, 0.8978, 0.7794, 0.8277, 0.9005, 0.9133, 0.9355, 0.8662, 0.9445, 0.9112, 0.9168, 0.8951, 0.846, 0.9025, 0.8719, 0.8238, 0.7188, 0.7147, 0.6877, 0.7732, 0.7878, 0.7231, 0.5993, 0.6344, 0.6393, 0.5535, 0.5022, 0.5092, 0.5175, 0.4806, 0.4975, 0.4564, 0.429, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411, 0.401, 0.4058, 0.4348, 0.4575, 0.454, 0.4036, 0.4067, 0.4129, 0.4285, 0.4164, 0.3944, 0.447, 0.395, 0.359, 0.3626, 0.38, 0.4372, 0.4457, 0.4142, 0.4034, 0.3826, 0.366, 0.3394, 0.3549, 0.3696, 0.3657, 0.3802, 0.356, 0.3815, 0.3791, 0.3612, 0.3547, 0.364, 0.4019, 0.4252, 0.4156, 0.4196, 0.3882, 0.3672), AAVEUSDC_close = c(388, 365.68, 373.15, 316.69, 319.8, 306.06, 308.15, 352.45, 376.21, 369.33, 334.15, 327.66, 334.95, 331.35, 331.56, 312.13, 313.71, 332.95, 348.72, 353, 340.82, 342.41, 312.68, 284.99, 283.29, 289.79, 285.09, 292.89, 267.83, 291.29, 311.21, 317.28, 324.28, 309, 346.95, 332, 366.22, 353.36, 336.3, 352.42, 330.79, 332.13, 296.62, 293.04, 290.18, 317.82, 338.3, 314.94, 265.25, 256.79, 267.67, 263.11, 245.37, 244.15, 238.36, 243.35, 252.79, 247.54, 248.14, 250.2, 268, 252.71, 255.93, 263.12, 243.33, 252.98, 259.4, 247.46, 250.4, 247.17, 229.86, 198.12, 198.67, 204.25, 188.26, 190.2, 221.87, 198.69, 206.74, 215.48, 212.08, 203.07, 192.45, 180.05, 180.94, 174.26, 168.79, 164.29, 174.22, 174.76, 168.53, 173.55, 165.31, 178.45, 174.11, 178.43, 180.33, 182.09, 192.97, 187.89, 178.53, 182.08, 170.56, 169.11), ETHUSDC_close = c(4034.74, 3975.39, 3879.06, 3474.91, 3436.86, 3380.71, 3313.11, 3332.66, 3499.69, 3467.64, 3325.02, 3345.58, 3388.82, 3355.39, 3385.8, 3358.42, 3336.65, 3447.37, 3573.18, 3633.24, 3627.35, 3674.61, 3441.2, 3262.6, 3250.57, 3314.51, 3269.8, 3286.72, 3019.4, 3210.99, 3326.21, 3343.59, 3415.67, 3255.79, 3438.6, 3289.19, 3350.5, 3285.05, 3265.79, 3399.59, 3344.04, 3337.1, 3071.81, 3167.03, 3111.09, 3272.72, 3376.27, 3261.2, 2970.48, 2711.8, 2816.61, 2741.62, 2700.49, 2680.88, 2629.49, 2642.7, 2679.99, 2640.79, 2673.27, 2631.72, 2775.09, 2686.11, 2688.91, 2733.38, 2618.98, 2710.88, 2735.95, 2673.5, 2785.11, 2814.66, 2664.58, 2418.3, 2364.72, 2319.9, 2209.36, 2196.1, 2481.43, 2276.12, 2118.01, 2194, 2191, 2161.81, 2198.3, 2024.1, 1916.8, 1904.59, 1867.86, 1826.58, 1935.1, 1940.6, 1910.21, 1930.4, 1876.44, 2027.93, 1970, 1967.94, 1992.31, 1992.71, 2088.6, 2076.9, 2006.72, 1999.82, 1882.6, 1817.51), FTMUSDC_close = c(1.381, 1.3596, 1.2222, 1.0445, 0.9705, 1.0203, 0.9958, 0.9727, 0.9813, 0.9725, 0.8807, 0.8757, 0.8086, 0.7783, 0.7531, 0.6871, 0.7899, 0.8195, 0.8206, 0.8372, 0.819, 0.7973, 0.7142, 0.637, 0.6573, 0.6902, 0.7047, 0.7072, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), LINKUSDC_close = c(29.81, 28.04, 27.65, 23.1, 22.93, 22.65, 22.13, 22.57, 24.75, 24.58, 22.69, 22.67, 22.08, 21.26, 20.84, 20.24, 20.79, 22.2, 23.58, 23.4, 23.23, 23.94, 21.78, 20.25, 19.73, 20.45, 19.93, 20.12, 18.47, 20.25, 21.26, 23.51, 24.24, 23.57, 26.55, 24.65, 26.61, 25.63, 25.58, 26.11, 24.95, 25.93, 23.12, 23.73, 22.89, 24.92, 25.39, 24.36, 20.71, 20.63, 20.59, 19.11, 18.59, 18.78, 18.26, 18.7, 18.76, 18.77, 18.79, 18.33, 19.7, 18.86, 18.91, 19.07, 17.5, 18.02, 18.21, 17.71, 17.95, 17.63, 16.36, 14.84, 15.05, 15.3, 14.54, 14.61, 17.08, 16.21, 14.1, 16.09, 16.63, 16.47, 15.33, 13.74, 12.88, 12.91, 13.06, 12.74, 14.54, 14.13, 13.68, 13.95, 13.52, 14.34, 14.19, 13.98, 14.36, 14.32, 15.12, 15.46, 15.19, 15.33, 14.13, 13.5), SUSDC_close = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.7845, 0.7695, 0.6634, 0.6347, 0.5203, 0.6205, 0.6091, 0.5908, 0.5589, 0.5404, 0.5382, 0.4722, 0.4615, 0.463, 0.5246, 0.5934, 0.5227, 0.4553, 0.4634, 0.4428, 0.4278, 0.436, 0.424, 0.403, 0.4082, 0.4274, 0.4568, 0.5269, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 0.571, 0.7145, 0.8272, 0.8685, 0.8384, 0.8258, 0.8386, 0.7306, 0.7, 0.7114, 0.6713, 0.7287, 0.7645, 0.6435, 0.5438, 0.598, 0.5449, 0.5111, 0.519, 0.4459, 0.4174, 0.4305, 0.4379, 0.4628, 0.5339, 0.5556, 0.5116, 0.5051, 0.4768, 0.5134, 0.5135, 0.4959, 0.5128, 0.5276, 0.6055, 0.6179, 0.6003, 0.6033, 0.5361, 0.4822), OMUSDC_close = c(4.0706, 4.025, 4.0875, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 3.7536, 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 3.8019, 3.8903, 3.9035, 3.9537, 3.9755, 3.862, 3.8991, 3.9685, 4.0064, 3.9105, 3.8044, 3.7607, 3.693, 3.7698, 3.872, 3.872, 3.7408, 3.8513, 3.6083, 3.726, 3.5371, 3.6244, 3.6144, 3.2608, 4.5631, 4.4803, 4.602, 4.4968, 5.6786, 5.2307, 5.3276, 5.0127, 5.6513, 5.8682, 5.7861, 5.6768, 6.1531, 5.8486, 5.8408, 6.0812, 5.9543, 5.7494, 5.6397, 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 7.6039, 7.5314, 7.5341, 7.6558, 8.4069, 8.268, 7.6702, 7.3587, 7.4413, 7.4682, 7.4288, 7.8594, 7.3667, 7.1693, 7.1423, 6.9744, 6.5149, 6.5599, 6.0548, 6.2294, 6.3179, 6.3857, 6.3399, 6.2524, 6.566, 6.8212, 6.9633, 6.9234, 6.8089, 6.653, 6.3123, 6.3202, 6.4494, 6.993, 6.726, 6.5015, 6.5134, 6.264, 6.2462)), class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -104L)) gabx at magnolia [R] dout(all_trade_final) Error in dout(all_trade_final) : could not find function "dout"
gabx at magnolia [R] dput(all_trade_final)
structure(list(time = structure(c(1734372120, 1734372240, 1734372360, 1734372480, 1734372600, 1734372720, 1734426090.135, 1734553973.032, 1735810398.277, 1735810489.902, 1735812883.798, 1735812912.427, 1735812922.868, 1735812934.674, 1735812945.707, 1735812955.168, 1736177563.787, 1736177649.381, 1736261991.422, 1736262093.964, 1736779190.992, 1736854468.083, 1736865119.74, 1736865312.915, 1736865453.951, 1736974766.64, 1736975085.933, 1736975211.156, 1736975380.095, 1737041368.809, 1737295523.705, 1737295650.336, 1737315384.148, 1737333105.442, 1737335082.949, 1737336735.697, 1737625581.878, 1737625599.839, 1737967031.492, 1737969957.279, 1737982296.161, 1737983492.087, 1737989818.863, 1737990022.153, 1738058503.483, 1738059550.671, 1738076112.736, 1738142709.422, 1738157053.345, 1738157206.539, 1738161507.243, 1738163335.254, 1738169351.788, 1738169494.283, 1738169531.258, 1738171799.704, 1738176968.536, 1738216843.704, 1738769416.056, 1738854703.218, 1738856868.753, 1738936692.68, 1738937334.883, 1739296718.084, 1739379482.659, 1739446986.289, 1739979238.947, 1739996323.332, 1740115921.015, 1740491373.055, 1740596755.646, 1740667962.173, 1740768770.074, 1740768953.683, 1740786989.548, 1741012632.874, 1741100761.788, 1741109444.315, 1741185527.418, 1741208042.454, 1741283447.971, 1741283872.186, 1741295325.927, 1741295477.314, 1741295693.088, 1741342541.164, 1741629884.419, 1741635304.779, 1741685200.989, 1741686554.221, 1741698998.622, 1741707118.96, 1741802675.392, 1742141908.962, 1742257808.523, 1742289195.923, 1742297055.385, 1742302133.885, 1742302466.715, 1742325681.41, 1742325806.343, 1742325896.024, 1742325942.537, 1742378556.512, 1742387323.985, 1742391238.519, 1742398133.361, 1742398190.194, 1742398284.155, 1742398685.416, 1742403613.643, 1742404126.746, 1742871155.426, 1742891897.907, 1742892224.948, 1742998171.435, 1743000224.05, 1743001791.162, 1743011323.324, 1743017318.549, 1743406396.586, 1743408729.623, 1743425658.334, 1743428419.647, 1743429808.131, 1743430795.489, 1743431687.034, 1743439548.713, 1743440894.393, 1743445384.52, 1743495501.973, 1743504926.243, 1743519851.83, 1743520420.807, 1743530499.577, 1743531476.483, 1743546009.677, 1743584674.851, 1743585101.461, 1743601492.33, 1743601850.895, 1743672899.162, 1743679321.994, 1743679387.991, 1743780565.767, 1743785970.297), tzone = "UTC", class = c("POSIXct", "POSIXt")), symbol = c("FTMUSDC", "SUIUSDC", "ETHUSDC", "ENAUSDC", "BTCUSDC", "AAVEUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "ETHUSDC", "AAVEUSDC", "BTCUSDC", "ENAUSDC", "ETHUSDC", "FTMUSDC", "SUIUSDC", "ETHUSDC", "ENAUSDC", "AAVEUSDC", "FTMUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "AAVEUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "BTCUSDC", "AAVEUSDC", "AAVEUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", "AAVEUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "ETHUSDC", "ETHUSDC", "ETHUSDC", "BTCUSDC", "SUIUSDC", "SUIUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC", "SUIUSDC", "SUIUSDC", "SUIUSDC", "SUSDC", "BTCUSDC", "SUSDC", "SUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", "SUSDC", "OMUSDC", "SUIUSDC", "OMUSDC", "SUIUSDC", "BTCUSDC", "OMUSDC", "OMUSDC", "OMUSDC", "BTCUSDC", "ETHUSDC", "SUIUSDC", "OMUSDC", "OMUSDC", "OMUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", "SUSDC", "ENAUSDC", "ENAUSDC", "ETHUSDC", "BTCUSDC", "ETHUSDC", "BTCUSDC", "SUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", "BTCUSDC", "SUSDC", "BTCUSDC", "BTCUSDC"), executed_qty = c(284270, 80024, 91.8981, 207836, 9.3372107, 1152.058, 0.04811, 0.12324, -0.06504, -32.0833, 94.408, 0.96557, 17708.79, 4.882, 22584, 4641.4, -64.6968, 194251.85, -1246.466, -306854, -61748.4, 2.42992, 2.42014, 4.78121, 0.04825, 0.29346, 835.68, -0.001, -0.01505, -0.125, -621.323, -214.357, 835, 15.472, 866.666, -834.998, 1.20446, 54.943, -936.69, -1.76856, -1.73956, -1.71811, -0.72513, -0.98166, 4.72757, 67649.3, 4.73485, -0.393, -67622, -1.7, -1.7, 8.98573, 36.1158, -36.1158, -8.8583, -0.70622, -27.3, 73781.2, 0.84257, -73781.2, -3.50343, 6.34343, -0.45516, 84682, 0.26061, 0.254, -0.36895, 0.75773, 323689.3, -2.69675, 22917.9, 0.58439, 2.06429, -2.06429, 2.07134, -6.12345, -107599.9, 102163, -102163, 92527.9, -323689.3, -3.09273, 273454, -273454, 3.09273, 1.54911, 2.54393, 2, 1.52842, 1.48698, 1.36813, -0.01848, 0.42519, 528333.3, -528333.3, 37580, -43102.8, -37580, -49425.1, -3, 354, 502, 34532, -0.01435, 124.7401, 106269.9, -2178, -586, -32624, 2.82199, 13326.3, 1.40107, 447761.1, 142861.76, 490049.63, -0.3663, -0.07286, -140.3605, 0.4878, 63813.8, -119596.2, 5.78271, -3.37969, -3.41518, 6.7704, -6.75106, 6.71609, -6.72629, 6.71421, -6.7396, 6.6851, -6.74, 6.717, -0.17957, -6.59629, -3.30205, 10.01426, -0.03538, -6.5872, 6.56085, -6.56, -359471.3, -6.56, -152437.4, 7, 7.40359), price = c(1.382, 4.7256, 4038, 1.1855, 107012, 386.55, 107358.81, 101422.93, 96408.23, 3443.981937, 332.340557, 96606.12, 1.043348, 3460.4, 0.856681, 4.411298, 3698.158383, 1.231695, 323.031195, 0.732393, 4.368867, 96526.3, 96916.53115, 97133.32, 97228.23, 99651.73, 0.003195, 99519.61, 99663.37, 98394.97, 0.00302, 0.00301, 0.003131, 0.003003, 0.003005, 0.003131, 101941.107914, 333.943712, 293.405892, 98950.008481, 100600, 101335.283692, 102050, 101868.208951, 102900, 0.000038, 102741.596027, 294.738321, 3.649213, 101846.9, 101845.270978, 102368.611214, 0.03027, 0.03026, 0.03027, 102384.062461, 3.757, 0.000038, 98487.23, 3.274561, 97076.26334, 98853.757704, 99403.962752, 0.000035, 96870.45, 96050, 96382, 96426.612765, 0.000009, 88900, 2.791, 85558.02, 84977.109628, 84683.133951, 84394.870663, 92227.890836, 2.306263, 2.428989, 2.447165, 2.701886, 0.543194, 88418.629504, 0.5525, 0.5515, 89720.689866, 88856.101525, 78618.406955, 79413.144936, 81500, 80700, 80000, 81125.99, 81928.04, 0.000006, 0.000006, 0.000085, 0.000028, 0.000083, 0.000027, 82025.99514, 6.946406, 6.945675, 6.949552, 83618, 0.024, 0.000028, 6.732009, 6.733288, 6.725032, 84392.65, 2.401251, 84686.879799, 0.000007, 0.000005, 0.000005, 2033.5, 86605.99, 0.023223, 86100, 0.595482, 2.247826, 82214.102411, 82936.397434, 82074.529897, 82801.529337, 83038.750762, 83471.184268, 83344.568664, 83494.401651, 83179.906336, 83857.962478, 84146.764724, 84460.185312, 84642.9, 84987.11819, 84795.687321, 85376.758785, 84783.59, 85104.418136, 85446.292013, 85867.737502, 0.000006, 83126.156483, 0.000005, 83255.75794, 83355.928936),
    cummulative_quote_qty = c(392861.14, 378161.4144, 371084.5278,
    246389.578, 999193.5914284, 445328.0199, 5165.0323491, 12499.3618932,
    -6270.3912792, -110494.305684, 31375.60727, 93279.9712884,
    18476.435418, 16893.6728, 19347.2739, 20474.59783, -239259.013301,
    239258.996981, -402647.40174, -224737.6957, -269770.56434,
    234551.186896, 234551.5736976, 464414.8009172, 4691.2620975,
    29243.7966858, 266319.604811376, -99.51961, -1499.9337185,
    -12299.37125, -197239.18517336, -67873.8886713888, 274484.30729385,
    4661.01711291216, 262699.317950113, -263696.723173419, 122783.9868375,
    18347.86937, -274830.36532, -174999.0269994, -174999.736,
    -174105.1642638, -73999.5165, -99999.9459993, 486466.953,
    263987.20719179, 486466.0459494, -115.83216, -246767.10508,
    -173139.73, -173136.9606632, 919856.7008428, 111456.491386979,
    -111574.857313511, -27375.5581302466, -72305.6725914, -102.5661,
    295672.253552752, 82982.3853811, -241601.07335, -340099.8932747,
    627071.8922352, -45244.7076862, 285495.9929367, 25245.4079745,
    24396.7, -35560.1389, 73065.3372901, 285857.093441205, -239741.075,
    63963.8589, 49999.2513078, 175417.3976347, -174810.5465838,
    174810.4713998, -564752.8781372, -248153.65645, 248152.80384,
    -250009.68949, 249999.80453, -175826.00598, -273454.9480248,
    151083.27835, -150809.881, 277481.8691678, 137647.8754335,
    199999.7240045, 158826.2898715, 124566.23, 119999.286, 109450.4,
    -1499.2082952, 34834.9833276, 263584.405570068, -265801.376630196,
    265446.361943, -99795.399054624, -257554.5326306, -110104.81917606,
    -246077.9854208, 2459.0276, 3486.7288, 239981.9146, -1199.9183,
    250883.12695668, 249352.169449152, -14662.3161, -3945.707,
    -219397.4406, 238155.2143735, 31999.78779, 118652.2466801,
    273464.042572539, 61729.130735312, 211648.367785071, -744.87105,
    -6310.1124314, -283927.208051972, 41999.58, 37999.95756,
    -268831.48716, 475420.3121534, -280299.3130424, -280299.2930129,
    560599.4742213, -560599.5887202, 560599.9859508, -560599.7387605,
    560598.9465102, -560599.2967411, 560598.8649637, -567149.194237,
    567319.0647382, -15199.325553, -560599.6778464, -279999.5993174,
    854985.0604314, -2999.6434142, -560599.8231446, 560600.3049556,
    -563292.3580137, -180282.355521318, -545307.5865265, - 63604.52039374,
    582790.305582, 617133.121909), day = structure(c(20073, 20073,
    20073, 20073, 20073, 20073, 20074, 20075, 20090, 20090, 20090,
    20090, 20090, 20090, 20090, 20090, 20094, 20094, 20095, 20095,
    20101, 20102, 20102, 20102, 20102, 20103, 20103, 20103, 20103,
    20104, 20107, 20107, 20107, 20108, 20108, 20108, 20111, 20111,
    20115, 20115, 20115, 20115, 20115, 20115, 20116, 20116, 20116,
    20117, 20117, 20117, 20117, 20117, 20117, 20117, 20117, 20117,
    20117, 20118, 20124, 20125, 20125, 20126, 20126, 20130, 20131,
    20132, 20138, 20138, 20140, 20144, 20145, 20146, 20147, 20147,
    20147, 20150, 20151, 20151, 20152, 20152, 20153, 20153, 20153,
    20153, 20153, 20154, 20157, 20157, 20158, 20158, 20158, 20158,
    20159, 20163, 20165, 20165, 20165, 20165, 20165, 20165, 20165,
    20165, 20165, 20166, 20166, 20166, 20166, 20166, 20166, 20166,
    20166, 20166, 20172, 20172, 20172, 20173, 20173, 20173, 20173,
    20173, 20178, 20178, 20178, 20178, 20178, 20178, 20178, 20178,
    20178, 20178, 20179, 20179, 20179, 20179, 20179, 20179, 20179,
    20180, 20180, 20180, 20180, 20181, 20181, 20181, 20182, 20182
    ), class = "Date")), row.names = c(NA, -146L), class = c("tbl_df", "tbl", "data.frame"))


All prices, quantity, date/time etc are given by functions from Binancer package which connect to Binance (the exchange) API and there is no manual operations.

Below is the first lines of the final tibble I would like:
result <- structure(list(time = structure(c(1734375599, 1734375720, 1734375840, 1734375960, 1734376080, 1734376200, 1734376320, 1734461999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC = c(NA, NA, NA, NA, NA, 107112.36, NA, NA ), SUIUSDC = c(NA, NA, 4.6923, NA, NA, NA, NA, NA), ENAUSDC = c(NA, NA, NA, NA, 1.0256, NA, NA, NA), AAVEUSDC = c(NA, NA, NA, NA, NA, NA, 386.55, NA), ETHUSDC = c(NA, NA, NA, 3879.06, NA, NA, NA, NA), FTMUSDC = c(NA, 1.381, NA, NA, NA, NA, NA, NA), executed_qty = c(NA, 284270, 80024, 91.8981, 207836, 9.3372107, 1152.058, NA), price = c(NA, NA, NA, NA, NA, NA, NA, NA), BTCUSDC_close = c(107112.36, NA, NA, NA, NA, NA, NA, 107517.25), SUIUSDC_close = c(4.7252, NA, NA, NA, NA, NA, NA, 4.6923), ENAUSDC_close = c(1.1862, NA, NA, NA, NA, NA, NA, 1.1412), AAVEUSDC_close = c(388, NA, NA, NA, NA, NA, NA, 365.68), ETHUSDC_close = c(4034.74, NA, NA, NA, NA, NA, NA, 3975.39), FTMUSDC_close = c(1.381, NA, NA, NA, NA, NA, NA, 1.3596), LINKUSDC_close = c(29.81, NA, NA, NA, NA, NA, NA, 28.04), SUSDC_close = c(NA, NA, NA, NA, NA, NA, NA, NA), OMUSDC_close = c(4.0706, NA, NA, NA, NA, NA, NA, 4.025)), row.names = c(NA, -8L), class = c("tbl_df", "tbl", "data.frame"))

The idea is to have
- date for closing price (everyday @ 19:59:59)
- date for trades
These two operations must be ordered by time, mix time of closing prices and time of trades
- price of token for the daily closes (name TOKEN_close) and price when the trade was executed .

I have tried many many way to build my final tibble "result", and I am looking for help.
Thank you in advance.

From ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de  Mon Apr  7 14:21:54 2025
From: ||gge@ @end|ng |rom @t@t|@t|k@tu-dortmund@de (Uwe Ligges)
Date: Mon, 7 Apr 2025 14:21:54 +0200
Subject: [R] Request to Unsubscribe from R Forum Replies
In-Reply-To: <CAF_u4OnFgo7vrUsk2DBMqZvc3Hs7t_mxdmLCPgtjh4ANVUYM8Q@mail.gmail.com>
References: <CAF_u4OnFgo7vrUsk2DBMqZvc3Hs7t_mxdmLCPgtjh4ANVUYM8Q@mail.gmail.com>
Message-ID: <ad9b51b0-9385-4cd9-b6d0-baf8a94e0dbd@statistik.tu-dortmund.de>



On 07.04.2025 12:20, Loop Vinyl wrote:
> Hello,
> 
> I would like to request the removal of my email address from the R forum
> reply/update list. I no longer wish to receive notifications or messages
> related to forum discussions.
> 
> Thank you for your attention and understanding.
> 
> Best regards,
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


Please read the footer of any message on the list (such as yours above) 
to unsubscribe.

Best,
Uwe Ligges




From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Apr  7 17:27:02 2025
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Mon, 7 Apr 2025 09:27:02 -0600
Subject: [R] Request to Unsubscribe from R Forum Replies
In-Reply-To: <CAF_u4OnFgo7vrUsk2DBMqZvc3Hs7t_mxdmLCPgtjh4ANVUYM8Q@mail.gmail.com>
References: <CAF_u4OnFgo7vrUsk2DBMqZvc3Hs7t_mxdmLCPgtjh4ANVUYM8Q@mail.gmail.com>
Message-ID: <E8E27C1B-B620-48B1-9016-190295233D93@comcast.net>

You need to unsubscribe yourself using the instructions at the list info page. You should be getting month reminder emails that include your password. None of the volunteer mods are able to access that password. 

? 
David. 
Sent from my iPhone

> On Apr 7, 2025, at 4:23?AM, Loop Vinyl <loopvinyl at gmail.com> wrote:
> 
> ?Hello,
> 
> I would like to request the removal of my email address from the R forum
> reply/update list. I no longer wish to receive notifications or messages
> related to forum discussions.
> 
> Thank you for your attention and understanding.
> 
> Best regards,
> 
>    [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From er|nm@hodge@@ @end|ng |rom gm@||@com  Mon Apr  7 19:35:44 2025
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Mon, 7 Apr 2025 11:35:44 -0600
Subject: [R] An opinion question, please
Message-ID: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>

Hello everyone!

I have an opinion question please.  If I?m writing a new package, would you
recommend using S3 or S4 structure, please?

I know I will get lots of opinions, but that?s fine.

Thanks,
Erin


Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Mon Apr  7 19:40:23 2025
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Mon, 7 Apr 2025 10:40:23 -0700
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
Message-ID: <CAGxFJbStMsCuPwSkkmOSox4VKAwo-sYmEHOX7Dfydj+ue7vg2Q@mail.gmail.com>

My *opinion*:

1. As it stands, this "opinion survey" seems pretty useless;
2. It *might* be more useful if you explained what the package will do, who
it's intended users are, etc.

-- Bert

"An educated person is one who can entertain new ideas, entertain others,
and entertain herself."



On Mon, Apr 7, 2025 at 10:36?AM Erin Hodgess <erinm.hodgess at gmail.com>
wrote:

> Hello everyone!
>
> I have an opinion question please.  If I?m writing a new package, would you
> recommend using S3 or S4 structure, please?
>
> I know I will get lots of opinions, but that?s fine.
>
> Thanks,
> Erin
>
>
> Erin Hodgess, PhD
> mailto: erinm.hodgess at gmail.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From er|nm@hodge@@ @end|ng |rom gm@||@com  Mon Apr  7 19:42:43 2025
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Mon, 7 Apr 2025 11:42:43 -0600
Subject: [R] An opinion question, please
In-Reply-To: <CAGxFJbStMsCuPwSkkmOSox4VKAwo-sYmEHOX7Dfydj+ue7vg2Q@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <CAGxFJbStMsCuPwSkkmOSox4VKAwo-sYmEHOX7Dfydj+ue7vg2Q@mail.gmail.com>
Message-ID: <CACxE24k13cCk4-qRxeU7AiD0ZaHTxnF3Kz6SmUHfSRQm7m5DTg@mail.gmail.com>

Thanks, Bert!

It?s for disaggregation of time series using different underlying
distributions.



Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com


On Mon, Apr 7, 2025 at 11:40?AM Bert Gunter <bgunter.4567 at gmail.com> wrote:

> My *opinion*:
>
> 1. As it stands, this "opinion survey" seems pretty useless;
> 2. It *might* be more useful if you explained what the package will do,
> who it's intended users are, etc.
>
> -- Bert
>
> "An educated person is one who can entertain new ideas, entertain others,
> and entertain herself."
>
>
>
> On Mon, Apr 7, 2025 at 10:36?AM Erin Hodgess <erinm.hodgess at gmail.com>
> wrote:
>
>> Hello everyone!
>>
>> I have an opinion question please.  If I?m writing a new package, would
>> you
>> recommend using S3 or S4 structure, please?
>>
>> I know I will get lots of opinions, but that?s fine.
>>
>> Thanks,
>> Erin
>>
>>
>> Erin Hodgess, PhD
>> mailto: erinm.hodgess at gmail.com
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

	[[alternative HTML version deleted]]


From er|cjberger @end|ng |rom gm@||@com  Mon Apr  7 22:19:59 2025
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Mon, 7 Apr 2025 23:19:59 +0300
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24k13cCk4-qRxeU7AiD0ZaHTxnF3Kz6SmUHfSRQm7m5DTg@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <CAGxFJbStMsCuPwSkkmOSox4VKAwo-sYmEHOX7Dfydj+ue7vg2Q@mail.gmail.com>
 <CACxE24k13cCk4-qRxeU7AiD0ZaHTxnF3Kz6SmUHfSRQm7m5DTg@mail.gmail.com>
Message-ID: <CAGgJW74U-v9GRUVxfWy6mq3AJwd0ghXdMdvE1mz1pA6YiDFE3A@mail.gmail.com>

As Bert indicated, the more information you can provide about the
package goals and intended users, the more appropriate the answers
will be.

Rob Hyndman and his group have made many contributions to the field of
time series and the sub-field of forecasting, both on the theoretical
and practical sides.
Hyndman et al have created many R packages devoted to time series.
Their basic "object" is a tsibble, which is a subclass of a tibble,
which itself is a subclass of an R DataFrame.
More generally, they have adopted to extend Posit's "tidyverse" to a
"tidyverts" (where 'ts' stands for time series), so that many commonly
used packages/functions in the tidyverse can do the appropriate thing
when handed a 'tsibble' as an input, rather than a tibble. e.g.
ggplot2::autoplot( some_tsibble )

Some objects in the tidyverts that seem related to your package include:
dable - a decomposition table, which is a subclass of tsibble, and
which breaks the time series into components (trend, seasonality,
residual)
mable - a model table, used when applying different models to the same
dataset, a fairly common use case

For more information on Hyndman's approach to time series forecasting
and his R tools, check out his freely available textbook
"Forecasting: Principles and Practice (3rd Edition)"
https://otexts.com/fpp3/

HTH,
Eric




On Mon, Apr 7, 2025 at 8:46?PM Erin Hodgess <erinm.hodgess at gmail.com> wrote:
>
> Thanks, Bert!
>
> It?s for disaggregation of time series using different underlying
> distributions.
>
>
>
> Erin Hodgess, PhD
> mailto: erinm.hodgess at gmail.com
>
>
> On Mon, Apr 7, 2025 at 11:40?AM Bert Gunter <bgunter.4567 at gmail.com> wrote:
>
> > My *opinion*:
> >
> > 1. As it stands, this "opinion survey" seems pretty useless;
> > 2. It *might* be more useful if you explained what the package will do,
> > who it's intended users are, etc.
> >
> > -- Bert
> >
> > "An educated person is one who can entertain new ideas, entertain others,
> > and entertain herself."
> >
> >
> >
> > On Mon, Apr 7, 2025 at 10:36?AM Erin Hodgess <erinm.hodgess at gmail.com>
> > wrote:
> >
> >> Hello everyone!
> >>
> >> I have an opinion question please.  If I?m writing a new package, would
> >> you
> >> recommend using S3 or S4 structure, please?
> >>
> >> I know I will get lots of opinions, but that?s fine.
> >>
> >> Thanks,
> >> Erin
> >>
> >>
> >> Erin Hodgess, PhD
> >> mailto: erinm.hodgess at gmail.com
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> https://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @rn@ud@g@boury @end|ng |rom gm@||@com  Mon Apr  7 22:22:23 2025
From: @rn@ud@g@boury @end|ng |rom gm@||@com (Arnaud Gaboury)
Date: Mon, 07 Apr 2025 22:22:23 +0200
Subject: [R] 
 Can't join/merge two tibbles with lots of variables the way I want
In-Reply-To: <CH3PR22MB4514BC1846F5CEF37DEB902ECFAA2@CH3PR22MB4514.namprd22.prod.outlook.com>
References: <ec6f04b141b6a254cb32543a6da3cf08de1e2a01.camel@gmail.com>
 <CH3PR22MB4514BC1846F5CEF37DEB902ECFAA2@CH3PR22MB4514.namprd22.prod.outlook.com>
Message-ID: <7ee656590a21fdc29f7186c314aff52ee45a35ab.camel@gmail.com>

I managed to improve.
Here is the code:

# add a source column
trade_df <- all_trade_final %>%
  mutate(source = "trade") %>%
  rename(value = time) 
close_df <- token_daily_close %>%
  mutate(source = "close") %>%
  rename(value = time)
# binds the two tibbles
time_all <- bind_rows(trade_df, close_df) %>%
  arrange(value)
# remove day column
time_all <- time_all %>%
  select(-day, -source)

I get a tibble which is a good starting point for all my next
manipulations:

time_all <- structure(list(value = structure(c(1734371999.999,
1734372120, 
1734372240, 1734372360, 1734372480, 1734372600, 1734372720,
1734426090.135, 
1734458399.999, 1734544799.999, 1734553973.032, 1734631199.999, 
1734717599.999, 1734803999.999, 1734890399.999, 1734976799.999, 
1735063199.999, 1735149599.999, 1735235999.999, 1735322399.999, 
1735408799.999, 1735495199.999, 1735581599.999, 1735667999.999, 
1735754399.999, 1735810398.277, 1735810489.902, 1735812883.798, 
1735812912.427, 1735812922.868, 1735812934.674, 1735812945.707, 
1735812955.168, 1735840799.999, 1735927199.999, 1736013599.999, 
1736099999.999, 1736177563.787, 1736177649.381, 1736186399.999, 
1736261991.422, 1736262093.964, 1736272799.999, 1736359199.999, 
1736445599.999, 1736531999.999, 1736618399.999, 1736704799.999, 
1736779190.992, 1736791199.999, 1736854468.083, 1736865119.74, 
1736865312.915, 1736865453.951, 1736877599.999, 1736963999.999, 
1736974766.64, 1736975085.933, 1736975211.156, 1736975380.095, 
1737041368.809, 1737050399.999, 1737136799.999, 1737223199.999, 
1737295523.705, 1737295650.336, 1737309599.999, 1737315384.148, 
1737333105.442, 1737335082.949, 1737336735.697, 1737395999.999, 
1737482399.999, 1737568799.999, 1737625581.878, 1737625599.839, 
1737655199.999, 1737741599.999, 1737827999.999, 1737914399.999, 
1737967031.492, 1737969957.279, 1737982296.161, 1737983492.087, 
1737989818.863, 1737990022.153, 1738000799.999, 1738058503.483, 
1738059550.671, 1738076112.736, 1738087199.999, 1738142709.422, 
1738157053.345, 1738157206.539, 1738161507.243, 1738163335.254, 
1738169351.788, 1738169494.283, 1738169531.258, 1738171799.704, 
1738173599.999, 1738176968.536, 1738216843.704, 1738259999.999, 
1738346399.999, 1738432799.999, 1738519199.999, 1738605599.999, 
1738691999.999, 1738769416.056, 1738778399.999, 1738854703.218, 
1738856868.753, 1738864799.999, 1738936692.68, 1738937334.883, 
1738951199.999, 1739037599.999, 1739123999.999, 1739210399.999, 
1739296718.084, 1739296799.999, 1739379482.659, 1739383199.999, 
1739446986.289, 1739469599.999, 1739555999.999, 1739642399.999, 
1739728799.999, 1739815199.999, 1739901599.999, 1739979238.947, 
1739987999.999, 1739996323.332, 1740074399.999, 1740115921.015, 
1740160799.999, 1740247199.999, 1740333599.999, 1740419999.999, 
1740491373.055, 1740506399.999, 1740592799.999, 1740596755.646, 
1740667962.173, 1740679199.999, 1740765599.999, 1740768770.074, 
1740768953.683, 1740786989.548, 1740851999.999, 1740938399.999, 
1741012632.874, 1741024799.999, 1741100761.788, 1741109444.315, 
1741111199.999, 1741185527.418, 1741197599.999, 1741208042.454, 
1741283447.971, 1741283872.186, 1741283999.999, 1741295325.927, 
1741295477.314, 1741295693.088, 1741342541.164, 1741370399.999, 
1741456799.999, 1741543199.999, 1741629599.999, 1741629884.419, 
1741635304.779, 1741685200.989, 1741686554.221, 1741698998.622, 
1741707118.96, 1741715999.999, 1741802399.999, 1741802675.392, 
1741888799.999, 1741975199.999, 1742061599.999, 1742141908.962, 
1742147999.999, 1742234399.999, 1742257808.523, 1742289195.923, 
1742297055.385, 1742302133.885, 1742302466.715, 1742320799.999, 
1742325681.41, 1742325806.343, 1742325896.024, 1742325942.537, 
1742378556.512, 1742387323.985, 1742391238.519, 1742398133.361, 
1742398190.194, 1742398284.155, 1742398685.416, 1742403613.643, 
1742404126.746, 1742407199.999, 1742493599.999, 1742579999.999, 
1742666399.999, 1742752799.999, 1742839199.999, 1742871155.426, 
1742891897.907, 1742892224.948, 1742925599.999, 1742998171.435, 
1743000224.05, 1743001791.162, 1743011323.324, 1743011999.999, 
1743017318.549, 1743098399.999, 1743184799.999, 1743271199.999, 
1743406396.586, 1743408729.623, 1743425658.334, 1743428419.647, 
1743429808.131, 1743430795.489, 1743431687.034, 1743439548.713, 
1743440894.393, 1743445384.52, 1743495501.973, 1743504926.243, 
1743519851.83, 1743520420.807, 1743530499.577, 1743531476.483, 
1743546009.677, 1743584674.851, 1743585101.461, 1743601492.33, 
1743601850.895, 1743672899.162, 1743679321.994, 1743679387.991, 
1743780565.767, 1743785970.297), tzone = "UTC", class = c("POSIXct", 
"POSIXt")), symbol = c(NA, "FTMUSDC", "SUIUSDC", "ETHUSDC", "ENAUSDC", 
"BTCUSDC", "AAVEUSDC", "BTCUSDC", NA, NA, "BTCUSDC", NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "BTCUSDC", "ETHUSDC", 
"AAVEUSDC", "BTCUSDC", "ENAUSDC", "ETHUSDC", "FTMUSDC", "SUIUSDC", 
NA, NA, NA, NA, "ETHUSDC", "ENAUSDC", NA, "AAVEUSDC", "FTMUSDC", 
NA, NA, NA, NA, NA, NA, "SUIUSDC", NA, "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", NA, NA, "BTCUSDC", "AAVEUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", NA, NA, NA, "AAVEUSDC", "AAVEUSDC", NA, 
"AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", NA, NA, NA, "BTCUSDC", 
"AAVEUSDC", NA, NA, NA, NA, "AAVEUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", NA, "BTCUSDC", "SUIUSDC", "BTCUSDC", 
NA, "AAVEUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "ETHUSDC", 
"ETHUSDC", "ETHUSDC", "BTCUSDC", NA, "SUIUSDC", "SUIUSDC", NA, 
NA, NA, NA, NA, NA, "BTCUSDC", NA, "SUIUSDC", "BTCUSDC", NA, 
"BTCUSDC", "BTCUSDC", NA, NA, NA, NA, "SUIUSDC", NA, "BTCUSDC", 
NA, "BTCUSDC", NA, NA, NA, NA, NA, NA, "BTCUSDC", NA, "BTCUSDC", 
NA, "SUSDC", NA, NA, NA, NA, "BTCUSDC", NA, NA, "SUIUSDC", "BTCUSDC", 
NA, NA, "BTCUSDC", "BTCUSDC", "BTCUSDC", NA, NA, "BTCUSDC", NA, 
"SUIUSDC", "SUIUSDC", NA, "SUIUSDC", NA, "SUIUSDC", "SUSDC", 
"BTCUSDC", NA, "SUSDC", "SUSDC", "BTCUSDC", "BTCUSDC", NA, NA, 
NA, NA, "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", NA, NA, "BTCUSDC", NA, NA, NA, "SUSDC", NA, NA, "SUSDC", 
"OMUSDC", "SUIUSDC", "OMUSDC", "SUIUSDC", NA, "BTCUSDC", "OMUSDC", 
"OMUSDC", "OMUSDC", "BTCUSDC", "ETHUSDC", "SUIUSDC", "OMUSDC", 
"OMUSDC", "OMUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC", NA, NA, 
NA, NA, NA, NA, "SUSDC", "ENAUSDC", "ENAUSDC", NA, "ETHUSDC", 
"BTCUSDC", "ETHUSDC", "BTCUSDC", NA, "SUSDC", NA, NA, NA, "SUIUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", 
"BTCUSDC", "BTCUSDC", "SUSDC", "BTCUSDC", "SUSDC", "BTCUSDC", 
"BTCUSDC"), executed_qty = c(NA, 284270, 80024, 91.8981, 207836, 
9.3372107, 1152.058, 0.04811, NA, NA, 0.12324, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, -0.06504, -32.0833, 94.408, 
0.96557, 17708.79, 4.882, 22584, 4641.4, NA, NA, NA, NA, -64.6968, 
194251.85, NA, -1246.466, -306854, NA, NA, NA, NA, NA, NA, -61748.4, 
NA, 2.42992, 2.42014, 4.78121, 0.04825, NA, NA, 0.29346, 835.68, 
-0.001, -0.01505, -0.125, NA, NA, NA, -621.323, -214.357, NA, 
835, 15.472, 866.666, -834.998, NA, NA, NA, 1.20446, 54.943, 
NA, NA, NA, NA, -936.69, -1.76856, -1.73956, -1.71811, -0.72513, 
-0.98166, NA, 4.72757, 67649.3, 4.73485, NA, -0.393, -67622, 
-1.7, -1.7, 8.98573, 36.1158, -36.1158, -8.8583, -0.70622, NA, 
-27.3, 73781.2, NA, NA, NA, NA, NA, NA, 0.84257, NA, -73781.2, 
-3.50343, NA, 6.34343, -0.45516, NA, NA, NA, NA, 84682, NA, 0.26061, 
NA, 0.254, NA, NA, NA, NA, NA, NA, -0.36895, NA, 0.75773, NA, 
323689.3, NA, NA, NA, NA, -2.69675, NA, NA, 22917.9, 0.58439, 
NA, NA, 2.06429, -2.06429, 2.07134, NA, NA, -6.12345, NA, -107599.9, 
102163, NA, -102163, NA, 92527.9, -323689.3, -3.09273, NA, 273454, 
-273454, 3.09273, 1.54911, NA, NA, NA, NA, 2.54393, 2, 1.52842, 
1.48698, 1.36813, -0.01848, NA, NA, 0.42519, NA, NA, NA, 528333.3, 
NA, NA, -528333.3, 37580, -43102.8, -37580, -49425.1, NA, -3, 
354, 502, 34532, -0.01435, 124.7401, 106269.9, -2178, -586, -32624, 
2.82199, 13326.3, 1.40107, NA, NA, NA, NA, NA, NA, 447761.1, 
142861.76, 490049.63, NA, -0.3663, -0.07286, -140.3605, 0.4878, 
NA, 63813.8, NA, NA, NA, -119596.2, 5.78271, -3.37969, -3.41518, 
6.7704, -6.75106, 6.71609, -6.72629, 6.71421, -6.7396, 6.6851, 
-6.74, 6.717, -0.17957, -6.59629, -3.30205, 10.01426, -0.03538, 
-6.5872, 6.56085, -6.56, -359471.3, -6.56, -152437.4, 7, 7.40359
), price = c(NA, 1.382, 4.7256, 4038, 1.1855, 107012, 386.55, 
107358.81, NA, NA, 101422.93, NA, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA, NA, NA, 96408.23, 3443.981937, 332.340557, 96606.12, 
1.043348, 3460.4, 0.856681, 4.411298, NA, NA, NA, NA, 3698.158383, 
1.231695, NA, 323.031195, 0.732393, NA, NA, NA, NA, NA, NA, 4.368867, 
NA, 96526.3, 96916.53115, 97133.32, 97228.23, NA, NA, 99651.73, 
0.003195, 99519.61, 99663.37, 98394.97, NA, NA, NA, 0.00302, 
0.00301, NA, 0.003131, 0.003003, 0.003005, 0.003131, NA, NA, 
NA, 101941.107914, 333.943712, NA, NA, NA, NA, 293.405892,
98950.008481, 
100600, 101335.283692, 102050, 101868.208951, NA, 102900, 0.000038, 
102741.596027, NA, 294.738321, 3.649213, 101846.9, 101845.270978, 
102368.611214, 0.03027, 0.03026, 0.03027, 102384.062461, NA, 
3.757, 0.000038, NA, NA, NA, NA, NA, NA, 98487.23, NA, 3.274561, 
97076.26334, NA, 98853.757704, 99403.962752, NA, NA, NA, NA, 
0.000035, NA, 96870.45, NA, 96050, NA, NA, NA, NA, NA, NA, 96382, 
NA, 96426.612765, NA, 0.000009, NA, NA, NA, NA, 88900, NA, NA, 
2.791, 85558.02, NA, NA, 84977.109628, 84683.133951, 84394.870663, 
NA, NA, 92227.890836, NA, 2.306263, 2.428989, NA, 2.447165, NA, 
2.701886, 0.543194, 88418.629504, NA, 0.5525, 0.5515, 89720.689866, 
88856.101525, NA, NA, NA, NA, 78618.406955, 79413.144936, 81500, 
80700, 80000, 81125.99, NA, NA, 81928.04, NA, NA, NA, 0.000006, 
NA, NA, 0.000006, 0.000085, 0.000028, 0.000083, 0.000027, NA, 
82025.99514, 6.946406, 6.945675, 6.949552, 83618, 0.024, 0.000028, 
6.732009, 6.733288, 6.725032, 84392.65, 2.401251, 84686.879799, 
NA, NA, NA, NA, NA, NA, 0.000007, 0.000005, 0.000005, NA, 2033.5, 
86605.99, 0.023223, 86100, NA, 0.595482, NA, NA, NA, 2.247826, 
82214.102411, 82936.397434, 82074.529897, 82801.529337, 83038.750762, 
83471.184268, 83344.568664, 83494.401651, 83179.906336, 83857.962478, 
84146.764724, 84460.185312, 84642.9, 84987.11819, 84795.687321, 
85376.758785, 84783.59, 85104.418136, 85446.292013, 85867.737502, 
0.000006, 83126.156483, 0.000005, 83255.75794, 83355.928936), 
    cummulative_quote_qty = c(NA, 392861.14, 378161.4144, 371084.5278, 
    246389.578, 999193.5914284, 445328.0199, 5165.0323491, NA, 
    NA, 12499.3618932, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, -6270.3912792, -110494.305684, 31375.60727, 
    93279.9712884, 18476.435418, 16893.6728, 19347.2739, 20474.59783, 
    NA, NA, NA, NA, -239259.013301, 239258.996981, NA, -402647.40174, 
    -224737.6957, NA, NA, NA, NA, NA, NA, -269770.56434, NA, 
    234551.186896, 234551.5736976, 464414.8009172, 4691.2620975, 
    NA, NA, 29243.7966858, 266319.604811376, -99.51961, -1499.9337185, 
    -12299.37125, NA, NA, NA, -197239.18517336, -67873.8886713888, 
    NA, 274484.30729385, 4661.01711291216, 262699.317950113, 
    -263696.723173419, NA, NA, NA, 122783.9868375, 18347.86937, 
    NA, NA, NA, NA, -274830.36532, -174999.0269994, -174999.736, 
    -174105.1642638, -73999.5165, -99999.9459993, NA, 486466.953, 
    263987.20719179, 486466.0459494, NA, -115.83216, -246767.10508, 
    -173139.73, -173136.9606632, 919856.7008428, 111456.491386979, 
    -111574.857313511, -27375.5581302466, -72305.6725914, NA, 
    -102.5661, 295672.253552752, NA, NA, NA, NA, NA, NA, 82982.3853811,
    NA, -241601.07335, -340099.8932747, NA, 627071.8922352, -
45244.7076862, 
    NA, NA, NA, NA, 285495.9929367, NA, 25245.4079745, NA, 24396.7, 
    NA, NA, NA, NA, NA, NA, -35560.1389, NA, 73065.3372901, NA, 
    285857.093441205, NA, NA, NA, NA, -239741.075, NA, NA, 63963.8589, 
    49999.2513078, NA, NA, 175417.3976347, -174810.5465838,
174810.4713998, 
    NA, NA, -564752.8781372, NA, -248153.65645, 248152.80384, 
    NA, -250009.68949, NA, 249999.80453, -175826.00598, -
273454.9480248, 
    NA, 151083.27835, -150809.881, 277481.8691678, 137647.8754335, 
    NA, NA, NA, NA, 199999.7240045, 158826.2898715, 124566.23, 
    119999.286, 109450.4, -1499.2082952, NA, NA, 34834.9833276, 
    NA, NA, NA, 263584.405570068, NA, NA, -265801.376630196, 
    265446.361943, -99795.399054624, -257554.5326306, -110104.81917606,
    NA, -246077.9854208, 2459.0276, 3486.7288, 239981.9146, -1199.9183,
    250883.12695668, 249352.169449152, -14662.3161, -3945.707, 
    -219397.4406, 238155.2143735, 31999.78779, 118652.2466801, 
    NA, NA, NA, NA, NA, NA, 273464.042572539, 61729.130735312, 
    211648.367785071, NA, -744.87105, -6310.1124314, -283927.208051972,
    41999.58, NA, 37999.95756, NA, NA, NA, -268831.48716,
475420.3121534, 
    -280299.3130424, -280299.2930129, 560599.4742213, -560599.5887202, 
    560599.9859508, -560599.7387605, 560598.9465102, -560599.2967411, 
    560598.8649637, -567149.194237, 567319.0647382, -15199.325553, 
    -560599.6778464, -279999.5993174, 854985.0604314, -2999.6434142, 
    -560599.8231446, 560600.3049556, -563292.3580137, -
180282.355521318, 
    -545307.5865265, -63604.52039374, 582790.305582, 617133.121909
    ), BTCUSDT = c(107078.55, NA, NA, NA, NA, NA, NA, NA, 107506.37, 
    104656.18, NA, 98855.86, 97206.59, 97595.28, 95612.19, 93364.26, 
    98797.47, 98570.82, 95824.27, 94291.3, 95022.57, 93945.01, 
    93832.83, 94120.94, 94143.85, NA, NA, NA, NA, NA, NA, NA, 
    NA, 96757.57, 98026, 98016.26, 97731.08, NA, NA, 101831.95, 
    NA, NA, 97277.31, 94030.82, 92693.11, 95793.05, 94151.52, 
    95139.45, NA, 91983.96, NA, NA, NA, NA, 96527.96, 98645.65, 
    NA, NA, NA, NA, NA, 99838.54, 104125.46, 103826.16, NA, NA, 
    105115.8, NA, NA, NA, NA, 102963.32, 106173.26, 104345.8, 
    NA, NA, 105927.78, 106458.46, 104899.71, 104945.11, NA, NA, 
    NA, NA, NA, NA, 99150.01, NA, NA, NA, 102572.82, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, 102406.98, NA, NA, 105300.01, 
    104580.87, 102262.49, 97228.85, 99206.38, 99168.35, NA, 97550.74, 
    NA, NA, 96715.35, NA, NA, 97434.78, 96377.71, 96171.17, 97500, 
    NA, 96165.29, NA, 97354.89, NA, 95692.09, 98526, 97410.28, 
    96982.95, 95479.78, 94102.16, NA, 96389.57, NA, 97954.95, 
    NA, 96971.9, 96639.38, 95656.78, 94644, NA, 87259.99, 86051.33, 
    NA, NA, 84597, 83605.12, NA, NA, NA, 85214.7, 94093.75, NA, 
    90300.01, NA, NA, 85443.89, NA, 89687.99, NA, NA, NA, 88628.01, 
    NA, NA, NA, NA, 87685.99, 85943.08, 82366, 78459.91, NA, 
    NA, NA, NA, NA, NA, 81305.57, 81844.41, NA, 80064, 84365.18, 
    84422.25, NA, 83913.22, 84197.46, NA, NA, NA, NA, NA, 81466.7, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 84230.97, 
    84093.43, 84024.11, 84238.83, 85017.66, 88461.88, NA, NA, 
    NA, 87937.27, NA, NA, NA, NA, 86569.99, NA, 86913.05, 84008.45, 
    82332.63, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), 
    SUIUSDT = c(4.724, NA, NA, NA, NA, NA, NA, NA, 4.6913, 4.7025, 
    NA, 4.2446, 4.4963, 4.5527, 4.346, 4.2994, 4.6078, 4.5268, 
    4.1997, 4.2219, 4.1855, 4.1285, 4.1964, 4.2153, 4.1914, NA, 
    NA, NA, NA, NA, NA, NA, NA, 4.3397, 4.7073, 5.1427, 5.2061, 
    NA, NA, 5.2232, NA, NA, 4.832, 4.5971, 4.7356, 5.1912, 4.9419, 
    4.813, NA, 4.4797, NA, NA, NA, NA, 4.5801, 4.6577, NA, NA, 
    NA, NA, NA, 4.919, 4.7848, 4.8998, NA, NA, 4.9533, NA, NA, 
    NA, NA, 4.401, 4.6637, 4.6134, NA, NA, 4.3974, 4.4228, 4.1622, 
    4.1425, NA, NA, NA, NA, NA, NA, 3.7291, NA, NA, NA, 3.7681, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, 3.7119, NA, NA, 4.1375, 
    4.1281, 3.9365, 3.3463, 3.549, 3.701, NA, 3.3527, NA, NA, 
    3.1782, NA, NA, 3.1186, 3.018, 3.0416, 3.2648, NA, 3.3745, 
    NA, 3.3808, NA, 3.4626, 3.6995, 3.4105, 3.3001, 3.1852, 2.9794, 
    NA, 3.193, NA, 3.4423, NA, 3.3603, 3.4164, 3.3253, 3.0413, 
    NA, 2.8222, 2.8625, NA, NA, 2.8343, 2.7905, NA, NA, NA, 2.8027, 
    3.1758, NA, 2.8552, NA, NA, 2.4173, NA, 2.5385, NA, NA, NA, 
    2.8162, NA, NA, NA, NA, 2.6888, 2.5285, 2.2714, 2.1064, NA, 
    NA, NA, NA, NA, NA, 2.165, 2.2204, NA, 2.125, 2.3508, 2.3618, 
    NA, 2.268, 2.3321, NA, NA, NA, NA, NA, 2.2466, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2.3786, 2.388, 2.2776, 
    2.2902, 2.2542, 2.4366, NA, NA, NA, 2.4681, NA, NA, NA, NA, 
    2.5707, NA, 2.7653, 2.5244, 2.283, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA), ENAUSDT = c(1.1853, NA, NA, NA, NA, 
    NA, NA, NA, 1.1403, 1.0931, NA, 1.0259, 1.0712, 1.0719, 1.0397, 
    1.0259, 1.0492, 1.0291, 0.9215, 0.9412, 0.9378, 0.9445, 0.9846, 
    0.92, 0.9226, NA, NA, NA, NA, NA, NA, NA, NA, 1.0408, 1.2142, 
    1.2444, 1.2394, NA, NA, 1.1979, NA, NA, 1.0939, 0.9604, 0.9166, 
    0.94, 0.8885, 0.8986, NA, 0.7794, NA, NA, NA, NA, 0.8286, 
    0.9006, NA, NA, NA, NA, NA, 0.9126, 0.9364, 0.8652, NA, NA, 
    0.9456, NA, NA, NA, NA, 0.9119, 0.9176, 0.8951, NA, NA, 0.8466, 
    0.9026, 0.872, 0.8238, NA, NA, NA, NA, NA, NA, 0.7189, NA, 
    NA, NA, 0.7145, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.6878, 
    NA, NA, 0.774, 0.7876, 0.7237, 0.5998, 0.6326, 0.6391, NA, 
    0.5527, NA, NA, 0.5018, NA, NA, 0.5092, 0.5187, 0.4804, 0.4967, 
    NA, 0.4563, NA, 0.429, NA, 0.439, 0.4945, 0.4532, 0.4495, 
    0.4495, 0.4116, NA, 0.401, NA, 0.4057, NA, 0.4347, 0.4573, 
    0.4542, 0.4035, NA, 0.4072, 0.4139, NA, NA, 0.4289, 0.4164, 
    NA, NA, NA, 0.3946, 0.4471, NA, 0.395, NA, NA, 0.3592, NA, 
    0.3621, NA, NA, NA, 0.3797, NA, NA, NA, NA, 0.4371, 0.4458, 
    0.4142, 0.4034, NA, NA, NA, NA, NA, NA, 0.3825, 0.3661, NA, 
    0.3398, 0.3549, 0.3697, NA, 0.366, 0.3803, NA, NA, NA, NA, 
    NA, 0.3564, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, 0.3818, 0.3794, 0.3612, 0.3546, 0.364, 0.4019, NA, NA, 
    NA, 0.4249, NA, NA, NA, NA, 0.4157, NA, 0.4198, 0.3886, 0.3675, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), AAVEUSDT = c(387.87, 
    NA, NA, NA, NA, NA, NA, NA, 365.69, 372.58, NA, 316.96, 320.05, 
    305.6, 308.4, 352.85, 375.97, 369.72, 334.3, 327.47, 335.56, 
    331.92, 331.91, 312.56, 314.32, NA, NA, NA, NA, NA, NA, NA, 
    NA, 333.71, 349.01, 353.38, 341.07, NA, NA, 342.44, NA, NA, 
    312.76, 285.09, 282.67, 290, 285.03, 293.04, NA, 267.94, 
    NA, NA, NA, NA, 291.46, 311.76, NA, NA, NA, NA, NA, 316.98, 
    324.24, 309.25, NA, NA, 347.27, NA, NA, NA, NA, 332.28, 366.22, 
    353.31, NA, NA, 336.06, 352.47, 330.78, 332.24, NA, NA, NA, 
    NA, NA, NA, 296.4, NA, NA, NA, 293.05, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, 290.33, NA, NA, 318.21, 338.26, 315.22, 265.5, 
    256.24, 267.57, NA, 263.25, NA, NA, 245.13, NA, NA, 244.22, 
    238.45, 243.41, 253.36, NA, 247.51, NA, 248.32, NA, 249.78, 
    267.81, 252.8, 255.66, 263.13, 243.38, NA, 252.39, NA, 259.23, 
    NA, 247.42, 250.26, 247.13, 229.7, NA, 198.3, 198.77, NA, 
    NA, 204.44, 188.2, NA, NA, NA, 190.21, 221.9, NA, 198.71, 
    NA, NA, 206.92, NA, 215.43, NA, NA, NA, 211.85, NA, NA, NA, 
    NA, 203.05, 192.57, 180.06, 181.08, NA, NA, NA, NA, NA, NA, 
    174.29, 168.85, NA, 164.39, 174.24, 174.77, NA, 168.55, 173.6, 
    NA, NA, NA, NA, NA, 165.28, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, 178.56, 174.11, 178.55, 180.19, 182.12, 
    192.96, NA, NA, NA, 187.85, NA, NA, NA, NA, 178.47, NA, 181.85, 
    170.73, 169.14, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA
    ), ETHUSDT = c(4033.7, NA, NA, NA, NA, NA, NA, NA, 3974.52, 
    3879.54, NA, 3479.84, 3437.81, 3382.18, 3315.27, 3336.02, 
    3501.75, 3471, 3327.7, 3351.05, 3394.5, 3361.08, 3391.27, 
    3363.42, 3343.7, NA, NA, NA, NA, NA, NA, NA, NA, 3450.46, 
    3575.47, 3633.31, 3627.81, NA, NA, 3673.87, NA, NA, 3442.55, 
    3263.06, 3250.48, 3315.07, 3271.79, 3288.57, NA, 3020.79, 
    NA, NA, NA, NA, 3212.6, 3325.81, NA, NA, NA, NA, NA, 3343.86, 
    3414.41, 3258.2, NA, NA, 3442.39, NA, NA, NA, NA, 3292.93, 
    3351, 3285.39, NA, NA, 3265.85, 3397.9, 3344.17, 3338.04, 
    NA, NA, NA, NA, NA, NA, 3072.7, NA, NA, NA, 3167.62, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, 3111.59, NA, NA, 3272.6, 
    3375.88, 3262.24, 2972.99, 2707.7, 2815.1, NA, 2740.69, NA, 
    NA, 2700, NA, NA, 2680.09, 2629.89, 2641.74, 2679.01, NA, 
    2640.79, NA, 2672.99, NA, 2631.39, 2773.97, 2686.12, 2688.24, 
    2732.6, 2619.76, NA, 2710.95, NA, 2735.37, NA, 2672.65, 2785.08, 
    2814.5, 2664.41, NA, 2421.19, 2367.01, NA, NA, 2322.18, 2209.3, 
    NA, NA, NA, 2197.02, 2480.49, NA, 2277.21, NA, NA, 2118.91, 
    NA, 2194.84, NA, NA, NA, 2191.2, NA, NA, NA, NA, 2162.31, 
    2198.93, 2023.93, 1917.49, NA, NA, NA, NA, NA, NA, 1904.91, 
    1867.81, NA, 1826.95, 1934.8, 1940.55, NA, 1910.15, 1930.65, 
    NA, NA, NA, NA, NA, 1876.78, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, 2027.69, 1970.88, 1968.81, 1992.66, 
    1992.95, 2088.28, NA, NA, NA, 2076.35, NA, NA, NA, NA, 2006.32, 
    NA, 2000.08, 1884.02, 1818.14, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA), FTMUSDT = c(1.3799, NA, NA, NA, NA, NA, 
    NA, NA, 1.3595, 1.2222, NA, 1.0443, 0.9699, 1.0167, 0.9966, 
    0.9739, 0.9817, 0.9754, 0.8803, 0.8757, 0.8098, 0.7792, 0.7544, 
    0.6907, 0.792, NA, NA, NA, NA, NA, NA, NA, NA, 0.8209, 0.8213, 
    0.8383, 0.8192, NA, NA, 0.7978, NA, NA, 0.7157, 0.6372, 0.6568, 
    0.6901, 0.7049, 0.7067, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), LINKUSDT =
c(29.83, 
    NA, NA, NA, NA, NA, NA, NA, 28.03, 27.67, NA, 23.13, 22.95, 
    22.66, 22.15, 22.6, 24.77, 24.61, 22.7, 22.7, 22.15, 21.29, 
    20.86, 20.27, 20.82, NA, NA, NA, NA, NA, NA, NA, NA, 22.21, 
    23.59, 23.42, 23.25, NA, NA, 23.92, NA, NA, 21.78, 20.25, 
    19.73, 20.45, 19.93, 20.11, NA, 18.5, NA, NA, NA, NA, 20.26, 
    21.27, NA, NA, NA, NA, NA, 23.51, 24.24, 23.59, NA, NA, 26.54, 
    NA, NA, NA, NA, 24.66, 26.59, 25.64, NA, NA, 25.56, 26.11, 
    24.98, 25.95, NA, NA, NA, NA, NA, NA, 23.13, NA, NA, NA, 
    23.73, NA, NA, NA, NA, NA, NA, NA, NA, NA, 22.89, NA, NA, 
    24.92, 25.41, 24.36, 20.72, 20.6, 20.54, NA, 19.09, NA, NA, 
    18.6, NA, NA, 18.78, 18.26, 18.7, 18.77, NA, 18.77, NA, 18.77, 
    NA, 18.33, 19.7, 18.85, 18.91, 19.07, 17.51, NA, 18.01, NA, 
    18.2, NA, 17.71, 17.96, 17.63, 16.37, NA, 14.84, 15.08, NA, 
    NA, 15.31, 14.54, NA, NA, NA, 14.61, 17.07, NA, 16.21, NA, 
    NA, 14.11, NA, 16.1, NA, NA, NA, 16.63, NA, NA, NA, NA, 16.47, 
    15.34, 13.74, 12.89, NA, NA, NA, NA, NA, NA, 12.91, 13.07, 
    NA, 12.75, 14.53, 14.13, NA, 13.68, 13.94, NA, NA, NA, NA, 
    NA, 13.53, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, 14.35, 14.2, 13.99, 14.37, 14.32, 15.12, NA, NA, NA, 
    15.46, NA, NA, NA, NA, 15.19, NA, 15.33, 14.14, 13.5, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA), SUIUSDC = c(4.7252, 
    NA, NA, NA, NA, NA, NA, NA, 4.6923, 4.7017, NA, 4.2422, 4.4909, 
    4.5497, 4.3416, 4.293, 4.6079, 4.5242, 4.1963, 4.2141, 4.1772, 
    4.123, 4.1906, 4.2085, 4.1817, NA, NA, NA, NA, NA, NA, NA, 
    NA, 4.3391, 4.708, 5.1388, 5.2029, NA, NA, 5.224, NA, NA, 
    4.8313, 4.5976, 4.7354, 5.1894, 4.941, 4.8115, NA, 4.4785, 
    NA, NA, NA, NA, 4.5784, 4.6566, NA, NA, NA, NA, NA, 4.9161, 
    4.7858, 4.8951, NA, NA, 4.948, NA, NA, NA, NA, 4.3919, 4.6632, 
    4.6118, NA, NA, 4.3972, 4.4267, 4.1615, 4.1407, NA, NA, NA, 
    NA, NA, NA, 3.7285, NA, NA, NA, 3.7674, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, 3.7116, NA, NA, 4.1375, 4.1282, 3.935, 3.3428, 
    3.5558, 3.7017, NA, 3.3519, NA, NA, 3.1784, NA, NA, 3.1207, 
    3.0176, 3.0415, 3.2668, NA, 3.3746, NA, 3.38, NA, 3.4623, 
    3.7018, 3.4095, 3.298, 3.1857, 2.9762, NA, 3.1934, NA, 3.4429, 
    NA, 3.3604, 3.4162, 3.3258, 3.0418, NA, 2.8179, 2.8598, NA, 
    NA, 2.8307, 2.7903, NA, NA, NA, 2.8014, 3.1772, NA, 2.8541, 
    NA, NA, 2.416, NA, 2.5384, NA, NA, NA, 2.816, NA, NA, NA, 
    NA, 2.6891, 2.5263, 2.271, 2.1051, NA, NA, NA, NA, NA, NA, 
    2.1651, 2.2203, NA, 2.1238, 2.3503, 2.362, NA, 2.2691, 2.3323, 
    NA, NA, NA, NA, NA, 2.2459, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, 2.3785, 2.3867, 2.2767, 2.2898, 2.2543, 
    2.4363, NA, NA, NA, 2.4686, NA, NA, NA, NA, 2.5708, NA, 2.7651, 
    2.5222, 2.2825, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA
    ), ENAUSDC = c(1.1862, NA, NA, NA, NA, NA, NA, NA, 1.1412, 
    1.0928, NA, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255, 1.0493, 
    1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192, 0.9212, 
    NA, NA, NA, NA, NA, NA, NA, NA, 1.0404, 1.2138, 1.2446, 1.2394, 
    NA, NA, 1.1984, NA, NA, 1.0946, 0.9606, 0.916, 0.9408, 0.8888, 
    0.8978, NA, 0.7794, NA, NA, NA, NA, 0.8277, 0.9005, NA, NA, 
    NA, NA, NA, 0.9133, 0.9355, 0.8662, NA, NA, 0.9445, NA, NA, 
    NA, NA, 0.9112, 0.9168, 0.8951, NA, NA, 0.846, 0.9025, 0.8719, 
    0.8238, NA, NA, NA, NA, NA, NA, 0.7188, NA, NA, NA, 0.7147, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.6877, NA, NA, 0.7732, 
    0.7878, 0.7231, 0.5993, 0.6344, 0.6393, NA, 0.5535, NA, NA, 
    0.5022, NA, NA, 0.5092, 0.5175, 0.4806, 0.4975, NA, 0.4564, 
    NA, 0.429, NA, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411, 
    NA, 0.401, NA, 0.4058, NA, 0.4348, 0.4575, 0.454, 0.4036, 
    NA, 0.4067, 0.4129, NA, NA, 0.4285, 0.4164, NA, NA, NA, 0.3944, 
    0.447, NA, 0.395, NA, NA, 0.359, NA, 0.3626, NA, NA, NA, 
    0.38, NA, NA, NA, NA, 0.4372, 0.4457, 0.4142, 0.4034, NA, 
    NA, NA, NA, NA, NA, 0.3826, 0.366, NA, 0.3394, 0.3549, 0.3696, 
    NA, 0.3657, 0.3802, NA, NA, NA, NA, NA, 0.356, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.3815, 0.3791, 0.3612, 
    0.3547, 0.364, 0.4019, NA, NA, NA, 0.4252, NA, NA, NA, NA, 
    0.4156, NA, 0.4196, 0.3882, 0.3672, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA), AAVEUSDC = c(388, NA, NA, NA, NA, NA, 
    NA, NA, 365.68, 373.15, NA, 316.69, 319.8, 306.06, 308.15, 
    352.45, 376.21, 369.33, 334.15, 327.66, 334.95, 331.35, 331.56, 
    312.13, 313.71, NA, NA, NA, NA, NA, NA, NA, NA, 332.95, 348.72, 
    353, 340.82, NA, NA, 342.41, NA, NA, 312.68, 284.99, 283.29, 
    289.79, 285.09, 292.89, NA, 267.83, NA, NA, NA, NA, 291.29, 
    311.21, NA, NA, NA, NA, NA, 317.28, 324.28, 309, NA, NA, 
    346.95, NA, NA, NA, NA, 332, 366.22, 353.36, NA, NA, 336.3, 
    352.42, 330.79, 332.13, NA, NA, NA, NA, NA, NA, 296.62, NA, 
    NA, NA, 293.04, NA, NA, NA, NA, NA, NA, NA, NA, NA, 290.18, 
    NA, NA, 317.82, 338.3, 314.94, 265.25, 256.79, 267.67, NA, 
    263.11, NA, NA, 245.37, NA, NA, 244.15, 238.36, 243.35, 252.79, 
    NA, 247.54, NA, 248.14, NA, 250.2, 268, 252.71, 255.93, 263.12, 
    243.33, NA, 252.98, NA, 259.4, NA, 247.46, 250.4, 247.17, 
    229.86, NA, 198.12, 198.67, NA, NA, 204.25, 188.26, NA, NA, 
    NA, 190.2, 221.87, NA, 198.69, NA, NA, 206.74, NA, 215.48, 
    NA, NA, NA, 212.08, NA, NA, NA, NA, 203.07, 192.45, 180.05, 
    180.94, NA, NA, NA, NA, NA, NA, 174.26, 168.79, NA, 164.29, 
    174.22, 174.76, NA, 168.53, 173.55, NA, NA, NA, NA, NA, 165.31, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 178.45, 
    174.11, 178.43, 180.33, 182.09, 192.97, NA, NA, NA, 187.89, 
    NA, NA, NA, NA, 178.53, NA, 182.08, 170.56, 169.11, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA), BTCUSDC = c(107112.36, 
    NA, NA, NA, NA, NA, NA, NA, 107517.25, 104630.49, NA, 98692.01, 
    97172, 97559.99, 95555.99, 93260, 98743.99, 98475.99, 95740.01, 
    94156.03, 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 
    NA, NA, NA, NA, NA, NA, NA, NA, 96673.8, 97966.09, 98004.92, 
    97722.38, NA, NA, 101865.33, NA, NA, 97236.45, 94004.02, 
    92686.72, 95786.01, 94113, 95097.6, NA, 91933.25, NA, NA, 
    NA, NA, 96481.8, 98651.62, NA, NA, NA, NA, NA, 99823.04, 
    104162, 103742.8, NA, NA, 104997.99, NA, NA, NA, NA, 102844.44, 
    106166, 104336, NA, NA, 105945.99, 106516.81, 104880.02, 
    104927.47, NA, NA, NA, NA, NA, NA, 99111.87, NA, NA, NA, 
    102587, NA, NA, NA, NA, NA, NA, NA, NA, NA, 102404, NA, NA, 
    105296.86, 104591.47, 102247.03, 97166.51, 99352, 99215.17, 
    NA, 97570.44, NA, NA, 96738.02, NA, NA, 97462, 96363.99, 
    96190, 97523.98, NA, 96164.78, NA, 97368.43, NA, 95716.93, 
    98570.1, 97431.42, 96994, 95494.02, 94068, NA, 96394.6, NA, 
    97991.02, NA, 96982, 96635.96, 95664.1, 94650, NA, 87156.01, 
    85969.64, NA, NA, 84507.03, 83605.12, NA, NA, NA, 85172, 
    94100.16, NA, 90258.01, NA, NA, 85415.99, NA, 89683.45, NA, 
    NA, NA, 88625.27, NA, NA, NA, NA, 87676.78, 85929.38, 82358.02, 
    78414, NA, NA, NA, NA, NA, NA, 81291.59, 81839.98, NA, 80047.99, 
    84365.03, 84427.7, NA, 83916.04, 84189.04, NA, NA, NA, NA, 
    NA, 81453.98, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, 84236, 84048.03, 83983.62, 84232.07, 85008, 88482.01, 
    NA, NA, NA, 87958.04, NA, NA, NA, NA, 86578.83, NA, 86890.11, 
    83945.98, 82308, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA), SUSDC = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, 0.7845, 0.7695, 0.6634, NA, NA, 0.6347, 
    NA, NA, NA, NA, 0.5203, 0.6205, 0.6091, NA, NA, 0.5908, 0.5589, 
    0.5404, 0.5382, NA, NA, NA, NA, NA, NA, 0.4722, NA, NA, NA, 
    0.4615, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.463, NA, NA, 
    0.5246, 0.5934, 0.5227, 0.4553, 0.4634, 0.4428, NA, 0.4278, 
    NA, NA, 0.436, NA, NA, 0.424, 0.403, 0.4082, 0.4274, NA, 
    0.4568, NA, 0.5269, NA, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 
    0.571, NA, 0.7145, NA, 0.8272, NA, 0.8685, 0.8384, 0.8258, 
    0.8386, NA, 0.7306, 0.7, NA, NA, 0.7114, 0.6713, NA, NA, 
    NA, 0.7287, 0.7645, NA, 0.6435, NA, NA, 0.5438, NA, 0.598, 
    NA, NA, NA, 0.5449, NA, NA, NA, NA, 0.5111, 0.519, 0.4459, 
    0.4174, NA, NA, NA, NA, NA, NA, 0.4305, 0.4379, NA, 0.4628, 
    0.5339, 0.5556, NA, 0.5116, 0.5051, NA, NA, NA, NA, NA, 0.4768, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.5134, 
    0.5135, 0.4959, 0.5128, 0.5276, 0.6055, NA, NA, NA, 0.6179, 
    NA, NA, NA, NA, 0.6003, NA, 0.6033, 0.5361, 0.4822, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA), OMUSDT = c(4.0669, NA, 
    NA, NA, NA, NA, NA, NA, 4.0242, 4.0872, NA, 4.0555, 3.7507, 
    3.7198, 3.685, 3.6884, 3.8089, 3.7631, 3.6245, 3.6647, 3.7233, 
    3.7539, 3.5579, 3.8575, 3.7628, NA, NA, NA, NA, NA, NA, NA, 
    NA, 3.8025, 3.8912, 3.9183, 3.9534, NA, NA, 3.9746, NA, NA, 
    3.8647, 3.9018, 3.9651, 4.0105, 3.9121, 3.8057, NA, 3.7625, 
    NA, NA, NA, NA, 3.6968, 3.7698, NA, NA, NA, NA, NA, 3.869, 
    3.8757, 3.7456, NA, NA, 3.8583, NA, NA, NA, NA, 3.6124, 3.7219, 
    3.5427, NA, NA, 3.6254, 3.6162, 3.264, 4.5563, NA, NA, NA, 
    NA, NA, NA, 4.478, NA, NA, NA, 4.6016, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, 4.5009, NA, NA, 5.6807, 5.2353, 5.3264, 5.0172, 
    5.6471, 5.8664, NA, 5.7836, NA, NA, 5.6755, NA, NA, 6.1504, 
    5.847, 5.84, 6.0824, NA, 5.9558, NA, 5.7482, NA, 5.6401, 
    5.5246, 7.5853, 7.5069, 7.3842, 7.4776, NA, 7.6016, NA, 7.5294, 
    NA, 7.535, 7.6511, 8.4085, 8.2672, NA, 7.6803, 7.372, NA, 
    NA, 7.4516, 7.4721, NA, NA, NA, 7.4352, 7.859, NA, 7.3664, 
    NA, NA, 7.1716, NA, 7.1441, NA, NA, NA, 6.9779, NA, NA, NA, 
    NA, 6.5072, 6.5552, 6.0642, 6.2345, NA, NA, NA, NA, NA, NA, 
    6.325, 6.3902, NA, 6.3433, 6.2535, 6.5652, NA, 6.8215, 6.9656, 
    NA, NA, NA, NA, NA, 6.9273, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, 6.8084, 6.6561, 6.3154, 6.3257, 6.4493, 
    7.0056, NA, NA, NA, 6.725, NA, NA, NA, NA, 6.5019, NA, 6.5149, 
    6.2719, 6.2527, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA
    ), OMUSDC = c(4.0706, NA, NA, NA, NA, NA, NA, NA, 4.025, 
    4.0875, NA, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 
    3.7536, 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 
    NA, NA, NA, NA, NA, NA, NA, NA, 3.8019, 3.8903, 3.9035, 3.9537, 
    NA, NA, 3.9755, NA, NA, 3.862, 3.8991, 3.9685, 4.0064, 3.9105, 
    3.8044, NA, 3.7607, NA, NA, NA, NA, 3.693, 3.7698, NA, NA, 
    NA, NA, NA, 3.872, 3.872, 3.7408, NA, NA, 3.8513, NA, NA, 
    NA, NA, 3.6083, 3.726, 3.5371, NA, NA, 3.6244, 3.6144, 3.2608, 
    4.5631, NA, NA, NA, NA, NA, NA, 4.4803, NA, NA, NA, 4.602, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, 4.4968, NA, NA, 5.6786, 
    5.2307, 5.3276, 5.0127, 5.6513, 5.8682, NA, 5.7861, NA, NA, 
    5.6768, NA, NA, 6.1531, 5.8486, 5.8408, 6.0812, NA, 5.9543, 
    NA, 5.7494, NA, 5.6397, 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 
    NA, 7.6039, NA, 7.5314, NA, 7.5341, 7.6558, 8.4069, 8.268, 
    NA, 7.6702, 7.3587, NA, NA, 7.4413, 7.4682, NA, NA, NA, 7.4288, 
    7.8594, NA, 7.3667, NA, NA, 7.1693, NA, 7.1423, NA, NA, NA, 
    6.9744, NA, NA, NA, NA, 6.5149, 6.5599, 6.0548, 6.2294, NA, 
    NA, NA, NA, NA, NA, 6.3179, 6.3857, NA, 6.3399, 6.2524, 6.566, 
    NA, 6.8212, 6.9633, NA, NA, NA, NA, NA, 6.9234, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 6.8089, 6.653, 6.3123, 
    6.3202, 6.4494, 6.993, NA, NA, NA, 6.726, NA, NA, NA, NA, 
    6.5015, NA, 6.5134, 6.264, 6.2462, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA), ETHUSDC = c(4034.74, NA, NA, NA, NA, 
    NA, NA, NA, 3975.39, 3879.06, NA, 3474.91, 3436.86, 3380.71, 
    3313.11, 3332.66, 3499.69, 3467.64, 3325.02, 3345.58, 3388.82, 
    3355.39, 3385.8, 3358.42, 3336.65, NA, NA, NA, NA, NA, NA, 
    NA, NA, 3447.37, 3573.18, 3633.24, 3627.35, NA, NA, 3674.61, 
    NA, NA, 3441.2, 3262.6, 3250.57, 3314.51, 3269.8, 3286.72, 
    NA, 3019.4, NA, NA, NA, NA, 3210.99, 3326.21, NA, NA, NA, 
    NA, NA, 3343.59, 3415.67, 3255.79, NA, NA, 3438.6, NA, NA, 
    NA, NA, 3289.19, 3350.5, 3285.05, NA, NA, 3265.79, 3399.59, 
    3344.04, 3337.1, NA, NA, NA, NA, NA, NA, 3071.81, NA, NA, 
    NA, 3167.03, NA, NA, NA, NA, NA, NA, NA, NA, NA, 3111.09, 
    NA, NA, 3272.72, 3376.27, 3261.2, 2970.48, 2711.8, 2816.61, 
    NA, 2741.62, NA, NA, 2700.49, NA, NA, 2680.88, 2629.49, 2642.7, 
    2679.99, NA, 2640.79, NA, 2673.27, NA, 2631.72, 2775.09, 
    2686.11, 2688.91, 2733.38, 2618.98, NA, 2710.88, NA, 2735.95, 
    NA, 2673.5, 2785.11, 2814.66, 2664.58, NA, 2418.3, 2364.72, 
    NA, NA, 2319.9, 2209.36, NA, NA, NA, 2196.1, 2481.43, NA, 
    2276.12, NA, NA, 2118.01, NA, 2194, NA, NA, NA, 2191, NA, 
    NA, NA, NA, 2161.81, 2198.3, 2024.1, 1916.8, NA, NA, NA, 
    NA, NA, NA, 1904.59, 1867.86, NA, 1826.58, 1935.1, 1940.6, 
    NA, 1910.21, 1930.4, NA, NA, NA, NA, NA, 1876.44, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2027.93, 1970, 
    1967.94, 1992.31, 1992.71, 2088.6, NA, NA, NA, 2076.9, NA, 
    NA, NA, NA, 2006.72, NA, 1999.82, 1882.6, 1817.51, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
    NA, NA, NA, NA, NA, NA, NA, NA, NA)), row.names = c(NA, -250L
), class = c("tbl_df", "tbl", "data.frame"))





On Mon, 2025-04-07 at 12:16 +0000, Ebert,Timothy Aaron wrote:
> The basic process is to make each tibble have one or more columns to
> merge by. Then merge the tibbles. Can you show us a couple of tries
> and describe why or how they failed? Note that you cannot merge using
> a row in one tibble and a column in the other tibble without first
> reshaping the first tibble.
> 
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Arnaud
> Gaboury
> Sent: Sunday, April 6, 2025 11:48 PM
> To: r-help at r-project.org
> Subject: [R] Can't join/merge two tibbles with lots of variables the
> way I want
> 
> [External Email]
> 
> I work on writing a portfolio journal with a daily valuation of my
> portfolio + the trades I have done on the day.
> My "time" column is made of dates (day + time) which are either the
> closing prices of my assets (each day @ 19:59:59 for convenience. I
> work on crypto currencies and markets are open 24/24 7/7, so thete is
> no real official closing time).
> To build this journal, I can rely on two tibbles:
> - one is the data frame of daily closing prices of the assets I own
> in my portfolio. Here it is:
> daily_clsong_price <- structure(list(time =
> structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> 1734631199.999, 1734717599.999, 1734803999.999, 1734890399.999,
> 1734976799.999, 1735063199.999, 1735149599.999, 1735235999.999,
> 1735322399.999, 1735408799.999, 1735495199.999, 1735581599.999,
> 1735667999.999, 1735754399.999, 1735840799.999, 1735927199.999,
> 1736013599.999, 1736099999.999, 1736186399.999, 1736272799.999,
> 1736359199.999, 1736445599.999, 1736531999.999, 1736618399.999,
> 1736704799.999, 1736791199.999, 1736877599.999, 1736963999.999,
> 1737050399.999, 1737136799.999, 1737223199.999, 1737309599.999,
> 1737395999.999, 1737482399.999, 1737568799.999, 1737655199.999,
> 1737741599.999, 1737827999.999, 1737914399.999, 1738000799.999,
> 1738087199.999, 1738173599.999, 1738259999.999, 1738346399.999,
> 1738432799.999, 1738519199.999, 1738605599.999, 1738691999.999,
> 1738778399.999, 1738864799.999, 1738951199.999, 1739037599.999,
> 1739123999.999, 1739210399.999, 1739296799.999, 1739383199.999,
> 1739469599.999, 1739555999.999, 1739642399.999, 1739728799.999,
> 1739815199.999, 1739901599.999, 1739987999.999, 1740074399.999,
> 1740160799.999, 1740247199.999, 1740333599.999, 1740419999.999,
> 1740506399.999, 1740592799.999, 1740679199.999, 1740765599.999,
> 1740851999.999, 1740938399.999, 1741024799.999, 1741111199.999,
> 1741197599.999, 1741283999.999, 1741370399.999, 1741456799.999,
> 1741543199.999, 1741629599.999, 1741715999.999, 1741802399.999,
> 1741888799.999, 1741975199.999, 1742061599.999, 1742147999.999,
> 1742234399.999, 1742320799.999, 1742407199.999, 1742493599.999,
> 1742579999.999, 1742666399.999, 1742752799.999, 1742839199.999,
> 1742925599.999, 1743011999.999, 1743098399.999, 1743184799.999,
> 1743271199.999), tzone = "", class = c("POSIXct", "POSIXt")),
> BTCUSDC_close = c(107112.36, 107517.25, 104630.49, 98692.01, 97172,
> 97559.99, 95555.99, 93260, 98743.99, 98475.99, 95740.01, 94156.03,
> 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 96673.8, 97966.09,
> 98004.92, 97722.38, 101865.33, 97236.45, 94004.02, 92686.72,
> 95786.01, 94113, 95097.6, 91933.25, 96481.8, 98651.62, 99823.04,
> 104162, 103742.8, 104997.99, 102844.44, 106166, 104336, 105945.99,
> 106516.81, 104880.02, 104927.47, 99111.87, 102587, 102404, 105296.86,
> 104591.47, 102247.03, 97166.51, 99352, 99215.17, 97570.44, 96738.02,
> 97462, 96363.99, 96190, 97523.98, 96164.78, 97368.43, 95716.93,
> 98570.1, 97431.42, 96994, 95494.02, 94068, 96394.6, 97991.02, 96982,
> 96635.96, 95664.1, 94650, 87156.01, 85969.64, 84507.03, 83605.12,
> 85172, 94100.16, 90258.01, 85415.99, 89683.45, 88625.27, 87676.78,
> 85929.38, 82358.02, 78414, 81291.59, 81839.98, 80047.99, 84365.03,
> 84427.7, 83916.04, 84189.04, 81453.98, 84236, 84048.03, 83983.62,
> 84232.07, 85008, 88482.01, 87958.04, 86578.83, 86890.11, 83945.98,
> 82308), SUIUSDC_close = c(4.7252, 4.6923, 4.7017, 4.2422, 4.4909,
> 4.5497, 4.3416, 4.293, 4.6079, 4.5242, 4.1963, 4.2141, 4.1772, 4.123,
> 4.1906, 4.2085, 4.1817, 4.3391, 4.708, 5.1388, 5.2029, 5.224, 4.8313,
> 4.5976, 4.7354, 5.1894, 4.941, 4.8115, 4.4785, 4.5784, 4.6566,
> 4.9161, 4.7858, 4.8951, 4.948, 4.3919, 4.6632, 4.6118, 4.3972,
> 4.4267, 4.1615, 4.1407, 3.7285, 3.7674, 3.7116, 4.1375, 4.1282,
> 3.935, 3.3428, 3.5558, 3.7017, 3.3519, 3.1784, 3.1207, 3.0176,
> 3.0415, 3.2668, 3.3746, 3.38, 3.4623, 3.7018, 3.4095, 3.298, 3.1857,
> 2.9762, 3.1934, 3.4429, 3.3604, 3.4162, 3.3258, 3.0418, 2.8179,
> 2.8598, 2.8307, 2.7903, 2.8014, 3.1772, 2.8541, 2.416, 2.5384, 2.816,
> 2.6891, 2.5263, 2.271, 2.1051, 2.1651, 2.2203, 2.1238, 2.3503, 2.362,
> 2.2691, 2.3323, 2.2459, 2.3785, 2.3867, 2.2767, 2.2898, 2.2543,
> 2.4363, 2.4686, 2.5708, 2.7651, 2.5222, 2.2825), ENAUSDC_close =
> c(1.1862, 1.1412, 1.0928, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255,
> 1.0493, 1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192,
> 0.9212, 1.0404, 1.2138, 1.2446, 1.2394, 1.1984, 1.0946, 0.9606,
> 0.916, 0.9408, 0.8888, 0.8978, 0.7794, 0.8277, 0.9005, 0.9133,
> 0.9355, 0.8662, 0.9445, 0.9112, 0.9168, 0.8951, 0.846, 0.9025,
> 0.8719, 0.8238, 0.7188, 0.7147, 0.6877, 0.7732, 0.7878, 0.7231,
> 0.5993, 0.6344, 0.6393, 0.5535, 0.5022, 0.5092, 0.5175, 0.4806,
> 0.4975, 0.4564, 0.429, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411,
> 0.401, 0.4058, 0.4348, 0.4575, 0.454, 0.4036, 0.4067, 0.4129, 0.4285,
> 0.4164, 0.3944, 0.447, 0.395, 0.359, 0.3626, 0.38, 0.4372, 0.4457,
> 0.4142, 0.4034, 0.3826, 0.366, 0.3394, 0.3549, 0.3696, 0.3657,
> 0.3802, 0.356, 0.3815, 0.3791, 0.3612, 0.3547, 0.364, 0.4019, 0.4252,
> 0.4156, 0.4196, 0.3882, 0.3672), AAVEUSDC_close = c(388, 365.68,
> 373.15, 316.69, 319.8, 306.06, 308.15, 352.45, 376.21, 369.33,
> 334.15, 327.66, 334.95, 331.35, 331.56, 312.13, 313.71, 332.95,
> 348.72, 353, 340.82, 342.41, 312.68, 284.99, 283.29, 289.79, 285.09,
> 292.89, 267.83, 291.29, 311.21, 317.28, 324.28, 309, 346.95, 332,
> 366.22, 353.36, 336.3, 352.42, 330.79, 332.13, 296.62, 293.04,
> 290.18, 317.82, 338.3, 314.94, 265.25, 256.79, 267.67, 263.11,
> 245.37, 244.15, 238.36, 243.35, 252.79, 247.54, 248.14, 250.2, 268,
> 252.71, 255.93, 263.12, 243.33, 252.98, 259.4, 247.46, 250.4, 247.17,
> 229.86, 198.12, 198.67, 204.25, 188.26, 190.2, 221.87, 198.69,
> 206.74, 215.48, 212.08, 203.07, 192.45, 180.05, 180.94, 174.26,
> 168.79, 164.29, 174.22, 174.76, 168.53, 173.55, 165.31, 178.45,
> 174.11, 178.43, 180.33, 182.09, 192.97, 187.89, 178.53, 182.08,
> 170.56, 169.11), ETHUSDC_close = c(4034.74, 3975.39, 3879.06,
> 3474.91, 3436.86, 3380.71, 3313.11, 3332.66, 3499.69, 3467.64,
> 3325.02, 3345.58, 3388.82, 3355.39, 3385.8, 3358.42, 3336.65,
> 3447.37, 3573.18, 3633.24, 3627.35, 3674.61, 3441.2, 3262.6, 3250.57,
> 3314.51, 3269.8, 3286.72, 3019.4, 3210.99, 3326.21, 3343.59, 3415.67,
> 3255.79, 3438.6, 3289.19, 3350.5, 3285.05, 3265.79, 3399.59, 3344.04,
> 3337.1, 3071.81, 3167.03, 3111.09, 3272.72, 3376.27, 3261.2, 2970.48,
> 2711.8, 2816.61, 2741.62, 2700.49, 2680.88, 2629.49, 2642.7, 2679.99,
> 2640.79, 2673.27, 2631.72, 2775.09, 2686.11, 2688.91, 2733.38,
> 2618.98, 2710.88, 2735.95, 2673.5, 2785.11, 2814.66, 2664.58, 2418.3,
> 2364.72, 2319.9, 2209.36, 2196.1, 2481.43, 2276.12, 2118.01, 2194,
> 2191, 2161.81, 2198.3, 2024.1, 1916.8, 1904.59, 1867.86, 1826.58,
> 1935.1, 1940.6, 1910.21, 1930.4, 1876.44, 2027.93, 1970, 1967.94,
> 1992.31, 1992.71, 2088.6, 2076.9, 2006.72, 1999.82, 1882.6, 1817.51),
> FTMUSDC_close = c(1.381, 1.3596, 1.2222, 1.0445, 0.9705, 1.0203,
> 0.9958, 0.9727, 0.9813, 0.9725, 0.8807, 0.8757, 0.8086, 0.7783,
> 0.7531, 0.6871, 0.7899, 0.8195, 0.8206, 0.8372, 0.819, 0.7973,
> 0.7142, 0.637, 0.6573, 0.6902, 0.7047, 0.7072, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA), LINKUSDC_close = c(29.81, 28.04, 27.65, 23.1, 22.93,
> 22.65, 22.13, 22.57, 24.75, 24.58, 22.69, 22.67, 22.08, 21.26, 20.84,
> 20.24, 20.79, 22.2, 23.58, 23.4, 23.23, 23.94, 21.78, 20.25, 19.73,
> 20.45, 19.93, 20.12, 18.47, 20.25, 21.26, 23.51, 24.24, 23.57, 26.55,
> 24.65, 26.61, 25.63, 25.58, 26.11, 24.95, 25.93, 23.12, 23.73, 22.89,
> 24.92, 25.39, 24.36, 20.71, 20.63, 20.59, 19.11, 18.59, 18.78, 18.26,
> 18.7, 18.76, 18.77, 18.79, 18.33, 19.7, 18.86, 18.91, 19.07, 17.5,
> 18.02, 18.21, 17.71, 17.95, 17.63, 16.36, 14.84, 15.05, 15.3, 14.54,
> 14.61, 17.08, 16.21, 14.1, 16.09, 16.63, 16.47, 15.33, 13.74, 12.88,
> 12.91, 13.06, 12.74, 14.54, 14.13, 13.68, 13.95, 13.52, 14.34, 14.19,
> 13.98, 14.36, 14.32, 15.12, 15.46, 15.19, 15.33, 14.13, 13.5),
> SUSDC_close = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, 0.7845, 0.7695, 0.6634, 0.6347, 0.5203, 0.6205, 0.6091, 0.5908,
> 0.5589, 0.5404, 0.5382, 0.4722, 0.4615, 0.463, 0.5246, 0.5934,
> 0.5227, 0.4553, 0.4634, 0.4428, 0.4278, 0.436, 0.424, 0.403, 0.4082,
> 0.4274, 0.4568, 0.5269, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 0.571,
> 0.7145, 0.8272, 0.8685, 0.8384, 0.8258, 0.8386, 0.7306, 0.7, 0.7114,
> 0.6713, 0.7287, 0.7645, 0.6435, 0.5438, 0.598, 0.5449, 0.5111, 0.519,
> 0.4459, 0.4174, 0.4305, 0.4379, 0.4628, 0.5339, 0.5556, 0.5116,
> 0.5051, 0.4768, 0.5134, 0.5135, 0.4959, 0.5128, 0.5276, 0.6055,
> 0.6179, 0.6003, 0.6033, 0.5361, 0.4822), OMUSDC_close = c(4.0706,
> 4.025, 4.0875, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 3.7536,
> 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 3.8019,
> 3.8903, 3.9035, 3.9537, 3.9755, 3.862, 3.8991, 3.9685, 4.0064,
> 3.9105, 3.8044, 3.7607, 3.693, 3.7698, 3.872, 3.872, 3.7408, 3.8513,
> 3.6083, 3.726, 3.5371, 3.6244, 3.6144, 3.2608, 4.5631, 4.4803, 4.602,
> 4.4968, 5.6786, 5.2307, 5.3276, 5.0127, 5.6513, 5.8682, 5.7861,
> 5.6768, 6.1531, 5.8486, 5.8408, 6.0812, 5.9543, 5.7494, 5.6397,
> 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 7.6039, 7.5314, 7.5341,
> 7.6558, 8.4069, 8.268, 7.6702, 7.3587, 7.4413, 7.4682, 7.4288,
> 7.8594, 7.3667, 7.1693, 7.1423, 6.9744, 6.5149, 6.5599, 6.0548,
> 6.2294, 6.3179, 6.3857, 6.3399, 6.2524, 6.566, 6.8212, 6.9633,
> 6.9234, 6.8089, 6.653, 6.3123, 6.3202, 6.4494, 6.993, 6.726, 6.5015,
> 6.5134, 6.264, 6.2462)), class = c("tbl_df", "tbl", "data.frame"),
> row.names = c(NA, -104L))
> 
> - one is a data frame with all my trades : qty x price, with dates
> token_daily_close <- structure(list(time =
> structure(c(1734371999.999, 1734458399.999, 1734544799.999,
> 1734631199.999, 1734717599.999, 1734803999.999, 1734890399.999,
> 1734976799.999, 1735063199.999, 1735149599.999, 1735235999.999,
> 1735322399.999, 1735408799.999, 1735495199.999, 1735581599.999,
> 1735667999.999, 1735754399.999, 1735840799.999, 1735927199.999,
> 1736013599.999, 1736099999.999, 1736186399.999, 1736272799.999,
> 1736359199.999, 1736445599.999, 1736531999.999, 1736618399.999,
> 1736704799.999, 1736791199.999, 1736877599.999, 1736963999.999,
> 1737050399.999, 1737136799.999, 1737223199.999, 1737309599.999,
> 1737395999.999, 1737482399.999, 1737568799.999, 1737655199.999,
> 1737741599.999, 1737827999.999, 1737914399.999, 1738000799.999,
> 1738087199.999, 1738173599.999, 1738259999.999, 1738346399.999,
> 1738432799.999, 1738519199.999, 1738605599.999, 1738691999.999,
> 1738778399.999, 1738864799.999, 1738951199.999, 1739037599.999,
> 1739123999.999, 1739210399.999, 1739296799.999, 1739383199.999,
> 1739469599.999, 1739555999.999, 1739642399.999, 1739728799.999,
> 1739815199.999, 1739901599.999, 1739987999.999, 1740074399.999,
> 1740160799.999, 1740247199.999, 1740333599.999, 1740419999.999,
> 1740506399.999, 1740592799.999, 1740679199.999, 1740765599.999,
> 1740851999.999, 1740938399.999, 1741024799.999, 1741111199.999,
> 1741197599.999, 1741283999.999, 1741370399.999, 1741456799.999,
> 1741543199.999, 1741629599.999, 1741715999.999, 1741802399.999,
> 1741888799.999, 1741975199.999, 1742061599.999, 1742147999.999,
> 1742234399.999, 1742320799.999, 1742407199.999, 1742493599.999,
> 1742579999.999, 1742666399.999, 1742752799.999, 1742839199.999,
> 1742925599.999, 1743011999.999, 1743098399.999, 1743184799.999,
> 1743271199.999), tzone = "", class = c("POSIXct", "POSIXt")),
> BTCUSDC_close = c(107112.36, 107517.25, 104630.49, 98692.01, 97172,
> 97559.99, 95555.99, 93260, 98743.99, 98475.99, 95740.01, 94156.03,
> 94860.02, 93788.55, 93672.01, 93972.01, 93942.68, 96673.8, 97966.09,
> 98004.92, 97722.38, 101865.33, 97236.45, 94004.02, 92686.72,
> 95786.01, 94113, 95097.6, 91933.25, 96481.8, 98651.62, 99823.04,
> 104162, 103742.8, 104997.99, 102844.44, 106166, 104336, 105945.99,
> 106516.81, 104880.02, 104927.47, 99111.87, 102587, 102404, 105296.86,
> 104591.47, 102247.03, 97166.51, 99352, 99215.17, 97570.44, 96738.02,
> 97462, 96363.99, 96190, 97523.98, 96164.78, 97368.43, 95716.93,
> 98570.1, 97431.42, 96994, 95494.02, 94068, 96394.6, 97991.02, 96982,
> 96635.96, 95664.1, 94650, 87156.01, 85969.64, 84507.03, 83605.12,
> 85172, 94100.16, 90258.01, 85415.99, 89683.45, 88625.27, 87676.78,
> 85929.38, 82358.02, 78414, 81291.59, 81839.98, 80047.99, 84365.03,
> 84427.7, 83916.04, 84189.04, 81453.98, 84236, 84048.03, 83983.62,
> 84232.07, 85008, 88482.01, 87958.04, 86578.83, 86890.11, 83945.98,
> 82308), SUIUSDC_close = c(4.7252, 4.6923, 4.7017, 4.2422, 4.4909,
> 4.5497, 4.3416, 4.293, 4.6079, 4.5242, 4.1963, 4.2141, 4.1772, 4.123,
> 4.1906, 4.2085, 4.1817, 4.3391, 4.708, 5.1388, 5.2029, 5.224, 4.8313,
> 4.5976, 4.7354, 5.1894, 4.941, 4.8115, 4.4785, 4.5784, 4.6566,
> 4.9161, 4.7858, 4.8951, 4.948, 4.3919, 4.6632, 4.6118, 4.3972,
> 4.4267, 4.1615, 4.1407, 3.7285, 3.7674, 3.7116, 4.1375, 4.1282,
> 3.935, 3.3428, 3.5558, 3.7017, 3.3519, 3.1784, 3.1207, 3.0176,
> 3.0415, 3.2668, 3.3746, 3.38, 3.4623, 3.7018, 3.4095, 3.298, 3.1857,
> 2.9762, 3.1934, 3.4429, 3.3604, 3.4162, 3.3258, 3.0418, 2.8179,
> 2.8598, 2.8307, 2.7903, 2.8014, 3.1772, 2.8541, 2.416, 2.5384, 2.816,
> 2.6891, 2.5263, 2.271, 2.1051, 2.1651, 2.2203, 2.1238, 2.3503, 2.362,
> 2.2691, 2.3323, 2.2459, 2.3785, 2.3867, 2.2767, 2.2898, 2.2543,
> 2.4363, 2.4686, 2.5708, 2.7651, 2.5222, 2.2825), ENAUSDC_close =
> c(1.1862, 1.1412, 1.0928, 1.0256, 1.0704, 1.0716, 1.0395, 1.0255,
> 1.0493, 1.0278, 0.9206, 0.9422, 0.9371, 0.9415, 0.9833, 0.9192,
> 0.9212, 1.0404, 1.2138, 1.2446, 1.2394, 1.1984, 1.0946, 0.9606,
> 0.916, 0.9408, 0.8888, 0.8978, 0.7794, 0.8277, 0.9005, 0.9133,
> 0.9355, 0.8662, 0.9445, 0.9112, 0.9168, 0.8951, 0.846, 0.9025,
> 0.8719, 0.8238, 0.7188, 0.7147, 0.6877, 0.7732, 0.7878, 0.7231,
> 0.5993, 0.6344, 0.6393, 0.5535, 0.5022, 0.5092, 0.5175, 0.4806,
> 0.4975, 0.4564, 0.429, 0.4394, 0.4945, 0.4529, 0.4493, 0.4496, 0.411,
> 0.401, 0.4058, 0.4348, 0.4575, 0.454, 0.4036, 0.4067, 0.4129, 0.4285,
> 0.4164, 0.3944, 0.447, 0.395, 0.359, 0.3626, 0.38, 0.4372, 0.4457,
> 0.4142, 0.4034, 0.3826, 0.366, 0.3394, 0.3549, 0.3696, 0.3657,
> 0.3802, 0.356, 0.3815, 0.3791, 0.3612, 0.3547, 0.364, 0.4019, 0.4252,
> 0.4156, 0.4196, 0.3882, 0.3672), AAVEUSDC_close = c(388, 365.68,
> 373.15, 316.69, 319.8, 306.06, 308.15, 352.45, 376.21, 369.33,
> 334.15, 327.66, 334.95, 331.35, 331.56, 312.13, 313.71, 332.95,
> 348.72, 353, 340.82, 342.41, 312.68, 284.99, 283.29, 289.79, 285.09,
> 292.89, 267.83, 291.29, 311.21, 317.28, 324.28, 309, 346.95, 332,
> 366.22, 353.36, 336.3, 352.42, 330.79, 332.13, 296.62, 293.04,
> 290.18, 317.82, 338.3, 314.94, 265.25, 256.79, 267.67, 263.11,
> 245.37, 244.15, 238.36, 243.35, 252.79, 247.54, 248.14, 250.2, 268,
> 252.71, 255.93, 263.12, 243.33, 252.98, 259.4, 247.46, 250.4, 247.17,
> 229.86, 198.12, 198.67, 204.25, 188.26, 190.2, 221.87, 198.69,
> 206.74, 215.48, 212.08, 203.07, 192.45, 180.05, 180.94, 174.26,
> 168.79, 164.29, 174.22, 174.76, 168.53, 173.55, 165.31, 178.45,
> 174.11, 178.43, 180.33, 182.09, 192.97, 187.89, 178.53, 182.08,
> 170.56, 169.11), ETHUSDC_close = c(4034.74, 3975.39, 3879.06,
> 3474.91, 3436.86, 3380.71, 3313.11, 3332.66, 3499.69, 3467.64,
> 3325.02, 3345.58, 3388.82, 3355.39, 3385.8, 3358.42, 3336.65,
> 3447.37, 3573.18, 3633.24, 3627.35, 3674.61, 3441.2, 3262.6, 3250.57,
> 3314.51, 3269.8, 3286.72, 3019.4, 3210.99, 3326.21, 3343.59, 3415.67,
> 3255.79, 3438.6, 3289.19, 3350.5, 3285.05, 3265.79, 3399.59, 3344.04,
> 3337.1, 3071.81, 3167.03, 3111.09, 3272.72, 3376.27, 3261.2, 2970.48,
> 2711.8, 2816.61, 2741.62, 2700.49, 2680.88, 2629.49, 2642.7, 2679.99,
> 2640.79, 2673.27, 2631.72, 2775.09, 2686.11, 2688.91, 2733.38,
> 2618.98, 2710.88, 2735.95, 2673.5, 2785.11, 2814.66, 2664.58, 2418.3,
> 2364.72, 2319.9, 2209.36, 2196.1, 2481.43, 2276.12, 2118.01, 2194,
> 2191, 2161.81, 2198.3, 2024.1, 1916.8, 1904.59, 1867.86, 1826.58,
> 1935.1, 1940.6, 1910.21, 1930.4, 1876.44, 2027.93, 1970, 1967.94,
> 1992.31, 1992.71, 2088.6, 2076.9, 2006.72, 1999.82, 1882.6, 1817.51),
> FTMUSDC_close = c(1.381, 1.3596, 1.2222, 1.0445, 0.9705, 1.0203,
> 0.9958, 0.9727, 0.9813, 0.9725, 0.8807, 0.8757, 0.8086, 0.7783,
> 0.7531, 0.6871, 0.7899, 0.8195, 0.8206, 0.8372, 0.819, 0.7973,
> 0.7142, 0.637, 0.6573, 0.6902, 0.7047, 0.7072, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA), LINKUSDC_close = c(29.81, 28.04, 27.65, 23.1, 22.93,
> 22.65, 22.13, 22.57, 24.75, 24.58, 22.69, 22.67, 22.08, 21.26, 20.84,
> 20.24, 20.79, 22.2, 23.58, 23.4, 23.23, 23.94, 21.78, 20.25, 19.73,
> 20.45, 19.93, 20.12, 18.47, 20.25, 21.26, 23.51, 24.24, 23.57, 26.55,
> 24.65, 26.61, 25.63, 25.58, 26.11, 24.95, 25.93, 23.12, 23.73, 22.89,
> 24.92, 25.39, 24.36, 20.71, 20.63, 20.59, 19.11, 18.59, 18.78, 18.26,
> 18.7, 18.76, 18.77, 18.79, 18.33, 19.7, 18.86, 18.91, 19.07, 17.5,
> 18.02, 18.21, 17.71, 17.95, 17.63, 16.36, 14.84, 15.05, 15.3, 14.54,
> 14.61, 17.08, 16.21, 14.1, 16.09, 16.63, 16.47, 15.33, 13.74, 12.88,
> 12.91, 13.06, 12.74, 14.54, 14.13, 13.68, 13.95, 13.52, 14.34, 14.19,
> 13.98, 14.36, 14.32, 15.12, 15.46, 15.19, 15.33, 14.13, 13.5),
> SUSDC_close = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, 0.7845, 0.7695, 0.6634, 0.6347, 0.5203, 0.6205, 0.6091, 0.5908,
> 0.5589, 0.5404, 0.5382, 0.4722, 0.4615, 0.463, 0.5246, 0.5934,
> 0.5227, 0.4553, 0.4634, 0.4428, 0.4278, 0.436, 0.424, 0.403, 0.4082,
> 0.4274, 0.4568, 0.5269, 0.5379, 0.556, 0.5114, 0.5185, 0.5784, 0.571,
> 0.7145, 0.8272, 0.8685, 0.8384, 0.8258, 0.8386, 0.7306, 0.7, 0.7114,
> 0.6713, 0.7287, 0.7645, 0.6435, 0.5438, 0.598, 0.5449, 0.5111, 0.519,
> 0.4459, 0.4174, 0.4305, 0.4379, 0.4628, 0.5339, 0.5556, 0.5116,
> 0.5051, 0.4768, 0.5134, 0.5135, 0.4959, 0.5128, 0.5276, 0.6055,
> 0.6179, 0.6003, 0.6033, 0.5361, 0.4822), OMUSDC_close = c(4.0706,
> 4.025, 4.0875, 4.0503, 3.7564, 3.724, 3.6945, 3.6919, 3.8088, 3.7536,
> 3.6219, 3.6653, 3.7173, 3.7523, 3.5501, 3.8525, 3.7567, 3.8019,
> 3.8903, 3.9035, 3.9537, 3.9755, 3.862, 3.8991, 3.9685, 4.0064,
> 3.9105, 3.8044, 3.7607, 3.693, 3.7698, 3.872, 3.872, 3.7408, 3.8513,
> 3.6083, 3.726, 3.5371, 3.6244, 3.6144, 3.2608, 4.5631, 4.4803, 4.602,
> 4.4968, 5.6786, 5.2307, 5.3276, 5.0127, 5.6513, 5.8682, 5.7861,
> 5.6768, 6.1531, 5.8486, 5.8408, 6.0812, 5.9543, 5.7494, 5.6397,
> 5.5255, 7.5877, 7.5123, 7.3906, 7.4788, 7.6039, 7.5314, 7.5341,
> 7.6558, 8.4069, 8.268, 7.6702, 7.3587, 7.4413, 7.4682, 7.4288,
> 7.8594, 7.3667, 7.1693, 7.1423, 6.9744, 6.5149, 6.5599, 6.0548,
> 6.2294, 6.3179, 6.3857, 6.3399, 6.2524, 6.566, 6.8212, 6.9633,
> 6.9234, 6.8089, 6.653, 6.3123, 6.3202, 6.4494, 6.993, 6.726, 6.5015,
> 6.5134, 6.264, 6.2462)), class = c("tbl_df", "tbl", "data.frame"),
> row.names = c(NA, -104L)) gabx at magnolia [R] dout(all_trade_final)
> Error in dout(all_trade_final) : could not find function "dout"
> gabx at magnolia [R] dput(all_trade_final)
> structure(list(time = structure(c(1734372120, 1734372240, 1734372360,
> 1734372480, 1734372600, 1734372720, 1734426090.135, 1734553973.032,
> 1735810398.277, 1735810489.902, 1735812883.798, 1735812912.427,
> 1735812922.868, 1735812934.674, 1735812945.707, 1735812955.168,
> 1736177563.787, 1736177649.381, 1736261991.422, 1736262093.964,
> 1736779190.992, 1736854468.083, 1736865119.74, 1736865312.915,
> 1736865453.951, 1736974766.64, 1736975085.933, 1736975211.156,
> 1736975380.095, 1737041368.809, 1737295523.705, 1737295650.336,
> 1737315384.148, 1737333105.442, 1737335082.949, 1737336735.697,
> 1737625581.878, 1737625599.839, 1737967031.492, 1737969957.279,
> 1737982296.161, 1737983492.087, 1737989818.863, 1737990022.153,
> 1738058503.483, 1738059550.671, 1738076112.736, 1738142709.422,
> 1738157053.345, 1738157206.539, 1738161507.243, 1738163335.254,
> 1738169351.788, 1738169494.283, 1738169531.258, 1738171799.704,
> 1738176968.536, 1738216843.704, 1738769416.056, 1738854703.218,
> 1738856868.753, 1738936692.68, 1738937334.883, 1739296718.084,
> 1739379482.659, 1739446986.289, 1739979238.947, 1739996323.332,
> 1740115921.015, 1740491373.055, 1740596755.646, 1740667962.173,
> 1740768770.074, 1740768953.683, 1740786989.548, 1741012632.874,
> 1741100761.788, 1741109444.315, 1741185527.418, 1741208042.454,
> 1741283447.971, 1741283872.186, 1741295325.927, 1741295477.314,
> 1741295693.088, 1741342541.164, 1741629884.419, 1741635304.779,
> 1741685200.989, 1741686554.221, 1741698998.622, 1741707118.96,
> 1741802675.392, 1742141908.962, 1742257808.523, 1742289195.923,
> 1742297055.385, 1742302133.885, 1742302466.715, 1742325681.41,
> 1742325806.343, 1742325896.024, 1742325942.537, 1742378556.512,
> 1742387323.985, 1742391238.519, 1742398133.361, 1742398190.194,
> 1742398284.155, 1742398685.416, 1742403613.643, 1742404126.746,
> 1742871155.426, 1742891897.907, 1742892224.948, 1742998171.435,
> 1743000224.05, 1743001791.162, 1743011323.324, 1743017318.549,
> 1743406396.586, 1743408729.623, 1743425658.334, 1743428419.647,
> 1743429808.131, 1743430795.489, 1743431687.034, 1743439548.713,
> 1743440894.393, 1743445384.52, 1743495501.973, 1743504926.243,
> 1743519851.83, 1743520420.807, 1743530499.577, 1743531476.483,
> 1743546009.677, 1743584674.851, 1743585101.461, 1743601492.33,
> 1743601850.895, 1743672899.162, 1743679321.994, 1743679387.991,
> 1743780565.767, 1743785970.297), tzone = "UTC", class = c("POSIXct",
> "POSIXt")), symbol = c("FTMUSDC", "SUIUSDC", "ETHUSDC", "ENAUSDC",
> "BTCUSDC", "AAVEUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "ETHUSDC",
> "AAVEUSDC", "BTCUSDC", "ENAUSDC", "ETHUSDC", "FTMUSDC", "SUIUSDC",
> "ETHUSDC", "ENAUSDC", "AAVEUSDC", "FTMUSDC", "SUIUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "AAVEUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC", "AAVEUSDC",
> "AAVEUSDC", "AAVEUSDC", "BTCUSDC", "AAVEUSDC", "AAVEUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC",
> "BTCUSDC", "AAVEUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC",
> "ETHUSDC", "ETHUSDC", "ETHUSDC", "BTCUSDC", "SUIUSDC", "SUIUSDC",
> "BTCUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUIUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC", "BTCUSDC",
> "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC",
> "SUIUSDC", "SUIUSDC", "SUIUSDC", "SUIUSDC", "SUSDC", "BTCUSDC",
> "SUSDC", "SUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC",
> "SUSDC", "OMUSDC", "SUIUSDC", "OMUSDC", "SUIUSDC", "BTCUSDC",
> "OMUSDC", "OMUSDC", "OMUSDC", "BTCUSDC", "ETHUSDC", "SUIUSDC",
> "OMUSDC", "OMUSDC", "OMUSDC", "BTCUSDC", "SUIUSDC", "BTCUSDC",
> "SUSDC", "ENAUSDC", "ENAUSDC", "ETHUSDC", "BTCUSDC", "ETHUSDC",
> "BTCUSDC", "SUSDC", "SUIUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC",
> "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "BTCUSDC", "SUSDC",
> "BTCUSDC", "SUSDC", "BTCUSDC", "BTCUSDC"), executed_qty = c(284270,
> 80024, 91.8981, 207836, 9.3372107, 1152.058, 0.04811, 0.12324, -
> 0.06504, -32.0833, 94.408, 0.96557, 17708.79, 4.882, 22584, 4641.4, -
> 64.6968, 194251.85, -1246.466, -306854, -61748.4, 2.42992, 2.42014,
> 4.78121, 0.04825, 0.29346, 835.68, -0.001, -0.01505, -0.125, -
> 621.323, -214.357, 835, 15.472, 866.666, -834.998, 1.20446, 54.943, -
> 936.69, -1.76856, -1.73956, -1.71811, -0.72513, -0.98166, 4.72757,
> 67649.3, 4.73485, -0.393, -67622, -1.7, -1.7, 8.98573, 36.1158, -
> 36.1158, -8.8583, -0.70622, -27.3, 73781.2, 0.84257, -73781.2, -
> 3.50343, 6.34343, -0.45516, 84682, 0.26061, 0.254, -0.36895, 0.75773,
> 323689.3, -2.69675, 22917.9, 0.58439, 2.06429, -2.06429, 2.07134, -
> 6.12345, -107599.9, 102163, -102163, 92527.9, -323689.3, -3.09273,
> 273454, -273454, 3.09273, 1.54911, 2.54393, 2, 1.52842, 1.48698,
> 1.36813, -0.01848, 0.42519, 528333.3, -528333.3, 37580, -43102.8, -
> 37580, -49425.1, -3, 354, 502, 34532, -0.01435, 124.7401, 106269.9, -
> 2178, -586, -32624, 2.82199, 13326.3, 1.40107, 447761.1, 142861.76,
> 490049.63, -0.3663, -0.07286, -140.3605, 0.4878, 63813.8, -119596.2,
> 5.78271, -3.37969, -3.41518, 6.7704, -6.75106, 6.71609, -6.72629,
> 6.71421, -6.7396, 6.6851, -6.74, 6.717, -0.17957, -6.59629, -3.30205,
> 10.01426, -0.03538, -6.5872, 6.56085, -6.56, -359471.3, -6.56, -
> 152437.4, 7, 7.40359), price = c(1.382, 4.7256, 4038, 1.1855, 107012,
> 386.55, 107358.81, 101422.93, 96408.23, 3443.981937, 332.340557,
> 96606.12, 1.043348, 3460.4, 0.856681, 4.411298, 3698.158383,
> 1.231695, 323.031195, 0.732393, 4.368867, 96526.3, 96916.53115,
> 97133.32, 97228.23, 99651.73, 0.003195, 99519.61, 99663.37, 98394.97,
> 0.00302, 0.00301, 0.003131, 0.003003, 0.003005, 0.003131,
> 101941.107914, 333.943712, 293.405892, 98950.008481, 100600,
> 101335.283692, 102050, 101868.208951, 102900, 0.000038,
> 102741.596027, 294.738321, 3.649213, 101846.9, 101845.270978,
> 102368.611214, 0.03027, 0.03026, 0.03027, 102384.062461, 3.757,
> 0.000038, 98487.23, 3.274561, 97076.26334, 98853.757704,
> 99403.962752, 0.000035, 96870.45, 96050, 96382, 96426.612765,
> 0.000009, 88900, 2.791, 85558.02, 84977.109628, 84683.133951,
> 84394.870663, 92227.890836, 2.306263, 2.428989, 2.447165, 2.701886,
> 0.543194, 88418.629504, 0.5525, 0.5515, 89720.689866, 88856.101525,
> 78618.406955, 79413.144936, 81500, 80700, 80000, 81125.99, 81928.04,
> 0.000006, 0.000006, 0.000085, 0.000028, 0.000083, 0.000027,
> 82025.99514, 6.946406, 6.945675, 6.949552, 83618, 0.024, 0.000028,
> 6.732009, 6.733288, 6.725032, 84392.65, 2.401251, 84686.879799,
> 0.000007, 0.000005, 0.000005, 2033.5, 86605.99, 0.023223, 86100,
> 0.595482, 2.247826, 82214.102411, 82936.397434, 82074.529897,
> 82801.529337, 83038.750762, 83471.184268, 83344.568664, 83494.401651,
> 83179.906336, 83857.962478, 84146.764724, 84460.185312, 84642.9,
> 84987.11819, 84795.687321, 85376.758785, 84783.59, 85104.418136,
> 85446.292013, 85867.737502, 0.000006, 83126.156483, 0.000005,
> 83255.75794, 83355.928936),
> ??? cummulative_quote_qty = c(392861.14, 378161.4144, 371084.5278,
> ??? 246389.578, 999193.5914284, 445328.0199, 5165.0323491,
> 12499.3618932,
> ??? -6270.3912792, -110494.305684, 31375.60727, 93279.9712884,
> ??? 18476.435418, 16893.6728, 19347.2739, 20474.59783, -
> 239259.013301,
> ??? 239258.996981, -402647.40174, -224737.6957, -269770.56434,
> ??? 234551.186896, 234551.5736976, 464414.8009172, 4691.2620975,
> ??? 29243.7966858, 266319.604811376, -99.51961, -1499.9337185,
> ??? -12299.37125, -197239.18517336, -67873.8886713888,
> 274484.30729385,
> ??? 4661.01711291216, 262699.317950113, -263696.723173419,
> 122783.9868375,
> ??? 18347.86937, -274830.36532, -174999.0269994, -174999.736,
> ??? -174105.1642638, -73999.5165, -99999.9459993, 486466.953,
> ??? 263987.20719179, 486466.0459494, -115.83216, -246767.10508,
> ??? -173139.73, -173136.9606632, 919856.7008428, 111456.491386979,
> ??? -111574.857313511, -27375.5581302466, -72305.6725914, -102.5661,
> ??? 295672.253552752, 82982.3853811, -241601.07335, -340099.8932747,
> ??? 627071.8922352, -45244.7076862, 285495.9929367, 25245.4079745,
> ??? 24396.7, -35560.1389, 73065.3372901, 285857.093441205, -
> 239741.075,
> ??? 63963.8589, 49999.2513078, 175417.3976347, -174810.5465838,
> ??? 174810.4713998, -564752.8781372, -248153.65645, 248152.80384,
> ??? -250009.68949, 249999.80453, -175826.00598, -273454.9480248,
> ??? 151083.27835, -150809.881, 277481.8691678, 137647.8754335,
> ??? 199999.7240045, 158826.2898715, 124566.23, 119999.286, 109450.4,
> ??? -1499.2082952, 34834.9833276, 263584.405570068, -
> 265801.376630196,
> ??? 265446.361943, -99795.399054624, -257554.5326306, -
> 110104.81917606,
> ??? -246077.9854208, 2459.0276, 3486.7288, 239981.9146, -1199.9183,
> ??? 250883.12695668, 249352.169449152, -14662.3161, -3945.707,
> ??? -219397.4406, 238155.2143735, 31999.78779, 118652.2466801,
> ??? 273464.042572539, 61729.130735312, 211648.367785071, -744.87105,
> ??? -6310.1124314, -283927.208051972, 41999.58, 37999.95756,
> ??? -268831.48716, 475420.3121534, -280299.3130424, -280299.2930129,
> ??? 560599.4742213, -560599.5887202, 560599.9859508, -560599.7387605,
> ??? 560598.9465102, -560599.2967411, 560598.8649637, -567149.194237,
> ??? 567319.0647382, -15199.325553, -560599.6778464, -279999.5993174,
> ??? 854985.0604314, -2999.6434142, -560599.8231446, 560600.3049556,
> ??? -563292.3580137, -180282.355521318, -545307.5865265, -
> 63604.52039374,
> ??? 582790.305582, 617133.121909), day = structure(c(20073, 20073,
> ??? 20073, 20073, 20073, 20073, 20074, 20075, 20090, 20090, 20090,
> ??? 20090, 20090, 20090, 20090, 20090, 20094, 20094, 20095, 20095,
> ??? 20101, 20102, 20102, 20102, 20102, 20103, 20103, 20103, 20103,
> ??? 20104, 20107, 20107, 20107, 20108, 20108, 20108, 20111, 20111,
> ??? 20115, 20115, 20115, 20115, 20115, 20115, 20116, 20116, 20116,
> ??? 20117, 20117, 20117, 20117, 20117, 20117, 20117, 20117, 20117,
> ??? 20117, 20118, 20124, 20125, 20125, 20126, 20126, 20130, 20131,
> ??? 20132, 20138, 20138, 20140, 20144, 20145, 20146, 20147, 20147,
> ??? 20147, 20150, 20151, 20151, 20152, 20152, 20153, 20153, 20153,
> ??? 20153, 20153, 20154, 20157, 20157, 20158, 20158, 20158, 20158,
> ??? 20159, 20163, 20165, 20165, 20165, 20165, 20165, 20165, 20165,
> ??? 20165, 20165, 20166, 20166, 20166, 20166, 20166, 20166, 20166,
> ??? 20166, 20166, 20172, 20172, 20172, 20173, 20173, 20173, 20173,
> ??? 20173, 20178, 20178, 20178, 20178, 20178, 20178, 20178, 20178,
> ??? 20178, 20178, 20179, 20179, 20179, 20179, 20179, 20179, 20179,
> ??? 20180, 20180, 20180, 20180, 20181, 20181, 20181, 20182, 20182
> ??? ), class = "Date")), row.names = c(NA, -146L), class =
> c("tbl_df", "tbl", "data.frame"))
> 
> 
> All prices, quantity, date/time etc are given by functions from
> Binancer package which connect to Binance (the exchange) API and
> there is no manual operations.
> 
> Below is the first lines of the final tibble I would like:
> result <- structure(list(time = structure(c(1734375599, 1734375720,
> 1734375840, 1734375960, 1734376080, 1734376200, 1734376320,
> 1734461999), tzone = "", class = c("POSIXct", "POSIXt")), BTCUSDC =
> c(NA, NA, NA, NA, NA, 107112.36, NA, NA ), SUIUSDC = c(NA, NA,
> 4.6923, NA, NA, NA, NA, NA), ENAUSDC = c(NA, NA, NA, NA, 1.0256, NA,
> NA, NA), AAVEUSDC = c(NA, NA, NA, NA, NA, NA, 386.55, NA), ETHUSDC =
> c(NA, NA, NA, 3879.06, NA, NA, NA, NA), FTMUSDC = c(NA, 1.381, NA,
> NA, NA, NA, NA, NA), executed_qty = c(NA, 284270, 80024, 91.8981,
> 207836, 9.3372107, 1152.058, NA), price = c(NA, NA, NA, NA, NA, NA,
> NA, NA), BTCUSDC_close = c(107112.36, NA, NA, NA, NA, NA, NA,
> 107517.25), SUIUSDC_close = c(4.7252, NA, NA, NA, NA, NA, NA,
> 4.6923), ENAUSDC_close = c(1.1862, NA, NA, NA, NA, NA, NA, 1.1412),
> AAVEUSDC_close = c(388, NA, NA, NA, NA, NA, NA, 365.68),
> ETHUSDC_close = c(4034.74, NA, NA, NA, NA, NA, NA, 3975.39),
> FTMUSDC_close = c(1.381, NA, NA, NA, NA, NA, NA, 1.3596),
> LINKUSDC_close = c(29.81, NA, NA, NA, NA, NA, NA, 28.04), SUSDC_close
> = c(NA, NA, NA, NA, NA, NA, NA, NA), OMUSDC_close = c(4.0706, NA, NA,
> NA, NA, NA, NA, 4.025)), row.names = c(NA, -8L), class = c("tbl_df",
> "tbl", "data.frame"))
> 
> The idea is to have
> - date for closing price (everyday @ 19:59:59)
> - date for trades
> These two operations must be ordered by time, mix time of closing
> prices and time of trades
> - price of token for the daily closes (name TOKEN_close) and price
> when the trade was executed .
> 
> I have tried many many way to build my final tibble "result", and I
> am looking for help.
> Thank you in advance.

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 488 bytes
Desc: This is a digitally signed message part
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250407/61bd933b/attachment.sig>

From @vi@e@gross m@iii@g oii gm@ii@com  Mon Apr  7 22:55:25 2025
From: @vi@e@gross m@iii@g oii gm@ii@com (@vi@e@gross m@iii@g oii gm@ii@com)
Date: Mon, 7 Apr 2025 16:55:25 -0400
Subject: [R] An opinion question, please
In-Reply-To: <CAGgJW74U-v9GRUVxfWy6mq3AJwd0ghXdMdvE1mz1pA6YiDFE3A@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <CAGxFJbStMsCuPwSkkmOSox4VKAwo-sYmEHOX7Dfydj+ue7vg2Q@mail.gmail.com>
 <CACxE24k13cCk4-qRxeU7AiD0ZaHTxnF3Kz6SmUHfSRQm7m5DTg@mail.gmail.com>
 <CAGgJW74U-v9GRUVxfWy6mq3AJwd0ghXdMdvE1mz1pA6YiDFE3A@mail.gmail.com>
Message-ID: <004601dba7ff$63062dd0$29128970$@gmail.com>

This too is a question, not really an attempt to provide an answer.

What has happened with the proposed S7 object that can loosely be seen as an effort to somewhat merge S3 and S4 and perhaps more?

Back to what Erin wrote that is interesting.

If a package creates stand-alone objects that are pretty much only created and manipulated within the object, then indeed the choice of S3 over S4 may not matter as much. But in his examples, there is the point that an object that is related to other well-known objects is designed well, it may be possible for it to be used more broadly, often without losing the added functionality. This can be a huge plus and prevent a need to reinvent a parallel set of functions just to do about the same thing on an object that is now one-of-a-kind.

Of course, as mentioned, the users matter and unless they are equipped with the appropriate versions of R and related packages, too new an approach may not suit their needs. In any case, your documentation and code may need to reflect making sure the needs are understood and met. But, by now, I suspect S4 is also pretty much as easy to be supported as S3, albeit I have no idea if S7 is even out there, let alone properly supported.

My personal bias is that object-oriented programming may be best performed using language features designed for it. Arguably, R has some kludges in how S3 was created and extended and S4 in some sense is designed to be a bit more suitable. Other languages have much more robust designs, albeit maybe only from my perspective, including some where everything is a fully-fledged object. 

But I leave it up to people who regularly create projects using S3 or S4 or both to comment on the realities.


-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Eric Berger
Sent: Monday, April 7, 2025 4:20 PM
To: Erin Hodgess <erinm.hodgess at gmail.com>
Cc: r-help at r-project.org
Subject: Re: [R] An opinion question, please

As Bert indicated, the more information you can provide about the
package goals and intended users, the more appropriate the answers
will be.

Rob Hyndman and his group have made many contributions to the field of
time series and the sub-field of forecasting, both on the theoretical
and practical sides.
Hyndman et al have created many R packages devoted to time series.
Their basic "object" is a tsibble, which is a subclass of a tibble,
which itself is a subclass of an R DataFrame.
More generally, they have adopted to extend Posit's "tidyverse" to a
"tidyverts" (where 'ts' stands for time series), so that many commonly
used packages/functions in the tidyverse can do the appropriate thing
when handed a 'tsibble' as an input, rather than a tibble. e.g.
ggplot2::autoplot( some_tsibble )

Some objects in the tidyverts that seem related to your package include:
dable - a decomposition table, which is a subclass of tsibble, and
which breaks the time series into components (trend, seasonality,
residual)
mable - a model table, used when applying different models to the same
dataset, a fairly common use case

For more information on Hyndman's approach to time series forecasting
and his R tools, check out his freely available textbook
"Forecasting: Principles and Practice (3rd Edition)"
https://otexts.com/fpp3/

HTH,
Eric




On Mon, Apr 7, 2025 at 8:46?PM Erin Hodgess <erinm.hodgess at gmail.com> wrote:
>
> Thanks, Bert!
>
> It?s for disaggregation of time series using different underlying
> distributions.
>
>
>
> Erin Hodgess, PhD
> mailto: erinm.hodgess at gmail.com
>
>
> On Mon, Apr 7, 2025 at 11:40?AM Bert Gunter <bgunter.4567 at gmail.com> wrote:
>
> > My *opinion*:
> >
> > 1. As it stands, this "opinion survey" seems pretty useless;
> > 2. It *might* be more useful if you explained what the package will do,
> > who it's intended users are, etc.
> >
> > -- Bert
> >
> > "An educated person is one who can entertain new ideas, entertain others,
> > and entertain herself."
> >
> >
> >
> > On Mon, Apr 7, 2025 at 10:36?AM Erin Hodgess <erinm.hodgess at gmail.com>
> > wrote:
> >
> >> Hello everyone!
> >>
> >> I have an opinion question please.  If I?m writing a new package, would
> >> you
> >> recommend using S3 or S4 structure, please?
> >>
> >> I know I will get lots of opinions, but that?s fine.
> >>
> >> Thanks,
> >> Erin
> >>
> >>
> >> Erin Hodgess, PhD
> >> mailto: erinm.hodgess at gmail.com
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> https://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From er|nm@hodge@@ @end|ng |rom gm@||@com  Mon Apr  7 23:27:38 2025
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Mon, 7 Apr 2025 15:27:38 -0600
Subject: [R] An opinion question, please
In-Reply-To: <004601dba7ff$63062dd0$29128970$@gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <CAGxFJbStMsCuPwSkkmOSox4VKAwo-sYmEHOX7Dfydj+ue7vg2Q@mail.gmail.com>
 <CACxE24k13cCk4-qRxeU7AiD0ZaHTxnF3Kz6SmUHfSRQm7m5DTg@mail.gmail.com>
 <CAGgJW74U-v9GRUVxfWy6mq3AJwd0ghXdMdvE1mz1pA6YiDFE3A@mail.gmail.com>
 <004601dba7ff$63062dd0$29128970$@gmail.com>
Message-ID: <CACxE24mdZpvD5B_-rJ9zdnnrc7pNfgmpurZZ1kLLY97bo3SDTA@mail.gmail.com>

Thank you for the great advice!

My users will typically be uploading or entering time series and looking at
the results of disagreggation.  These new series will be used for
forecasting, or possibly further modeling.

I?m not sure how familiar they will be with the object oriented structure.

Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com


On Mon, Apr 7, 2025 at 2:55?PM <avi.e.gross at gmail.com> wrote:

> This too is a question, not really an attempt to provide an answer.
>
> What has happened with the proposed S7 object that can loosely be seen as
> an effort to somewhat merge S3 and S4 and perhaps more?
>
> Back to what Erin wrote that is interesting.
>
> If a package creates stand-alone objects that are pretty much only created
> and manipulated within the object, then indeed the choice of S3 over S4 may
> not matter as much. But in his examples, there is the point that an object
> that is related to other well-known objects is designed well, it may be
> possible for it to be used more broadly, often without losing the added
> functionality. This can be a huge plus and prevent a need to reinvent a
> parallel set of functions just to do about the same thing on an object that
> is now one-of-a-kind.
>
> Of course, as mentioned, the users matter and unless they are equipped
> with the appropriate versions of R and related packages, too new an
> approach may not suit their needs. In any case, your documentation and code
> may need to reflect making sure the needs are understood and met. But, by
> now, I suspect S4 is also pretty much as easy to be supported as S3, albeit
> I have no idea if S7 is even out there, let alone properly supported.
>
> My personal bias is that object-oriented programming may be best performed
> using language features designed for it. Arguably, R has some kludges in
> how S3 was created and extended and S4 in some sense is designed to be a
> bit more suitable. Other languages have much more robust designs, albeit
> maybe only from my perspective, including some where everything is a
> fully-fledged object.
>
> But I leave it up to people who regularly create projects using S3 or S4
> or both to comment on the realities.
>
>
> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Eric Berger
> Sent: Monday, April 7, 2025 4:20 PM
> To: Erin Hodgess <erinm.hodgess at gmail.com>
> Cc: r-help at r-project.org
> Subject: Re: [R] An opinion question, please
>
> As Bert indicated, the more information you can provide about the
> package goals and intended users, the more appropriate the answers
> will be.
>
> Rob Hyndman and his group have made many contributions to the field of
> time series and the sub-field of forecasting, both on the theoretical
> and practical sides.
> Hyndman et al have created many R packages devoted to time series.
> Their basic "object" is a tsibble, which is a subclass of a tibble,
> which itself is a subclass of an R DataFrame.
> More generally, they have adopted to extend Posit's "tidyverse" to a
> "tidyverts" (where 'ts' stands for time series), so that many commonly
> used packages/functions in the tidyverse can do the appropriate thing
> when handed a 'tsibble' as an input, rather than a tibble. e.g.
> ggplot2::autoplot( some_tsibble )
>
> Some objects in the tidyverts that seem related to your package include:
> dable - a decomposition table, which is a subclass of tsibble, and
> which breaks the time series into components (trend, seasonality,
> residual)
> mable - a model table, used when applying different models to the same
> dataset, a fairly common use case
>
> For more information on Hyndman's approach to time series forecasting
> and his R tools, check out his freely available textbook
> "Forecasting: Principles and Practice (3rd Edition)"
> https://otexts.com/fpp3/
>
> HTH,
> Eric
>
>
>
>
> On Mon, Apr 7, 2025 at 8:46?PM Erin Hodgess <erinm.hodgess at gmail.com>
> wrote:
> >
> > Thanks, Bert!
> >
> > It?s for disaggregation of time series using different underlying
> > distributions.
> >
> >
> >
> > Erin Hodgess, PhD
> > mailto: erinm.hodgess at gmail.com
> >
> >
> > On Mon, Apr 7, 2025 at 11:40?AM Bert Gunter <bgunter.4567 at gmail.com>
> wrote:
> >
> > > My *opinion*:
> > >
> > > 1. As it stands, this "opinion survey" seems pretty useless;
> > > 2. It *might* be more useful if you explained what the package will do,
> > > who it's intended users are, etc.
> > >
> > > -- Bert
> > >
> > > "An educated person is one who can entertain new ideas, entertain
> others,
> > > and entertain herself."
> > >
> > >
> > >
> > > On Mon, Apr 7, 2025 at 10:36?AM Erin Hodgess <erinm.hodgess at gmail.com>
> > > wrote:
> > >
> > >> Hello everyone!
> > >>
> > >> I have an opinion question please.  If I?m writing a new package,
> would
> > >> you
> > >> recommend using S3 or S4 structure, please?
> > >>
> > >> I know I will get lots of opinions, but that?s fine.
> > >>
> > >> Thanks,
> > >> Erin
> > >>
> > >>
> > >> Erin Hodgess, PhD
> > >> mailto: erinm.hodgess at gmail.com
> > >>
> > >>         [[alternative HTML version deleted]]
> > >>
> > >> ______________________________________________
> > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > >> PLEASE do read the posting guide
> > >> https://www.R-project.org/posting-guide.html
> > >> and provide commented, minimal, self-contained, reproducible code.
> > >>
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
>

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon Apr  7 23:32:31 2025
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 07 Apr 2025 14:32:31 -0700
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
Message-ID: <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>

My opinion is that you should use S3 unless you absolutely need some syntactic sugar only offered by some other object system.

Note that in a majority of cases you want to transform one standard data structure to another... tibble to tibble is the fashion for dplyr... and functions can often do what you want just fine except that they sometimes end up needing a lot of arguments that you want to refer to in many places. You can often make a class that holds those arguments so they can be re-used and where the class has methods to do the desired transformation (s) where the bulk data remains handled as arguments and return values rather than as data in the object itself.

The lm class in base R uses a "constructor computes and methods retrieve results" approach... which isn't quite as flexible as a transformer approach but still hides the gory details.

My reason for giving these examples is that the functional/OO approach expresses problems quite cleanly using S3... and you don't have to pay the performance/hoop-jumping/extra dependencies that you need for R5 or R7. That is, you should think carefully about whether you really need whatever features that more advanced OO system offers... and then you will know the answer to the question you posed for yourself.

On April 7, 2025 10:35:44 AM PDT, Erin Hodgess <erinm.hodgess at gmail.com> wrote:
>Hello everyone!
>
>I have an opinion question please.  If I?m writing a new package, would you
>recommend using S3 or S4 structure, please?
>
>I know I will get lots of opinions, but that?s fine.
>
>Thanks,
>Erin
>
>
>Erin Hodgess, PhD
>mailto: erinm.hodgess at gmail.com
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From er|nm@hodge@@ @end|ng |rom gm@||@com  Mon Apr  7 23:33:59 2025
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Mon, 7 Apr 2025 15:33:59 -0600
Subject: [R] An opinion question, please
In-Reply-To: <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
Message-ID: <CACxE24m6Qr6GWVqUEMBa+PFyyDGGz27PeAQ5jDnYFcs=-9NNbQ@mail.gmail.com>

This is great, thank you so much!


On Mon, Apr 7, 2025 at 3:32?PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us>
wrote:

> My opinion is that you should use S3 unless you absolutely need some
> syntactic sugar only offered by some other object system.
>
> Note that in a majority of cases you want to transform one standard data
> structure to another... tibble to tibble is the fashion for dplyr... and
> functions can often do what you want just fine except that they sometimes
> end up needing a lot of arguments that you want to refer to in many places.
> You can often make a class that holds those arguments so they can be
> re-used and where the class has methods to do the desired transformation
> (s) where the bulk data remains handled as arguments and return values
> rather than as data in the object itself.
>
> The lm class in base R uses a "constructor computes and methods retrieve
> results" approach... which isn't quite as flexible as a transformer
> approach but still hides the gory details.
>
> My reason for giving these examples is that the functional/OO approach
> expresses problems quite cleanly using S3... and you don't have to pay the
> performance/hoop-jumping/extra dependencies that you need for R5 or R7.
> That is, you should think carefully about whether you really need whatever
> features that more advanced OO system offers... and then you will know the
> answer to the question you posed for yourself.
>
> On April 7, 2025 10:35:44 AM PDT, Erin Hodgess <erinm.hodgess at gmail.com>
> wrote:
> >Hello everyone!
> >
> >I have an opinion question please.  If I?m writing a new package, would
> you
> >recommend using S3 or S4 structure, please?
> >
> >I know I will get lots of opinions, but that?s fine.
> >
> >Thanks,
> >Erin
> >
> >
> >Erin Hodgess, PhD
> >mailto: erinm.hodgess at gmail.com
> >
> >       [[alternative HTML version deleted]]
> >
> >______________________________________________
> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >https://stat.ethz.ch/mailman/listinfo/r-help
> >PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> >and provide commented, minimal, self-contained, reproducible code.
>
> --
> Sent from my phone. Please excuse my brevity.
>

	[[alternative HTML version deleted]]


From po|c1410 @end|ng |rom gm@||@com  Tue Apr  8 00:57:20 2025
From: po|c1410 @end|ng |rom gm@||@com (CALUM POLWART)
Date: Mon, 7 Apr 2025 23:57:20 +0100
Subject: [R] An opinion question, please
In-Reply-To: <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
Message-ID: <CA+etgPkwYvChs0veX8KcrxhPTfE80Uudh22_yByC0FAiSGJoUA@mail.gmail.com>

Clearly something has gone terribly wrong. Everyone is saying use S3. This
is an online discussion... So someone needs to support S4.

Which frighteningly seems to be me! I'd caution you now... I first used an
S4 object about two weeks ago and still have no real idea if they do what I
think they do!

My understanding is S4 objects can hold the source data and the commands to
make the result data. Which means in terms of reproduction of results this
may be better...

...I'm not at all sure I know what you want to do with your data. But
assuming you started with a time series of daily maximum temperature, I
think with an S4 object the daily maximum can be saved, plus the week,
month, season, year etc.

If week could begin on a Monday or a Sunday, the info that is used to
decide is stored for reference.

S4 can enforce data types.

On Mon, 7 Apr 2025, 22:40 Jeff Newmiller via R-help, <r-help at r-project.org>
wrote:

> My opinion is that you should use S3 unless you absolutely need some
> syntactic sugar only offered by some other object system.
>
> Note that in a majority of cases you want to transform one standard data
> structure to another... tibble to tibble is the fashion for dplyr... and
> functions can often do what you want just fine except that they sometimes
> end up needing a lot of arguments that you want to refer to in many places.
> You can often make a class that holds those arguments so they can be
> re-used and where the class has methods to do the desired transformation
> (s) where the bulk data remains handled as arguments and return values
> rather than as data in the object itself.
>
> The lm class in base R uses a "constructor computes and methods retrieve
> results" approach... which isn't quite as flexible as a transformer
> approach but still hides the gory details.
>
> My reason for giving these examples is that the functional/OO approach
> expresses problems quite cleanly using S3... and you don't have to pay the
> performance/hoop-jumping/extra dependencies that you need for R5 or R7.
> That is, you should think carefully about whether you really need whatever
> features that more advanced OO system offers... and then you will know the
> answer to the question you posed for yourself.
>
> On April 7, 2025 10:35:44 AM PDT, Erin Hodgess <erinm.hodgess at gmail.com>
> wrote:
> >Hello everyone!
> >
> >I have an opinion question please.  If I?m writing a new package, would
> you
> >recommend using S3 or S4 structure, please?
> >
> >I know I will get lots of opinions, but that?s fine.
> >
> >Thanks,
> >Erin
> >
> >
> >Erin Hodgess, PhD
> >mailto: erinm.hodgess at gmail.com
> >
> >       [[alternative HTML version deleted]]
> >
> >______________________________________________
> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >https://stat.ethz.ch/mailman/listinfo/r-help
> >PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> >and provide commented, minimal, self-contained, reproducible code.
>
> --
> Sent from my phone. Please excuse my brevity.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From ro||turner @end|ng |rom po@teo@net  Tue Apr  8 00:59:53 2025
From: ro||turner @end|ng |rom po@teo@net (Rolf Turner)
Date: Mon,  7 Apr 2025 22:59:53 +0000
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
Message-ID: <20250408105953.7a9029cc@new-hp>

On Mon, 7 Apr 2025 11:35:44 -0600
Erin Hodgess <erinm.hodgess at gmail.com> wrote:

> Hello everyone!
> 
> I have an opinion question please.  If I?m writing a new package,
> would you recommend using S3 or S4 structure, please?
> 
> I know I will get lots of opinions, but that?s fine.
> 
> Thanks,
> Erin


See fortunes::fortune(121).

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Stats. Dep't. (secretaries) phone:
         +64-9-373-7599 ext. 89622
Home phone: +64-9-480-4619


From er|nm@hodge@@ @end|ng |rom gm@||@com  Tue Apr  8 01:15:18 2025
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Mon, 7 Apr 2025 17:15:18 -0600
Subject: [R] An opinion question, please
In-Reply-To: <CA+etgPkwYvChs0veX8KcrxhPTfE80Uudh22_yByC0FAiSGJoUA@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
 <CA+etgPkwYvChs0veX8KcrxhPTfE80Uudh22_yByC0FAiSGJoUA@mail.gmail.com>
Message-ID: <CACxE24=+3j-E3Qf01pLsgbdKJZnrJxHQ9sGV_xvJfYdUO3HkYQ@mail.gmail.com>

We can have different frequencies of data, including Business day data and
daily data as our outputs.

Both of those will start on Monday.

Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com


On Mon, Apr 7, 2025 at 4:57?PM CALUM POLWART <polc1410 at gmail.com> wrote:

> Clearly something has gone terribly wrong. Everyone is saying use S3. This
> is an online discussion... So someone needs to support S4.
>
> Which frighteningly seems to be me! I'd caution you now... I first used an
> S4 object about two weeks ago and still have no real idea if they do what I
> think they do!
>
> My understanding is S4 objects can hold the source data and the commands
> to make the result data. Which means in terms of reproduction of results
> this may be better...
>
> ...I'm not at all sure I know what you want to do with your data. But
> assuming you started with a time series of daily maximum temperature, I
> think with an S4 object the daily maximum can be saved, plus the week,
> month, season, year etc.
>
> If week could begin on a Monday or a Sunday, the info that is used to
> decide is stored for reference.
>
> S4 can enforce data types.
>
> On Mon, 7 Apr 2025, 22:40 Jeff Newmiller via R-help, <r-help at r-project.org>
> wrote:
>
>> My opinion is that you should use S3 unless you absolutely need some
>> syntactic sugar only offered by some other object system.
>>
>> Note that in a majority of cases you want to transform one standard data
>> structure to another... tibble to tibble is the fashion for dplyr... and
>> functions can often do what you want just fine except that they sometimes
>> end up needing a lot of arguments that you want to refer to in many places.
>> You can often make a class that holds those arguments so they can be
>> re-used and where the class has methods to do the desired transformation
>> (s) where the bulk data remains handled as arguments and return values
>> rather than as data in the object itself.
>>
>> The lm class in base R uses a "constructor computes and methods retrieve
>> results" approach... which isn't quite as flexible as a transformer
>> approach but still hides the gory details.
>>
>> My reason for giving these examples is that the functional/OO approach
>> expresses problems quite cleanly using S3... and you don't have to pay the
>> performance/hoop-jumping/extra dependencies that you need for R5 or R7.
>> That is, you should think carefully about whether you really need whatever
>> features that more advanced OO system offers... and then you will know the
>> answer to the question you posed for yourself.
>>
>> On April 7, 2025 10:35:44 AM PDT, Erin Hodgess <erinm.hodgess at gmail.com>
>> wrote:
>> >Hello everyone!
>> >
>> >I have an opinion question please.  If I?m writing a new package, would
>> you
>> >recommend using S3 or S4 structure, please?
>> >
>> >I know I will get lots of opinions, but that?s fine.
>> >
>> >Thanks,
>> >Erin
>> >
>> >
>> >Erin Hodgess, PhD
>> >mailto: erinm.hodgess at gmail.com
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> >______________________________________________
>> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> >https://stat.ethz.ch/mailman/listinfo/r-help
>> >PLEASE do read the posting guide
>> https://www.R-project.org/posting-guide.html
>> >and provide commented, minimal, self-contained, reproducible code.
>>
>> --
>> Sent from my phone. Please excuse my brevity.
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> https://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

	[[alternative HTML version deleted]]


From er|cjberger @end|ng |rom gm@||@com  Tue Apr  8 08:38:49 2025
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Tue, 8 Apr 2025 09:38:49 +0300
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24=+3j-E3Qf01pLsgbdKJZnrJxHQ9sGV_xvJfYdUO3HkYQ@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
 <CA+etgPkwYvChs0veX8KcrxhPTfE80Uudh22_yByC0FAiSGJoUA@mail.gmail.com>
 <CACxE24=+3j-E3Qf01pLsgbdKJZnrJxHQ9sGV_xvJfYdUO3HkYQ@mail.gmail.com>
Message-ID: <CAGgJW75zVdG6ParMrSWUziG5Lz70FEYjcWe+T2NLx4JsQY+MLg@mail.gmail.com>

If you are writing a new package I don't see why you should restrict
yourself to S3 or S4 classes.
Your "new package" can certainly build on other packages. (Why not?)
As I wrote in my previous email, if you are dealing with time series
you might want to consider appropriate classes already defined in
other packages, such as those obtained via

library(fpp3)

In my work, I deal with many financial time series. I highly recommend
the xts package which is a subclass of the zoo class. The zoo class is
an S3 time series class built on matrix.
The xts class is "designed for fast, consistent time-based indexing,
ideal for financial time series" (quoting ChatGPT here).

The xts package is maintained by Joshua Ulrich who is extremely active
and helpful in responding to questions about xts in the R-help lists.

HTH,
Eric

On Tue, Apr 8, 2025 at 2:24?AM Erin Hodgess <erinm.hodgess at gmail.com> wrote:
>
> We can have different frequencies of data, including Business day data and
> daily data as our outputs.
>
> Both of those will start on Monday.
>
> Erin Hodgess, PhD
> mailto: erinm.hodgess at gmail.com
>
>
> On Mon, Apr 7, 2025 at 4:57?PM CALUM POLWART <polc1410 at gmail.com> wrote:
>
> > Clearly something has gone terribly wrong. Everyone is saying use S3. This
> > is an online discussion... So someone needs to support S4.
> >
> > Which frighteningly seems to be me! I'd caution you now... I first used an
> > S4 object about two weeks ago and still have no real idea if they do what I
> > think they do!
> >
> > My understanding is S4 objects can hold the source data and the commands
> > to make the result data. Which means in terms of reproduction of results
> > this may be better...
> >
> > ...I'm not at all sure I know what you want to do with your data. But
> > assuming you started with a time series of daily maximum temperature, I
> > think with an S4 object the daily maximum can be saved, plus the week,
> > month, season, year etc.
> >
> > If week could begin on a Monday or a Sunday, the info that is used to
> > decide is stored for reference.
> >
> > S4 can enforce data types.
> >
> > On Mon, 7 Apr 2025, 22:40 Jeff Newmiller via R-help, <r-help at r-project.org>
> > wrote:
> >
> >> My opinion is that you should use S3 unless you absolutely need some
> >> syntactic sugar only offered by some other object system.
> >>
> >> Note that in a majority of cases you want to transform one standard data
> >> structure to another... tibble to tibble is the fashion for dplyr... and
> >> functions can often do what you want just fine except that they sometimes
> >> end up needing a lot of arguments that you want to refer to in many places.
> >> You can often make a class that holds those arguments so they can be
> >> re-used and where the class has methods to do the desired transformation
> >> (s) where the bulk data remains handled as arguments and return values
> >> rather than as data in the object itself.
> >>
> >> The lm class in base R uses a "constructor computes and methods retrieve
> >> results" approach... which isn't quite as flexible as a transformer
> >> approach but still hides the gory details.
> >>
> >> My reason for giving these examples is that the functional/OO approach
> >> expresses problems quite cleanly using S3... and you don't have to pay the
> >> performance/hoop-jumping/extra dependencies that you need for R5 or R7.
> >> That is, you should think carefully about whether you really need whatever
> >> features that more advanced OO system offers... and then you will know the
> >> answer to the question you posed for yourself.
> >>
> >> On April 7, 2025 10:35:44 AM PDT, Erin Hodgess <erinm.hodgess at gmail.com>
> >> wrote:
> >> >Hello everyone!
> >> >
> >> >I have an opinion question please.  If I?m writing a new package, would
> >> you
> >> >recommend using S3 or S4 structure, please?
> >> >
> >> >I know I will get lots of opinions, but that?s fine.
> >> >
> >> >Thanks,
> >> >Erin
> >> >
> >> >
> >> >Erin Hodgess, PhD
> >> >mailto: erinm.hodgess at gmail.com
> >> >
> >> >       [[alternative HTML version deleted]]
> >> >
> >> >______________________________________________
> >> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> >https://stat.ethz.ch/mailman/listinfo/r-help
> >> >PLEASE do read the posting guide
> >> https://www.R-project.org/posting-guide.html
> >> >and provide commented, minimal, self-contained, reproducible code.
> >>
> >> --
> >> Sent from my phone. Please excuse my brevity.
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> https://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Tue Apr  8 09:26:23 2025
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Tue, 8 Apr 2025 08:26:23 +0100
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
Message-ID: <a07ea4a4-3dc5-443d-8d51-baabaf6dac19@sapo.pt>

?s 18:35 de 07/04/2025, Erin Hodgess escreveu:
> Hello everyone!
> 
> I have an opinion question please.  If I?m writing a new package, would you
> recommend using S3 or S4 structure, please?
> 
> I know I will get lots of opinions, but that?s fine.
> 
> Thanks,
> Erin
> 
> 
> Erin Hodgess, PhD
> mailto: erinm.hodgess at gmail.com
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
Hello,

I prefer S3's simplicity. It's easy to program and there are lots of 
packages using it, including, for time series, base class ts and its 
functions, zoo, xts, etc.

If you want a good introduction to creating a package using S4, read 
package Brobdingnag [1] vignette.


vignette("S4_brob", package = "Brobdingnag")


[1] https://CRAN.R-project.org/package=Brobdingnag

Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From tebert @end|ng |rom u||@edu  Tue Apr  8 15:28:10 2025
From: tebert @end|ng |rom u||@edu (Ebert,Timothy Aaron)
Date: Tue, 8 Apr 2025 13:28:10 +0000
Subject: [R] An opinion question, please
In-Reply-To: <CACxE24=+3j-E3Qf01pLsgbdKJZnrJxHQ9sGV_xvJfYdUO3HkYQ@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
 <CA+etgPkwYvChs0veX8KcrxhPTfE80Uudh22_yByC0FAiSGJoUA@mail.gmail.com>
 <CACxE24=+3j-E3Qf01pLsgbdKJZnrJxHQ9sGV_xvJfYdUO3HkYQ@mail.gmail.com>
Message-ID: <CH3PR22MB451400BF359EB57209C0037DCFB52@CH3PR22MB4514.namprd22.prod.outlook.com>

I would use the approach that is most commonly used by my potential user base unless I can define a clear set of reasons why I should do it differently. If users will be unable to see the difference, then the decision is entirely up to me based on ease of programming at all phases (writing, debug, maintenance), and in some cases execution speed.

You may be further limited based on other software that you either need or that you hope will need you. Use the approach that will make these interactions easier or program in such a way that your program is S3 S4 agnostic when it comes to interacting with others.

Most of your users will want to do their time series analysis and move on. They do not want a big fight about programming. Their goal will be ease of use, and utility.

My guess is you want S3 unless users will not see the difference. If users cannot interact with your code at the level where they need to know the difference between S3 and S4, then you choose the approach that makes your life easier in the long run.

Another consideration: Your documentation needs to be sufficient for users to learn your package. Are you up for teaching users a whole new system in a friendly digestible format?

Tim


-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Erin Hodgess
Sent: Monday, April 7, 2025 7:15 PM
To: CALUM POLWART <polc1410 at gmail.com>
Cc: r-help at r-project.org
Subject: Re: [R] An opinion question, please

[External Email]

We can have different frequencies of data, including Business day data and daily data as our outputs.

Both of those will start on Monday.

Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com


On Mon, Apr 7, 2025 at 4:57?PM CALUM POLWART <polc1410 at gmail.com> wrote:

> Clearly something has gone terribly wrong. Everyone is saying use S3.
> This is an online discussion... So someone needs to support S4.
>
> Which frighteningly seems to be me! I'd caution you now... I first
> used an
> S4 object about two weeks ago and still have no real idea if they do
> what I think they do!
>
> My understanding is S4 objects can hold the source data and the
> commands to make the result data. Which means in terms of reproduction
> of results this may be better...
>
> ...I'm not at all sure I know what you want to do with your data. But
> assuming you started with a time series of daily maximum temperature,
> I think with an S4 object the daily maximum can be saved, plus the
> week, month, season, year etc.
>
> If week could begin on a Monday or a Sunday, the info that is used to
> decide is stored for reference.
>
> S4 can enforce data types.
>
> On Mon, 7 Apr 2025, 22:40 Jeff Newmiller via R-help,
> <r-help at r-project.org>
> wrote:
>
>> My opinion is that you should use S3 unless you absolutely need some
>> syntactic sugar only offered by some other object system.
>>
>> Note that in a majority of cases you want to transform one standard
>> data structure to another... tibble to tibble is the fashion for
>> dplyr... and functions can often do what you want just fine except
>> that they sometimes end up needing a lot of arguments that you want to refer to in many places.
>> You can often make a class that holds those arguments so they can be
>> re-used and where the class has methods to do the desired
>> transformation
>> (s) where the bulk data remains handled as arguments and return
>> values rather than as data in the object itself.
>>
>> The lm class in base R uses a "constructor computes and methods
>> retrieve results" approach... which isn't quite as flexible as a
>> transformer approach but still hides the gory details.
>>
>> My reason for giving these examples is that the functional/OO
>> approach expresses problems quite cleanly using S3... and you don't
>> have to pay the performance/hoop-jumping/extra dependencies that you need for R5 or R7.
>> That is, you should think carefully about whether you really need
>> whatever features that more advanced OO system offers... and then you
>> will know the answer to the question you posed for yourself.
>>
>> On April 7, 2025 10:35:44 AM PDT, Erin Hodgess
>> <erinm.hodgess at gmail.com>
>> wrote:
>> >Hello everyone!
>> >
>> >I have an opinion question please.  If I?m writing a new package,
>> >would
>> you
>> >recommend using S3 or S4 structure, please?
>> >
>> >I know I will get lots of opinions, but that?s fine.
>> >
>> >Thanks,
>> >Erin
>> >
>> >
>> >Erin Hodgess, PhD
>> >mailto: erinm.hodgess at gmail.com
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> >______________________________________________
>> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> >https://st/
>> >at.ethz.ch%2Fmailman%2Flistinfo%2Fr-help&data=05%7C02%7Ctebert%40ufl
>> >.edu%7C5d7c0eaa8685461444d008dd762a679f%7C0d4da0f84a314d76ace60a6233
>> >1e1b84%7C0%7C0%7C638796646703685961%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0
>> >eU1hcGkiOnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIs
>> >IldUIjoyfQ%3D%3D%7C0%7C%7C%7C&sdata=s14fnEWWoF9o3dYaisEmpeDoq83UcUWz
>> >ZSBnYzqT%2BqM%3D&reserved=0
>> >PLEASE do read the posting guide
>> https://www/
>> .r-project.org%2Fposting-guide.html&data=05%7C02%7Ctebert%40ufl.edu%7
>> C5d7c0eaa8685461444d008dd762a679f%7C0d4da0f84a314d76ace60a62331e1b84%
>> 7C0%7C0%7C638796646703725541%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1hcGki
>> OnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUIjoyf
>> Q%3D%3D%7C0%7C%7C%7C&sdata=dA8u3yXIsE8BS75%2F7xYuSb0XA%2FJW6Ftp8l8RtZ
>> jMoHo%3D&reserved=0
>> >and provide commented, minimal, self-contained, reproducible code.
>>
>> --
>> Sent from my phone. Please excuse my brevity.
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://sta/
>> t.ethz.ch%2Fmailman%2Flistinfo%2Fr-help&data=05%7C02%7Ctebert%40ufl.e
>> du%7C5d7c0eaa8685461444d008dd762a679f%7C0d4da0f84a314d76ace60a62331e1
>> b84%7C0%7C0%7C638796646703743794%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1h
>> cGkiOnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUI
>> joyfQ%3D%3D%7C0%7C%7C%7C&sdata=3kYLerPAHv2JZWgoWasQqUwCTBum1hsL8dgeQT
>> b%2FFUo%3D&reserved=0
>> PLEASE do read the posting guide
>> https://www/
>> .r-project.org%2Fposting-guide.html&data=05%7C02%7Ctebert%40ufl.edu%7
>> C5d7c0eaa8685461444d008dd762a679f%7C0d4da0f84a314d76ace60a62331e1b84%
>> 7C0%7C0%7C638796646703761482%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1hcGki
>> OnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUIjoyf
>> Q%3D%3D%7C0%7C%7C%7C&sdata=OnaeIdQfUI2pSZHp%2BzjmTb%2F%2FV3HUVFENFJnG
>> WlzN5BQ%3D&reserved=0 and provide commented, minimal, self-contained,
>> reproducible code.
>>
>

        [[alternative HTML version deleted]]

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide https://www.r-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

From er|nm@hodge@@ @end|ng |rom gm@||@com  Tue Apr  8 17:47:18 2025
From: er|nm@hodge@@ @end|ng |rom gm@||@com (Erin Hodgess)
Date: Tue, 8 Apr 2025 09:47:18 -0600
Subject: [R] An opinion question, please
In-Reply-To: <CAGgJW75zVdG6ParMrSWUziG5Lz70FEYjcWe+T2NLx4JsQY+MLg@mail.gmail.com>
References: <CACxE24mb_SoS8VPfGA-5kX+64Jx3PwVq1oQfvQs9SYkurs4Kkw@mail.gmail.com>
 <062A6763-E6FA-4A08-82F0-6C9AE51272EA@dcn.davis.ca.us>
 <CA+etgPkwYvChs0veX8KcrxhPTfE80Uudh22_yByC0FAiSGJoUA@mail.gmail.com>
 <CACxE24=+3j-E3Qf01pLsgbdKJZnrJxHQ9sGV_xvJfYdUO3HkYQ@mail.gmail.com>
 <CAGgJW75zVdG6ParMrSWUziG5Lz70FEYjcWe+T2NLx4JsQY+MLg@mail.gmail.com>
Message-ID: <CACxE24nrRS=zfJjzO2w4QDS4MYJUjga=zkR_MKTs92HYh=BD6A@mail.gmail.com>

I was thinking about xts and zoo as well!

Thanks!

Erin Hodgess, PhD
mailto: erinm.hodgess at gmail.com


On Tue, Apr 8, 2025 at 12:39?AM Eric Berger <ericjberger at gmail.com> wrote:

> If you are writing a new package I don't see why you should restrict
> yourself to S3 or S4 classes.
> Your "new package" can certainly build on other packages. (Why not?)
> As I wrote in my previous email, if you are dealing with time series
> you might want to consider appropriate classes already defined in
> other packages, such as those obtained via
>
> library(fpp3)
>
> In my work, I deal with many financial time series. I highly recommend
> the xts package which is a subclass of the zoo class. The zoo class is
> an S3 time series class built on matrix.
> The xts class is "designed for fast, consistent time-based indexing,
> ideal for financial time series" (quoting ChatGPT here).
>
> The xts package is maintained by Joshua Ulrich who is extremely active
> and helpful in responding to questions about xts in the R-help lists.
>
> HTH,
> Eric
>
> On Tue, Apr 8, 2025 at 2:24?AM Erin Hodgess <erinm.hodgess at gmail.com>
> wrote:
> >
> > We can have different frequencies of data, including Business day data
> and
> > daily data as our outputs.
> >
> > Both of those will start on Monday.
> >
> > Erin Hodgess, PhD
> > mailto: erinm.hodgess at gmail.com
> >
> >
> > On Mon, Apr 7, 2025 at 4:57?PM CALUM POLWART <polc1410 at gmail.com> wrote:
> >
> > > Clearly something has gone terribly wrong. Everyone is saying use S3.
> This
> > > is an online discussion... So someone needs to support S4.
> > >
> > > Which frighteningly seems to be me! I'd caution you now... I first
> used an
> > > S4 object about two weeks ago and still have no real idea if they do
> what I
> > > think they do!
> > >
> > > My understanding is S4 objects can hold the source data and the
> commands
> > > to make the result data. Which means in terms of reproduction of
> results
> > > this may be better...
> > >
> > > ...I'm not at all sure I know what you want to do with your data. But
> > > assuming you started with a time series of daily maximum temperature, I
> > > think with an S4 object the daily maximum can be saved, plus the week,
> > > month, season, year etc.
> > >
> > > If week could begin on a Monday or a Sunday, the info that is used to
> > > decide is stored for reference.
> > >
> > > S4 can enforce data types.
> > >
> > > On Mon, 7 Apr 2025, 22:40 Jeff Newmiller via R-help, <
> r-help at r-project.org>
> > > wrote:
> > >
> > >> My opinion is that you should use S3 unless you absolutely need some
> > >> syntactic sugar only offered by some other object system.
> > >>
> > >> Note that in a majority of cases you want to transform one standard
> data
> > >> structure to another... tibble to tibble is the fashion for dplyr...
> and
> > >> functions can often do what you want just fine except that they
> sometimes
> > >> end up needing a lot of arguments that you want to refer to in many
> places.
> > >> You can often make a class that holds those arguments so they can be
> > >> re-used and where the class has methods to do the desired
> transformation
> > >> (s) where the bulk data remains handled as arguments and return values
> > >> rather than as data in the object itself.
> > >>
> > >> The lm class in base R uses a "constructor computes and methods
> retrieve
> > >> results" approach... which isn't quite as flexible as a transformer
> > >> approach but still hides the gory details.
> > >>
> > >> My reason for giving these examples is that the functional/OO approach
> > >> expresses problems quite cleanly using S3... and you don't have to
> pay the
> > >> performance/hoop-jumping/extra dependencies that you need for R5 or
> R7.
> > >> That is, you should think carefully about whether you really need
> whatever
> > >> features that more advanced OO system offers... and then you will
> know the
> > >> answer to the question you posed for yourself.
> > >>
> > >> On April 7, 2025 10:35:44 AM PDT, Erin Hodgess <
> erinm.hodgess at gmail.com>
> > >> wrote:
> > >> >Hello everyone!
> > >> >
> > >> >I have an opinion question please.  If I?m writing a new package,
> would
> > >> you
> > >> >recommend using S3 or S4 structure, please?
> > >> >
> > >> >I know I will get lots of opinions, but that?s fine.
> > >> >
> > >> >Thanks,
> > >> >Erin
> > >> >
> > >> >
> > >> >Erin Hodgess, PhD
> > >> >mailto: erinm.hodgess at gmail.com
> > >> >
> > >> >       [[alternative HTML version deleted]]
> > >> >
> > >> >______________________________________________
> > >> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >> >https://stat.ethz.ch/mailman/listinfo/r-help
> > >> >PLEASE do read the posting guide
> > >> https://www.R-project.org/posting-guide.html
> > >> >and provide commented, minimal, self-contained, reproducible code.
> > >>
> > >> --
> > >> Sent from my phone. Please excuse my brevity.
> > >>
> > >> ______________________________________________
> > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > >> PLEASE do read the posting guide
> > >> https://www.R-project.org/posting-guide.html
> > >> and provide commented, minimal, self-contained, reproducible code.
> > >>
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Tue Apr  8 20:20:47 2025
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Tue, 8 Apr 2025 23:50:47 +0530
Subject: [R] Estimating regression with constraints in model coefficients
Message-ID: <CA+dpOJ=X2T9xi5TmvWzpFX=ros8NYfmtXsXOm+8wDr19pR6OkQ@mail.gmail.com>

Hi,

I have below fit with ordinal logistic regression

dat = foreign::read.dta("https://stats.idre.ucla.edu/stat/data/ologit.dta")

summary(MASS::polr(formula = apply ~ pared + public + gpa, data = dat))

However, instead of obtaining unconstrained estimates of model
parameters, I would like to impose certain constraints on each of the
model parameters, based on some non-sample information.

Is there any R function to estimate model coefficients with imposing
some unser-defined constraints on the model parameters?

Any pointer will be very helpful.


From g@@@powe|| @end|ng |rom protonm@||@com  Tue Apr  8 21:03:03 2025
From: g@@@powe|| @end|ng |rom protonm@||@com (Gregg Powell)
Date: Tue, 08 Apr 2025 19:03:03 +0000
Subject: [R] 
 Estimating regression with constraints in model coefficients
In-Reply-To: <CA+dpOJ=X2T9xi5TmvWzpFX=ros8NYfmtXsXOm+8wDr19pR6OkQ@mail.gmail.com>
References: <CA+dpOJ=X2T9xi5TmvWzpFX=ros8NYfmtXsXOm+8wDr19pR6OkQ@mail.gmail.com>
Message-ID: <eAo652vYRF33M4NvWczJNkkOwGIAFSU_jMd_veh7NEI20u_iALhuJETZxU9zGmm-yPqT6PhKRgKkShNNbx7PtSRGg_wI41a5jHNmY_ozPb8=@protonmail.com>

there are ways to implement constraints on parameter estimates in ordinal logistic regression in R. Here are a few approaches:

The rms package (Regression Modeling Strategies) by Frank Harrell offers the lrm function which can handle constraints through its penalty parameter, though it's primarily designed for regularization.
For more flexible constraints, you can use the constrOptim or optim functions from base R along with a custom likelihood function for ordinal logistic regression.
The VGAM package provides the vglm function with family cumulative that can handle certain types of constraints.
For Bayesian approaches, you can use brms or rstan to impose informative priors that effectively constrain parameters.

Here's a simple example using the VGAM package:

> library(VGAM)
> library(foreign)
>
> # Load data
> dat <- foreign::read.dta("https://stats.idre.ucla.edu/stat/data/ologit.dta")
> 

> # Unconstrained model (for comparison)
> model_unconstrained <- vglm(apply ~ pared + public + gpa, 

>                           family = cumulative(parallel = TRUE),
>                           data = dat)
> summary(model_unconstrained)
>
> # Constrained model (example: constraining pared coefficient to be positive)
> # This uses the "constraint" matrix approach
> constraint <- rbind(
>  c(0, 1, 0, 0),  # This row corresponds to pared coefficient
>  c(0, 0, 0, 0),  # These rows do nothing (identity constraints for other parameters)
>  c(0, 0, 0, 0)
> )

> model_constrained <- vglm(apply ~ pared + public + gpa, 

>                         family = cumulative(parallel = TRUE),
>                         constraints = constraint,
>                         data = dat)
> summary(model_constrained)


For more complex constraints, you might need to work with optimization functions directly. 


r/
Gregg



On Tuesday, April 8th, 2025 at 11:20 AM, Christofer Bogaso <bogaso.christofer at gmail.com> wrote:

> 

> 

> Hi,
> 

> I have below fit with ordinal logistic regression
> 

> dat = foreign::read.dta("https://stats.idre.ucla.edu/stat/data/ologit.dta")
> 

> summary(MASS::polr(formula = apply ~ pared + public + gpa, data = dat))
> 

> However, instead of obtaining unconstrained estimates of model
> parameters, I would like to impose certain constraints on each of the
> model parameters, based on some non-sample information.
> 

> Is there any R function to estimate model coefficients with imposing
> some unser-defined constraints on the model parameters?
> 

> Any pointer will be very helpful.
> 

> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 603 bytes
Desc: OpenPGP digital signature
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20250408/9883f787/attachment.sig>

From m@rong|u@|u|g| @end|ng |rom gm@||@com  Wed Apr  9 07:27:49 2025
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Wed, 9 Apr 2025 07:27:49 +0200
Subject: [R] How to find quantitative cycle PCR with R?
Message-ID: <CAMk+s2QrmXizkFzg_SwE5dGzg5DoyXOFhXU2mUT7AfA0kqVF1w@mail.gmail.com>

Hello,
I would like to analyze quantitative PCR (qPCR) data using R rather
than proprietary softwares.
I can see there are several packages out there, but mostly they
perform relative quantification, while none provide a quantitative
cycle (Cq), or crossing over cycle.
Is there a package that can provide a Cq for a given threshold level?
Or is it possible to determine the value with regression?

I can fit a model on qPCR data using for instance the package qpcR
(https://cran.r-project.org/web/packages/qpcR/index.html):

```
val = c(120.64,    66.14,    34.87,    27.11,    8.87,    -5.8,
4.52,    -7.16,    -17.39,
        -14.29,    -20.26,    -14.99,    -21.05,    -20.64,    -8.03,
  -21.56,    -1.28,    15.01,
        75.26,    191.76,    455.09,    985.96,    1825.59,
2908.08,    3993.18,    5059.94,
        6071.93,    6986.32,    7796.01,    8502.25,    9111.46,
9638.01,    10077.19,
        10452.02,    10751.81,    11017.49,    11240.37,    11427.47,
  11570.07,    11684.96,
        11781.77,    11863.35,    11927.44,    11980.81,    12021.88,
  12058.35,    12100.63,
        12133.57,    12148.89,    12137.09)
x <- data.frame(Cycles = 1:35, val)
library(qpcR)
fit <- pcrfit(data=x,         # selected data
              cyc=1, fluo=2)  # columns for cycles and fluorescence
summary(fit)
```

The package allows the determination of a take-over point, but this is
the cycle where the data start moving into the exponential phase:
```
takeoff(fit, pval = 0.05, nsig = 3)
```
However, this level is too low; the Cq would probably be way higher on
the y-axis, and there are instances where I would like to use a
pre-fixed threshold value.

How can I determine a Cq with R?
Thank you

-- 
Best regards,
Luigi


From de@n@@k|tt@neh @end|ng |rom e|ev@tenp@org  Wed Apr  9 18:15:00 2025
From: de@n@@k|tt@neh @end|ng |rom e|ev@tenp@org (Deana Kittaneh)
Date: Wed, 9 Apr 2025 16:15:00 +0000
Subject: [R] Error in running get_acs()
Message-ID: <CH3PR14MB755782D753FEB14F32516EEE9BB42@CH3PR14MB7557.namprd14.prod.outlook.com>

Hi R team!
????Since last Friday 04/04, my team and I have faced an error with running? the 'get_acs()' command from the tidycensus package. The code we ran and the error message we received are shown below. Our troubleshooting efforts showed that:

1. When we run the code with geometries turned off, the code runs as intended, but once geometry is made TRUE the code does not work.
2. We checked geometry = TRUE with various geographies (block group, place, county) and the error remained the same
3. We were still able to download and use the shapefile data from the Census Tigerlines folders online, which led us to suspect the error may be within R since the shapefiles are functional on the Census website.

Thanks for the help! 

Code that works (geometry is FALSE here):
#median household income for IL by tract
acs? <- get_acs(geography = "tract",?
???????????????? table = "B19013", #can turn off if variables specified
???????????????? state = "IL",
???????????????? year = 2023,
???????????????? geometry = FALSE,  #FALSE removes geometry, TRUE keeps it
???????????????? cache_table = TRUE)

Code that doesn't work (geometry is TRUE here)
#median household income for IL by tract
acs? <- get_acs(geography = "tract",?
???????????????? table = "B19013", #can turn off if variables specified
???????????????? state = "IL",
???????????????? year = 2023,
???????????????? geometry = TRUE, #FALSE removes geometry, TRUE keeps it
???????????????? cache_table = TRUE)

Error message:
Getting data from the 2019-2023 5-year ACS
Downloading feature geometry from the Census website.? To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.
Loading ACS5 variables for 2023 from table B19013 and caching the dataset for faster future access.
Using FIPS code '17' for state 'IL'
Error : Cannot open "C:\Users\DKittaneh\AppData\Local\Temp\RtmpQpm4Z8"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.
In addition: Warning message:
In unzip(file_loc, exdir = tmp) : error 1 in extracting from zip file
Error: Your geometry data download failed. Please try again later or check the status of the Census Bureau website at https://www2.census.gov/geo/tiger/

From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Apr  9 20:03:03 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 9 Apr 2025 14:03:03 -0400
Subject: [R] Error in running get_acs()
In-Reply-To: <CH3PR14MB755782D753FEB14F32516EEE9BB42@CH3PR14MB7557.namprd14.prod.outlook.com>
References: <CH3PR14MB755782D753FEB14F32516EEE9BB42@CH3PR14MB7557.namprd14.prod.outlook.com>
Message-ID: <417c7218-f4bb-429a-9644-4ed4a5847f60@gmail.com>

The tidycensus package is a contributed package, it's not part of R. 
You should probably report this to its maintainers at

   https://github.com/walkerke/tidycensus/issues

Duncan Murdoch

On 2025-04-09 12:15 p.m., Deana Kittaneh via R-help wrote:
> Hi R team!
>  ????Since last Friday 04/04, my team and I have faced an error with running? the 'get_acs()' command from the tidycensus package. The code we ran and the error message we received are shown below. Our troubleshooting efforts showed that:
> 
> 1. When we run the code with geometries turned off, the code runs as intended, but once geometry is made TRUE the code does not work.
> 2. We checked geometry = TRUE with various geographies (block group, place, county) and the error remained the same
> 3. We were still able to download and use the shapefile data from the Census Tigerlines folders online, which led us to suspect the error may be within R since the shapefiles are functional on the Census website.
> 
> Thanks for the help!
> 
> Code that works (geometry is FALSE here):
> #median household income for IL by tract
> acs? <- get_acs(geography = "tract",
>  ???????????????? table = "B19013", #can turn off if variables specified
>  ???????????????? state = "IL",
>  ???????????????? year = 2023,
>  ???????????????? geometry = FALSE,  #FALSE removes geometry, TRUE keeps it
>  ???????????????? cache_table = TRUE)
> 
> Code that doesn't work (geometry is TRUE here)
> #median household income for IL by tract
> acs? <- get_acs(geography = "tract",
>  ???????????????? table = "B19013", #can turn off if variables specified
>  ???????????????? state = "IL",
>  ???????????????? year = 2023,
>  ???????????????? geometry = TRUE, #FALSE removes geometry, TRUE keeps it
>  ???????????????? cache_table = TRUE)
> 
> Error message:
> Getting data from the 2019-2023 5-year ACS
> Downloading feature geometry from the Census website.? To cache shapefiles for use in future sessions, set `options(tigris_use_cache = TRUE)`.
> Loading ACS5 variables for 2023 from table B19013 and caching the dataset for faster future access.
> Using FIPS code '17' for state 'IL'
> Error : Cannot open "C:\Users\DKittaneh\AppData\Local\Temp\RtmpQpm4Z8"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.
> In addition: Warning message:
> In unzip(file_loc, exdir = tmp) : error 1 in extracting from zip file
> Error: Your geometry data download failed. Please try again later or check the status of the Census Bureau website at https://www2.census.gov/geo/tiger/
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bbo|ker @end|ng |rom gm@||@com  Wed Apr  9 20:08:31 2025
From: bbo|ker @end|ng |rom gm@||@com (Ben Bolker)
Date: Wed, 9 Apr 2025 14:08:31 -0400
Subject: [R] Error in running get_acs()
In-Reply-To: <417c7218-f4bb-429a-9644-4ed4a5847f60@gmail.com>
References: <CH3PR14MB755782D753FEB14F32516EEE9BB42@CH3PR14MB7557.namprd14.prod.outlook.com>
 <417c7218-f4bb-429a-9644-4ed4a5847f60@gmail.com>
Message-ID: <96ca76b8-31bc-4d8a-8247-264aa183f043@gmail.com>

   This might be related: 
https://bsky.app/profile/kylewalker.bsky.social/post/3lm3ivicrxc2q

----
 > The Census website has been blocking requests from tigris (and curl) 
since yesterday.

(Don?t worry, the datasets are still there!)

I?ve patched tigris, install with 
`pak::pak("walkerke/tigris at ftp-patch")` and everything should work.
---


On 2025-04-09 2:03 p.m., Duncan Murdoch wrote:
> The tidycensus package is a contributed package, it's not part of R. You 
> should probably report this to its maintainers at
> 
>  ? https://github.com/walkerke/tidycensus/issues
> 
> Duncan Murdoch
> 
> On 2025-04-09 12:15 p.m., Deana Kittaneh via R-help wrote:
>> Hi R team!
>> ?????Since last Friday 04/04, my team and I have faced an error with 
>> running? the 'get_acs()' command from the tidycensus package. The code 
>> we ran and the error message we received are shown below. Our 
>> troubleshooting efforts showed that:
>>
>> 1. When we run the code with geometries turned off, the code runs as 
>> intended, but once geometry is made TRUE the code does not work.
>> 2. We checked geometry = TRUE with various geographies (block group, 
>> place, county) and the error remained the same
>> 3. We were still able to download and use the shapefile data from the 
>> Census Tigerlines folders online, which led us to suspect the error 
>> may be within R since the shapefiles are functional on the Census 
>> website.
>>
>> Thanks for the help!
>>
>> Code that works (geometry is FALSE here):
>> #median household income for IL by tract
>> acs? <- get_acs(geography = "tract",
>> ????????????????? table = "B19013", #can turn off if variables specified
>> ????????????????? state = "IL",
>> ????????????????? year = 2023,
>> ????????????????? geometry = FALSE,? #FALSE removes geometry, TRUE 
>> keeps it
>> ????????????????? cache_table = TRUE)
>>
>> Code that doesn't work (geometry is TRUE here)
>> #median household income for IL by tract
>> acs? <- get_acs(geography = "tract",
>> ????????????????? table = "B19013", #can turn off if variables specified
>> ????????????????? state = "IL",
>> ????????????????? year = 2023,
>> ????????????????? geometry = TRUE, #FALSE removes geometry, TRUE keeps it
>> ????????????????? cache_table = TRUE)
>>
>> Error message:
>> Getting data from the 2019-2023 5-year ACS
>> Downloading feature geometry from the Census website.? To cache 
>> shapefiles for use in future sessions, set `options(tigris_use_cache = 
>> TRUE)`.
>> Loading ACS5 variables for 2023 from table B19013 and caching the 
>> dataset for faster future access.
>> Using FIPS code '17' for state 'IL'
>> Error : Cannot open "C: 
>> \Users\DKittaneh\AppData\Local\Temp\RtmpQpm4Z8"; The source could be 
>> corrupt or not supported. See `st_drivers()` for a list of supported 
>> formats.
>> In addition: Warning message:
>> In unzip(file_loc, exdir = tmp) : error 1 in extracting from zip file
>> Error: Your geometry data download failed. Please try again later or 
>> check the status of the Census Bureau website at https:// 
>> www2.census.gov/geo/tiger/
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide https://www.R-project.org/posting- 
>> guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting- 
> guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Dr. Benjamin Bolker
Professor, Mathematics & Statistics and Biology, McMaster University
Director, School of Computational Science and Engineering
 > E-mail is sent at my convenience; I don't expect replies outside of 
working hours.


From btyner @end|ng |rom gm@||@com  Thu Apr 10 02:59:48 2025
From: btyner @end|ng |rom gm@||@com (Benjamin Tyner)
Date: Wed, 9 Apr 2025 20:59:48 -0400
Subject: [R] reticulate via callr
Message-ID: <1b788c9e-63e5-4cd7-8b83-a0fd208e0e46@gmail.com>

Greetings,

I would like to programmatically interact with multiple versions of a 
given Python module via the reticulate package, without having to 
restart the R process over and over. (My understanding is reticulate 
does not provide such a capability by itself, as once reticulate binds 
to a Python instance, the connection persists for the duration of the R 
session.) However, it occurs to me that it might be possible to use 
callr to run a wrapper effectively creating a fresh instance of Python 
with each invocation. Before getting too far into the weeds there, I'm 
curious if there is anyone on the list who has already tried such an 
approach, and if so, was it successful, or were there obstacles/pitfalls 
to be aware of? I'm not asking for sample code, just curious to hear 
informed opinions on whether this is a fool's errand.

Regards,

Ben


From pd@|gd @end|ng |rom gm@||@com  Fri Apr 11 11:36:22 2025
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 11 Apr 2025 11:36:22 +0200
Subject: [R] [Rd] R 4.5.0 is released
Message-ID: <9C2862CE-A27F-48F6-99E1-3A226DCF9AA2@gmail.com>

The build system rolled up R-4.5.0.tar.gz and .xz (codename "How About a Twenty-Six") this morning.

This is a major release with a number of new features, API changes, and bug fixes.

The list below details the changes in this release. 

You can get the source code from

https://cran.r-project.org/src/base/R-4/R-4.5.0.tar.gz
https://cran.r-project.org/src/base/R-4/R-4.5.0.tar.xz

or wait for it to be mirrored at a CRAN site nearer to you.

Binaries for various platforms will appear in due course. 


For the R Core Team,

Peter Dalgaard


These are the checksums (md5 and SHA-256) for the freshly created files, in case you wish
to check that they are uncorrupted:

MD5 (AUTHORS) = 0ba932825aefae5566dc44822916b266
MD5 (build-dist.log) = 31a495e5d716faf011803973f977adbd
MD5 (COPYING) = eb723b61539feef013de476e68b5c50a
MD5 (COPYING.LIB) = a6f89e2100d9b6cdffcea4f398e37343
MD5 (FAQ) = cf1644761934816fb349f15d7956732e
MD5 (INSTALL) = 7893f754308ca31f1ccf62055090ad7b
MD5 (NEWS) = fda3e3633537ffb9c02f1278a7288db9
MD5 (NEWS.0) = bfcd7c147251b5474d96848c6f57e5a8
MD5 (NEWS.1) = f8466e418dec6b958b4ce484a13f9a9d
MD5 (NEWS.2) = 05e4a57b645e651ba13019c3cf5c495f
MD5 (NEWS.3) = 082abfc2fdc36912075e78b92fb2941e
MD5 (R-latest.tar.gz) = 2342b31a604631f8b130033d8582d547
MD5 (R-latest.tar.xz) = d379331fbe3f9bf19d3e53f547317114
MD5 (README) = e8e5ee38544d34409177cd479025fe66
MD5 (RESOURCES) = 5949c86e75c813f8f6ebc420aae46881
MD5 (THANKS) = 61d146aa6a2cf5999295b2fb340991c1
MD5 (VERSION-INFO.dcf) = 5ca3dfa954644258bfd0f83319c0377c
MD5 (R-4/R-4.5.0.tar.gz) = 2342b31a604631f8b130033d8582d547
MD5 (R-4/R-4.5.0.tar.xz) = d379331fbe3f9bf19d3e53f547317114

4cc9dcdfa46a2e2cff45c27df8f3a9f851ec97b44b8647ab8a9fbf844f37937f  AUTHORS
8f85b62440f992f6dd8e05e5bda84995b1a8d42c7d4d2a05927c6ae6e2fbad59  build-dist.log
e6d6a009505e345fe949e1310334fcb0747f28dae2856759de102ab66b722cb4  COPYING
6095e9ffa777dd22839f7801aa845b31c9ed07f3d6bf8a26dc5d2dec8ccc0ef3  COPYING.LIB
ec1eb421f6810ffb53162b9dfb371190de30ab490855ddfa49fc0bf39c7f11cf  FAQ
f87461be6cbaecc4dce44ac58e5bd52364b0491ccdadaf846cb9b452e9550f31  INSTALL
d03a80d9ab25ce50e0ec7923385729d9dfb7d4fab1f33041e62c143cbff5a4f9  NEWS
4e21b62f515b749f80997063fceab626d7258c7d650e81a662ba8e0640f12f62  NEWS.0
602f3a40ef759c7b2a6c485a33dc674af34249644ac5fb53b21283d4e12e808d  NEWS.1
7babb6d82a4479b2c3803f7dbfaab63125b0f0d1b6bb40b1389d3af65eaf83aa  NEWS.2
eb473efd365822e7ae64eb0f86028ea019815fdd273fe7daa9c6fe5e28fd2737  NEWS.3
3b33ea113e0d1ddc9793874d5949cec2c7386f66e4abfb1cef9aec22846c3ce1  R-latest.tar.gz
101766c3aefffcbacde39c8a0b9c3accf50a563955f66ff2f7b321d6bf07da8d  R-latest.tar.xz
f5aa875c23185cbfc3a50739d7295b0caba2cf0e38ba082850be338cc9541154  README
5e7ddf7349ada12c8142c42bac955835efd1768978cb476b61a3b53255442b24  RESOURCES
1d5064c86b6813865a033763f43212064c0a67ef05f5af13b13c4feb08264a33  THANKS
d3ced974014dc3da6ef3cf126d67e427172e9f3f77f801483f91acc881e2de38  VERSION-INFO.dcf
3b33ea113e0d1ddc9793874d5949cec2c7386f66e4abfb1cef9aec22846c3ce1  R-4/R-4.5.0.tar.gz
101766c3aefffcbacde39c8a0b9c3accf50a563955f66ff2f7b321d6bf07da8d  R-4/R-4.5.0.tar.xz

This is the relevant part of the NEWS file

CHANGES IN R 4.5.0:

  NEW FEATURES:

    ? as.integer(rl) and hence as.raw(rl) now work for a list of raw(1)
      elements, as proposed by Michael Chirico's PR#18696.

    ? graphics' grid() gains optional argument nintLog.

    ? New functions check_package_urls() and check_package_dois() in
      package tools for checking URLs and DOIs in package sources.

    ? New head() and tail() methods for class "ts" time series,
      proposed by Spencer Graves on R-devel.

    ? New qr.influence() function, a ?bare bones? interface to the
      lm.influence() leave-one-out diagnostics computations; wished for
      in PR#18739.

    ? Package citation() results auto-generated from the package
      metadata now also provide package DOIs for CRAN and Bioconductor
      packages.

    ? New function grepv() identical to grep() except for the default
      value = TRUE.

    ? methods(<pkg>:::<genfun>) now does report methods when neither
      the generic nor the methods have been exported.

    ? pdf() gains an author argument to set the corresponding metadata
      field, and logical arguments timestamp and producer to optionally
      omit the respective metadata.  (Thanks to Edzer Pebesma.)

    ? grDevices::glyphInfo() gains a rot argument to allow per-glyph
      rotation.  (Thanks to Daniel Sabanes Bove.)

    ? Package tools now exports functions CRAN_current_db(),
      CRAN_aliases_db(), CRAN_rdxrefs_db(), CRAN_archive_db(), and
      CRAN_authors_db().

    ? Package tools now exports functions R() and
      parse_URI_reference().

    ? Package tools now exports functions base_aliases_db() and
      base_rdxrefs_db().

    ? It is now possible to set the background color for row and column
      names in the data editor on Windows (Rgui).

    ? Rterm on Windows now accepts input lines of unlimited length.

    ? file.info() on Windows now provides file owner name and domain.

    ? Sys.info() on Windows now provides current user domain.

    ? findInterval() gets new arguments checkSorted and checkNA which
      allow skipping relatively costly checks; related to PR#16567.

    ? pnorm(x) underflows more gracefully.

    ? get(nam, env) now signals a _classed_ error, "getMissingError",
      as ?subclass? of "missingArgError" where the latter is used also
      in similar situations, e.g., f <- function(x) exp(x); try(f()) .

    ? The set operations now avoid the as.vector() transformation for
      same-kind apparently vector-like operands.

    ? md5sum() can be used to compute an MD5 hash of a raw vector of
      bytes by using the bytes= argument instead of files=. The two
      arguments are mutually exclusive.

    ? Added function sha256sum() in package tools analogous to md5sum()
      implementing the SHA-256 hashing algorithm.

    ? The xtfrm() method for class "AsIs" is now considerably faster
      thanks to a patch provided by Ivan Krylov.

    ? The merge() method for data frames will no longer convert row
      names used for indexing using I(), which will lead to faster
      execution in cases where sort = TRUE and all.x and/or all.y are
      set to TRUE.

    ? The methods package internal function .requirePackage() now calls
      requireNamespace(p) instead of require(p), hence no longer adding
      packages to the search() path in cases methods or class
      definitions are needed.  Consequently, previous workflows relying
      on the old behaviour will have to be amended by adding
      corresponding library(p) calls.

    ? More R-level messages use a common format containing "character
      string" for more consistency and less translation work.

    ? available.packages() and install.packages() get an optional
      switch cache_user_dir, somewhat experimentally.

    ? The sunspot.month data have been updated to Oct 2024; because of
      recalibration also historical numbers are changed, and we keep
      the previous data as sunspot.m2014 for reproducibility.

    ? The quartz() device now supports alpha masks.  Thanks to George
      Stagg, Gwynn Gebeyhu, Heather Turner, and Tomek Gieorgijewski.

    ? The print() method for date-time objects (POSIX.t) gets an
      optional digits argument for _fractional_ seconds, passed to
      improved format.POSIXlt(); consequently, print(<date.time>,
      digits = n) allows to print fractions of seconds.

    ? install.packages() and download.packages() download packages
      simultaneously using libcurl, significantly reducing download
      times when installing or downloading multiple packages.

    ? Status reporting in download.file() has been extended to report
      the outcome for individual files in simultaneous downloads.

    ? The Rd \link macro now allows markup in the link text when the
      topic is given by the optional argument, e.g.,
      \link[=gamma]{\eqn{\Gamma(x)}}.

    ? If La_library() is empty, sessionInfo() still reports
      La_version() when available.

    ? seq.int(from, to, by, ....) when |by| = 1 now behaves as if by
      was omitted, and hence returns from:to, possibly integer.

    ? seq.Date(from, to, by, ....) and seq.POSIXt(..)  now also work
      when from is missing and sufficient further arguments are
      provided, thanks to Michael Chirico's report, patch proposal in
      PR#17672 and ?R Dev Day? contributions.

      The Date method also works for seq(from, to), when by is missing
      and now defaults to "1 days".

      It is now documented (and tested) that the by string may be
      _abbreviated_ in both seq methods.

      Both methods return or keep internal type "integer" more
      consistently now.  Also, as.POSIXct({}) is internally integer.

    ? duplicated(), unique(), and anyDuplicated() now also work for
      class expression vectors.

    ? New function use() to use packages in R scripts with full control
      over what gets added to the search path.  (Actually already
      available since R 4.4.0.)

    ? There is some support for zstd compression of tarballs in tar()
      and untar().  (This depends on OS support of libzstd or by tar.)

    ? print(summary(<numbers>)) gets new optional argument zdigits to
      allow more flexible and consistent (double) rounding.  The
      current default zdigits = 4L is somewhat experimental.
      Specifying both digits = *, zdigits = * allows behaviour
      independent of the global digits option.

    ? The format() method for "difftime" objects gets a new back
      compatible option with.units.

    ? A summary() method for "difftime" objects which prints nicely,
      similar to those for "Date" and "POSIXct".

    ? unique()'s default method now also deals with "difftime" objects.

    ? optimize(f, *) when f(x) is not finite says more about the value
      in its warning message.  It no longer replaces -Inf by the
      largest _positive_ finite number.

    ? The documentation of gamma() and is.numeric() is more specific,
      thanks to the contributors of PR#18677.

    ? New dataset gait thanks to Heather Turner and Ella Kaye, used in
      examples.

    ? New datasets penguins and penguins_raw thanks to Ella Kaye,
      Heather Turner, and Kristen Gorman.

    ? isSymmetric(<matrix>) gains a new option trans = "C"; when set to
      non-default, it tests for ?simple? symmetry of complex matrices.

    ? model.frame() produces more informative error messages in some
      cases when variables in the formula are not found, thanks to Ben
      Bolker's PR#18860.

    ? selectMethod(f, ..) now keeps the function name if the function
      belongs to a group generic and the method is for the generic.

  BLAS and LAPACK:

    ? The bundled BLAS and LAPACK sources have been updated to those
      shipped as part of January 2025's LAPACK 3.12.1.

    ? It is intended that this will be the last update to BLAS and
      LAPACK in the R sources.  Those building R from source are
      encouraged to use external BLAS and LAPACK and this will be
      required in future.

    ? This update was mainly bug fixes but contained a barely
      documented major change.  The set of BLAS routines had been
      unchanged since 1988, so throughout R's history.  This update
      introduced new BLAS routines dgemmtr and zgemmtr which are now
      used by LAPACK routines.  This means that BLAS implementations
      are no longer interchangeable.

    ? To work around this, R can be configured with option
      --with-2025blas which arranges for the 2025 BLAS additions to be
      compiled into libRlapack (the internal LAPACK, not built if an
      external LAPACK is used).

      This option allows the continuation of the practice of swapping
      the BLAS in use by symlinking lib/libRblas.*.  It has the
      disadvantage of using the reference BLAS version of the 2025
      routines whereas an enhanced BLAS might have an optimized version
      (OpenBLAS does as from version 0.3.29).

    ? Windows builds currently use the internal LAPACK and by default
      the internal BLAS: notes on how to swap the latter _via_
      Rblas.dll are in file src/extra/blas/Makefile.win.

  INSTALLATION on a UNIX-ALIKE:

    ? A C23 compiler (if available) is now selected by default for
      compilation of R and packages.  R builds can opt out _via_ the
      configure flag --without-C23, unless the specified or default
      (usually gcc) compiler defaults to C23: gcc 15 will.

      A C23 compiler is known to be selected with gcc 13-15, LLVM clang
      18-20 (and 15 should), Apple clang 15-17 and Intel 2024.2-2025.0
      (and 2022.2 should).

      Current binary distributions on macOS use Apple clang 14 and so
      do not use C23.

    ? The minimum autoconf requirement for a maintainer build has been
      increased to autoconf 2.72.

    ? Building the HTML and Info versions of the R manuals now requires
      texi2any from Texinfo 6.1 or later.

    ? Failures in building the manuals under doc now abort the
      installation, removing any file which caused the failure.

    ? Control of symbol visibility is now supported on macOS (the
      previous check only worked on ELF platforms).

    ? There is now support for installing the debug symbols for
      recommended packages on macOS: see REC_INSTALL_OPT in file
      config.site.

    ? configure is now able to find an external libintl on macOS (the
      code from an older GNU gettext distribution failed to try linking
      with the macOS Core Foundation framework).

  INSTALLATION on WINDOWS:

    ? Both building R and installing packages use the C compiler in C23
      mode.

    ? R on Windows by default uses pkg-config for linking against
      external libraries.  This makes it easier to test R and packages
      with alternative toolchains (such as from Msys2, e.g., testing
      with LLVM and possibly with sanitizers). It also allows more
      significant Rtools updates within a single R minor release.

    ? The installer scripts for Windows have been tailored to Rtools45,
      an update of the Rtools44 toolchain.  It is based on GCC 14.  The
      experimental support for 64-bit ARM (aarch64) CPUs is based on
      LLVM 19.  R-devel and R 4.5.x are no longer maintained to be
      buildable using Rtools44 and it is advised to switch to Rtools45.

  DEPRECATED AND DEFUNCT:

    ? is.R() is defunct.  Environment variable _R_DEPRECATED_IS_R_ no
      longer has any effect.

    ? Deprecated (for more than 9 years!) functions linearizeMlist,
      listFromMlist, and showMlist and the "MethodsList" class for S4
      method handling were removed from package methods.  Deprecated
      functions balanceMethodsList, emptyMethodsList,
      inheritedSubMethodLists, insertMethod, insertMethodInEmptyList,
      makeMethodsList, mergeMethods, MethodsList, MethodsListSelect,
      and SignatureMethod were made defunct, as were the "MethodsList"
      branches of functions assignMethodsMetaData, finalDefaultMethod,
      and MethodAddCoerce.

    ? getMethods(*, table = TRUE) is deprecated.

    ? Building with the bundled (and old) version of libintl is
      deprecated and now gives a configure warning.  This should be
      selected only if neither the OS's libc (as on GNU Linux) nor an
      external libintl library provide suitable functions.

      Instead install libintl from a recent version of GNU gettext
      (available for macOS) or use configure option --disable-nls.

      The ability to use the bundled version may be removed as soon as
      R 4.5.1.

    ? The deprecated xfig() graphics device has been removed.

  PACKAGE INSTALLATION:

    ? Packages are now installed using C23 where supported by the OS
      and R build.

      Packages using R's compiler settings can ask *not* to use C23
      _via_ including USE_C17 in SystemRequirements or can be installed
      by R CMD INSTALL --use-C17.  (Some packages ignore these settings
      in their configure script or when compiling in sub-directories of
      src, as will those using a src/Makefile.)

    ? Source installs now report the package version in the log.

    ? There is preliminary support for C++26 with GCC >= 14, Apple
      clang++ >= 16 and LLVM clang++ >= 17.

  C-LEVEL FACILITIES:

    ? The non-API and hidden entry points Rf_setIVector, Rf_setRVector
      and Rf_setSVector have been removed.

    ? The internal code for changing the parent of an environment now
      signals an error if the new parent is not an environment or if
      the change would create a cycle in the parent chain.

    ? SET_TYPEOF now signals an error unless the old and new types have
      compatible memory structure and content. Use of SET_TYPE in
      package C code should be avoided and may be deprecated in the
      near future. It is better to allocate an object of the desired
      type in the first place.

    ? The set of LAPACK (double and complex) routines declared in the
      headers R_ext/Lapack.h and R_ext/Applic.h has been extended,
      mostly to routines actually in use by packages.

    ? Memory allocation messages now use the (non-SI notation) "Mb",
      "Gb" , ..., and "Mbytes" strings as _arguments_ instead of as
      part of the (translatable format) string.  This is one step for
      PR#18297; from Henrik Bengtsson.

    ? Header R_ext/Constants.h (included by R.h) now always includes
      header float.h or cfloat for constants such as DBL_MAX.

    ? Strict R headers are now the default.  This removes the legacy
      definitions of PI, Calloc, Realloc and Free: use M_PI, R_Calloc,
      R_Realloc or R_Free instead.

    ? The deprecated and seemingly never-used S-compatibility macros
      F77_COM and F77_COMDECL have been removed from header R_ext/RS.h.

    ? The enum Rboolean defined in header R_ext/Boolean.h now has a
      fixed underlying type of int on platforms whose C compiler
      supports this.

      This is a C23 feature (taken from C++11) and also supported in
      all C standards by some versions of clang (from LLVM and Apple)
      and (with a warning when using -pedantic) by GCC when in C17
      mode.

      A fair amount of code has assumed this: it may be changed to a
      smaller type in future.  In particular, as standard compilers do
      not check the validity of assignment to an enum, it has been
      possible to assign NA_INTEGER to an Rboolean variable, coerce it
      to int and recover the value.

      If there were a platform which used an underlying type of a
      different size this would be an ABI-breaking change (but we are
      unaware of any such platform).

    ? Header R_ext/Boolean.h now ensures that a bool type is available
      either as a keyword (C23 and C++) or by including the C99 header
      stdbool.h.  This is being used internally in R to replace
      Rboolean by bool.

    ? There are new functions asRboolean and asBool, variants of
      asLogical more suited to converting logical arguments to Rboolean
      or to bool. They require a length-one input and throw an error if
      that evaluates to NA.

    ? Header R_exts/Error.h now ensures that Rf_error and similar are
      given a noreturn attribute when used from C++ under all
      compilers.

    ? Header R_exts/Utils.h no longer contains a declaration for
      F77_SUB(interv).  This is intended to be called from Fortran and
      was wrongly declared: LOGICAL in Fortran corresponds to int * not
      Rboolean *.

    ? Defining R_INCLUDE_BOOLEAN_H to 0 before including headers R.h or
      Rinternals.h (or any other header which includes R_ext/Boolean.h)
      stops the inclusion of header R_ext/Boolean.h which `defines'
      constants TRUE, FALSE, true, false and the type bool which some
      package maintainers wish to avoid.

      Note that the last three are keywords in C23 and C++11 so cannot
      be avoided entirely.  However, with commonly-used compilers they
      can be masked by a macro of the same name, often with a warning.

  C-LEVEL API:

    ? The ?Writing R Extensions? Texinfo source now contains very
      experimental annotations for more clearly identifying the API
      status of C entry points. These annotations are used to produce
      indices for API, experimental API, and embedded API entry points
      in the rendered versions.  This is very preliminary and may be
      dropped if a better approach emerges.

      Also for Fortran-callable entry points which are part of the API.

    ? ?Writing R Extensions? has a new section ?Moving into C API
      compliance? to help package authors move away from using non-API
      endpoints. This section will continue to be updated as work on
      clarifying and tightening the C API continues.

    ? New API function R_mkClosure. This checks that its arguments are
      valid and should be used instead of allocSExp(CLOSXP followed by
      SET_FORMALS, SET_BODY, and SET_CLOENV.

    ? New API functions R_ClosureFormals, R_ClosureBody, and
      R_ClosureEnv for extracting closure components.  The existing
      functions R_ClosureExpr and R_BytecodeExpr have also been added
      to the API.

    ? New API function R_ParentEnv corresponding to R's parent.env().

    ? Further non-API entry points have been added to those reported by
      R CMD check: COMPLEX0, ddfind, DDVAL, ENSURE_NAMEDMAX, ENVFLAGS,
      FRAME, HASHTAB, INTERNAL, IS_ASCII, IS_UTF8, LEVELS, NAMED,
      PRSEEN, RDEBUG, REAL0, Rf_findVarInFrame3, SET_BODY, SET_CLOENV,
      SET_FORMALS, SET_PRSEEN, SET_RDEBUG, STRING_PTR, SYMVALUE, and
      VECTOR_PTR. Any declarations for these in public header files
      will be removed in the near future, and they will be hidden where
      possible.

    ? Some R CMD check NOTEs on the use of non-API entry points have
      been upgraded to WARNINGs in preparation for removing
      declarations and, where possible, hiding these entry points.

    ? Additional non-API entry points have been added to those reported
      by R CMD check: IS_LONG_VEC, PRCODE, PRENV, PRVALUE, R_nchar,
      Rf_NonNullStringMatch, R_shallow_duplicate_attr, Rf_StringBlank,
      SET_TYPEOF, TRUELENGTH, XLENGTH_EX, and XTRUELENGTH.

    ? Enable defining R_NO_REMAP_RMATH and calling Rf_*() as has been
      documented in ?Writing R Extensions? for a while, fixing PR#18800
      thanks to Mikael Jagan and Suharto Anggono.

    ? R_GetCurrentSrcref(skip) now skips calls rather than srcrefs,
      consistent with counting items in the traceback() display.  If
      skip == NA_INTEGER, it searches for the first srcref, starting at
      the current evaluation state and proceeding through the call
      stack; otherwise, it returns the srcref of the requested entry
      from the call stack.

  UTILITIES:

    ? R CMD INSTALL (and hence check) now compile C++ code with
      -DR_NO_REMAP.

      ?Writing R Extensions? has been revised to describe the remapped
      entry points, for with the Rf_ prefix remains optional when used
      from C code (but is recommended for new C code).

    ? R CMD check --as-cran notes bad parts in the DESCRIPTION file's
      URL fields.

    ? R CMD check now reports more warnings on long-deprecated/obsolete
      Fortran features reported by gfortran -Wall.  For hints on how to
      modernize these, see
      <https://fortranwiki.org/fortran/show/Modernizing+Old+Fortran>.

    ? Since almost all supported R versions now use UTF-8, R CMD check
      no longer by default reports on marked UTF-8 or Latin-1 strings
      in character data.  Set environment variable
      _R_CHECK_PACKAGE_DATASETS_SUPPRESS_NOTES_ to a false value for
      the previous behaviour.

    ? tools::checkDocFiles() notes more cases of usage documentation
      without corresponding \alias.

    ? R CMD check with a true value for environment variable
      _R_CHECK_BASHISMS_ checks more thoroughly, including for bash
      scripts and bashisms in components of autoconf-generated
      configure scripts.

    ? R CMD check gains option --run-demo to check demo scripts
      analogously to tests.  This includes a check for undeclared
      package dependencies: it can also be enabled separately by
      setting the environment variable _R_CHECK_PACKAGES_USED_IN_DEMO_
      to a true value (as done by R CMD check --as-cran).

    ? R CMD build now supports --compression=zstd on platforms with
      sufficient support for zstd.

    ? tools::texi2pdf(..., texinputs=<paths>) now _pre_pends the
      specified <paths> to TEXINPUTS.  When building R itself
      (doc/NEWS.pdf and base vignettes) or package manuals using R CMD
      Rd2pdf, it is ensured that this R's Rd.sty takes precedence over
      any other (incompatible) versions in default ?texmf trees?.

    ? tools::Rd2latex() no longer outputs an \inputencoding{utf8} line
      by default; such a declaration is obsolete since LaTeX
      2018-04-01.

  BUG FIXES:

    ? update_pkg_po() now copies .mo files to the translation package
      even if a DESCRIPTION file exists, thanks to Michael Chirico
      fixing PR#18694.

    ? Auto-generated citation() entries no longer include (additional)
      URLs in the note field (PR#18547).

    ? as.data.frame.list() gets a new option new.names and now
      preserves NA names, thus fixing the format() method for data
      frames, and also bug PR#18745.  Relatedly, the format() method
      gets an option cut.names.

    ? stem() formats correctly also in cases where rounding up, e.g.,
      from 9.96 to 10 needs more digits; thanks to Ella Kaye and Kelly
      Bodwin, fixing PR#8934 during ?R Dev Day? at useR!2024.

      Additionally, stem(x) now works normally also when length(x) ==
      1.

    ? tools' toTitleCase() now works better, fixing PR#18674, thanks to
      Shannon Pileggi, Sarah Zeller, Reiko Okamoto, and Hugo Gruson's
      ?R Dev Day? effort.

    ? Printing matrices (typically with many rows and or columns) now
      also omits columns when desirable according to option max.print,
      or argument max, respectively.  This is primarily the work of
      Lorena Abad, Ekaterina Akimova, Hanne Oberman, Abhishek Ulayil,
      and Lionel Henry at the ?R Dev Day?, thus fixing PR#15027.

    ? Sys.setLanguage() now warns about _some_ failures to change the
      language.

    ? Printing ls.str() now shows "<missing>" even when R's language
      setting is not English.

    ? xyTable() now handles and reports NAs fixing PR#18654.  Thanks to
      Heather Turner and Zhian Kamvar for report and patch.

    ? as(*, "raw") now works as documented, thanks to Mikael Jagan's
      PR#18795.

    ? Informational messages of e.g., print(1:1e4, max=1000), now
      correctly mention max in addition to getOption("max.print").

    ? rowSums(A, dims = dd), colMeans(..), etc, give a more helpful
      error message when dd is not of length one, thanks to Michael
      Chirico's PR#18811.

    ? seq.Date() no longer explicitly coerces results from integer to
      double, analogously with seq.default(), seq.int() and
      seq.POSIXt(), resolving a _modified_ PR#18782.

    ? axisTicks(usr, ...) documentation clarification for log = TRUE,
      fixing bug PR#18821 thanks to Duncan Murdoch.

    ? debug() and debugonce(fun) now also accept a string fun when it
      names an S4 generic, fixing PR#18822 thanks to Mikael Jagan.

    ? debugonce(<S4-simple-body>, signature=*) now works correctly when
      ?called twice?, fixing PR#18824 thanks to Mikael Jagan.

    ? format(dtime, digits=* / format=*) is more consistent when the
      POSIXt date-time object dtime has fractional (non integer)
      seconds.  Fixes PR#17350, thanks to new contributions by LatinR's
      ?R Dev Day? participants, Heather Turner and Dirk Eddelbuettel;
      also fixes more cases, notably when format contains "

    ? options(scipen = NULL) and other invalid values now signal an
      error instead of invalidating ops relying on a finite integer
      value.  Values outside the range -9 .. 9999 are now warned about
      and set to a boundary or to the default 0, e.g., in case of an
      NA.

    ? cbind() could segfault with NULL inputs.  (Seen when R was built
      with gcc-14, LTO and C99 inlining semantics.)

    ? Fix segfault on quartz() from grid.glyph() call with glyphInfo()
      that describes non-existent font (PR#18784).  Thanks to Tomek
      Gieorgijewski.

    ? format() etc, using decimal.mark = s, by default getting s <-
      getOption("OutDec"), signals a warning (to become an error in the
      future) when s is not a string with exactly one character.

    ? When s <- getOption("OutDec") is not a string of one character, a
      warning is signalled now whenever it is used in internal C code,
      notably when calling the default methods of format().

    ? pwilcox() and qwilcox() now check for user interrupt less
      frequently.

    ? summary(<stl>) (which prints directly) finally gets the same
      digits default as the formatting printing of default summary()
      method results, and it is documented explicitly.

    ? options(show.error.locations = TRUE) once again shows the most
      recent known location when an error is reported.  Setting its
      value to "bottom" is no longer supported.  Numerical values are
      converted to logical.

    ? C API function R_GetCurrentSrcref(skip) now returns srcref
      entries correctly.  (Note that there is also a change to the
      interpretation of skip; see the C-LEVEL API entry above.)

    ? tools::Rd2latex() now removes leading and trailing spaces from
      \alias entries as documented, fixing indexing and linking hiccups
      in some PDF manuals.

    ? R CMD Rd2pdf can now render the package manual from a --latex
      installation also when the help contains figures.

    ? The argument of as.environment() is now named x, not object, as
      was always documented and shown when printing it; thanks to Gael
      Millot's PR#18849.

    ? When R CMD check aims at getting the time+date from a world
      clock, it is more robust against unexpected non-error results,
      thanks to Michael Chirico's PR#18852.

    ? The tools::parseLatex() parser made several parsing errors
      (PR#18855).

    ? Error messages produced by tools::parseLatex() are now more
      readable (PR#18855).

    ? R CMD build <pkg> excludes more file patterns when it tars the
      <pkg> directory, fixing both PR#18432 and PR#18434, for vim and
      GNU Global emacs users, thanks to Dirk Eddelbuettel's patch.

    ? quantile()'s default method gets an option fuzz to protect
      against floating point inaccuracy before rounding, thus fixing
      PR#15811 and, en passant, PR#17683.

    ? Printing arrays now also omits columns, rows and slices when
      desirable according to option max.print, or argument max,
      respectively, addressing most of the remaining part of PR#15027,
      thanks to Sherry Zhang's patch.

    ? drop.terms(y ~ w, 1) and similar now work, thanks to Benjamin
      Sommer's report in PR#18861 and collaboration with Heather Turner
      improving reformulate().

    ? Many arguments which should be length-1 logical are checked more
      thoroughly.  The most commonly seen errors are in unlink(,
      recursive), tempdir() and the na.rm arguments of max(), min(),
      sum(), ....

      grep(), strsplit() and similar took non-TRUE/FALSE values of
      their logical arguments as FALSE, but these were almost always
      mismatches to unnamed arguments and are now reported as NA.

    ? vignette("reshape") is now also available on Windows.

    ? trace(coerce, ..) now works correctly, fixing PR#18823 thanks to
      Mikael Jagan.

    ? R CMD check now also reports bad symbols in package shared
      objects linked in from local static libraries (PR#18789).

    ? factanal() now works correctly also, e.g., for GPArotation,
      oblimin() rotations, fixing PR#18417, thanks to Coen Bernaards
      and others.

    ? Setting attributes on primitive functions is deprecated now and
      already an error in the development version of R.  Changing the
      environment of a primitive does no longer happen and signals a
      warning.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com

_______________________________________________
R-announce at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-announce


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Fri Apr 11 17:53:32 2025
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Fri, 11 Apr 2025 17:53:32 +0200
Subject: [R] How to predict intersection value between regression and line
 in R?
Message-ID: <CAMk+s2QX1o+r+fL-UfuL2aD_2tauXdiPh0qw6ujnDtagWJKKbA@mail.gmail.com>

I am trying to predict the intersection value between a curve and a line.
I can fit a logistic model to the data by converting the data to the
range 0-1. How can I determine the intersection with a line?
Also, is there a way to do the same without converting the data?
Here is an example:

```
val = c(120.64,    66.14,    34.87,    27.11,    8.87,    -5.8,
4.52,    -7.16,    -17.39,
       -14.29,    -20.26,    -14.99,    -21.05,    -20.64,    -8.03,
 -21.56,    -1.28,    15.01,
       75.26,    191.76,    455.09,    985.96,    1825.59,    2908.08,
   3993.18,    5059.94,
       6071.93,    6986.32,    7796.01,    8502.25,    9111.46,
9638.01,    10077.19,
       10452.02,    10751.81,    11017.49,    11240.37,    11427.47,
 11570.07,    11684.96,
       11781.77,    11863.35,    11927.44,    11980.81,    12021.88,
 12058.35,    12100.63,
       12133.57,    12148.89,    12137.09)
df = data.frame(Cycles = 1:35, Values = val[1:cyc])
M = max(df$Values)
df$Norm = df$Values/M
df$Norm[df$Norm<0] = 0
b_model = glm(Norm ~ Cycles, data=df, family=binomial)
x = 0.15
plot(Norm ~ Cycles, df, main="Normalized view",
     xlab=expression(bold("Amplification cycle")),
     ylab=expression(bold("Fluorescence (normalized)")),
     type="l", lwd=3, col="blue")
lines(b_model$fitted.values ~ df$Cycles, col="red", lwd=2, lty=2)
abline(h=x, col="green", lwd=2)
```
Thank you


From murdoch@dunc@n @end|ng |rom gm@||@com  Fri Apr 11 20:05:53 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 11 Apr 2025 14:05:53 -0400
Subject: [R] 
 How to predict intersection value between regression and line in R?
In-Reply-To: <CAMk+s2QX1o+r+fL-UfuL2aD_2tauXdiPh0qw6ujnDtagWJKKbA@mail.gmail.com>
References: <CAMk+s2QX1o+r+fL-UfuL2aD_2tauXdiPh0qw6ujnDtagWJKKbA@mail.gmail.com>
Message-ID: <fbb515e8-d660-47c8-8079-5bfbb770b976@gmail.com>

Your example doesn't run because it uses a variable `cyc` which you 
didn't include.

But in general, I think you are mixing up two separate problems here.

The first problem is creating a function of x (which is Cycles in your 
dataset).  You used the predictions from a glm() to do this.

That's a reasonable way to create a function with a range of 0 to 1, but 
you want a function with a different range.  Dividing by the max is one 
way to get it, but there are others.  I'd say a better approach would be 
to think about the problem from a subject matter point of view and 
determine a class of functions that match your needs.  After you've done 
that, you might use glm() to find the particular version of that 
function (i.e. the unknown parameters), or maybe some other method.

The second problem is finding where that function intersects a line.  In 
your sample code, you were trying to intersect a horizontal line.  If 
that's always the case, then it's a problem of inverting the function 
from the first problem.  Just write out y = f(x) and solve for x = 
f^-1(y).  If the formula isn't convenient, you can approximate the 
answer using the R function uniroot().

Duncan Murdoch

On 2025-04-11 11:53 a.m., Luigi Marongiu wrote:
> I am trying to predict the intersection value between a curve and a line.
> I can fit a logistic model to the data by converting the data to the
> range 0-1. How can I determine the intersection with a line?
> Also, is there a way to do the same without converting the data?
> Here is an example:
> 
> ```
> val = c(120.64,    66.14,    34.87,    27.11,    8.87,    -5.8,
> 4.52,    -7.16,    -17.39,
>         -14.29,    -20.26,    -14.99,    -21.05,    -20.64,    -8.03,
>   -21.56,    -1.28,    15.01,
>         75.26,    191.76,    455.09,    985.96,    1825.59,    2908.08,
>     3993.18,    5059.94,
>         6071.93,    6986.32,    7796.01,    8502.25,    9111.46,
> 9638.01,    10077.19,
>         10452.02,    10751.81,    11017.49,    11240.37,    11427.47,
>   11570.07,    11684.96,
>         11781.77,    11863.35,    11927.44,    11980.81,    12021.88,
>   12058.35,    12100.63,
>         12133.57,    12148.89,    12137.09)
> df = data.frame(Cycles = 1:35, Values = val[1:cyc])
> M = max(df$Values)
> df$Norm = df$Values/M
> df$Norm[df$Norm<0] = 0
> b_model = glm(Norm ~ Cycles, data=df, family=binomial)
> x = 0.15
> plot(Norm ~ Cycles, df, main="Normalized view",
>       xlab=expression(bold("Amplification cycle")),
>       ylab=expression(bold("Fluorescence (normalized)")),
>       type="l", lwd=3, col="blue")
> lines(b_model$fitted.values ~ df$Cycles, col="red", lwd=2, lty=2)
> abline(h=x, col="green", lwd=2)
> ```
> Thank you
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From |@urentRHe|p @end|ng |rom |ree@|r  Sat Apr 12 17:24:44 2025
From: |@urentRHe|p @end|ng |rom |ree@|r (Laurent Rhelp)
Date: Sat, 12 Apr 2025 17:24:44 +0200
Subject: [R] ggplot trouble when I combine a layer with group and a layer
 with group=1
Message-ID: <2b4615f3-2b77-44a9-b1fc-87ed10056812@free.fr>

Dear RHelp-list,

 ? I want to combine with ggplot2 a layer where I compare
 ? three regressions and a layer where I just display three
 ? new samples to evaluate their locations to the regressions lines.
 ? (the mock data is placed at the end of the mail)


# 1. comparison of the three regressions (it works)
#
# Using group, I plot firstly the three regressions for comparison
# with the regression line and the samples used to do the
# regression
##
library(ggplot2)
p1 <- ggplot(? data = ci_95
 ????????????? , aes(x=x, y=fit
 ??????????????????? , group? = cond1
 ??????????????????? , colour = cond1
 ??????????????????? , fill = cond1)) +
 ? geom_ribbon( data = ci_95
 ?????????????? ,?? aes(
 ???????????????? x = x
 ???????????????? ,? ymin = lwr
 ???????????????? , ymax = upr)
 ?????????????? , alpha = 0.3
 ?????????????? , linetype = 0
 ? ) +
 ? geom_line(data=ci_95, aes(x=x,y=fit)) +
 ? # add the samples used for the regressions
 ? geom_point(data = data_gg
 ???????????? , aes(x=x,y=y
 ?????????????????? , col = cond1))
# it works
print(p1)

# Then, in a separate graph, I look at the four new samples :
p2 <- ggplot() + geom_point(data=mydata
 ??????????????????????????? , aes(x=x,y=y
 ????????????????????????????????? ,col=new_sample_name)
)
# it works
print(p2)


# But now I want to overlay the comparison and the new samples
# To display the new samples I did exactly the same graph but I added 
group=1
# it doesn't work
p3 <- p1 +? geom_point(data=mydata
 ????????????????????? , aes(x=x,y=y
 ??????????????????????????? , group=1
 ??????????????????????????? ,col=new_sample_name)
)
print(p3)

I don't understand what's happen.
I don't understand the legends !!!
Why isn't there new_sample_name ?

Thank you

Best regards

Laurent


##------- ? ? ?? the mock data???? ---------------------------

ci_95 <-
structure(list(cond1 = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L), levels = c("gr1",
"gr2", "gr3"), class = "factor"), x = c(0, 5, 10, 15, 20, 25,
30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100,
105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165,
170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230,
235, 240, 245, 250, 255, 260, 265, 270, 0, 5, 10, 15, 20, 25,
30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100,
105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165,
170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230,
235, 240, 245, 250, 255, 260, 265, 270, 0, 5, 10, 15, 20, 25,
30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100,
105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165,
170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230,
235, 240, 245, 250, 255, 260, 265, 270), fit = c(0, 4.9418680120587464,
9.8837360241174927, 14.825604036176239, 19.767472048234985, 
24.709340060293734,
29.651208072352478, 34.593076084411223, 39.534944096469971, 
44.476812108528719,
49.418680120587467, 54.360548132646215, 59.302416144704956, 
64.244284156763712,
69.186152168822446, 74.128020180881194, 79.069888192939942, 
84.01175620499869,
88.953624217057438, 93.895492229116186, 98.837360241174935, 
103.77922825323368,
108.72109626529243, 113.66296427735116, 118.60483228940991, 
123.54670030146866,
128.48856831352742, 133.43043632558616, 138.37230433764489, 
143.31417234970365,
148.25604036176239, 153.19790837382115, 158.13977638587988, 
163.08164439793865,
168.02351240999738, 172.96538042205614, 177.90724843411488, 
182.84911644617361,
187.79098445823237, 192.73285247029111, 197.67472048234987, 
202.6165884944086,
207.55845650646737, 212.5003245185261, 217.44219253058486, 
222.3840605426436,
227.32592855470233, 232.26779656676109, 237.20966457881983, 
242.15153259087859,
247.09340060293732, 252.03526861499608, 256.97713662705485, 
261.91900463911355,
266.86087265117231, 0, 5.3286116058825348, 10.65722321176507,
15.985834817647605, 21.314446423530139, 26.643058029412675, 
31.971669635295211,
37.300281241177743, 42.628892847060278, 47.957504452942814, 
53.28611605882535,
58.614727664707885, 63.943339270590421, 69.271950876472957, 
74.600562482355485,
79.929174088238028, 85.257785694120557, 90.5863973000031, 
95.915008905885628,
101.24362051176817, 106.5722321176507, 111.90084372353324, 
117.22945532941577,
122.5580669352983, 127.88667854118084, 133.21529014706337, 
138.54390175294591,
143.87251335882846, 149.20112496471097, 154.52973657059351, 
159.85834817647606,
165.1869597823586, 170.51557138824111, 175.84418299412366, 
181.1727946000062,
186.50140620588871, 191.83001781177126, 197.1586294176538, 
202.48724102353634,
207.81585262941886, 213.1444642353014, 218.47307584118394, 
223.80168744706648,
229.130299052949, 234.45891065883154, 239.78752226471408, 245.1161338705966,
250.44474547647914, 255.77335708236168, 261.1019686882442, 
266.43058029412674,
271.75919190000928, 277.08780350589183, 282.41641511177437, 
287.74502671765691,
0, 5.0746119502607421, 10.149223900521484, 15.223835850782226,
20.298447801042968, 25.37305975130371, 30.447671701564452, 
35.522283651825198,
40.596895602085937, 45.671507552346682, 50.746119502607421, 
55.820731452868166,
60.895343403128905, 65.969955353389651, 71.044567303650396, 
76.119179253911128,
81.193791204171873, 86.268403154432619, 91.343015104693364, 
96.41762705495411,
101.49223900521484, 106.56685095547559, 111.64146290573633, 
116.71607485599708,
121.79068680625781, 126.86529875651856, 131.9399107067793, 
137.01452265704003,
142.08913460730079, 147.16374655756152, 152.23835850782226, 
157.31297045808302,
162.38758240834375, 167.46219435860451, 172.53680630886524, 
177.61141825912597,
182.68603020938673, 187.76064215964746, 192.83525410990822, 
197.90986606016895,
202.98447801042968, 208.05908996069044, 213.13370191095117, 
218.20831386121191,
223.28292581147267, 228.3575377617334, 233.43214971199416, 
238.50676166225489,
243.58137361251562, 248.65598556277638, 253.73059751303711, 
258.80520946329784,
263.8798214135586, 268.95443336381936, 274.02904531408007), lwr = 
c(-3.6272433922174332,
1.3144992249573315, 6.255991078370168, 11.19723224601222, 
16.138222857778928,
21.078963095335556, 26.019453191929369, 30.959693432148967, 
35.89968415163127,
40.839425736716933, 45.778918624054938, 50.718163300157428, 
55.657160300905623,
60.595910211008274, 65.534413663413531, 70.472671338676079, 
75.410683964280452,
80.348452313922508, 85.285977206750502, 90.223259506567416, 
95.160300120996354,
100.09710000061095, 105.0336601380324, 109.96998156699527, 
114.90606536138408,
119.84191263424225, 124.77752453675608, 129.71290225721518, 
134.64804701995195,
139.5829600842616, 144.51764274330523, 149.45209632299799, 
154.38632218088375,
159.32032170499946, 164.25409631272973, 169.18764744965497, 
174.120976588394,
179.05408522744364, 183.98697489001663, 188.91964712288012, 
193.85210349519622,
198.7843455973661, 203.71637503987989, 208.64819345217305, 
213.57980248149158,
218.51120379176675, 223.44239906250132, 228.37338998766811, 
233.30417827462216,
238.23476564302814, 243.16515382380331, 248.09534455807761, 
253.02533959617151,
257.95514069659271, 262.88474962505251, -9.4081243666885896,
-4.0798380024664249, 1.2477979458878838, 6.5747836806630477,
11.901119538773989, 17.22680599141307, 22.551843643562954, 
27.876233233372304,
33.199975631395851, 38.523071839700599, 43.845522990840266, 
49.167330346700574,
54.488495297217845, 59.809019358974176, 65.128904173672254, 
70.448151506493559,
75.766763244343451, 81.084741393987457, 86.402088080082706, 
91.718805543109099,
97.034896137204527, 102.35036232790932, 107.66520668982425, 
112.97943190418755,
118.29304075637575, 123.60603613333357, 128.91842102093838, 
134.2301985013039,
139.54137175002927, 144.85194403339824, 150.16191870553391, 
155.47129920551453,
160.7800890544554, 166.08829185256261, 171.39591127616271, 
176.70295107471458,
182.00941506780791, 187.31530714215288, 192.62063124856658, 
197.92539139896002,
203.22959166333084, 208.53323616676551, 213.83632908645566, 
219.1388746487325,
224.44087712612293, 229.74234083443122, 235.0432701298499, 
240.34366940610312,
245.64354309162516, 250.94289564677808, 256.24173156111033, 
261.54005535065932,
266.83787155530041, 272.13518473614454, 277.43199947298638, 
-3.6193222006905046,
1.4551646285242055, 6.5294012415960934, 11.603387716345988, 
16.677124182385661,
21.750610820983649, 26.823847864877866, 31.896835598035416, 
36.969574355360251,
42.042064522349335, 47.114306534698102, 52.186300877856233, 
57.258048086534707,
62.329548744165358, 67.400803482314146, 72.471812980049506, 
77.542577963267306,
82.613099203973817, 87.683377519528435, 92.753413771847747, 
97.823208866572784,
102.89276375220133, 107.96207941918688, 113.03115689900655, 
118.09999726319964,
123.16860162237896, 128.23697112521683, 133.30510695740787, 
138.37301034061079,
143.4406825313707, 148.50812482002473, 153.57533852959244, 
158.64232501465318,
163.70908566021262, 168.77562188056007, 173.84193511811912, 
178.90802684229271,
183.97389854830516, 189.03955175604284, 194.10498800889508, 
199.17020887259716,
204.23521593407727, 209.30001080030843, 214.36459509716778, 
219.42897046830407,
224.49313857401481, 229.55710109013512, 234.62085970693843, 
239.68441612805134,
244.74777206938307, 249.81092925807087, 254.87388943144242, 
259.93665433599585,
264.99922572639866, 270.06160536450597), upr = c(3.6272433922174332,
8.5692367991601621, 13.511480969864817, 18.453975826340258, 
23.396721238691043,
28.339717025251911, 33.282962952775584, 38.226458736673479, 
43.170204041308672,
48.114198480340505, 53.058441617119996, 58.002932965135003, 
62.94767198850429,
67.89265810251915, 72.83789067423136, 77.783369023086308, 
82.729092421599432,
87.675060096074873, 92.621271227364375, 97.567724951664957, 
102.51442036135352,
107.46135650585641, 112.40853239255246, 117.35594698770706, 
122.30359921743575,
127.25148796869507, 132.19961209029879, 137.14797039395714, 
142.09656165533784,
147.04538461514571, 151.99443798021954, 156.94372042464431, 
161.89323059087602,
166.84296709087783, 171.79292850726503, 176.74311339445731, 
181.69352027983575,
186.64414766490358, 191.59499402644812, 196.54605781770209, 
201.49733746950352,
206.44883139145111, 211.40053797305484, 216.35245558487915, 
221.30458257967814,
226.25691729352044, 231.20945804690334, 236.16220314585408, 
241.11515088301749,
246.06829953872904, 251.02164738207134, 255.97519267191456, 
260.92893365793816,
265.8828685816344, 270.83699567729212, 9.4081243666885896, 
14.737061214231495,
20.066648477642254, 25.396885954632161, 30.727773308286288, 
36.059310067412284,
41.391495627027467, 46.724329248983182, 52.057810062724705, 
57.391937066185029,
62.726709126810434, 68.062124982715204, 73.39818324396299, 
78.734882393971745,
84.072220791038717, 89.410196669982497, 94.748808143897662, 
100.08805320601874,
105.42792973168855, 110.76843548042724, 116.10956809809687, 
121.45132511915716,
126.7937039690073, 132.13670196640905, 137.48031632598594, 
142.82454416079315,
148.16938248495345, 153.51482821635301, 158.86087817939267, 
164.20752910778879,
169.55477764741821, 174.90262035920267, 180.25105372202682, 
185.60007413568471,
190.94967792384969, 196.29986133706285, 201.6506205557346, 
207.00195169315472,
212.3538507985061, 217.7063138598777, 223.05933680727196, 
228.41291551560238,
233.76704580767731, 239.1217234571655, 244.47694419154016, 
249.83270369499695,
255.1889976113433, 260.54582154685517, 265.90317107309818, 
271.26104172971031,
276.61942902714316, 281.97832844935925, 287.33773545648324, 
292.6976454874042,
298.05805396232745, 3.6193222006905046, 8.6940592719972791, 
13.769046559446874,
18.844283985218464, 23.919771419700275, 28.995508681623772, 
34.071495538251042,
39.14773170561498, 44.224216848811622, 49.300950582344029, 
54.37793247051674,
59.4551620278801, 64.53263871972311, 69.610361962613936, 74.688331124986647,
79.766545527772749, 84.845004445076441, 89.92370710489142, 
95.002652689858294,
100.08184033806047, 105.1612691438569, 110.24093815874984, 
115.32084639228579,
120.40099281298761, 125.48137634931598, 130.56199589065815, 
135.64285028834178,
140.72393835667219, 145.80525887399079, 150.88681058375235, 
155.96859219561978,
161.05060238657359, 166.13283980203431, 171.21530305699639, 
176.29799073717041,
181.38090140013281, 186.46403357648074, 191.54738577098976, 
196.6309564637736,
201.71474411144283, 206.79874714826221, 211.88296398730361, 
216.96739302159392,
222.05203262525603, 227.13688115464126, 232.22193694945199, 
237.30719833385319,
242.39266361757134, 247.4783310969799, 252.56419905616968, 
257.65026576800335,
262.73652949515326, 267.82298849112135, 272.90964100124006, 
277.99648526365417
)), class = c("grouped_df", "tbl_df", "tbl", "data.frame"), row.names = 
c(NA,
-165L), groups = structure(list(cond1 = structure(1:3, levels = c("gr1",
"gr2", "gr3"), class = "factor"), .rows = structure(list(1:55,
 ??? 56:110, 111:165), ptype = integer(0), class = c("vctrs_list_of",
"vctrs_vctr", "list"))), class = c("tbl_df", "tbl", "data.frame"
), row.names = c(NA, -3L), .drop = TRUE))


data_gg <-
 ? structure(list(sample_name = structure(c(1L, 1L, 1L, 3L, 3L,
 ?????????????????????????????????????????? 3L, 4L, 4L, 4L, 5L, 5L, 5L, 
6L, 6L, 6L, 7L, 7L, 7L, 8L, 8L, 8L,
 ?????????????????????????????????????????? 9L, 9L, 9L, 10L, 10L, 10L, 
2L, 2L, 2L), levels = c("sample_1",
"sample_10", "sample_2", "sample_3", "sample_4", "sample_5",
"sample_6", "sample_7", "sample_8", "sample_9"), class = "factor"),
 ???????????????? cond1 = structure(c(1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, 
3L, 1L,
 ???????????????????????????????????? 2L, 3L, 1L, 2L, 3L, 1L, 2L, 3L, 
1L, 2L, 3L, 1L, 2L, 3L, 1L,
 ???????????????????????????????????? 2L, 3L, 1L, 2L, 3L), levels = 
c("gr1", "gr2", "gr3"), class = "factor"),
 ???????????????? y = c(66.841303063926276, 67.472560483496395, 
67.350782025297491,
 ?????????????????????? 239.92038943963996, 263.86434567960532, 
245.5828943233048,
 ?????????????????????? 79.816014407733576, 83.113561986286527, 
82.472407359578497,
 ?????????????????????? 119.47728818995286, 124.6096674548085, 
123.53929680828162,
 ?????????????????????? 167.74945967316481, 175.24119274447909, 
173.3101276414092,
 ?????????????????????? 179.9757883770354, 188.0353953366776, 
185.62371789029476,
 ?????????????????????? 211.67636686196198, 226.0245057723744, 
217.67567556426681,
 ?????????????????????? 239.2332514084444, 263.43071638223682, 
246.36541140534734,
 ?????????????????????? 239.12520839705132, 261.48215841483324, 
244.32149876740914,
 ?????????????????????? 225.41906797385775, 243.4863489065367, 
230.85842575876438
 ???????????????? ), x = c(63.943257223109704, 63.943257223109704, 
63.943257223109704,
 ????????????????????????? 243.86202494837679, 243.86202494837679, 
243.86202494837679,
 ????????????????????????? 79.830727091681908, 79.830727091681908, 
79.830727091681908,
 ????????????????????????? 120.17775154264349, 120.17775154264349, 
120.17775154264349,
 ????????????????????????? 170.68397678049993, 170.68397678049993, 
170.68397678049993,
 ????????????????????????? 182.76437013692455, 182.76437013692455, 
182.76437013692455,
 ????????????????????????? 213.08836061920164, 213.08836061920164, 
213.08836061920164,
 ????????????????????????? 242.88283256045045, 242.88283256045045, 
242.88283256045045,
 ????????????????????????? 243.01167748338918, 243.01167748338918, 
243.01167748338918,
 ????????????????????????? 226.30406793610797, 226.30406793610797, 
226.30406793610797
 ???????????????? )), row.names = c(NA, -30L), class = "data.frame")


mydata <-
 ? structure(list(new_sample_name = c("new_1", "new_2", "new_3",
 ???????????????????????????????????? "new_4"), cond1 = c("gr3", "gr3", 
"gr3", "gr3"), x = c(237.95320350271339,
179.00466406850148, 114.82070964229392, 186.88105015735715),
 ???????????????? y = c(236.9327999649125, 179.57983976081474, 
115.38365944625376,
 ?????????????????????? 187.86604427125403)), class = c("grouped_df", 
"tbl_df", "tbl",
"data.frame"), row.names = c(NA, -4L), groups = structure(list(
new_sample_name = c("new_1", "new_2", "new_3", "new_4"),
 ???????????????????????????????????????????????????????? .rows = 
structure(list(1L, 2L, 3L, 4L), ptype = integer(0), class = 
c("vctrs_list_of",
"vctrs_vctr", "list"))), class = c("tbl_df", "tbl", "data.frame"
), row.names = c(NA, -4L), .drop = TRUE))


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Sat Apr 12 19:56:28 2025
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Sat, 12 Apr 2025 19:56:28 +0200
Subject: [R] 
 How to predict intersection value between regression and line in R?
In-Reply-To: <fbb515e8-d660-47c8-8079-5bfbb770b976@gmail.com>
References: <CAMk+s2QX1o+r+fL-UfuL2aD_2tauXdiPh0qw6ujnDtagWJKKbA@mail.gmail.com>
 <fbb515e8-d660-47c8-8079-5bfbb770b976@gmail.com>
Message-ID: <CAMk+s2RKr-NYE0T1J4GYb8kyt4WkpZUqvw6pPgRQb6=jg41UBQ@mail.gmail.com>

Thank you. Sorry for the cyc variable, I simplified in 35 in the first
call but not in the second. The actual value would be
```
df = data.frame(Cycles = 1:35, Values = val[1:35)
```
I'll try your suggestion.
Best regards

On Fri, Apr 11, 2025 at 8:05?PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> Your example doesn't run because it uses a variable `cyc` which you
> didn't include.
>
> But in general, I think you are mixing up two separate problems here.
>
> The first problem is creating a function of x (which is Cycles in your
> dataset).  You used the predictions from a glm() to do this.
>
> That's a reasonable way to create a function with a range of 0 to 1, but
> you want a function with a different range.  Dividing by the max is one
> way to get it, but there are others.  I'd say a better approach would be
> to think about the problem from a subject matter point of view and
> determine a class of functions that match your needs.  After you've done
> that, you might use glm() to find the particular version of that
> function (i.e. the unknown parameters), or maybe some other method.
>
> The second problem is finding where that function intersects a line.  In
> your sample code, you were trying to intersect a horizontal line.  If
> that's always the case, then it's a problem of inverting the function
> from the first problem.  Just write out y = f(x) and solve for x =
> f^-1(y).  If the formula isn't convenient, you can approximate the
> answer using the R function uniroot().
>
> Duncan Murdoch
>
> On 2025-04-11 11:53 a.m., Luigi Marongiu wrote:
> > I am trying to predict the intersection value between a curve and a line.
> > I can fit a logistic model to the data by converting the data to the
> > range 0-1. How can I determine the intersection with a line?
> > Also, is there a way to do the same without converting the data?
> > Here is an example:
> >
> > ```
> > val = c(120.64,    66.14,    34.87,    27.11,    8.87,    -5.8,
> > 4.52,    -7.16,    -17.39,
> >         -14.29,    -20.26,    -14.99,    -21.05,    -20.64,    -8.03,
> >   -21.56,    -1.28,    15.01,
> >         75.26,    191.76,    455.09,    985.96,    1825.59,    2908.08,
> >     3993.18,    5059.94,
> >         6071.93,    6986.32,    7796.01,    8502.25,    9111.46,
> > 9638.01,    10077.19,
> >         10452.02,    10751.81,    11017.49,    11240.37,    11427.47,
> >   11570.07,    11684.96,
> >         11781.77,    11863.35,    11927.44,    11980.81,    12021.88,
> >   12058.35,    12100.63,
> >         12133.57,    12148.89,    12137.09)
> > df = data.frame(Cycles = 1:35, Values = val[1:cyc])
> > M = max(df$Values)
> > df$Norm = df$Values/M
> > df$Norm[df$Norm<0] = 0
> > b_model = glm(Norm ~ Cycles, data=df, family=binomial)
> > x = 0.15
> > plot(Norm ~ Cycles, df, main="Normalized view",
> >       xlab=expression(bold("Amplification cycle")),
> >       ylab=expression(bold("Fluorescence (normalized)")),
> >       type="l", lwd=3, col="blue")
> > lines(b_model$fitted.values ~ df$Cycles, col="red", lwd=2, lty=2)
> > abline(h=x, col="green", lwd=2)
> > ```
> > Thank you
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide https://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>


-- 
Best regards,
Luigi



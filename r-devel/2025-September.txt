From edd @end|ng |rom deb|@n@org  Wed Sep  3 21:06:33 2025
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Wed, 3 Sep 2025 14:06:33 -0500
Subject: [Rd] Suggested one word change for R-admin.texi
Message-ID: <26808.37305.181737.645896@paul.eddelbuettel.com>


The third bullet point in section A 3.1.4 'Shared BLAS' starts with 'This
because less easy'; I suggest to change this to 'This became less easy':

edd at paul:~/svn/r-devel$ svn diff doc/manual/R-admin.texi 
Index: doc/manual/R-admin.texi
===================================================================
--- doc/manual/R-admin.texi     (revision 88787)
+++ doc/manual/R-admin.texi     (working copy)
@@ -4028,7 +4028,7 @@
 need to be found by the linker: this may need the library path to be
 changed in @file{@var{R_HOME}/etc/ldpaths}.
 
-This because less easy in 2025: swapping the BLAS is only possible to
+This became less easy in 2025: swapping the BLAS is only possible to
 one compatible with the LAPACK in use.  For the LAPACK shipped with @R{}
 4.5.0 that means one containing @code{dgemmtr} and @code{zgemmtr}, or
 configuring @R{} with @option{--with-2025blas}.
edd at paul:~/svn/r-devel$

Best,  Dirk

-- 
dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From Kurt@Horn|k @end|ng |rom wu@@c@@t  Thu Sep  4 06:36:01 2025
From: Kurt@Horn|k @end|ng |rom wu@@c@@t (Kurt Hornik)
Date: Thu, 4 Sep 2025 06:36:01 +0200
Subject: [Rd] Suggested one word change for R-admin.texi
In-Reply-To: <26808.37305.181737.645896@paul.eddelbuettel.com>
References: <26808.37305.181737.645896@paul.eddelbuettel.com>
Message-ID: <26809.5937.265760.821119@hornik.net>

>>>>> Dirk Eddelbuettel writes:

Thanks: changed now.

Best
-k

> The third bullet point in section A 3.1.4 'Shared BLAS' starts with 'This
> because less easy'; I suggest to change this to 'This became less easy':

> edd at paul:~/svn/r-devel$ svn diff doc/manual/R-admin.texi 
> Index: doc/manual/R-admin.texi
> ===================================================================
> --- doc/manual/R-admin.texi     (revision 88787)
> +++ doc/manual/R-admin.texi     (working copy)
> @@ -4028,7 +4028,7 @@
>  need to be found by the linker: this may need the library path to be
>  changed in @file{@var{R_HOME}/etc/ldpaths}.
 
> -This because less easy in 2025: swapping the BLAS is only possible to
> +This became less easy in 2025: swapping the BLAS is only possible to
>  one compatible with the LAPACK in use.  For the LAPACK shipped with @R{}
>  4.5.0 that means one containing @code{dgemmtr} and @code{zgemmtr}, or
>  configuring @R{} with @option{--with-2025blas}.
> edd at paul:~/svn/r-devel$

> Best,  Dirk

> -- 
> dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org

> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From he|g@@o|t @end|ng |rom gm@||@com  Thu Sep 11 01:13:25 2025
From: he|g@@o|t @end|ng |rom gm@||@com (helgasoft)
Date: Wed, 10 Sep 2025 16:13:25 -0700
Subject: [Rd] compiler::cmpfile output contains source code
Message-ID: <a7fe8bef-806e-45b9-b938-ed5b4f2972b0@helgasoft.com>

Command?compiler::cmpfile(infile) outputs a binary (.Rc) file.
The infile source code is contained in this output file.
Is the source code required, and if not, is it possible to make it 
optional ?


From @uny|ngk@| @end|ng |rom @jtu@edu@cn  Thu Sep 11 03:09:25 2025
From: @uny|ngk@| @end|ng |rom @jtu@edu@cn (=?gb2312?B?y+/Tor+t?=)
Date: Thu, 11 Sep 2025 09:09:25 +0800 (CST)
Subject: [Rd] [BUG?] S4 validity function not enforced during object
 creation in R 4.4.2
Message-ID: <78022517.16035369.1757552965613.JavaMail.zimbra@sjtu.edu.cn>


Dear R Core Team,
I would like to report a possible bug or behavioral change in the S4 class system in R 4.4.2 regarding the validity function.
Description of the issue:
In previous versions of R, when the validity function of an S4 class returns a character string (i.e., an error message), the ?new() function would refuse to create the object and throw an error.
However, in R 4.4.2, I found that ?new() creates the object successfully even when the validity function returns an error message. Only a manual call to ?validObject() triggers the error.
Minimal reproducible example:

setClass('TestVital',
         slots = list(visit_type='character'),
         prototype = list(visit_type=''),
         validity = function(object){
           if(!object at visit_type %in% c('OP','IP')){
             return('??????')
           }
           TRUE
         })
new('TestVital')  # This should fail, but it succeeds in R 4.4.2
validObject(new('TestVital'))  # This correctly triggers the error

Session info:

R version 4.4.2 (2024-10-31)
Platform: aarch64-apple-darwin20
Running under: macOS Sequoia 15.6.1

Expected behavior:
?new('TestVital') should fail and throw an error if the validity function returns a character string, as documented in the official R extensions manual.
Actual behavior:
?new('TestVital') creates the object even when the validity function returns an error message.
Is this an intentional change in R 4.4.x, or is it a bug?
Thank you for your attention.
Best regards,
Sun Yingkai


From j@g@nmn2 @end|ng |rom gm@||@com  Fri Sep 12 01:53:57 2025
From: j@g@nmn2 @end|ng |rom gm@||@com (Mikael Jagan)
Date: Thu, 11 Sep 2025 19:53:57 -0400
Subject: [Rd] [BUG?] S4 validity function not enforced during object
 creation in R 4.4.2
In-Reply-To: <mailman.55029.3.1757584802.51194.r-devel@r-project.org>
References: <mailman.55029.3.1757584802.51194.r-devel@r-project.org>
Message-ID: <ae877645-29bb-4dae-b839-74554b3fdb15@gmail.com>

Dear Yingkai,

The default method for 'initialize', which is called by 'new' in your example
and is accessible as

     > selectMethod("initialize", "ANY")

has always called 'validObject' *only if* it finds arguments matching '...',
so the behaviour that you report is not a change from earlier behaviour.

The bug seems to be that you, the class author, defined a nonvirtual class
with an invalid prototype, *not* that 'new' ignores invalid prototypes.

I added the following regression test in Matrix version 1.6-0 in order to
catch exactly this mistake:

     for (cl in c(names(getClassDef("Matrix")@subclasses),
                  names(getClassDef("MatrixFactorization")@subclasses)))
         if (!isVirtualClass(def <- getClassDef(cl)))
             validObject(new(def))

One could argue that setClass(name, ...) should test validObject(new(name))
before returning whenever it defines a nonvirtual class.  But I can imagine
false positives, e.g., if a class author documents that 'new' *must* be
called with additional arguments, then the validity of the prototype seems
inconsequential.  Hence the test ought to be optional and probably (at least
initially) disabled by default.

Mikael


> Date: Thu, 11 Sep 2025 09:09:25 +0800 (CST)
> From: =?gb2312?B?y+/Tor+t?=<sunyingkai at sjtu.edu.cn>
> 
> Dear R Core Team,
> I would like to report a possible bug or behavioral change in the S4 class system in R 4.4.2 regarding the validity function.
> Description of the issue:
> In previous versions of R, when the validity function of an S4 class returns a character string (i.e., an error message), the ?new() function would refuse to create the object and throw an error.
> However, in R 4.4.2, I found that ?new() creates the object successfully even when the validity function returns an error message. Only a manual call to ?validObject() triggers the error.
> Minimal reproducible example:
> 
setClass('TestVital',
>           slots = list(visit_type='character'),
>           prototype = list(visit_type=''),
>           validity = function(object){
>             if(!object at visit_type %in% c('OP','IP')){
>               return('??????')
>             }
>             TRUE
>           })
> new('TestVital')  # This should fail, but it succeeds in R 4.4.2
> validObject(new('TestVital'))  # This correctly triggers the error
> 
Session info:
> 
R version 4.4.2 (2024-10-31)
> Platform: aarch64-apple-darwin20
> Running under: macOS Sequoia 15.6.1
> 
Expected behavior:
> ?new('TestVital') should fail and throw an error if the validity function returns a character string, as documented in the official R extensions manual.
> Actual behavior:
> ?new('TestVital') creates the object even when the validity function returns an error message.
> Is this an intentional change in R 4.4.x, or is it a bug?
> Thank you for your attention.
> Best regards,
> Sun Yingkai


From |kry|ov @end|ng |rom d|@root@org  Fri Sep 12 23:25:50 2025
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Sat, 13 Sep 2025 00:25:50 +0300
Subject: [Rd] compiler::cmpfile output contains source code
In-Reply-To: <a7fe8bef-806e-45b9-b938-ed5b4f2972b0@helgasoft.com>
References: <a7fe8bef-806e-45b9-b938-ed5b4f2972b0@helgasoft.com>
Message-ID: <20250913002550.04d1c8de@Tarkus>

? Wed, 10 Sep 2025 16:13:25 -0700
helgasoft <helgasoft at gmail.com> ?????:

> Command?compiler::cmpfile(infile) outputs a binary (.Rc) file.
> The infile source code is contained in this output file.
> Is the source code required, and if not, is it possible to make it 
> optional ?

The source references are optional. Since cmpfile() calls parse(),
setting options(keep.source=FALSE) should prevent it from adding source
references.

On the other hand, by calling compiler::disassemble() on the bytecode
values, you will still be able to see the language objects from the
file, so a somewhat lossy representation of the source code is still
present. These language objects are used at least for error handling
and sometimes for internal consistency checks [*].

What's your use case?

-- 
Best regards,
Ivan

[*]
https://coolbutuseless.github.io/book/rbytecodebook/15-stored-expressions.html



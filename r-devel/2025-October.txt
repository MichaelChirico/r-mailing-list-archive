From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Fri Oct  3 20:35:41 2025
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Fri, 3 Oct 2025 11:35:41 -0700
Subject: [Rd] Using '@anchor' in the manuals for nicer
 anchors/cross-references
Message-ID: <CAPRVBcyrcv=gSbAY2VNOKqFYSn4TSqBB1CENkRPjwpkzOrCn4A@mail.gmail.com>

Hi all,

I happened to notice that linking to the 'User-defined macros' paragraph in
R-exts produces a less-than-fully-scrutable link [1]. grep-ing around I
found others peppered in the manuals, e.g. [2] [3].

In markdown (the flavors I'm used to, at least), we'd use something like
{#User-defined-macros} to customize the link as well as make it more stable.

I'm not particularly familiar with Texinfo, but a quick search around
suggests we could use '@anchor' tags to augment what's produced
automatically from '@node'. [4] [5]

It's fairly minor but would be a nice quality-of-life improvement; if
agreed, I think it would be a nice R-dev-day issue, too. One important
consideration is back-compatibility -- we'd like to ensure any existing
links with the "ugly" text continue to work. I believe that just means
leaving the '@node' unchanged. An advanced 3rd-order consideration would be
to look at the history of the '@node' text and generate new '@anchor'
entries if any have changed to retroactively improve back-compatibility.

Mike C

[1]
https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#User_002ddefined-macros-1
[2]
https://cran.r-project.org/doc/manuals/r-release/R-admin.html#index-Installing-under-Unix_002dalikes
[3]
https://cran.r-project.org/doc/manuals/r-release/R-data.html#Spreadsheet_002dlike-data
[4]
https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#g_t_0040anchor
[aside, somewhat funny that Texinfo themselves leave this messy link here
:) ]
[5] https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#Nodes

	[[alternative HTML version deleted]]


From r@v|@v@r@dh@n @end|ng |rom jhu@edu  Sat Oct  4 15:34:48 2025
From: r@v|@v@r@dh@n @end|ng |rom jhu@edu (Ravi Varadhan)
Date: Sat, 4 Oct 2025 13:34:48 +0000
Subject: [Rd] Inaccuracy in DFBETA calculation for GLMs
Message-ID: <SA0PR01MB6458E10F0555D14089AB15F5F2E5A@SA0PR01MB6458.prod.exchangelabs.com>

Hi,

I have been calculating sensitivity diagnostics in GLMs.  I am noticing that the dfbeta() and influence() functions in base R are inaccurate for non-Gaussian GLMs.  Even though the help says that the DFBETAs can be inaccurate for GLMs, the accuracy can be substantially improved.

I was thinking of writing this up along with a proper fix to R Journal but then started wondering whether this is a well-known issue and it has been addressed in other packages.

Has the inaccuracy of DFBETA been addressed already?

Thank you,
Ravi


	[[alternative HTML version deleted]]


From @eb@meyer @end|ng |rom |@u@de  Tue Oct  7 20:13:59 2025
From: @eb@meyer @end|ng |rom |@u@de (Sebastian Meyer)
Date: Tue, 7 Oct 2025 20:13:59 +0200
Subject: [Rd] Using '@anchor' in the manuals for nicer
 anchors/cross-references
In-Reply-To: <CAPRVBcyrcv=gSbAY2VNOKqFYSn4TSqBB1CENkRPjwpkzOrCn4A@mail.gmail.com>
References: <CAPRVBcyrcv=gSbAY2VNOKqFYSn4TSqBB1CENkRPjwpkzOrCn4A@mail.gmail.com>
Message-ID: <82338a32-6379-4af0-90b4-58578d805cd9@fau.de>

Yes, an @anchor command for the old name is used when
renaming a @node such that old links still jump to the right section 
(not just to the top of the page). There were no relevant
renamings in the R manuals over the past few years.

One could add alternative anchors for selected sections but anchors are 
treated identically to nodes when it comes to creating XHTML identifiers 
(and also regarding allowed characters), so a dash would still be 
converted to "_002d", see 
<https://www.gnu.org/software/texinfo/manual/texinfo/html_node/HTML-Xref-Node-Name-Expansion.html>.

The linked URLs are not usually visible, so I'm not too worried about 
\manual{R-exts}{User-defined macros} creating a hyperlink to 
<https://cloud.R-project.org/doc/manuals/R-exts.html#User_002ddefined-macros>.

The *one* case where I just recently considered adding a custom @anchor 
was R-FAQ 7.31 
<https://CRAN.R-project.org/doc/manuals/r-devel/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f> 
as it has been referenced so many times by its number. The simple 
@anchor{7.31} turns into #g_t7_002e31 ... only @anchor{FAQ 7 31} gives a 
reasonable #FAQ-7-31. Of course that identifier would then only be 
available in specific (future) versions of the R-FAQ so it would take a 
while until it could be preferred over the long-standing existing ID. 
Furthermore, such alternative identifiers wouldn't usually be 
known/visible as they would not be used as hyperlinks in the HTML manual 
itself: the navigation links would still be based on the node name and 
the section id on the section name. So I think there is little benefit 
in adding extra anchors.

In the exceptional case of R-FAQ 7.31, renaming the node and adding a 
description for the auto-generated menu in the Info manual might be an 
option (but I didn't test this thoroughly):

     @node FAQ 7 31
     @nodedescription Why doesn't R think these numbers are equal?
     @anchor{Why doesn't R think these numbers are equal?} @c old name
     @section Why doesn't R think these numbers are equal?

Best regards,

	Sebastian Meyer


Am 03.10.25 um 20:35 schrieb Michael Chirico:
> Hi all,
> 
> I happened to notice that linking to the 'User-defined macros' paragraph in
> R-exts produces a less-than-fully-scrutable link [1]. grep-ing around I
> found others peppered in the manuals, e.g. [2] [3].
> 
> In markdown (the flavors I'm used to, at least), we'd use something like
> {#User-defined-macros} to customize the link as well as make it more stable.
> 
> I'm not particularly familiar with Texinfo, but a quick search around
> suggests we could use '@anchor' tags to augment what's produced
> automatically from '@node'. [4] [5]
> 
> It's fairly minor but would be a nice quality-of-life improvement; if
> agreed, I think it would be a nice R-dev-day issue, too. One important
> consideration is back-compatibility -- we'd like to ensure any existing
> links with the "ugly" text continue to work. I believe that just means
> leaving the '@node' unchanged. An advanced 3rd-order consideration would be
> to look at the history of the '@node' text and generate new '@anchor'
> entries if any have changed to retroactively improve back-compatibility.
> 
> Mike C
> 
> [1]
> https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#User_002ddefined-macros-1
> [2]
> https://cran.r-project.org/doc/manuals/r-release/R-admin.html#index-Installing-under-Unix_002dalikes
> [3]
> https://cran.r-project.org/doc/manuals/r-release/R-data.html#Spreadsheet_002dlike-data
> [4]
> https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#g_t_0040anchor
> [aside, somewhat funny that Texinfo themselves leave this messy link here
> :) ]
> [5] https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#Nodes
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From m|ch@e|ch|r|co4 @end|ng |rom gm@||@com  Tue Oct  7 22:08:06 2025
From: m|ch@e|ch|r|co4 @end|ng |rom gm@||@com (Michael Chirico)
Date: Tue, 7 Oct 2025 13:08:06 -0700
Subject: [Rd] Using '@anchor' in the manuals for nicer
 anchors/cross-references
In-Reply-To: <82338a32-6379-4af0-90b4-58578d805cd9@fau.de>
References: <CAPRVBcyrcv=gSbAY2VNOKqFYSn4TSqBB1CENkRPjwpkzOrCn4A@mail.gmail.com>
 <82338a32-6379-4af0-90b4-58578d805cd9@fau.de>
Message-ID: <CAPRVBcxTAp=_LdSwc2i5ksp533FxpjUawkythUK9CsfJ1bcRzA@mail.gmail.com>

To clarify, the idea would be to use an @anchor without '-',
e.g. @anchor{User defined macros} seems suitable here.

However, my goal is that the link generated when clicking '?' next to a
given heading corresponds to the desired anchor.

If it's not possible to improve that, indeed, the point is moot.

Thanks!

On Tue, Oct 7, 2025 at 11:14?AM Sebastian Meyer <seb.meyer at fau.de> wrote:

> Yes, an @anchor command for the old name is used when
> renaming a @node such that old links still jump to the right section
> (not just to the top of the page). There were no relevant
> renamings in the R manuals over the past few years.
>
> One could add alternative anchors for selected sections but anchors are
> treated identically to nodes when it comes to creating XHTML identifiers
> (and also regarding allowed characters), so a dash would still be
> converted to "_002d", see
> <
> https://www.gnu.org/software/texinfo/manual/texinfo/html_node/HTML-Xref-Node-Name-Expansion.html
> >.
>
> The linked URLs are not usually visible, so I'm not too worried about
> \manual{R-exts}{User-defined macros} creating a hyperlink to
> <
> https://cloud.R-project.org/doc/manuals/R-exts.html#User_002ddefined-macros
> >.
>
> The *one* case where I just recently considered adding a custom @anchor
> was R-FAQ 7.31
> <
> https://CRAN.R-project.org/doc/manuals/r-devel/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f>
>
> as it has been referenced so many times by its number. The simple
> @anchor{7.31} turns into #g_t7_002e31 ... only @anchor{FAQ 7 31} gives a
> reasonable #FAQ-7-31. Of course that identifier would then only be
> available in specific (future) versions of the R-FAQ so it would take a
> while until it could be preferred over the long-standing existing ID.
> Furthermore, such alternative identifiers wouldn't usually be
> known/visible as they would not be used as hyperlinks in the HTML manual
> itself: the navigation links would still be based on the node name and
> the section id on the section name. So I think there is little benefit
> in adding extra anchors.
>
> In the exceptional case of R-FAQ 7.31, renaming the node and adding a
> description for the auto-generated menu in the Info manual might be an
> option (but I didn't test this thoroughly):
>
>      @node FAQ 7 31
>      @nodedescription Why doesn't R think these numbers are equal?
>      @anchor{Why doesn't R think these numbers are equal?} @c old name
>      @section Why doesn't R think these numbers are equal?
>
> Best regards,
>
>         Sebastian Meyer
>
>
> Am 03.10.25 um 20:35 schrieb Michael Chirico:
> > Hi all,
> >
> > I happened to notice that linking to the 'User-defined macros' paragraph
> in
> > R-exts produces a less-than-fully-scrutable link [1]. grep-ing around I
> > found others peppered in the manuals, e.g. [2] [3].
> >
> > In markdown (the flavors I'm used to, at least), we'd use something like
> > {#User-defined-macros} to customize the link as well as make it more
> stable.
> >
> > I'm not particularly familiar with Texinfo, but a quick search around
> > suggests we could use '@anchor' tags to augment what's produced
> > automatically from '@node'. [4] [5]
> >
> > It's fairly minor but would be a nice quality-of-life improvement; if
> > agreed, I think it would be a nice R-dev-day issue, too. One important
> > consideration is back-compatibility -- we'd like to ensure any existing
> > links with the "ugly" text continue to work. I believe that just means
> > leaving the '@node' unchanged. An advanced 3rd-order consideration would
> be
> > to look at the history of the '@node' text and generate new '@anchor'
> > entries if any have changed to retroactively improve back-compatibility.
> >
> > Mike C
> >
> > [1]
> >
> https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#User_002ddefined-macros-1
> > [2]
> >
> https://cran.r-project.org/doc/manuals/r-release/R-admin.html#index-Installing-under-Unix_002dalikes
> > [3]
> >
> https://cran.r-project.org/doc/manuals/r-release/R-data.html#Spreadsheet_002dlike-data
> > [4]
> >
> https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#g_t_0040anchor
> > [aside, somewhat funny that Texinfo themselves leave this messy link here
> > :) ]
> > [5]
> https://www.gnu.org/software/texinfo/manual/texinfo/texinfo.html#Nodes
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>
>

	[[alternative HTML version deleted]]


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Oct  8 01:42:12 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Tue, 7 Oct 2025 16:42:12 -0700
Subject: [Rd] Is structure(NA, class = c("def",
 "condition")) a valid 'condition' object?
Message-ID: <CAFDcVCSHq6MYxSS_XUw7kQCj974=COC1b2NLES1Dx+-DSKi_Zw@mail.gmail.com>

I think structure(NA, class = c("def", "condition")) is a valid
'condition' object. Am I wrong?

BACKGROUND:

The abstract 'condition' class: why type or mode can a 'condition' object have?

In help("condition"), we can read that:

"Conditions are objects inheriting from the abstract class condition. ..."

and then it specifies the API, i.e. the methods it should support, e.g.

"The functions conditionMessage and conditionCall are generic
functions that return the message and call of a condition."

Then we have several functions for creating 'condition' objects, e.g.

> simpleCondition
function (message, call = NULL)
{
    class <- c("simpleCondition", "condition")
    structure(list(message = as.character(message), call = call),
        class = class)
}

AFAIK, all of them create 'condition' object of type 'list'.


CAN CONDITIONS BE ENVIRONMENTS OR ATOMIC OBJECTS?

However, is the list type a requirement? I cannot find it specified
anywhere. The way I interpret help("condition") and how it is
carefully written using terms like "abstract class" and not mentioning
the type anywhere, I take it as:

cnd1 <- structure(new.env(), class = c("abc", "condition"))

and

cnd2 <- structure(NA, class = c("def", "condition"))

are both valid 'condition' objects, as long as we define the S3
methods for `conditionMessage()` and `conditionCall()`, e.g.

conditionMessage.abc <- function(c) "boom"
conditionCall.abc <- function(c) list()

conditionMessage.def <- function(c) "boom"
conditionCall.def <- function(c) list()

FWIW, I create 'condition' objects of type NA in my 'R.oo' package
going back ~25 years.

Thanks,

Henrik


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Oct  8 14:32:35 2025
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 8 Oct 2025 08:32:35 -0400
Subject: [Rd] Is structure(NA, class = c("def",
 "condition")) a valid 'condition' object?
In-Reply-To: <CAFDcVCSHq6MYxSS_XUw7kQCj974=COC1b2NLES1Dx+-DSKi_Zw@mail.gmail.com>
References: <CAFDcVCSHq6MYxSS_XUw7kQCj974=COC1b2NLES1Dx+-DSKi_Zw@mail.gmail.com>
Message-ID: <6d4f9718-d1d6-4300-9a8e-2136503789d5@gmail.com>

Besides `conditionMessage` and `conditionCall`, base R also has methods 
defined for `as.character` and `print`, but they appear to make no 
assumptions about the object other than having `conditionMessage` and 
`conditionCall` defined.

The help page is silent about what type of thing `conditionCall()` 
should return, but the objects produced by the standard condition 
functions will return the `call` argument, which defaults to `NULL`, but 
could be a "call expression".

So I'm not sure your definition of the `conditionCall()` methods is 
going to work:  `list()` doesn't return an expression.  Returning 
`NULL` would be better.

Of course, in S3 "valid" isn't defined formally; it just means something 
that won't mess up.  So it's quite possible `list()` is okay.

Duncan Murdoch


On 2025-10-07 7:42 p.m., Henrik Bengtsson wrote:
> I think structure(NA, class = c("def", "condition")) is a valid
> 'condition' object. Am I wrong?
> 
> BACKGROUND:
> 
> The abstract 'condition' class: why type or mode can a 'condition' object have?
> 
> In help("condition"), we can read that:
> 
> "Conditions are objects inheriting from the abstract class condition. ..."
> 
> and then it specifies the API, i.e. the methods it should support, e.g.
> 
> "The functions conditionMessage and conditionCall are generic
> functions that return the message and call of a condition."
> 
> Then we have several functions for creating 'condition' objects, e.g.
> 
>> simpleCondition
> function (message, call = NULL)
> {
>      class <- c("simpleCondition", "condition")
>      structure(list(message = as.character(message), call = call),
>          class = class)
> }
> 
> AFAIK, all of them create 'condition' object of type 'list'.
> 
> 
> CAN CONDITIONS BE ENVIRONMENTS OR ATOMIC OBJECTS?
> 
> However, is the list type a requirement? I cannot find it specified
> anywhere. The way I interpret help("condition") and how it is
> carefully written using terms like "abstract class" and not mentioning
> the type anywhere, I take it as:
> 
> cnd1 <- structure(new.env(), class = c("abc", "condition"))
> 
> and
> 
> cnd2 <- structure(NA, class = c("def", "condition"))
> 
> are both valid 'condition' objects, as long as we define the S3
> methods for `conditionMessage()` and `conditionCall()`, e.g.
> 
> conditionMessage.abc <- function(c) "boom"
> conditionCall.abc <- function(c) list()
> 
> conditionMessage.def <- function(c) "boom"
> conditionCall.def <- function(c) list()
> 
> FWIW, I create 'condition' objects of type NA in my 'R.oo' package
> going back ~25 years.
> 
> Thanks,
> 
> Henrik
> 
> ______________________________________________
> R-devel at r-project.org mailing list
> https://stat.ethz.ch/mailman/listinfo/r-devel


From henr|k@bengt@@on @end|ng |rom gm@||@com  Wed Oct  8 17:43:03 2025
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Wed, 8 Oct 2025 08:43:03 -0700
Subject: [Rd] Is structure(NA, class = c("def",
 "condition")) a valid 'condition' object?
In-Reply-To: <6d4f9718-d1d6-4300-9a8e-2136503789d5@gmail.com>
References: <CAFDcVCSHq6MYxSS_XUw7kQCj974=COC1b2NLES1Dx+-DSKi_Zw@mail.gmail.com>
 <6d4f9718-d1d6-4300-9a8e-2136503789d5@gmail.com>
Message-ID: <CAFDcVCQseEVUfdnqqW1LQA4Ud_m-7quFiP6xw_BkLQ-gvP+1yQ@mail.gmail.com>

Thank you, Duncan.

It sounds like you're reading it the same as I, i.e. what
typeof(<condition>) should be is not specified.

Using list() in my tiny example was a thinko - NULL would indeed have
been better.

/Henrik

On Wed, Oct 8, 2025 at 5:32?AM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> Besides `conditionMessage` and `conditionCall`, base R also has methods
> defined for `as.character` and `print`, but they appear to make no
> assumptions about the object other than having `conditionMessage` and
> `conditionCall` defined.
>
> The help page is silent about what type of thing `conditionCall()`
> should return, but the objects produced by the standard condition
> functions will return the `call` argument, which defaults to `NULL`, but
> could be a "call expression".
>
> So I'm not sure your definition of the `conditionCall()` methods is
> going to work:  `list()` doesn't return an expression.  Returning
> `NULL` would be better.
>
> Of course, in S3 "valid" isn't defined formally; it just means something
> that won't mess up.  So it's quite possible `list()` is okay.
>
> Duncan Murdoch
>
>
> On 2025-10-07 7:42 p.m., Henrik Bengtsson wrote:
> > I think structure(NA, class = c("def", "condition")) is a valid
> > 'condition' object. Am I wrong?
> >
> > BACKGROUND:
> >
> > The abstract 'condition' class: why type or mode can a 'condition' object have?
> >
> > In help("condition"), we can read that:
> >
> > "Conditions are objects inheriting from the abstract class condition. ..."
> >
> > and then it specifies the API, i.e. the methods it should support, e.g.
> >
> > "The functions conditionMessage and conditionCall are generic
> > functions that return the message and call of a condition."
> >
> > Then we have several functions for creating 'condition' objects, e.g.
> >
> >> simpleCondition
> > function (message, call = NULL)
> > {
> >      class <- c("simpleCondition", "condition")
> >      structure(list(message = as.character(message), call = call),
> >          class = class)
> > }
> >
> > AFAIK, all of them create 'condition' object of type 'list'.
> >
> >
> > CAN CONDITIONS BE ENVIRONMENTS OR ATOMIC OBJECTS?
> >
> > However, is the list type a requirement? I cannot find it specified
> > anywhere. The way I interpret help("condition") and how it is
> > carefully written using terms like "abstract class" and not mentioning
> > the type anywhere, I take it as:
> >
> > cnd1 <- structure(new.env(), class = c("abc", "condition"))
> >
> > and
> >
> > cnd2 <- structure(NA, class = c("def", "condition"))
> >
> > are both valid 'condition' objects, as long as we define the S3
> > methods for `conditionMessage()` and `conditionCall()`, e.g.
> >
> > conditionMessage.abc <- function(c) "boom"
> > conditionCall.abc <- function(c) list()
> >
> > conditionMessage.def <- function(c) "boom"
> > conditionCall.def <- function(c) list()
> >
> > FWIW, I create 'condition' objects of type NA in my 'R.oo' package
> > going back ~25 years.
> >
> > Thanks,
> >
> > Henrik
> >
> > ______________________________________________
> > R-devel at r-project.org mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-devel
>


From |20241312 @end|ng |rom p||@n|@b|t@-p||@n|@@c@|n  Wed Oct  8 21:37:57 2025
From: |20241312 @end|ng |rom p||@n|@b|t@-p||@n|@@c@|n (RAIYYAN ABDULLA NADDIMULLA SHAIK)
Date: Thu, 9 Oct 2025 01:07:57 +0530
Subject: [Rd] Suggestion: Structured output for tools::checkRd()
Message-ID: <CA+KANzkvqR9owjUz4HK0NzoOi1DaQLbODhQMfZrw+=YQ9TuAOg@mail.gmail.com>

Hello R-devel,

While working with the output of tools::checkRd(), I noticed that the
function currently returns a classed character string in the format checkRd:
(%d) %s. In order to consume this output programmatically (e.g., for editor
integrations, reporting, or CI automation), one is forced to parse the
returned string to extract useful details like line numbers and
error/warning messages.

It seems like returning a more structured object, such as a list or data
frame with elements like line_number and finding, would make downstream use
much easier and more robust. For example, this would allow developers to
directly access relevant information without string parsing.

I see that the current method for displaying results, print.checkRd(),
essentially performs this string parsing for formatting:
https://github.com/r-devel/r-svn/blob/a2fb5899d5d7a8d21dfbfb4f710f70672784e672/src/library/tools/R/RdConv2.R#L1160-L1169

Would you consider updating tools::checkRd() to optionally return a more
structured result in a future R release?

Thanks for considering this suggestion!
I?d be happy to help test or discuss any proposed changes.

Best regards,
NSA RAIYYAN

-- 
The information contained in this electronic communicati...{{dropped:17}}


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Thu Oct  9 10:55:16 2025
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Thu, 9 Oct 2025 10:55:16 +0200
Subject: [Rd] Inaccuracy in DFBETA calculation for GLMs
In-Reply-To: <fake-VM-id.ff49be4b3af8bae3b24b3d8b7b5eb310@talos.iv>
References: <SA0PR01MB6458E10F0555D14089AB15F5F2E5A@SA0PR01MB6458.prod.exchangelabs.com>
Message-ID: <26855.30836.11450.93879@stat.math.ethz.ch>

>>>>> Ravi Varadhan via R-devel 
>>>>>     on Sat, 4 Oct 2025 13:34:48 +0000 writes:

    > Hi,
    > I have been calculating sensitivity diagnostics in GLMs.  I am noticing that the dfbeta() and influence() functions in base R are inaccurate for non-Gaussian GLMs.  Even though the help says that the DFBETAs can be inaccurate for GLMs, the accuracy can be substantially improved.

    > I was thinking of writing this up along with a proper fix to R Journal but then started wondering whether this is a well-known issue and it has been addressed in other packages.

    > Has the inaccuracy of DFBETA been addressed already?

    > Thank you,
    > Ravi

As nobody has replied till now:  No, I haven't heard yet about
such properties and even less that and how they can be
substantially improved (I assume you have "searched the net" for
that).
I agree that this would probably be a nice R journal paper when
accompanied with both math and code.

A subjective remark: Being statistically educated from ETH
Zurich and similar places (UW Seattle, Bellcore): I've been
convinced that such "leave-one-out" diagnostics are not
providing "true robustness" (against violiation of error
distribution assumptions etc), but one should rather use M- (and
MM-)estimation approaches providing a guaranteed breakdown point
above 2/n (or so, which I think is what you get with such
L.o.o. diagnostics: just look at the effect of one huge outlier
masking a large one).

For that reason, I would not want to substantially blow up our
base R code underlying DFBETA (which then has to be kept maintained
into "all" future),  but then I'm only speaking for myself and
not all of R core (and even less all of R using statisticians).

Martin



From mzyphur @end|ng |rom |n@t@t@@org  Tue Aug  5 10:50:00 2025
From: mzyphur @end|ng |rom |n@t@t@@org (Michael Zyphur)
Date: Tue, 05 Aug 2025 08:50:00 +0000 (UTC)
Subject: [R-sig-Geo] Network Structures and Hypergraphs - free seminar
Message-ID: <0WPYqvOcRbSHmDe7uAt8QQ@geopod-ismtpd-16>

Hi everyone

Instats is excited to offer a free seminar on Network Structures and Hypergraphs <https://instats.org/seminar/network-structures-and-hypergraphs-free>, running Livestreaming Sep 4th and led by professor Moses Boudourides from the Data Science Graduate Program, School of Professional Studies, Northwestern University. As recent advances in network science push beyond the limits of traditional graph theory, hypergraphs have emerged as a powerful framework for capturing the multi-node relationships that characterize social interaction, digital communication, biophysical systems, and complex dynamic systems more broadly. This introductory seminar equips PhD students, faculty, and professional researchers with the conceptual foundations of hypergraph theory while providing hands-on demonstrations in Python to analyze real-world data. Serving as a primer for professor Boudourides?s forthcoming four-day workshop ?Predicting Network Structure with Hypergraphs,? the session explores the distinctions between graphs and hypergraphs, showcases cutting-edge Python libraries, and illustrates how hypergraph models better represent group-level dynamics such as community formation, contagion, and collective decision-making. Participants will leave with a solid grasp of hypergraph basics and the practical skills to begin applying these methods in their own research, setting the stage for deeper exploration of hyperlink prediction and network reconstruction in future study.

Sign up today <https://instats.org/seminar/network-structures-and-hypergraphs-free> to secure your spot, and feel free to share this opportunity with colleagues and students who might benefit!


Best wishes

Michael Zyphur
Professor and Director
Institute for Statistical and Data Science
https://instats.org
	[[alternative HTML version deleted]]


From yex|@ngm@up @end|ng |rom out|ook@com  Wed Aug  6 19:25:12 2025
From: yex|@ngm@up @end|ng |rom out|ook@com (Xiang Ye)
Date: Wed, 6 Aug 2025 17:25:12 +0000
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
Message-ID: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>

Dear community,

I am trapped by a seemingly easy task. I would like to write a short R script to retrieve the interior boundary (points) of a polygon sf object, like the state boundary of the Contiguous United States, but without the outline.

I tried several methods, with none fulfilling my objective. Below is the code, with my observations in the comments:

# Objective: Retrieve the internal boundary of a polygon data set

library(tidyverse)
library(sf)
library(spData)

polygon=st_geometry(us_states)
plot(polygon)

# Method 1: Use st_difference()
st_union(polygon) -> border
plot(border)
st_difference(polygon, border) -> interior
plot(interior) # You can tell that the result is weird.

# Method 2: Retrieve vertices as points, then use st_difference()
st_cast(polygon, 'POINT') -> points_polygon
points_polygon # 3585 features
st_cast(border, 'POINT') -> points_border
points_border # 1275 features
st_difference(points_polygon, points_border) -> points_interior # About 2 minutes to execute
points_interior # 4.57 million features, about 2 GB. why?

# Methods 3: Use st_disjoint instead of st_difference()
polygon[border, op=st_disjoint] # Empty set
points_polygon[border, op=st_disjoint] -> points_interior2
points_interior2 # 132 features; plot() it and doesn't look right
points_polygon[points_border, op=st_disjoint] -> points_interior3
points_interior3 # 3585 features, meaning no points have been taken out

# Methods 4: Retrieve vertices as coordinates, converting them into tibbles, then anti-join the border coordinates
st_coordinates(polygon) %>% as_tibble -> coords_polygon
coords_polygon# A tibble: 3,585 × 5
st_coordinates(border) %>% as_tibble -> coords_border
coords_border # A tibble: 1,275 × 5
anti_join(coords_polygon, coords_border) -> coords_interior
coords_interior # A tibble: 3,585 × 5, meaning no points have been taken out, and implying no coordinates in coords_border coincides with the coordinates in coords_polygon. This is just not reasonable.

Any comments on why I fail and/or how to do it correctly will be helpful.
Thank you in advance!

叶翔 YE, Xiang
THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
Ph.D. in Spatial Statistics


	[[alternative HTML version deleted]]


From dexter@|ocke @end|ng |rom gm@||@com  Wed Aug  6 19:27:55 2025
From: dexter@|ocke @end|ng |rom gm@||@com (Dexter Locke)
Date: Wed, 6 Aug 2025 13:27:55 -0400
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
Message-ID: <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>

library(tidyverse)
library(sf)
library(spData)

polygon=st_geometry(us_states)
plot(polygon)

polygon |> st_as_sf() |> summarise() |> plot()


On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:

> Dear community,
>
> I am trapped by a seemingly easy task. I would like to write a short R
> script to retrieve the interior boundary (points) of a polygon sf object,
> like the state boundary of the Contiguous United States, but without the
> outline.
>
> I tried several methods, with none fulfilling my objective. Below is the
> code, with my observations in the comments:
>
> # Objective: Retrieve the internal boundary of a polygon data set
>
> library(tidyverse)
> library(sf)
> library(spData)
>
> polygon=st_geometry(us_states)
> plot(polygon)
>
> # Method 1: Use st_difference()
> st_union(polygon) -> border
> plot(border)
> st_difference(polygon, border) -> interior
> plot(interior) # You can tell that the result is weird.
>
> # Method 2: Retrieve vertices as points, then use st_difference()
> st_cast(polygon, 'POINT') -> points_polygon
> points_polygon # 3585 features
> st_cast(border, 'POINT') -> points_border
> points_border # 1275 features
> st_difference(points_polygon, points_border) -> points_interior # About 2
> minutes to execute
> points_interior # 4.57 million features, about 2 GB. why?
>
> # Methods 3: Use st_disjoint instead of st_difference()
> polygon[border, op=st_disjoint] # Empty set
> points_polygon[border, op=st_disjoint] -> points_interior2
> points_interior2 # 132 features; plot() it and doesn't look right
> points_polygon[points_border, op=st_disjoint] -> points_interior3
> points_interior3 # 3585 features, meaning no points have been taken out
>
> # Methods 4: Retrieve vertices as coordinates, converting them into
> tibbles, then anti-join the border coordinates
> st_coordinates(polygon) %>% as_tibble -> coords_polygon
> coords_polygon# A tibble: 3,585 ? 5
> st_coordinates(border) %>% as_tibble -> coords_border
> coords_border # A tibble: 1,275 ? 5
> anti_join(coords_polygon, coords_border) -> coords_interior
> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
> out, and implying no coordinates in coords_border coincides with the
> coordinates in coords_polygon. This is just not reasonable.
>
> Any comments on why I fail and/or how to do it correctly will be helpful.
> Thank you in advance!
>
> ?? YE, Xiang
> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
> Ph.D. in Spatial Statistics
>
>
>         [[alternative HTML version deleted]]
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>

	[[alternative HTML version deleted]]


From @ndre@@g||@rd| @end|ng |rom un|m|b@|t  Wed Aug  6 19:56:07 2025
From: @ndre@@g||@rd| @end|ng |rom un|m|b@|t (Andrea Gilardi - Unimib)
Date: Wed, 6 Aug 2025 19:56:07 +0200
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
Message-ID: <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>

Hi Xiang! I would use the following approach:

library(tidyverse)
library(sf)
library(spData)
# You need the development version of sfnetworks:
# remotes::install_github("luukvdmeer/sfnetworks")
library(sfnetworks) # Exports st_duplicated

polygon = st_geometry(us_states)
pts_matrix <- st_coordinates(polygon)
pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs = 
st_crs(polygon)) |> st_cast("POINT")
pts_dup <- st_duplicated(pts_sfc)
pts_interior <- pts_sfc[pts_dup]

plot(polygon, reset = FALSE)
points(pts_interior, cex = 1, pch = 16, col = 2)

You can also check the output here: 
https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e

Hope that's helpful.

Andrea

On 8/6/2025 7:27 PM, Dexter Locke wrote:
> library(tidyverse)
> library(sf)
> library(spData)
>
> polygon=st_geometry(us_states)
> plot(polygon)
>
> polygon |> st_as_sf() |> summarise() |> plot()
>
>
> On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:
>
>> Dear community,
>>
>> I am trapped by a seemingly easy task. I would like to write a short R
>> script to retrieve the interior boundary (points) of a polygon sf object,
>> like the state boundary of the Contiguous United States, but without the
>> outline.
>>
>> I tried several methods, with none fulfilling my objective. Below is the
>> code, with my observations in the comments:
>>
>> # Objective: Retrieve the internal boundary of a polygon data set
>>
>> library(tidyverse)
>> library(sf)
>> library(spData)
>>
>> polygon=st_geometry(us_states)
>> plot(polygon)
>>
>> # Method 1: Use st_difference()
>> st_union(polygon) -> border
>> plot(border)
>> st_difference(polygon, border) -> interior
>> plot(interior) # You can tell that the result is weird.
>>
>> # Method 2: Retrieve vertices as points, then use st_difference()
>> st_cast(polygon, 'POINT') -> points_polygon
>> points_polygon # 3585 features
>> st_cast(border, 'POINT') -> points_border
>> points_border # 1275 features
>> st_difference(points_polygon, points_border) -> points_interior # About 2
>> minutes to execute
>> points_interior # 4.57 million features, about 2 GB. why?
>>
>> # Methods 3: Use st_disjoint instead of st_difference()
>> polygon[border, op=st_disjoint] # Empty set
>> points_polygon[border, op=st_disjoint] -> points_interior2
>> points_interior2 # 132 features; plot() it and doesn't look right
>> points_polygon[points_border, op=st_disjoint] -> points_interior3
>> points_interior3 # 3585 features, meaning no points have been taken out
>>
>> # Methods 4: Retrieve vertices as coordinates, converting them into
>> tibbles, then anti-join the border coordinates
>> st_coordinates(polygon) %>% as_tibble -> coords_polygon
>> coords_polygon# A tibble: 3,585 ? 5
>> st_coordinates(border) %>% as_tibble -> coords_border
>> coords_border # A tibble: 1,275 ? 5
>> anti_join(coords_polygon, coords_border) -> coords_interior
>> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
>> out, and implying no coordinates in coords_border coincides with the
>> coordinates in coords_polygon. This is just not reasonable.
>>
>> Any comments on why I fail and/or how to do it correctly will be helpful.
>> Thank you in advance!
>>
>> ?? YE, Xiang
>> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
>> Ph.D. in Spatial Statistics
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-sig-Geo mailing list
>> R-sig-Geo at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>>
> 	[[alternative HTML version deleted]]
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo


From jo@|@h@p@rry @end|ng |rom gm@||@com  Wed Aug  6 20:14:01 2025
From: jo@|@h@p@rry @end|ng |rom gm@||@com (Josiah Parry)
Date: Wed, 6 Aug 2025 11:14:01 -0700
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
Message-ID: <CAL3ufU+niBE0+h+MXn-18aoykvHXyLL0MOZr4816xPRq173XCg@mail.gmail.com>

I'm not sure I fully understand the objective. But this is how I would do
it with rsgeo?I'm not sure how to do it with sf

library(sf)
library(spData)
library(rsgeo)

union_geoms(as_rsgeo(us_states)) |>
  expand_geoms() |>
  .subset2(1) |>
  head(1) |>
  cast_geoms("multipoint") |>
  st_as_sfc() |>
  plot()

[image: image.png]


On Wed, Aug 6, 2025 at 10:56?AM Andrea Gilardi - Unimib <
andrea.gilardi at unimib.it> wrote:

> Hi Xiang! I would use the following approach:
>
> library(tidyverse)
> library(sf)
> library(spData)
> # You need the development version of sfnetworks:
> # remotes::install_github("luukvdmeer/sfnetworks")
> library(sfnetworks) # Exports st_duplicated
>
> polygon = st_geometry(us_states)
> pts_matrix <- st_coordinates(polygon)
> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
> st_crs(polygon)) |> st_cast("POINT")
> pts_dup <- st_duplicated(pts_sfc)
> pts_interior <- pts_sfc[pts_dup]
>
> plot(polygon, reset = FALSE)
> points(pts_interior, cex = 1, pch = 16, col = 2)
>
> You can also check the output here:
> https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e
>
> Hope that's helpful.
>
> Andrea
>
> On 8/6/2025 7:27 PM, Dexter Locke wrote:
> > library(tidyverse)
> > library(sf)
> > library(spData)
> >
> > polygon=st_geometry(us_states)
> > plot(polygon)
> >
> > polygon |> st_as_sf() |> summarise() |> plot()
> >
> >
> > On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:
> >
> >> Dear community,
> >>
> >> I am trapped by a seemingly easy task. I would like to write a short R
> >> script to retrieve the interior boundary (points) of a polygon sf
> object,
> >> like the state boundary of the Contiguous United States, but without the
> >> outline.
> >>
> >> I tried several methods, with none fulfilling my objective. Below is the
> >> code, with my observations in the comments:
> >>
> >> # Objective: Retrieve the internal boundary of a polygon data set
> >>
> >> library(tidyverse)
> >> library(sf)
> >> library(spData)
> >>
> >> polygon=st_geometry(us_states)
> >> plot(polygon)
> >>
> >> # Method 1: Use st_difference()
> >> st_union(polygon) -> border
> >> plot(border)
> >> st_difference(polygon, border) -> interior
> >> plot(interior) # You can tell that the result is weird.
> >>
> >> # Method 2: Retrieve vertices as points, then use st_difference()
> >> st_cast(polygon, 'POINT') -> points_polygon
> >> points_polygon # 3585 features
> >> st_cast(border, 'POINT') -> points_border
> >> points_border # 1275 features
> >> st_difference(points_polygon, points_border) -> points_interior # About
> 2
> >> minutes to execute
> >> points_interior # 4.57 million features, about 2 GB. why?
> >>
> >> # Methods 3: Use st_disjoint instead of st_difference()
> >> polygon[border, op=st_disjoint] # Empty set
> >> points_polygon[border, op=st_disjoint] -> points_interior2
> >> points_interior2 # 132 features; plot() it and doesn't look right
> >> points_polygon[points_border, op=st_disjoint] -> points_interior3
> >> points_interior3 # 3585 features, meaning no points have been taken out
> >>
> >> # Methods 4: Retrieve vertices as coordinates, converting them into
> >> tibbles, then anti-join the border coordinates
> >> st_coordinates(polygon) %>% as_tibble -> coords_polygon
> >> coords_polygon# A tibble: 3,585 ? 5
> >> st_coordinates(border) %>% as_tibble -> coords_border
> >> coords_border # A tibble: 1,275 ? 5
> >> anti_join(coords_polygon, coords_border) -> coords_interior
> >> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
> >> out, and implying no coordinates in coords_border coincides with the
> >> coordinates in coords_polygon. This is just not reasonable.
> >>
> >> Any comments on why I fail and/or how to do it correctly will be
> helpful.
> >> Thank you in advance!
> >>
> >> ?? YE, Xiang
> >> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
> >> Ph.D. in Spatial Statistics
> >>
> >>
> >>          [[alternative HTML version deleted]]
> >>
> >> _______________________________________________
> >> R-sig-Geo mailing list
> >> R-sig-Geo at r-project.org
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
> >>
> >       [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-sig-Geo mailing list
> > R-sig-Geo at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://stat.ethz.ch/pipermail/r-sig-geo/attachments/20250806/0ae590d3/attachment.html>

-------------- next part --------------
A non-text attachment was scrubbed...
Name: image.png
Type: image/png
Size: 64266 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-sig-geo/attachments/20250806/0ae590d3/attachment.png>

From z|v@n@k@r@m@n @end|ng |rom gm@||@com  Wed Aug  6 21:07:30 2025
From: z|v@n@k@r@m@n @end|ng |rom gm@||@com (Zivan Karaman)
Date: Wed, 6 Aug 2025 21:07:30 +0200
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <CAL3ufU+niBE0+h+MXn-18aoykvHXyLL0MOZr4816xPRq173XCg@mail.gmail.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
 <CAL3ufU+niBE0+h+MXn-18aoykvHXyLL0MOZr4816xPRq173XCg@mail.gmail.com>
Message-ID: <CAKtE6yOf8rb--tCNhEW9XQ5KTzNjNWC211w61W1OBGPBLXC_Cg@mail.gmail.com>

Hi,

I'm not sure I understand what you want to achieve or why, but here's a try:

# Load required libraries
library(sf)
library(spData)

# Options to avoid messages from tigris
polygon <- st_geometry(us_states)

# Extract the shared borders only (where geometries touch more than once)
internal_lines <- st_intersection(polygon) |>
  st_collection_extract("LINESTRING")

# Now remove the external boundary
# Step 1: Union all states into a single polygon (whole USA outline)
national_outline <- st_union(polygon) |> st_boundary()
# Step 2: Remove outer boundary from internal_lines
internal_only <- st_difference(internal_lines, national_outline)

# Plot result
plot(st_geometry(national_outline), col = "blue", lwd = 0.5, main =
"Interior Boundaries Only")
plot(st_geometry(internal_only), col = "red", lwd = 0.5, add = TRUE)

Best,
Zivan


On Wed, Aug 6, 2025 at 8:24?PM Josiah Parry <josiah.parry at gmail.com> wrote:
>
> I'm not sure I fully understand the objective. But this is how I would do it with rsgeo?I'm not sure how to do it with sf
>
> library(sf)
> library(spData)
> library(rsgeo)
>
> union_geoms(as_rsgeo(us_states)) |>
>   expand_geoms() |>
>   .subset2(1) |>
>   head(1) |>
>   cast_geoms("multipoint") |>
>   st_as_sfc() |>
>   plot()
>
>
>
>
> On Wed, Aug 6, 2025 at 10:56?AM Andrea Gilardi - Unimib <andrea.gilardi at unimib.it> wrote:
>>
>> Hi Xiang! I would use the following approach:
>>
>> library(tidyverse)
>> library(sf)
>> library(spData)
>> # You need the development version of sfnetworks:
>> # remotes::install_github("luukvdmeer/sfnetworks")
>> library(sfnetworks) # Exports st_duplicated
>>
>> polygon = st_geometry(us_states)
>> pts_matrix <- st_coordinates(polygon)
>> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
>> st_crs(polygon)) |> st_cast("POINT")
>> pts_dup <- st_duplicated(pts_sfc)
>> pts_interior <- pts_sfc[pts_dup]
>>
>> plot(polygon, reset = FALSE)
>> points(pts_interior, cex = 1, pch = 16, col = 2)
>>
>> You can also check the output here:
>> https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e
>>
>> Hope that's helpful.
>>
>> Andrea
>>
>> On 8/6/2025 7:27 PM, Dexter Locke wrote:
>> > library(tidyverse)
>> > library(sf)
>> > library(spData)
>> >
>> > polygon=st_geometry(us_states)
>> > plot(polygon)
>> >
>> > polygon |> st_as_sf() |> summarise() |> plot()
>> >
>> >
>> > On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:
>> >
>> >> Dear community,
>> >>
>> >> I am trapped by a seemingly easy task. I would like to write a short R
>> >> script to retrieve the interior boundary (points) of a polygon sf object,
>> >> like the state boundary of the Contiguous United States, but without the
>> >> outline.
>> >>
>> >> I tried several methods, with none fulfilling my objective. Below is the
>> >> code, with my observations in the comments:
>> >>
>> >> # Objective: Retrieve the internal boundary of a polygon data set
>> >>
>> >> library(tidyverse)
>> >> library(sf)
>> >> library(spData)
>> >>
>> >> polygon=st_geometry(us_states)
>> >> plot(polygon)
>> >>
>> >> # Method 1: Use st_difference()
>> >> st_union(polygon) -> border
>> >> plot(border)
>> >> st_difference(polygon, border) -> interior
>> >> plot(interior) # You can tell that the result is weird.
>> >>
>> >> # Method 2: Retrieve vertices as points, then use st_difference()
>> >> st_cast(polygon, 'POINT') -> points_polygon
>> >> points_polygon # 3585 features
>> >> st_cast(border, 'POINT') -> points_border
>> >> points_border # 1275 features
>> >> st_difference(points_polygon, points_border) -> points_interior # About 2
>> >> minutes to execute
>> >> points_interior # 4.57 million features, about 2 GB. why?
>> >>
>> >> # Methods 3: Use st_disjoint instead of st_difference()
>> >> polygon[border, op=st_disjoint] # Empty set
>> >> points_polygon[border, op=st_disjoint] -> points_interior2
>> >> points_interior2 # 132 features; plot() it and doesn't look right
>> >> points_polygon[points_border, op=st_disjoint] -> points_interior3
>> >> points_interior3 # 3585 features, meaning no points have been taken out
>> >>
>> >> # Methods 4: Retrieve vertices as coordinates, converting them into
>> >> tibbles, then anti-join the border coordinates
>> >> st_coordinates(polygon) %>% as_tibble -> coords_polygon
>> >> coords_polygon# A tibble: 3,585 ? 5
>> >> st_coordinates(border) %>% as_tibble -> coords_border
>> >> coords_border # A tibble: 1,275 ? 5
>> >> anti_join(coords_polygon, coords_border) -> coords_interior
>> >> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
>> >> out, and implying no coordinates in coords_border coincides with the
>> >> coordinates in coords_polygon. This is just not reasonable.
>> >>
>> >> Any comments on why I fail and/or how to do it correctly will be helpful.
>> >> Thank you in advance!
>> >>
>> >> ?? YE, Xiang
>> >> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
>> >> Ph.D. in Spatial Statistics
>> >>
>> >>
>> >>          [[alternative HTML version deleted]]
>> >>
>> >> _______________________________________________
>> >> R-sig-Geo mailing list
>> >> R-sig-Geo at r-project.org
>> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>> >>
>> >       [[alternative HTML version deleted]]
>> >
>> > _______________________________________________
>> > R-sig-Geo mailing list
>> > R-sig-Geo at r-project.org
>> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>>
>> _______________________________________________
>> R-sig-Geo mailing list
>> R-sig-Geo at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo


From yex|@ngm@up @end|ng |rom out|ook@com  Fri Aug  8 07:40:37 2025
From: yex|@ngm@up @end|ng |rom out|ook@com (Xiang Ye)
Date: Fri, 8 Aug 2025 05:40:37 +0000
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
Message-ID: <DM6PR11MB33217CAC11001CF24FEFAB0FB02FA@DM6PR11MB3321.namprd11.prod.outlook.com>

Thank you Dexter, for your quick response. But what I would like to have are the interior boundaries, not the exterior one.
________________________________
From: Dexter Locke <dexter.locke at gmail.com>
Sent: Thursday, August 7, 2025 01:27
To: Xiang Ye <yexiangmaup at outlook.com>
Cc: r-sig-geo at r-project.org <r-sig-geo at r-project.org>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object

library(tidyverse)
library(sf)
library(spData)

polygon=st_geometry(us_states)
plot(polygon)

polygon |> st_as_sf() |> summarise() |> plot()


On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com<mailto:yexiangmaup at outlook.com>> wrote:
Dear community,

I am trapped by a seemingly easy task. I would like to write a short R script to retrieve the interior boundary (points) of a polygon sf object, like the state boundary of the Contiguous United States, but without the outline.

I tried several methods, with none fulfilling my objective. Below is the code, with my observations in the comments:

# Objective: Retrieve the internal boundary of a polygon data set

library(tidyverse)
library(sf)
library(spData)

polygon=st_geometry(us_states)
plot(polygon)

# Method 1: Use st_difference()
st_union(polygon) -> border
plot(border)
st_difference(polygon, border) -> interior
plot(interior) # You can tell that the result is weird.

# Method 2: Retrieve vertices as points, then use st_difference()
st_cast(polygon, 'POINT') -> points_polygon
points_polygon # 3585 features
st_cast(border, 'POINT') -> points_border
points_border # 1275 features
st_difference(points_polygon, points_border) -> points_interior # About 2 minutes to execute
points_interior # 4.57 million features, about 2 GB. why?

# Methods 3: Use st_disjoint instead of st_difference()
polygon[border, op=st_disjoint] # Empty set
points_polygon[border, op=st_disjoint] -> points_interior2
points_interior2 # 132 features; plot() it and doesn't look right
points_polygon[points_border, op=st_disjoint] -> points_interior3
points_interior3 # 3585 features, meaning no points have been taken out

# Methods 4: Retrieve vertices as coordinates, converting them into tibbles, then anti-join the border coordinates
st_coordinates(polygon) %>% as_tibble -> coords_polygon
coords_polygon# A tibble: 3,585 ? 5
st_coordinates(border) %>% as_tibble -> coords_border
coords_border # A tibble: 1,275 ? 5
anti_join(coords_polygon, coords_border) -> coords_interior
coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken out, and implying no coordinates in coords_border coincides with the coordinates in coords_polygon. This is just not reasonable.

Any comments on why I fail and/or how to do it correctly will be helpful.
Thank you in advance!

?? YE, Xiang
THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
Ph.D. in Spatial Statistics


        [[alternative HTML version deleted]]

_______________________________________________
R-sig-Geo mailing list
R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
https://stat.ethz.ch/mailman/listinfo/r-sig-geo

	[[alternative HTML version deleted]]


From yex|@ngm@up @end|ng |rom out|ook@com  Fri Aug  8 08:39:10 2025
From: yex|@ngm@up @end|ng |rom out|ook@com (Xiang Ye)
Date: Fri, 8 Aug 2025 06:39:10 +0000
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
Message-ID: <DM6PR11MB3321C2657B36AE91D4DCAF55B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>

Dear Andrea,

Thank you for your detailed response. I followed your instructions carefully, and was able to get the expected results.

St_duplicated() is cool!

I have two following questions.


  1.
Why st_duplicated() works?

My guess is that for a typical (multi)polygon sf object, all vertices on the interior borders will be adopted twice to form polygons. Technically, this makes them appear twice in the geometry column of the data set. Meanwhile, vertices on the exterior borders only appear once. When checked by st_duplicated(), all the second appearance of the interior-border vertices will be marked true, and thus they are extracted.
Is my understanding correct?


  1.
Can we simplify a sentence?

In the script, there is a sentence:
pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs = st_crs(polygon)) |> st_cast("POINT")
Is this sentence equal to the following one?
pts_sfc_2 <- st_cast(polygon, 'point')
I experimented by myself, and find identical(pts_sfc, pts_sfc_2)==FALSE. However, identical(st_duplicated(pts_sfc), st_duplicated(pts_sfc_2))==TRUE.

Again, thank you so much for your awesome solution!

Xiang

________________________________
From: Andrea Gilardi - Unimib <andrea.gilardi at unimib.it>
Sent: Thursday, August 7, 2025 01:56
To: Xiang Ye <yexiangmaup at outlook.com>
Cc: r-sig-geo at r-project.org <r-sig-geo at r-project.org>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object

Hi Xiang! I would use the following approach:

library(tidyverse)
library(sf)
library(spData)
# You need the development version of sfnetworks:
# remotes::install_github("luukvdmeer/sfnetworks")
library(sfnetworks) # Exports st_duplicated

polygon = st_geometry(us_states)
pts_matrix <- st_coordinates(polygon)
pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
st_crs(polygon)) |> st_cast("POINT")
pts_dup <- st_duplicated(pts_sfc)
pts_interior <- pts_sfc[pts_dup]

plot(polygon, reset = FALSE)
points(pts_interior, cex = 1, pch = 16, col = 2)

You can also check the output here:
https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e

Hope that's helpful.

Andrea

On 8/6/2025 7:27 PM, Dexter Locke wrote:
> library(tidyverse)
> library(sf)
> library(spData)
>
> polygon=st_geometry(us_states)
> plot(polygon)
>
> polygon |> st_as_sf() |> summarise() |> plot()
>
>
> On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:
>
>> Dear community,
>>
>> I am trapped by a seemingly easy task. I would like to write a short R
>> script to retrieve the interior boundary (points) of a polygon sf object,
>> like the state boundary of the Contiguous United States, but without the
>> outline.
>>
>> I tried several methods, with none fulfilling my objective. Below is the
>> code, with my observations in the comments:
>>
>> # Objective: Retrieve the internal boundary of a polygon data set
>>
>> library(tidyverse)
>> library(sf)
>> library(spData)
>>
>> polygon=st_geometry(us_states)
>> plot(polygon)
>>
>> # Method 1: Use st_difference()
>> st_union(polygon) -> border
>> plot(border)
>> st_difference(polygon, border) -> interior
>> plot(interior) # You can tell that the result is weird.
>>
>> # Method 2: Retrieve vertices as points, then use st_difference()
>> st_cast(polygon, 'POINT') -> points_polygon
>> points_polygon # 3585 features
>> st_cast(border, 'POINT') -> points_border
>> points_border # 1275 features
>> st_difference(points_polygon, points_border) -> points_interior # About 2
>> minutes to execute
>> points_interior # 4.57 million features, about 2 GB. why?
>>
>> # Methods 3: Use st_disjoint instead of st_difference()
>> polygon[border, op=st_disjoint] # Empty set
>> points_polygon[border, op=st_disjoint] -> points_interior2
>> points_interior2 # 132 features; plot() it and doesn't look right
>> points_polygon[points_border, op=st_disjoint] -> points_interior3
>> points_interior3 # 3585 features, meaning no points have been taken out
>>
>> # Methods 4: Retrieve vertices as coordinates, converting them into
>> tibbles, then anti-join the border coordinates
>> st_coordinates(polygon) %>% as_tibble -> coords_polygon
>> coords_polygon# A tibble: 3,585 ? 5
>> st_coordinates(border) %>% as_tibble -> coords_border
>> coords_border # A tibble: 1,275 ? 5
>> anti_join(coords_polygon, coords_border) -> coords_interior
>> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
>> out, and implying no coordinates in coords_border coincides with the
>> coordinates in coords_polygon. This is just not reasonable.
>>
>> Any comments on why I fail and/or how to do it correctly will be helpful.
>> Thank you in advance!
>>
>> ?? YE, Xiang
>> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
>> Ph.D. in Spatial Statistics
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-sig-Geo mailing list
>> R-sig-Geo at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>>
>        [[alternative HTML version deleted]]
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo

	[[alternative HTML version deleted]]


From @ndre@@g||@rd| @end|ng |rom un|m|b@|t  Fri Aug  8 16:20:24 2025
From: @ndre@@g||@rd| @end|ng |rom un|m|b@|t (Andrea Gilardi - Unimib)
Date: Fri, 8 Aug 2025 16:20:24 +0200
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <DM6PR11MB3321C2657B36AE91D4DCAF55B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
 <DM6PR11MB3321C2657B36AE91D4DCAF55B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>
Message-ID: <4d245064-8b71-44f5-937f-2b54df987beb@unimib.it>

Dear Xiang,


thanks for your kind words.


1. The underlying assumption behind st_duplicated is that the polygons 
used to construct the multipolygon share some vertices in the interior 
part of the multipolygon. Your explanation and understandings are 
correct. If you want to check the implementation, see here: 
https://github.com/luukvdmeer/sfnetworks/blob/c6eb10a05768f570e94981e826de8ee3f7fb7fce/R/utils.R#L21


2. Yes, you are correct, you can simply use st_cast(..., "POINT"). I'm 
not sure whether one of the two approaches is much faster than the 
other, but I guess it doesn't matter here.


Kind regards

Andrea


On 8/8/2025 8:39 AM, Xiang Ye wrote:
> Dear Andrea,
>
> Thank you for your detailed response. I followed your instructions 
> carefully, and was able to get the expected results.
>
> St_duplicated() is cool!
>
> I have two following questions.
>
> 1.
>     Why st_duplicated() works?
>
> My guess is that for a typical (multi)polygon sf object, all vertices 
> on the interior borders will be adopted twice to form polygons. 
> Technically, this makes them appear twice in the geometry column of 
> the data set. Meanwhile, vertices on the exterior borders only appear 
> once. When checked by st_duplicated(), all the second appearance of 
> the interior-border vertices will be marked true, and thus they are 
> extracted.
> Is my understanding correct?
>
> 2.
>     Can we simplify a sentence?
>
> In the script, there is a sentence:
> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs = 
> st_crs(polygon)) |> st_cast("POINT")
> Is this sentence equal to the following one?
> pts_sfc_2 <- st_cast(polygon, 'point')
> I experimented by myself, and find identical(pts_sfc, 
> pts_sfc_2)==FALSE. However, identical(st_duplicated(pts_sfc), 
> st_duplicated(pts_sfc_2))==TRUE.
>
> Again, thank you so much for your awesome solution!
>
> Xiang
>
> ------------------------------------------------------------------------
> *From:* Andrea Gilardi - Unimib <andrea.gilardi at unimib.it>
> *Sent:* Thursday, August 7, 2025 01:56
> *To:* Xiang Ye <yexiangmaup at outlook.com>
> *Cc:* r-sig-geo at r-project.org <r-sig-geo at r-project.org>
> *Subject:* Re: [R-sig-Geo] How to retrieve the interior boundary 
> (points) of a polygon sf object
> Hi Xiang! I would use the following approach:
>
> library(tidyverse)
> library(sf)
> library(spData)
> # You need the development version of sfnetworks:
> # remotes::install_github("luukvdmeer/sfnetworks")
> library(sfnetworks) # Exports st_duplicated
>
> polygon = st_geometry(us_states)
> pts_matrix <- st_coordinates(polygon)
> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
> st_crs(polygon)) |> st_cast("POINT")
> pts_dup <- st_duplicated(pts_sfc)
> pts_interior <- pts_sfc[pts_dup]
>
> plot(polygon, reset = FALSE)
> points(pts_interior, cex = 1, pch = 16, col = 2)
>
> You can also check the output here:
> https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e
>
> Hope that's helpful.
>
> Andrea
>
> On 8/6/2025 7:27 PM, Dexter Locke wrote:
> > library(tidyverse)
> > library(sf)
> > library(spData)
> >
> > polygon=st_geometry(us_states)
> > plot(polygon)
> >
> > polygon |> st_as_sf() |> summarise() |> plot()
> >
> >
> > On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:
> >
> >> Dear community,
> >>
> >> I am trapped by a seemingly easy task. I would like to write a short R
> >> script to retrieve the interior boundary (points) of a polygon sf 
> object,
> >> like the state boundary of the Contiguous United States, but 
> without the
> >> outline.
> >>
> >> I tried several methods, with none fulfilling my objective. Below 
> is the
> >> code, with my observations in the comments:
> >>
> >> # Objective: Retrieve the internal boundary of a polygon data set
> >>
> >> library(tidyverse)
> >> library(sf)
> >> library(spData)
> >>
> >> polygon=st_geometry(us_states)
> >> plot(polygon)
> >>
> >> # Method 1: Use st_difference()
> >> st_union(polygon) -> border
> >> plot(border)
> >> st_difference(polygon, border) -> interior
> >> plot(interior) # You can tell that the result is weird.
> >>
> >> # Method 2: Retrieve vertices as points, then use st_difference()
> >> st_cast(polygon, 'POINT') -> points_polygon
> >> points_polygon # 3585 features
> >> st_cast(border, 'POINT') -> points_border
> >> points_border # 1275 features
> >> st_difference(points_polygon, points_border) -> points_interior # 
> About 2
> >> minutes to execute
> >> points_interior # 4.57 million features, about 2 GB. why?
> >>
> >> # Methods 3: Use st_disjoint instead of st_difference()
> >> polygon[border, op=st_disjoint] # Empty set
> >> points_polygon[border, op=st_disjoint] -> points_interior2
> >> points_interior2 # 132 features; plot() it and doesn't look right
> >> points_polygon[points_border, op=st_disjoint] -> points_interior3
> >> points_interior3 # 3585 features, meaning no points have been taken out
> >>
> >> # Methods 4: Retrieve vertices as coordinates, converting them into
> >> tibbles, then anti-join the border coordinates
> >> st_coordinates(polygon) %>% as_tibble -> coords_polygon
> >> coords_polygon# A tibble: 3,585 ? 5
> >> st_coordinates(border) %>% as_tibble -> coords_border
> >> coords_border # A tibble: 1,275 ? 5
> >> anti_join(coords_polygon, coords_border) -> coords_interior
> >> coords_interior # A tibble: 3,585 ? 5, meaning no points have been 
> taken
> >> out, and implying no coordinates in coords_border coincides with the
> >> coordinates in coords_polygon. This is just not reasonable.
> >>
> >> Any comments on why I fail and/or how to do it correctly will be 
> helpful.
> >> Thank you in advance!
> >>
> >> ?? YE, Xiang
> >> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
> >> Ph.D. in Spatial Statistics
> >>
> >>
> >>????????? [[alternative HTML version deleted]]
> >>
> >> _______________________________________________
> >> R-sig-Geo mailing list
> >> R-sig-Geo at r-project.org
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
> >>
> >??????? [[alternative HTML version deleted]]
> >
> > _______________________________________________
> > R-sig-Geo mailing list
> > R-sig-Geo at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
	[[alternative HTML version deleted]]


From yex|@ngm@up @end|ng |rom out|ook@com  Fri Aug  8 16:27:38 2025
From: yex|@ngm@up @end|ng |rom out|ook@com (Xiang Ye)
Date: Fri, 8 Aug 2025 14:27:38 +0000
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <CAKtE6yOf8rb--tCNhEW9XQ5KTzNjNWC211w61W1OBGPBLXC_Cg@mail.gmail.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
 <CAL3ufU+niBE0+h+MXn-18aoykvHXyLL0MOZr4816xPRq173XCg@mail.gmail.com>
 <CAKtE6yOf8rb--tCNhEW9XQ5KTzNjNWC211w61W1OBGPBLXC_Cg@mail.gmail.com>
Message-ID: <DM6PR11MB33212533B244FDB5A83C94E1B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>

Dear Zivan,

Thank you for your email. I followed your scripts, only to find it a genius solution.

Actually, only the first sentence is enough:

st_intersection(polygon) |> st_collection_extract('LINESTRING')

And it has brought me the interior boundary already.

However, I do not fully grasp the essence here. I know st_intersection(x, y) is to find the shared part of x and y, but what is st_intersection(x)? Conceptually it is "the shared part of x and x", but technically it brings me more features than x itself (and I feel confused about the output). But obviously you make the most of this feature.

Thank you once again!

Xiang
________________________________
From: R-sig-Geo <r-sig-geo-bounces at r-project.org> on behalf of Zivan Karaman <zivan.karaman at gmail.com>
Sent: Thursday, August 7, 2025 03:07
To: Josiah Parry <josiah.parry at gmail.com>
Cc: r-sig-geo at r-project.org <r-sig-geo at r-project.org>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object

Hi,

I'm not sure I understand what you want to achieve or why, but here's a try:

# Load required libraries
library(sf)
library(spData)

# Options to avoid messages from tigris
polygon <- st_geometry(us_states)

# Extract the shared borders only (where geometries touch more than once)
internal_lines <- st_intersection(polygon) |>
  st_collection_extract("LINESTRING")

# Now remove the external boundary
# Step 1: Union all states into a single polygon (whole USA outline)
national_outline <- st_union(polygon) |> st_boundary()
# Step 2: Remove outer boundary from internal_lines
internal_only <- st_difference(internal_lines, national_outline)

# Plot result
plot(st_geometry(national_outline), col = "blue", lwd = 0.5, main =
"Interior Boundaries Only")
plot(st_geometry(internal_only), col = "red", lwd = 0.5, add = TRUE)

Best,
Zivan


On Wed, Aug 6, 2025 at 8:24?PM Josiah Parry <josiah.parry at gmail.com> wrote:
>
> I'm not sure I fully understand the objective. But this is how I would do it with rsgeo?I'm not sure how to do it with sf
>
> library(sf)
> library(spData)
> library(rsgeo)
>
> union_geoms(as_rsgeo(us_states)) |>
>   expand_geoms() |>
>   .subset2(1) |>
>   head(1) |>
>   cast_geoms("multipoint") |>
>   st_as_sfc() |>
>   plot()
>
>
>
>
> On Wed, Aug 6, 2025 at 10:56?AM Andrea Gilardi - Unimib <andrea.gilardi at unimib.it> wrote:
>>
>> Hi Xiang! I would use the following approach:
>>
>> library(tidyverse)
>> library(sf)
>> library(spData)
>> # You need the development version of sfnetworks:
>> # remotes::install_github("luukvdmeer/sfnetworks")
>> library(sfnetworks) # Exports st_duplicated
>>
>> polygon = st_geometry(us_states)
>> pts_matrix <- st_coordinates(polygon)
>> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
>> st_crs(polygon)) |> st_cast("POINT")
>> pts_dup <- st_duplicated(pts_sfc)
>> pts_interior <- pts_sfc[pts_dup]
>>
>> plot(polygon, reset = FALSE)
>> points(pts_interior, cex = 1, pch = 16, col = 2)
>>
>> You can also check the output here:
>> https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e
>>
>> Hope that's helpful.
>>
>> Andrea
>>
>> On 8/6/2025 7:27 PM, Dexter Locke wrote:
>> > library(tidyverse)
>> > library(sf)
>> > library(spData)
>> >
>> > polygon=st_geometry(us_states)
>> > plot(polygon)
>> >
>> > polygon |> st_as_sf() |> summarise() |> plot()
>> >
>> >
>> > On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com> wrote:
>> >
>> >> Dear community,
>> >>
>> >> I am trapped by a seemingly easy task. I would like to write a short R
>> >> script to retrieve the interior boundary (points) of a polygon sf object,
>> >> like the state boundary of the Contiguous United States, but without the
>> >> outline.
>> >>
>> >> I tried several methods, with none fulfilling my objective. Below is the
>> >> code, with my observations in the comments:
>> >>
>> >> # Objective: Retrieve the internal boundary of a polygon data set
>> >>
>> >> library(tidyverse)
>> >> library(sf)
>> >> library(spData)
>> >>
>> >> polygon=st_geometry(us_states)
>> >> plot(polygon)
>> >>
>> >> # Method 1: Use st_difference()
>> >> st_union(polygon) -> border
>> >> plot(border)
>> >> st_difference(polygon, border) -> interior
>> >> plot(interior) # You can tell that the result is weird.
>> >>
>> >> # Method 2: Retrieve vertices as points, then use st_difference()
>> >> st_cast(polygon, 'POINT') -> points_polygon
>> >> points_polygon # 3585 features
>> >> st_cast(border, 'POINT') -> points_border
>> >> points_border # 1275 features
>> >> st_difference(points_polygon, points_border) -> points_interior # About 2
>> >> minutes to execute
>> >> points_interior # 4.57 million features, about 2 GB. why?
>> >>
>> >> # Methods 3: Use st_disjoint instead of st_difference()
>> >> polygon[border, op=st_disjoint] # Empty set
>> >> points_polygon[border, op=st_disjoint] -> points_interior2
>> >> points_interior2 # 132 features; plot() it and doesn't look right
>> >> points_polygon[points_border, op=st_disjoint] -> points_interior3
>> >> points_interior3 # 3585 features, meaning no points have been taken out
>> >>
>> >> # Methods 4: Retrieve vertices as coordinates, converting them into
>> >> tibbles, then anti-join the border coordinates
>> >> st_coordinates(polygon) %>% as_tibble -> coords_polygon
>> >> coords_polygon# A tibble: 3,585 ? 5
>> >> st_coordinates(border) %>% as_tibble -> coords_border
>> >> coords_border # A tibble: 1,275 ? 5
>> >> anti_join(coords_polygon, coords_border) -> coords_interior
>> >> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
>> >> out, and implying no coordinates in coords_border coincides with the
>> >> coordinates in coords_polygon. This is just not reasonable.
>> >>
>> >> Any comments on why I fail and/or how to do it correctly will be helpful.
>> >> Thank you in advance!
>> >>
>> >> ?? YE, Xiang
>> >> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
>> >> Ph.D. in Spatial Statistics
>> >>
>> >>
>> >>          [[alternative HTML version deleted]]
>> >>
>> >> _______________________________________________
>> >> R-sig-Geo mailing list
>> >> R-sig-Geo at r-project.org
>> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>> >>
>> >       [[alternative HTML version deleted]]
>> >
>> > _______________________________________________
>> > R-sig-Geo mailing list
>> > R-sig-Geo at r-project.org
>> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>>
>> _______________________________________________
>> R-sig-Geo mailing list
>> R-sig-Geo at r-project.org
>> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo

_______________________________________________
R-sig-Geo mailing list
R-sig-Geo at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-sig-geo

	[[alternative HTML version deleted]]


From yex|@ngm@up @end|ng |rom out|ook@com  Fri Aug  8 16:39:29 2025
From: yex|@ngm@up @end|ng |rom out|ook@com (Xiang Ye)
Date: Fri, 8 Aug 2025 14:39:29 +0000
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <4d245064-8b71-44f5-937f-2b54df987beb@unimib.it>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
 <DM6PR11MB3321C2657B36AE91D4DCAF55B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <4d245064-8b71-44f5-937f-2b54df987beb@unimib.it>
Message-ID: <DM6PR11MB332160F25058873EB007B080B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>

Thank you, Andrea!
________________________________
From: Andrea Gilardi - Unimib <andrea.gilardi at unimib.it>
Sent: Friday, August 8, 2025 22:20
To: Xiang Ye <yexiangmaup at outlook.com>
Cc: r-sig-geo at r-project.org <r-sig-geo at r-project.org>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object


Dear Xiang,


thanks for your kind words.


1. The underlying assumption behind st_duplicated is that the polygons used to construct the multipolygon share some vertices in the interior part of the multipolygon. Your explanation and understandings are correct. If you want to check the implementation, see here:  https://github.com/luukvdmeer/sfnetworks/blob/c6eb10a05768f570e94981e826de8ee3f7fb7fce/R/utils.R#L21


2. Yes, you are correct, you can simply use st_cast(..., "POINT"). I'm not sure whether one of the two approaches is much faster than the other, but I guess it doesn't matter here.


Kind regards

Andrea


On 8/8/2025 8:39 AM, Xiang Ye wrote:
Dear Andrea,

Thank you for your detailed response. I followed your instructions carefully, and was able to get the expected results.

St_duplicated() is cool!

I have two following questions.


  1.
Why st_duplicated() works?

My guess is that for a typical (multi)polygon sf object, all vertices on the interior borders will be adopted twice to form polygons. Technically, this makes them appear twice in the geometry column of the data set. Meanwhile, vertices on the exterior borders only appear once. When checked by st_duplicated(), all the second appearance of the interior-border vertices will be marked true, and thus they are extracted.
Is my understanding correct?


  1.
Can we simplify a sentence?

In the script, there is a sentence:
pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs = st_crs(polygon)) |> st_cast("POINT")
Is this sentence equal to the following one?
pts_sfc_2 <- st_cast(polygon, 'point')
I experimented by myself, and find identical(pts_sfc, pts_sfc_2)==FALSE. However, identical(st_duplicated(pts_sfc), st_duplicated(pts_sfc_2))==TRUE.

Again, thank you so much for your awesome solution!

Xiang

________________________________
From: Andrea Gilardi - Unimib <andrea.gilardi at unimib.it><mailto:andrea.gilardi at unimib.it>
Sent: Thursday, August 7, 2025 01:56
To: Xiang Ye <yexiangmaup at outlook.com><mailto:yexiangmaup at outlook.com>
Cc: r-sig-geo at r-project.org<mailto:r-sig-geo at r-project.org> <r-sig-geo at r-project.org><mailto:r-sig-geo at r-project.org>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object

Hi Xiang! I would use the following approach:

library(tidyverse)
library(sf)
library(spData)
# You need the development version of sfnetworks:
# remotes::install_github("luukvdmeer/sfnetworks")
library(sfnetworks) # Exports st_duplicated

polygon = st_geometry(us_states)
pts_matrix <- st_coordinates(polygon)
pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
st_crs(polygon)) |> st_cast("POINT")
pts_dup <- st_duplicated(pts_sfc)
pts_interior <- pts_sfc[pts_dup]

plot(polygon, reset = FALSE)
points(pts_interior, cex = 1, pch = 16, col = 2)

You can also check the output here:
https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e

Hope that's helpful.

Andrea

On 8/6/2025 7:27 PM, Dexter Locke wrote:
> library(tidyverse)
> library(sf)
> library(spData)
>
> polygon=st_geometry(us_states)
> plot(polygon)
>
> polygon |> st_as_sf() |> summarise() |> plot()
>
>
> On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com><mailto:yexiangmaup at outlook.com> wrote:
>
>> Dear community,
>>
>> I am trapped by a seemingly easy task. I would like to write a short R
>> script to retrieve the interior boundary (points) of a polygon sf object,
>> like the state boundary of the Contiguous United States, but without the
>> outline.
>>
>> I tried several methods, with none fulfilling my objective. Below is the
>> code, with my observations in the comments:
>>
>> # Objective: Retrieve the internal boundary of a polygon data set
>>
>> library(tidyverse)
>> library(sf)
>> library(spData)
>>
>> polygon=st_geometry(us_states)
>> plot(polygon)
>>
>> # Method 1: Use st_difference()
>> st_union(polygon) -> border
>> plot(border)
>> st_difference(polygon, border) -> interior
>> plot(interior) # You can tell that the result is weird.
>>
>> # Method 2: Retrieve vertices as points, then use st_difference()
>> st_cast(polygon, 'POINT') -> points_polygon
>> points_polygon # 3585 features
>> st_cast(border, 'POINT') -> points_border
>> points_border # 1275 features
>> st_difference(points_polygon, points_border) -> points_interior # About 2
>> minutes to execute
>> points_interior # 4.57 million features, about 2 GB. why?
>>
>> # Methods 3: Use st_disjoint instead of st_difference()
>> polygon[border, op=st_disjoint] # Empty set
>> points_polygon[border, op=st_disjoint] -> points_interior2
>> points_interior2 # 132 features; plot() it and doesn't look right
>> points_polygon[points_border, op=st_disjoint] -> points_interior3
>> points_interior3 # 3585 features, meaning no points have been taken out
>>
>> # Methods 4: Retrieve vertices as coordinates, converting them into
>> tibbles, then anti-join the border coordinates
>> st_coordinates(polygon) %>% as_tibble -> coords_polygon
>> coords_polygon# A tibble: 3,585 ? 5
>> st_coordinates(border) %>% as_tibble -> coords_border
>> coords_border # A tibble: 1,275 ? 5
>> anti_join(coords_polygon, coords_border) -> coords_interior
>> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
>> out, and implying no coordinates in coords_border coincides with the
>> coordinates in coords_polygon. This is just not reasonable.
>>
>> Any comments on why I fail and/or how to do it correctly will be helpful.
>> Thank you in advance!
>>
>> ?? YE, Xiang
>> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
>> Ph.D. in Spatial Statistics
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> _______________________________________________
>> R-sig-Geo mailing list
>> R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
>> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>>
>        [[alternative HTML version deleted]]
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo

	[[alternative HTML version deleted]]


From z|v@n@k@r@m@n @end|ng |rom gm@||@com  Fri Aug  8 16:42:47 2025
From: z|v@n@k@r@m@n @end|ng |rom gm@||@com (Zivan Karaman)
Date: Fri, 8 Aug 2025 16:42:47 +0200
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <DM6PR11MB33212533B244FDB5A83C94E1B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
 <CAL3ufU+niBE0+h+MXn-18aoykvHXyLL0MOZr4816xPRq173XCg@mail.gmail.com>
 <CAKtE6yOf8rb--tCNhEW9XQ5KTzNjNWC211w61W1OBGPBLXC_Cg@mail.gmail.com>
 <DM6PR11MB33212533B244FDB5A83C94E1B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>
Message-ID: <CAKtE6yP6HXFyepL1kWVQrVL4woqeom42CGFdmetREXSS-7sVxA@mail.gmail.com>

Hi Xiang,
You are absolutely right; the first statement suffices here.
As specified by the 'st_intersection' help:
*When called with missing y, the sfc method for st_intersection returns all
non-empty intersections of the geometries of x; an attribute idx contains a
list-column with the indexes of contributing geometries.*
So, you get all the intersections among the geometries within the sf(s)
object (here, US states), and then you simply extract the lines to obtain
the boundaries.
Best,
Zivan


On Fri, Aug 8, 2025 at 4:27?PM Xiang Ye <yexiangmaup at outlook.com> wrote:

> Dear Zivan,
>
> Thank you for your email. I followed your scripts, only to find it a
> genius solution.
>
> Actually, only the first sentence is enough:
>
> st_intersection(polygon) |> st_collection_extract('LINESTRING')
>
> And it has brought me the interior boundary already.
>
> However, I do not fully grasp the essence here. I know st_intersection(x,
> y) is to find the shared part of x and y, but what is st_intersection(x)?
> Conceptually it is "the shared part of x and x", but technically it brings
> me more features than x itself (and I feel confused about the output). But
> obviously you make the most of this feature.
>
> Thank you once again!
>
> Xiang
> ------------------------------
> *From:* R-sig-Geo <r-sig-geo-bounces at r-project.org> on behalf of Zivan
> Karaman <zivan.karaman at gmail.com>
> *Sent:* Thursday, August 7, 2025 03:07
> *To:* Josiah Parry <josiah.parry at gmail.com>
> *Cc:* r-sig-geo at r-project.org <r-sig-geo at r-project.org>
> *Subject:* Re: [R-sig-Geo] How to retrieve the interior boundary (points)
> of a polygon sf object
>
> Hi,
>
> I'm not sure I understand what you want to achieve or why, but here's a
> try:
>
> # Load required libraries
> library(sf)
> library(spData)
>
> # Options to avoid messages from tigris
> polygon <- st_geometry(us_states)
>
> # Extract the shared borders only (where geometries touch more than once)
> internal_lines <- st_intersection(polygon) |>
>   st_collection_extract("LINESTRING")
>
> # Now remove the external boundary
> # Step 1: Union all states into a single polygon (whole USA outline)
> national_outline <- st_union(polygon) |> st_boundary()
> # Step 2: Remove outer boundary from internal_lines
> internal_only <- st_difference(internal_lines, national_outline)
>
> # Plot result
> plot(st_geometry(national_outline), col = "blue", lwd = 0.5, main =
> "Interior Boundaries Only")
> plot(st_geometry(internal_only), col = "red", lwd = 0.5, add = TRUE)
>
> Best,
> Zivan
>
>
> On Wed, Aug 6, 2025 at 8:24?PM Josiah Parry <josiah.parry at gmail.com>
> wrote:
> >
> > I'm not sure I fully understand the objective. But this is how I would
> do it with rsgeo?I'm not sure how to do it with sf
> >
> > library(sf)
> > library(spData)
> > library(rsgeo)
> >
> > union_geoms(as_rsgeo(us_states)) |>
> >   expand_geoms() |>
> >   .subset2(1) |>
> >   head(1) |>
> >   cast_geoms("multipoint") |>
> >   st_as_sfc() |>
> >   plot()
> >
> >
> >
> >
> > On Wed, Aug 6, 2025 at 10:56?AM Andrea Gilardi - Unimib <
> andrea.gilardi at unimib.it> wrote:
> >>
> >> Hi Xiang! I would use the following approach:
> >>
> >> library(tidyverse)
> >> library(sf)
> >> library(spData)
> >> # You need the development version of sfnetworks:
> >> # remotes::install_github("luukvdmeer/sfnetworks")
> >> library(sfnetworks) # Exports st_duplicated
> >>
> >> polygon = st_geometry(us_states)
> >> pts_matrix <- st_coordinates(polygon)
> >> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
> >> st_crs(polygon)) |> st_cast("POINT")
> >> pts_dup <- st_duplicated(pts_sfc)
> >> pts_interior <- pts_sfc[pts_dup]
> >>
> >> plot(polygon, reset = FALSE)
> >> points(pts_interior, cex = 1, pch = 16, col = 2)
> >>
> >> You can also check the output here:
> >> https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e
> >>
> >> Hope that's helpful.
> >>
> >> Andrea
> >>
> >> On 8/6/2025 7:27 PM, Dexter Locke wrote:
> >> > library(tidyverse)
> >> > library(sf)
> >> > library(spData)
> >> >
> >> > polygon=st_geometry(us_states)
> >> > plot(polygon)
> >> >
> >> > polygon |> st_as_sf() |> summarise() |> plot()
> >> >
> >> >
> >> > On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com>
> wrote:
> >> >
> >> >> Dear community,
> >> >>
> >> >> I am trapped by a seemingly easy task. I would like to write a short
> R
> >> >> script to retrieve the interior boundary (points) of a polygon sf
> object,
> >> >> like the state boundary of the Contiguous United States, but without
> the
> >> >> outline.
> >> >>
> >> >> I tried several methods, with none fulfilling my objective. Below is
> the
> >> >> code, with my observations in the comments:
> >> >>
> >> >> # Objective: Retrieve the internal boundary of a polygon data set
> >> >>
> >> >> library(tidyverse)
> >> >> library(sf)
> >> >> library(spData)
> >> >>
> >> >> polygon=st_geometry(us_states)
> >> >> plot(polygon)
> >> >>
> >> >> # Method 1: Use st_difference()
> >> >> st_union(polygon) -> border
> >> >> plot(border)
> >> >> st_difference(polygon, border) -> interior
> >> >> plot(interior) # You can tell that the result is weird.
> >> >>
> >> >> # Method 2: Retrieve vertices as points, then use st_difference()
> >> >> st_cast(polygon, 'POINT') -> points_polygon
> >> >> points_polygon # 3585 features
> >> >> st_cast(border, 'POINT') -> points_border
> >> >> points_border # 1275 features
> >> >> st_difference(points_polygon, points_border) -> points_interior #
> About 2
> >> >> minutes to execute
> >> >> points_interior # 4.57 million features, about 2 GB. why?
> >> >>
> >> >> # Methods 3: Use st_disjoint instead of st_difference()
> >> >> polygon[border, op=st_disjoint] # Empty set
> >> >> points_polygon[border, op=st_disjoint] -> points_interior2
> >> >> points_interior2 # 132 features; plot() it and doesn't look right
> >> >> points_polygon[points_border, op=st_disjoint] -> points_interior3
> >> >> points_interior3 # 3585 features, meaning no points have been taken
> out
> >> >>
> >> >> # Methods 4: Retrieve vertices as coordinates, converting them into
> >> >> tibbles, then anti-join the border coordinates
> >> >> st_coordinates(polygon) %>% as_tibble -> coords_polygon
> >> >> coords_polygon# A tibble: 3,585 ? 5
> >> >> st_coordinates(border) %>% as_tibble -> coords_border
> >> >> coords_border # A tibble: 1,275 ? 5
> >> >> anti_join(coords_polygon, coords_border) -> coords_interior
> >> >> coords_interior # A tibble: 3,585 ? 5, meaning no points have been
> taken
> >> >> out, and implying no coordinates in coords_border coincides with the
> >> >> coordinates in coords_polygon. This is just not reasonable.
> >> >>
> >> >> Any comments on why I fail and/or how to do it correctly will be
> helpful.
> >> >> Thank you in advance!
> >> >>
> >> >> ?? YE, Xiang
> >> >> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
> >> >> Ph.D. in Spatial Statistics
> >> >>
> >> >>
> >> >>          [[alternative HTML version deleted]]
> >> >>
> >> >> _______________________________________________
> >> >> R-sig-Geo mailing list
> >> >> R-sig-Geo at r-project.org
> >> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
> >> >>
> >> >       [[alternative HTML version deleted]]
> >> >
> >> > _______________________________________________
> >> > R-sig-Geo mailing list
> >> > R-sig-Geo at r-project.org
> >> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
> >>
> >> _______________________________________________
> >> R-sig-Geo mailing list
> >> R-sig-Geo at r-project.org
> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
> >
> > _______________________________________________
> > R-sig-Geo mailing list
> > R-sig-Geo at r-project.org
> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>

	[[alternative HTML version deleted]]


From yex|@ngm@up @end|ng |rom out|ook@com  Fri Aug  8 17:02:54 2025
From: yex|@ngm@up @end|ng |rom out|ook@com (Xiang Ye)
Date: Fri, 8 Aug 2025 15:02:54 +0000
Subject: [R-sig-Geo] How to retrieve the interior boundary (points) of a
 polygon sf object
In-Reply-To: <CAKtE6yP6HXFyepL1kWVQrVL4woqeom42CGFdmetREXSS-7sVxA@mail.gmail.com>
References: <DM6PR11MB3321286B45B320881FB25337B02DA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAA=SVwHtRijb2ZFwAP3XxpASrNethh9z=0MsXxaFZPVHLTd_BQ@mail.gmail.com>
 <4c416e6a-6ea9-4b7b-97c6-907e5a9ddf11@unimib.it>
 <CAL3ufU+niBE0+h+MXn-18aoykvHXyLL0MOZr4816xPRq173XCg@mail.gmail.com>
 <CAKtE6yOf8rb--tCNhEW9XQ5KTzNjNWC211w61W1OBGPBLXC_Cg@mail.gmail.com>
 <DM6PR11MB33212533B244FDB5A83C94E1B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>
 <CAKtE6yP6HXFyepL1kWVQrVL4woqeom42CGFdmetREXSS-7sVxA@mail.gmail.com>
Message-ID: <DM6PR11MB33214D8B1F3615657B785BA2B02FA@DM6PR11MB3321.namprd11.prod.outlook.com>

Thank you Zivan! I guess I will take more time to digest the meaning of st_intersection(x). In particular, it contains points, polygons, multipolygons, and multilinestrings, it is such diverse an output that added complexity.

Xiang
________________________________
From: Zivan Karaman <zivan.karaman at gmail.com>
Sent: Friday, August 8, 2025 22:42
To: Xiang Ye <yexiangmaup at outlook.com>
Cc: r-sig-geo at r-project.org <r-sig-geo at r-project.org>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object

Hi Xiang,
You are absolutely right; the first statement suffices here.
As specified by the 'st_intersection' help:
When called with missing y, the sfc method for st_intersection returns all non-empty intersections of the geometries of x; an attribute idx contains a list-column with the indexes of contributing geometries.
So, you get all the intersections among the geometries within the sf(s) object (here, US states), and then you simply extract the lines to obtain the boundaries.
Best,
Zivan


On Fri, Aug 8, 2025 at 4:27?PM Xiang Ye <yexiangmaup at outlook.com<mailto:yexiangmaup at outlook.com>> wrote:
Dear Zivan,

Thank you for your email. I followed your scripts, only to find it a genius solution.

Actually, only the first sentence is enough:

st_intersection(polygon) |> st_collection_extract('LINESTRING')

And it has brought me the interior boundary already.

However, I do not fully grasp the essence here. I know st_intersection(x, y) is to find the shared part of x and y, but what is st_intersection(x)? Conceptually it is "the shared part of x and x", but technically it brings me more features than x itself (and I feel confused about the output). But obviously you make the most of this feature.

Thank you once again!

Xiang
________________________________
From: R-sig-Geo <r-sig-geo-bounces at r-project.org<mailto:r-sig-geo-bounces at r-project.org>> on behalf of Zivan Karaman <zivan.karaman at gmail.com<mailto:zivan.karaman at gmail.com>>
Sent: Thursday, August 7, 2025 03:07
To: Josiah Parry <josiah.parry at gmail.com<mailto:josiah.parry at gmail.com>>
Cc: r-sig-geo at r-project.org<mailto:r-sig-geo at r-project.org> <r-sig-geo at r-project.org<mailto:r-sig-geo at r-project.org>>
Subject: Re: [R-sig-Geo] How to retrieve the interior boundary (points) of a polygon sf object

Hi,

I'm not sure I understand what you want to achieve or why, but here's a try:

# Load required libraries
library(sf)
library(spData)

# Options to avoid messages from tigris
polygon <- st_geometry(us_states)

# Extract the shared borders only (where geometries touch more than once)
internal_lines <- st_intersection(polygon) |>
  st_collection_extract("LINESTRING")

# Now remove the external boundary
# Step 1: Union all states into a single polygon (whole USA outline)
national_outline <- st_union(polygon) |> st_boundary()
# Step 2: Remove outer boundary from internal_lines
internal_only <- st_difference(internal_lines, national_outline)

# Plot result
plot(st_geometry(national_outline), col = "blue", lwd = 0.5, main =
"Interior Boundaries Only")
plot(st_geometry(internal_only), col = "red", lwd = 0.5, add = TRUE)

Best,
Zivan


On Wed, Aug 6, 2025 at 8:24?PM Josiah Parry <josiah.parry at gmail.com<mailto:josiah.parry at gmail.com>> wrote:
>
> I'm not sure I fully understand the objective. But this is how I would do it with rsgeo?I'm not sure how to do it with sf
>
> library(sf)
> library(spData)
> library(rsgeo)
>
> union_geoms(as_rsgeo(us_states)) |>
>   expand_geoms() |>
>   .subset2(1) |>
>   head(1) |>
>   cast_geoms("multipoint") |>
>   st_as_sfc() |>
>   plot()
>
>
>
>
> On Wed, Aug 6, 2025 at 10:56?AM Andrea Gilardi - Unimib <andrea.gilardi at unimib.it<mailto:andrea.gilardi at unimib.it>> wrote:
>>
>> Hi Xiang! I would use the following approach:
>>
>> library(tidyverse)
>> library(sf)
>> library(spData)
>> # You need the development version of sfnetworks:
>> # remotes::install_github("luukvdmeer/sfnetworks")
>> library(sfnetworks) # Exports st_duplicated
>>
>> polygon = st_geometry(us_states)
>> pts_matrix <- st_coordinates(polygon)
>> pts_sfc <- st_multipoint(pts_matrix[, c(1, 2)]) |> st_sfc(crs =
>> st_crs(polygon)) |> st_cast("POINT")
>> pts_dup <- st_duplicated(pts_sfc)
>> pts_interior <- pts_sfc[pts_dup]
>>
>> plot(polygon, reset = FALSE)
>> points(pts_interior, cex = 1, pch = 16, col = 2)
>>
>> You can also check the output here:
>> https://gist.github.com/agila5/2b5d9b7e1453c4d3f292e7aae5fdb79e
>>
>> Hope that's helpful.
>>
>> Andrea
>>
>> On 8/6/2025 7:27 PM, Dexter Locke wrote:
>> > library(tidyverse)
>> > library(sf)
>> > library(spData)
>> >
>> > polygon=st_geometry(us_states)
>> > plot(polygon)
>> >
>> > polygon |> st_as_sf() |> summarise() |> plot()
>> >
>> >
>> > On Wed, Aug 6, 2025 at 1:25?PM Xiang Ye <yexiangmaup at outlook.com<mailto:yexiangmaup at outlook.com>> wrote:
>> >
>> >> Dear community,
>> >>
>> >> I am trapped by a seemingly easy task. I would like to write a short R
>> >> script to retrieve the interior boundary (points) of a polygon sf object,
>> >> like the state boundary of the Contiguous United States, but without the
>> >> outline.
>> >>
>> >> I tried several methods, with none fulfilling my objective. Below is the
>> >> code, with my observations in the comments:
>> >>
>> >> # Objective: Retrieve the internal boundary of a polygon data set
>> >>
>> >> library(tidyverse)
>> >> library(sf)
>> >> library(spData)
>> >>
>> >> polygon=st_geometry(us_states)
>> >> plot(polygon)
>> >>
>> >> # Method 1: Use st_difference()
>> >> st_union(polygon) -> border
>> >> plot(border)
>> >> st_difference(polygon, border) -> interior
>> >> plot(interior) # You can tell that the result is weird.
>> >>
>> >> # Method 2: Retrieve vertices as points, then use st_difference()
>> >> st_cast(polygon, 'POINT') -> points_polygon
>> >> points_polygon # 3585 features
>> >> st_cast(border, 'POINT') -> points_border
>> >> points_border # 1275 features
>> >> st_difference(points_polygon, points_border) -> points_interior # About 2
>> >> minutes to execute
>> >> points_interior # 4.57 million features, about 2 GB. why?
>> >>
>> >> # Methods 3: Use st_disjoint instead of st_difference()
>> >> polygon[border, op=st_disjoint] # Empty set
>> >> points_polygon[border, op=st_disjoint] -> points_interior2
>> >> points_interior2 # 132 features; plot() it and doesn't look right
>> >> points_polygon[points_border, op=st_disjoint] -> points_interior3
>> >> points_interior3 # 3585 features, meaning no points have been taken out
>> >>
>> >> # Methods 4: Retrieve vertices as coordinates, converting them into
>> >> tibbles, then anti-join the border coordinates
>> >> st_coordinates(polygon) %>% as_tibble -> coords_polygon
>> >> coords_polygon# A tibble: 3,585 ? 5
>> >> st_coordinates(border) %>% as_tibble -> coords_border
>> >> coords_border # A tibble: 1,275 ? 5
>> >> anti_join(coords_polygon, coords_border) -> coords_interior
>> >> coords_interior # A tibble: 3,585 ? 5, meaning no points have been taken
>> >> out, and implying no coordinates in coords_border coincides with the
>> >> coordinates in coords_polygon. This is just not reasonable.
>> >>
>> >> Any comments on why I fail and/or how to do it correctly will be helpful.
>> >> Thank you in advance!
>> >>
>> >> ?? YE, Xiang
>> >> THINKING SPATIALLY<http://www.linkedin.com/in/spatialyexiang>.
>> >> Ph.D. in Spatial Statistics
>> >>
>> >>
>> >>          [[alternative HTML version deleted]]
>> >>
>> >> _______________________________________________
>> >> R-sig-Geo mailing list
>> >> R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
>> >> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>> >>
>> >       [[alternative HTML version deleted]]
>> >
>> > _______________________________________________
>> > R-sig-Geo mailing list
>> > R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
>> > https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>>
>> _______________________________________________
>> R-sig-Geo mailing list
>> R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
>> https://stat.ethz.ch/mailman/listinfo/r-sig-geo
>
> _______________________________________________
> R-sig-Geo mailing list
> R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
> https://stat.ethz.ch/mailman/listinfo/r-sig-geo

_______________________________________________
R-sig-Geo mailing list
R-sig-Geo at r-project.org<mailto:R-sig-Geo at r-project.org>
https://stat.ethz.ch/mailman/listinfo/r-sig-geo

	[[alternative HTML version deleted]]


From mzyphur @end|ng |rom |n@t@t@@org  Tue Aug 12 11:20:00 2025
From: mzyphur @end|ng |rom |n@t@t@@org (Michael Zyphur)
Date: Tue, 12 Aug 2025 09:20:00 +0000 (UTC)
Subject: [R-sig-Geo] What is GIS? - free seminar
Message-ID: <UOCkvJ4tTySvzRLrwtTKnQ@geopod-ismtpd-10>

Hi everyone

Instats is excited to offer a free seminar What is GIS? <https://instats.org/seminar/what-is-gis-free-seminar>, livestreaming on October 7 and led by Dr Nick Bearman from University College London and Geospatial Training Solutions. Mastering geospatial information systems has become essential for today?s scholars: GIS enables researchers to visualise, analyse, and understand spatial data?whether mapping species distributions, investigating urban growth, or uncovering geographic patterns in social science. In this focused workshop, Dr Bearman translates core GIS concepts into practical skills, guiding participants through sourcing and managing spatial data, navigating popular GIS software, creating compelling visualisations, and applying spatial analysis techniques across diverse research domains. Attendees will leave with the confidence to integrate GIS into their projects, enhancing both analytical depth and methodological rigour.

This free seminar is an introductory event providing a strong foundation for participants who are interested in advancing their GIS skills further. Dr Bearman is also offering two additional multi-part courses, each available with an automatic 10% discount. These advanced offerings include: (1) QGIS: A Full Course <https://instats.org/course/qgis-a-full-course2>, which is a meticulously structured sequence designed to equip researchers with essential skills for managing, analyzing, and visualizing spatial data using the powerful QGIS software; and (2) GIS in R: A Full Course <https://instats.org/course/gis-in-r-a-full-course2>, which comprises three thoughtfully curated seminars, each covering core aspects of GIS in R, from basic data handling to advanced spatial analyses and the application of spatial statistics.

Sign up today <https://instats.org/seminar/what-is-gis-free-seminar> and share this opportunity with colleagues and students who could benefit!


Best wishes

Michael Zyphur
Professor and Director
Institute for Statistical and Data Science
https://instats.org
	[[alternative HTML version deleted]]


